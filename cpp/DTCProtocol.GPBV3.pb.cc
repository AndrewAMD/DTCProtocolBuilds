// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DTCProtocol.GPBV3.proto

#include "DTCProtocol.GPBV3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_DTCProtocol_2eGPBV3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DTCProtocol_2eGPBV3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DepthEntry;
}  // namespace protobuf_DTCProtocol_2eGPBV3_2eproto
namespace DTC_PB {
class EncodingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncodingRequest>
      _instance;
} _EncodingRequest_default_instance_;
class EncodingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncodingResponse>
      _instance;
} _EncodingResponse_default_instance_;
class LogonRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogonRequest>
      _instance;
} _LogonRequest_default_instance_;
class LogonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogonResponse>
      _instance;
} _LogonResponse_default_instance_;
class LogoffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Logoff>
      _instance;
} _Logoff_default_instance_;
class HeartbeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat>
      _instance;
} _Heartbeat_default_instance_;
class MarketDataFeedStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataFeedStatus>
      _instance;
} _MarketDataFeedStatus_default_instance_;
class MarketDataFeedSymbolStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataFeedSymbolStatus>
      _instance;
} _MarketDataFeedSymbolStatus_default_instance_;
class MarketDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataRequest>
      _instance;
} _MarketDataRequest_default_instance_;
class MarketDepthRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthRequest>
      _instance;
} _MarketDepthRequest_default_instance_;
class MarketDataRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataReject>
      _instance;
} _MarketDataReject_default_instance_;
class MarketDataSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataSnapshot>
      _instance;
} _MarketDataSnapshot_default_instance_;
class MarketDataSnapshot_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataSnapshot_Int>
      _instance;
} _MarketDataSnapshot_Int_default_instance_;
class DepthEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepthEntry>
      _instance;
} _DepthEntry_default_instance_;
class MarketDepthFullUpdate20DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthFullUpdate20>
      _instance;
} _MarketDepthFullUpdate20_default_instance_;
class MarketDepthFullUpdate10DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthFullUpdate10>
      _instance;
} _MarketDepthFullUpdate10_default_instance_;
class MarketDepthSnapshotLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthSnapshotLevel>
      _instance;
} _MarketDepthSnapshotLevel_default_instance_;
class MarketDepthSnapshotLevel_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthSnapshotLevel_Int>
      _instance;
} _MarketDepthSnapshotLevel_Int_default_instance_;
class MarketDepthUpdateLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdateLevel>
      _instance;
} _MarketDepthUpdateLevel_default_instance_;
class MarketDepthUpdateLevel_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdateLevel_Int>
      _instance;
} _MarketDepthUpdateLevel_Int_default_instance_;
class MarketDepthUpdateLevelCompactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdateLevelCompact>
      _instance;
} _MarketDepthUpdateLevelCompact_default_instance_;
class MarketDataUpdateSessionSettlementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionSettlement>
      _instance;
} _MarketDataUpdateSessionSettlement_default_instance_;
class MarketDataUpdateSessionSettlement_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionSettlement_Int>
      _instance;
} _MarketDataUpdateSessionSettlement_Int_default_instance_;
class MarketDataUpdateSessionOpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionOpen>
      _instance;
} _MarketDataUpdateSessionOpen_default_instance_;
class MarketDataUpdateSessionOpen_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionOpen_Int>
      _instance;
} _MarketDataUpdateSessionOpen_Int_default_instance_;
class MarketDataUpdateSessionNumTradesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionNumTrades>
      _instance;
} _MarketDataUpdateSessionNumTrades_default_instance_;
class MarketDataUpdateTradingSessionDateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTradingSessionDate>
      _instance;
} _MarketDataUpdateTradingSessionDate_default_instance_;
class MarketDepthRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthReject>
      _instance;
} _MarketDepthReject_default_instance_;
class MarketDataUpdateTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTrade>
      _instance;
} _MarketDataUpdateTrade_default_instance_;
class MarketDataUpdateTrade_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTrade_Int>
      _instance;
} _MarketDataUpdateTrade_Int_default_instance_;
class MarketDataUpdateTradeWithUnbundledIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTradeWithUnbundledIndicator>
      _instance;
} _MarketDataUpdateTradeWithUnbundledIndicator_default_instance_;
class MarketDataUpdateBidAskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateBidAsk>
      _instance;
} _MarketDataUpdateBidAsk_default_instance_;
class MarketDataUpdateBidAsk_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateBidAsk_Int>
      _instance;
} _MarketDataUpdateBidAsk_Int_default_instance_;
class MarketDataUpdateBidAskCompactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateBidAskCompact>
      _instance;
} _MarketDataUpdateBidAskCompact_default_instance_;
class MarketDataUpdateTradeCompactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTradeCompact>
      _instance;
} _MarketDataUpdateTradeCompact_default_instance_;
class MarketDataUpdateSessionVolumeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionVolume>
      _instance;
} _MarketDataUpdateSessionVolume_default_instance_;
class MarketDataUpdateOpenInterestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateOpenInterest>
      _instance;
} _MarketDataUpdateOpenInterest_default_instance_;
class MarketDataUpdateSessionHighDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionHigh>
      _instance;
} _MarketDataUpdateSessionHigh_default_instance_;
class MarketDataUpdateSessionHigh_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionHigh_Int>
      _instance;
} _MarketDataUpdateSessionHigh_Int_default_instance_;
class MarketDataUpdateSessionLowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionLow>
      _instance;
} _MarketDataUpdateSessionLow_default_instance_;
class MarketDataUpdateSessionLow_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionLow_Int>
      _instance;
} _MarketDataUpdateSessionLow_Int_default_instance_;
class MarketDataUpdateLastTradeSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateLastTradeSnapshot>
      _instance;
} _MarketDataUpdateLastTradeSnapshot_default_instance_;
class SubmitNewSingleOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewSingleOrder>
      _instance;
} _SubmitNewSingleOrder_default_instance_;
class SubmitNewSingleOrderIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewSingleOrderInt>
      _instance;
} _SubmitNewSingleOrderInt_default_instance_;
class CancelReplaceOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelReplaceOrder>
      _instance;
} _CancelReplaceOrder_default_instance_;
class CancelReplaceOrderIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelReplaceOrderInt>
      _instance;
} _CancelReplaceOrderInt_default_instance_;
class CancelOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelOrder>
      _instance;
} _CancelOrder_default_instance_;
class SubmitNewOCOOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewOCOOrder>
      _instance;
} _SubmitNewOCOOrder_default_instance_;
class SubmitNewOCOOrderIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewOCOOrderInt>
      _instance;
} _SubmitNewOCOOrderInt_default_instance_;
class OpenOrdersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenOrdersRequest>
      _instance;
} _OpenOrdersRequest_default_instance_;
class HistoricalOrderFillsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalOrderFillsRequest>
      _instance;
} _HistoricalOrderFillsRequest_default_instance_;
class HistoricalOrderFillsRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalOrderFillsReject>
      _instance;
} _HistoricalOrderFillsReject_default_instance_;
class CurrentPositionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentPositionsRequest>
      _instance;
} _CurrentPositionsRequest_default_instance_;
class CurrentPositionsRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentPositionsReject>
      _instance;
} _CurrentPositionsReject_default_instance_;
class OrderUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderUpdate>
      _instance;
} _OrderUpdate_default_instance_;
class OpenOrdersRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenOrdersReject>
      _instance;
} _OpenOrdersReject_default_instance_;
class HistoricalOrderFillResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalOrderFillResponse>
      _instance;
} _HistoricalOrderFillResponse_default_instance_;
class PositionUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionUpdate>
      _instance;
} _PositionUpdate_default_instance_;
class TradeAccountsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeAccountsRequest>
      _instance;
} _TradeAccountsRequest_default_instance_;
class TradeAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeAccountResponse>
      _instance;
} _TradeAccountResponse_default_instance_;
class ExchangeListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeListRequest>
      _instance;
} _ExchangeListRequest_default_instance_;
class ExchangeListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeListResponse>
      _instance;
} _ExchangeListResponse_default_instance_;
class SymbolsForExchangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolsForExchangeRequest>
      _instance;
} _SymbolsForExchangeRequest_default_instance_;
class UnderlyingSymbolsForExchangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnderlyingSymbolsForExchangeRequest>
      _instance;
} _UnderlyingSymbolsForExchangeRequest_default_instance_;
class SymbolsForUnderlyingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolsForUnderlyingRequest>
      _instance;
} _SymbolsForUnderlyingRequest_default_instance_;
class SymbolSearchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolSearchRequest>
      _instance;
} _SymbolSearchRequest_default_instance_;
class SecurityDefinitionForSymbolRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityDefinitionForSymbolRequest>
      _instance;
} _SecurityDefinitionForSymbolRequest_default_instance_;
class SecurityDefinitionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityDefinitionResponse>
      _instance;
} _SecurityDefinitionResponse_default_instance_;
class SecurityDefinitionRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityDefinitionReject>
      _instance;
} _SecurityDefinitionReject_default_instance_;
class AccountBalanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountBalanceRequest>
      _instance;
} _AccountBalanceRequest_default_instance_;
class AccountBalanceRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountBalanceReject>
      _instance;
} _AccountBalanceReject_default_instance_;
class AccountBalanceUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountBalanceUpdate>
      _instance;
} _AccountBalanceUpdate_default_instance_;
class UserMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserMessage>
      _instance;
} _UserMessage_default_instance_;
class GeneralLogMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeneralLogMessage>
      _instance;
} _GeneralLogMessage_default_instance_;
class HistoricalPriceDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataRequest>
      _instance;
} _HistoricalPriceDataRequest_default_instance_;
class HistoricalPriceDataResponseHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataResponseHeader>
      _instance;
} _HistoricalPriceDataResponseHeader_default_instance_;
class HistoricalPriceDataRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataReject>
      _instance;
} _HistoricalPriceDataReject_default_instance_;
class HistoricalPriceDataRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataRecordResponse>
      _instance;
} _HistoricalPriceDataRecordResponse_default_instance_;
class HistoricalPriceDataTickRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataTickRecordResponse>
      _instance;
} _HistoricalPriceDataTickRecordResponse_default_instance_;
class HistoricalPriceDataRecordResponse_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataRecordResponse_Int>
      _instance;
} _HistoricalPriceDataRecordResponse_Int_default_instance_;
class HistoricalPriceDataTickRecordResponse_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataTickRecordResponse_Int>
      _instance;
} _HistoricalPriceDataTickRecordResponse_Int_default_instance_;
class HistoricalPriceDataResponseTrailerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataResponseTrailer>
      _instance;
} _HistoricalPriceDataResponseTrailer_default_instance_;
}  // namespace DTC_PB
namespace protobuf_DTCProtocol_2eGPBV3_2eproto {
static void InitDefaultsEncodingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_EncodingRequest_default_instance_;
    new (ptr) ::DTC_PB::EncodingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::EncodingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncodingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncodingRequest}, {}};

static void InitDefaultsEncodingResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_EncodingResponse_default_instance_;
    new (ptr) ::DTC_PB::EncodingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::EncodingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncodingResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncodingResponse}, {}};

static void InitDefaultsLogonRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_LogonRequest_default_instance_;
    new (ptr) ::DTC_PB::LogonRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::LogonRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogonRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogonRequest}, {}};

static void InitDefaultsLogonResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_LogonResponse_default_instance_;
    new (ptr) ::DTC_PB::LogonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::LogonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogonResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogonResponse}, {}};

static void InitDefaultsLogoff() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_Logoff_default_instance_;
    new (ptr) ::DTC_PB::Logoff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::Logoff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Logoff =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogoff}, {}};

static void InitDefaultsHeartbeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_Heartbeat_default_instance_;
    new (ptr) ::DTC_PB::Heartbeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::Heartbeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Heartbeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartbeat}, {}};

static void InitDefaultsMarketDataFeedStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataFeedStatus_default_instance_;
    new (ptr) ::DTC_PB::MarketDataFeedStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataFeedStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataFeedStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataFeedStatus}, {}};

static void InitDefaultsMarketDataFeedSymbolStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataFeedSymbolStatus_default_instance_;
    new (ptr) ::DTC_PB::MarketDataFeedSymbolStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataFeedSymbolStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataFeedSymbolStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataFeedSymbolStatus}, {}};

static void InitDefaultsMarketDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataRequest_default_instance_;
    new (ptr) ::DTC_PB::MarketDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataRequest}, {}};

static void InitDefaultsMarketDepthRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthRequest_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthRequest}, {}};

static void InitDefaultsMarketDataReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataReject_default_instance_;
    new (ptr) ::DTC_PB::MarketDataReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataReject}, {}};

static void InitDefaultsMarketDataSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataSnapshot_default_instance_;
    new (ptr) ::DTC_PB::MarketDataSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataSnapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataSnapshot}, {}};

static void InitDefaultsMarketDataSnapshot_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataSnapshot_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataSnapshot_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataSnapshot_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataSnapshot_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataSnapshot_Int}, {}};

static void InitDefaultsDepthEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_DepthEntry_default_instance_;
    new (ptr) ::DTC_PB::DepthEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::DepthEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DepthEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDepthEntry}, {}};

static void InitDefaultsMarketDepthFullUpdate20() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthFullUpdate20_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthFullUpdate20();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthFullUpdate20::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketDepthFullUpdate20 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketDepthFullUpdate20}, {
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_DepthEntry.base,}};

static void InitDefaultsMarketDepthFullUpdate10() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthFullUpdate10_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthFullUpdate10();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthFullUpdate10::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketDepthFullUpdate10 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketDepthFullUpdate10}, {
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_DepthEntry.base,}};

static void InitDefaultsMarketDepthSnapshotLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthSnapshotLevel_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthSnapshotLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthSnapshotLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthSnapshotLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthSnapshotLevel}, {}};

static void InitDefaultsMarketDepthSnapshotLevel_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthSnapshotLevel_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthSnapshotLevel_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthSnapshotLevel_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthSnapshotLevel_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthSnapshotLevel_Int}, {}};

static void InitDefaultsMarketDepthUpdateLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthUpdateLevel_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthUpdateLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthUpdateLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthUpdateLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthUpdateLevel}, {}};

static void InitDefaultsMarketDepthUpdateLevel_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthUpdateLevel_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthUpdateLevel_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthUpdateLevel_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthUpdateLevel_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthUpdateLevel_Int}, {}};

static void InitDefaultsMarketDepthUpdateLevelCompact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthUpdateLevelCompact_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthUpdateLevelCompact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthUpdateLevelCompact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthUpdateLevelCompact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthUpdateLevelCompact}, {}};

static void InitDefaultsMarketDataUpdateSessionSettlement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionSettlement_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionSettlement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionSettlement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionSettlement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionSettlement}, {}};

static void InitDefaultsMarketDataUpdateSessionSettlement_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionSettlement_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionSettlement_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionSettlement_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionSettlement_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionSettlement_Int}, {}};

static void InitDefaultsMarketDataUpdateSessionOpen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionOpen_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionOpen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionOpen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionOpen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionOpen}, {}};

static void InitDefaultsMarketDataUpdateSessionOpen_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionOpen_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionOpen_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionOpen_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionOpen_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionOpen_Int}, {}};

static void InitDefaultsMarketDataUpdateSessionNumTrades() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionNumTrades_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionNumTrades();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionNumTrades::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionNumTrades =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionNumTrades}, {}};

static void InitDefaultsMarketDataUpdateTradingSessionDate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTradingSessionDate_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTradingSessionDate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTradingSessionDate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTradingSessionDate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTradingSessionDate}, {}};

static void InitDefaultsMarketDepthReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthReject_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthReject}, {}};

static void InitDefaultsMarketDataUpdateTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTrade_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTrade}, {}};

static void InitDefaultsMarketDataUpdateTrade_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTrade_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTrade_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTrade_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTrade_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTrade_Int}, {}};

static void InitDefaultsMarketDataUpdateTradeWithUnbundledIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTradeWithUnbundledIndicator_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTradeWithUnbundledIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTradeWithUnbundledIndicator}, {}};

static void InitDefaultsMarketDataUpdateBidAsk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateBidAsk_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateBidAsk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateBidAsk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateBidAsk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateBidAsk}, {}};

static void InitDefaultsMarketDataUpdateBidAsk_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateBidAsk_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateBidAsk_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateBidAsk_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateBidAsk_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateBidAsk_Int}, {}};

static void InitDefaultsMarketDataUpdateBidAskCompact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateBidAskCompact_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateBidAskCompact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateBidAskCompact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateBidAskCompact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateBidAskCompact}, {}};

static void InitDefaultsMarketDataUpdateTradeCompact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTradeCompact_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTradeCompact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTradeCompact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTradeCompact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTradeCompact}, {}};

static void InitDefaultsMarketDataUpdateSessionVolume() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionVolume_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionVolume();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionVolume::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionVolume =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionVolume}, {}};

static void InitDefaultsMarketDataUpdateOpenInterest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateOpenInterest_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateOpenInterest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateOpenInterest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateOpenInterest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateOpenInterest}, {}};

static void InitDefaultsMarketDataUpdateSessionHigh() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionHigh_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionHigh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionHigh::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionHigh =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionHigh}, {}};

static void InitDefaultsMarketDataUpdateSessionHigh_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionHigh_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionHigh_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionHigh_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionHigh_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionHigh_Int}, {}};

static void InitDefaultsMarketDataUpdateSessionLow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionLow_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionLow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionLow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionLow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionLow}, {}};

static void InitDefaultsMarketDataUpdateSessionLow_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionLow_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionLow_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionLow_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionLow_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionLow_Int}, {}};

static void InitDefaultsMarketDataUpdateLastTradeSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateLastTradeSnapshot_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateLastTradeSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateLastTradeSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateLastTradeSnapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateLastTradeSnapshot}, {}};

static void InitDefaultsSubmitNewSingleOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewSingleOrder_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewSingleOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewSingleOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewSingleOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewSingleOrder}, {}};

static void InitDefaultsSubmitNewSingleOrderInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewSingleOrderInt_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewSingleOrderInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewSingleOrderInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewSingleOrderInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewSingleOrderInt}, {}};

static void InitDefaultsCancelReplaceOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CancelReplaceOrder_default_instance_;
    new (ptr) ::DTC_PB::CancelReplaceOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CancelReplaceOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelReplaceOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelReplaceOrder}, {}};

static void InitDefaultsCancelReplaceOrderInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CancelReplaceOrderInt_default_instance_;
    new (ptr) ::DTC_PB::CancelReplaceOrderInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CancelReplaceOrderInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelReplaceOrderInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelReplaceOrderInt}, {}};

static void InitDefaultsCancelOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CancelOrder_default_instance_;
    new (ptr) ::DTC_PB::CancelOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CancelOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelOrder}, {}};

static void InitDefaultsSubmitNewOCOOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewOCOOrder_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewOCOOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewOCOOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewOCOOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewOCOOrder}, {}};

static void InitDefaultsSubmitNewOCOOrderInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewOCOOrderInt_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewOCOOrderInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewOCOOrderInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewOCOOrderInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewOCOOrderInt}, {}};

static void InitDefaultsOpenOrdersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_OpenOrdersRequest_default_instance_;
    new (ptr) ::DTC_PB::OpenOrdersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::OpenOrdersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenOrdersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenOrdersRequest}, {}};

static void InitDefaultsHistoricalOrderFillsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalOrderFillsRequest_default_instance_;
    new (ptr) ::DTC_PB::HistoricalOrderFillsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalOrderFillsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalOrderFillsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalOrderFillsRequest}, {}};

static void InitDefaultsHistoricalOrderFillsReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalOrderFillsReject_default_instance_;
    new (ptr) ::DTC_PB::HistoricalOrderFillsReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalOrderFillsReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalOrderFillsReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalOrderFillsReject}, {}};

static void InitDefaultsCurrentPositionsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CurrentPositionsRequest_default_instance_;
    new (ptr) ::DTC_PB::CurrentPositionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CurrentPositionsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurrentPositionsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrentPositionsRequest}, {}};

static void InitDefaultsCurrentPositionsReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CurrentPositionsReject_default_instance_;
    new (ptr) ::DTC_PB::CurrentPositionsReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CurrentPositionsReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurrentPositionsReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrentPositionsReject}, {}};

static void InitDefaultsOrderUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_OrderUpdate_default_instance_;
    new (ptr) ::DTC_PB::OrderUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::OrderUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderUpdate}, {}};

static void InitDefaultsOpenOrdersReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_OpenOrdersReject_default_instance_;
    new (ptr) ::DTC_PB::OpenOrdersReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::OpenOrdersReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenOrdersReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenOrdersReject}, {}};

static void InitDefaultsHistoricalOrderFillResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalOrderFillResponse_default_instance_;
    new (ptr) ::DTC_PB::HistoricalOrderFillResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalOrderFillResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalOrderFillResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalOrderFillResponse}, {}};

static void InitDefaultsPositionUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_PositionUpdate_default_instance_;
    new (ptr) ::DTC_PB::PositionUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::PositionUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionUpdate}, {}};

static void InitDefaultsTradeAccountsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_TradeAccountsRequest_default_instance_;
    new (ptr) ::DTC_PB::TradeAccountsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::TradeAccountsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeAccountsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeAccountsRequest}, {}};

static void InitDefaultsTradeAccountResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_TradeAccountResponse_default_instance_;
    new (ptr) ::DTC_PB::TradeAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::TradeAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeAccountResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeAccountResponse}, {}};

static void InitDefaultsExchangeListRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_ExchangeListRequest_default_instance_;
    new (ptr) ::DTC_PB::ExchangeListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::ExchangeListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeListRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExchangeListRequest}, {}};

static void InitDefaultsExchangeListResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_ExchangeListResponse_default_instance_;
    new (ptr) ::DTC_PB::ExchangeListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::ExchangeListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeListResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExchangeListResponse}, {}};

static void InitDefaultsSymbolsForExchangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SymbolsForExchangeRequest_default_instance_;
    new (ptr) ::DTC_PB::SymbolsForExchangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SymbolsForExchangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SymbolsForExchangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSymbolsForExchangeRequest}, {}};

static void InitDefaultsUnderlyingSymbolsForExchangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_UnderlyingSymbolsForExchangeRequest_default_instance_;
    new (ptr) ::DTC_PB::UnderlyingSymbolsForExchangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::UnderlyingSymbolsForExchangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingSymbolsForExchangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnderlyingSymbolsForExchangeRequest}, {}};

static void InitDefaultsSymbolsForUnderlyingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SymbolsForUnderlyingRequest_default_instance_;
    new (ptr) ::DTC_PB::SymbolsForUnderlyingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SymbolsForUnderlyingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SymbolsForUnderlyingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSymbolsForUnderlyingRequest}, {}};

static void InitDefaultsSymbolSearchRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SymbolSearchRequest_default_instance_;
    new (ptr) ::DTC_PB::SymbolSearchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SymbolSearchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SymbolSearchRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSymbolSearchRequest}, {}};

static void InitDefaultsSecurityDefinitionForSymbolRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SecurityDefinitionForSymbolRequest_default_instance_;
    new (ptr) ::DTC_PB::SecurityDefinitionForSymbolRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SecurityDefinitionForSymbolRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityDefinitionForSymbolRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityDefinitionForSymbolRequest}, {}};

static void InitDefaultsSecurityDefinitionResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SecurityDefinitionResponse_default_instance_;
    new (ptr) ::DTC_PB::SecurityDefinitionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SecurityDefinitionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityDefinitionResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityDefinitionResponse}, {}};

static void InitDefaultsSecurityDefinitionReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SecurityDefinitionReject_default_instance_;
    new (ptr) ::DTC_PB::SecurityDefinitionReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SecurityDefinitionReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityDefinitionReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityDefinitionReject}, {}};

static void InitDefaultsAccountBalanceRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_AccountBalanceRequest_default_instance_;
    new (ptr) ::DTC_PB::AccountBalanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::AccountBalanceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountBalanceRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountBalanceRequest}, {}};

static void InitDefaultsAccountBalanceReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_AccountBalanceReject_default_instance_;
    new (ptr) ::DTC_PB::AccountBalanceReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::AccountBalanceReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountBalanceReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountBalanceReject}, {}};

static void InitDefaultsAccountBalanceUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_AccountBalanceUpdate_default_instance_;
    new (ptr) ::DTC_PB::AccountBalanceUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::AccountBalanceUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountBalanceUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountBalanceUpdate}, {}};

static void InitDefaultsUserMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_UserMessage_default_instance_;
    new (ptr) ::DTC_PB::UserMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::UserMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserMessage}, {}};

static void InitDefaultsGeneralLogMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_GeneralLogMessage_default_instance_;
    new (ptr) ::DTC_PB::GeneralLogMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::GeneralLogMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeneralLogMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeneralLogMessage}, {}};

static void InitDefaultsHistoricalPriceDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataRequest_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataRequest}, {}};

static void InitDefaultsHistoricalPriceDataResponseHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataResponseHeader_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataResponseHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataResponseHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataResponseHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataResponseHeader}, {}};

static void InitDefaultsHistoricalPriceDataReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataReject_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataReject}, {}};

static void InitDefaultsHistoricalPriceDataRecordResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataRecordResponse_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataRecordResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataRecordResponse}, {}};

static void InitDefaultsHistoricalPriceDataTickRecordResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataTickRecordResponse_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataTickRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataTickRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataTickRecordResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataTickRecordResponse}, {}};

static void InitDefaultsHistoricalPriceDataRecordResponse_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataRecordResponse_Int_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataRecordResponse_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataRecordResponse_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataRecordResponse_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataRecordResponse_Int}, {}};

static void InitDefaultsHistoricalPriceDataTickRecordResponse_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataTickRecordResponse_Int_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataTickRecordResponse_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataTickRecordResponse_Int}, {}};

static void InitDefaultsHistoricalPriceDataResponseTrailer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataResponseTrailer_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataResponseTrailer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataResponseTrailer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataResponseTrailer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataResponseTrailer}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EncodingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncodingResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogonRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogonResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Logoff.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Heartbeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataFeedStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataFeedSymbolStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataSnapshot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataSnapshot_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepthEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthFullUpdate20.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthFullUpdate10.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthSnapshotLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthSnapshotLevel_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdateLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdateLevel_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdateLevelCompact.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionSettlement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionSettlement_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionOpen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionOpen_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionNumTrades.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTradingSessionDate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTrade_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTradeWithUnbundledIndicator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateBidAsk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateBidAsk_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateBidAskCompact.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTradeCompact.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionVolume.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateOpenInterest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionHigh.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionHigh_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionLow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionLow_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateLastTradeSnapshot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewSingleOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewSingleOrderInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelReplaceOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelReplaceOrderInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewOCOOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewOCOOrderInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenOrdersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalOrderFillsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalOrderFillsReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentPositionsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentPositionsReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenOrdersReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalOrderFillResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeAccountsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeAccountResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExchangeListRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExchangeListResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SymbolsForExchangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnderlyingSymbolsForExchangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SymbolsForUnderlyingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SymbolSearchRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityDefinitionForSymbolRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityDefinitionResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityDefinitionReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountBalanceRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountBalanceReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountBalanceUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeneralLogMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataResponseHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataRecordResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataTickRecordResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataRecordResponse_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataTickRecordResponse_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataResponseTrailer.base);
}

::google::protobuf::Metadata file_level_metadata[82];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[25];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, protocoltype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, protocoltype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, generaltextdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, integer_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, integer_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, heartbeatintervalinseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, trademode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, hardwareidentifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, clientname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, resulttext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, reconnectaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, integer_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, servername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, marketdepthupdatesbestbidandask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, tradingissupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, ocoorderssupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, ordercancelreplacesupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, symbolexchangedelimiter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, securitydefinitionssupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, historicalpricedatasupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, resubscribewhenmarketdatafeedavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, marketdepthissupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, onehistoricalpricedatarequestperconnection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, bracketorderssupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, useintegerpriceordermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, usesmultiplepositionspersymbolandtradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, marketdatasupported_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Logoff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Logoff, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Logoff, donotreconnect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Heartbeat, numdroppedmessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Heartbeat, currentdatetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedSymbolStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedSymbolStatus, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedSymbolStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, requestaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, exchange_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, requestaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, numlevels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataReject, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataReject, rejecttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionsettlementprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionopenprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionhighprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionlowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionnumtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, openinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, lasttradeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, lasttradevolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, lasttradedatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, bidaskdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionsettlementdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionsettlementprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionopenprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionhighprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionlowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionnumtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, openinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, lasttradeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, lasttradevolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, lasttradedatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, bidaskdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionsettlementdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::DepthEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::DepthEntry, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::DepthEntry, quantity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, biddepth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, askdepth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, biddepth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, askdepth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, isfirstmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, islastmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, numorders_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, isfirstmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, islastmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, numorders_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, numorders_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, numorders_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, numorders_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, datetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, datetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, numtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradingSessionDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradingSessionDate, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradingSessionDate, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthReject, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthReject, rejecttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, datetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, datetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, unbundledtradeindicator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, datetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, datetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, datetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, symbolid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, atbidorask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, openinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, tradingsessiondate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, lasttradeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, lasttradevolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, lasttradedatetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, isparentorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, openorclose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, divisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, isparentorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, openorclose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price1isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price2isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, updateprice1offsettoparent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, divisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price1isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price2isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, updateprice1offsettoparent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelOrder, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelOrder, clientorderid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, clientorderid_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, ordertype_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, buysell_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price1_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price2_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, quantity_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, clientorderid_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, ordertype_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, buysell_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price1_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price2_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, quantity_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, parenttriggerclientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, openorclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, partialfillhandling_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, clientorderid_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, ordertype_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, buysell_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price1_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price2_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, quantity_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, clientorderid_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, ordertype_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, buysell_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price1_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price2_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, quantity_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, parenttriggerclientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, divisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, openorclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, partialfillhandling_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, requestallorders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, tradeaccount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, numberofdays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, tradeaccount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsReject, rejecttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsRequest, tradeaccount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsReject, rejecttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, totalnummessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, previousserverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, exchangeorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderupdatereason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, filledquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, remainingquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, averagefillprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfillprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfillquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfillexecutionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, infotext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, noorders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, parentserverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, ocolinkedorderserverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, openorclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, previousclientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderreceiveddatetime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersReject, rejecttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, uniqueexecutionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, openclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, noorderfills_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, averageprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, positionidentifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, nopositions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, unsolicited_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountsRequest, requestid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, requestid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListRequest, requestid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, isfinalmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, description_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, securitytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, requestaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, symbol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, securitytype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, underlyingsymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, securitytype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, searchtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, securitytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, searchtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, exchange_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, securitytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, minpriceincrement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, pricedisplayformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, currencyvalueperincrement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, isfinalmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, floattointpricemultiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, inttofloatpricedivisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, underlyingsymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, updatesbidaskonly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, strikeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, putorcall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, shortinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, securityexpirationdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, buyrolloverinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, sellrolloverinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, earningspershare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, sharesoutstanding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, inttofloatquantitydivisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, hasmarketdepthdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, displaypricemultiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, exchangesymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, initialmarginrequirement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, maintenancemarginrequirement_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionReject, rejecttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceRequest, tradeaccount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceReject, rejecttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, cashbalance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, balanceavailablefornewpositions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, accountcurrency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, securitiesvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, marginrequirement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, noaccountbalances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, unsolicited_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UserMessage, usermessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UserMessage, ispopupmessage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::GeneralLogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::GeneralLogMessage, messagetext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, recordinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, startdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, enddatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, maxdaystoreturn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, usezlibcompression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, requestdividendadjustedstockdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, flag_1_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, recordinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, usezlibcompression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, norecordstoreturn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, inttofloatpricedivisor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, rejecttext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, rejectreasoncode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, retrytimeinseconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, startdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, highprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, lowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, lastprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, numtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, bidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, askvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, isfinalrecord_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, isfinalrecord_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, startdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, highprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, lowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, lastprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, numtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, bidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, askvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, isfinalrecord_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, isfinalrecord_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseTrailer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseTrailer, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseTrailer, finalrecordlastdatetime_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DTC_PB::EncodingRequest)},
  { 8, -1, sizeof(::DTC_PB::EncodingResponse)},
  { 16, -1, sizeof(::DTC_PB::LogonRequest)},
  { 32, -1, sizeof(::DTC_PB::LogonResponse)},
  { 57, -1, sizeof(::DTC_PB::Logoff)},
  { 64, -1, sizeof(::DTC_PB::Heartbeat)},
  { 71, -1, sizeof(::DTC_PB::MarketDataFeedStatus)},
  { 77, -1, sizeof(::DTC_PB::MarketDataFeedSymbolStatus)},
  { 84, -1, sizeof(::DTC_PB::MarketDataRequest)},
  { 93, -1, sizeof(::DTC_PB::MarketDepthRequest)},
  { 103, -1, sizeof(::DTC_PB::MarketDataReject)},
  { 110, -1, sizeof(::DTC_PB::MarketDataSnapshot)},
  { 133, -1, sizeof(::DTC_PB::MarketDataSnapshot_Int)},
  { 156, -1, sizeof(::DTC_PB::DepthEntry)},
  { 163, -1, sizeof(::DTC_PB::MarketDepthFullUpdate20)},
  { 171, -1, sizeof(::DTC_PB::MarketDepthFullUpdate10)},
  { 179, -1, sizeof(::DTC_PB::MarketDepthSnapshotLevel)},
  { 193, -1, sizeof(::DTC_PB::MarketDepthSnapshotLevel_Int)},
  { 207, -1, sizeof(::DTC_PB::MarketDepthUpdateLevel)},
  { 219, -1, sizeof(::DTC_PB::MarketDepthUpdateLevel_Int)},
  { 231, -1, sizeof(::DTC_PB::MarketDepthUpdateLevelCompact)},
  { 243, -1, sizeof(::DTC_PB::MarketDataUpdateSessionSettlement)},
  { 251, -1, sizeof(::DTC_PB::MarketDataUpdateSessionSettlement_Int)},
  { 259, -1, sizeof(::DTC_PB::MarketDataUpdateSessionOpen)},
  { 267, -1, sizeof(::DTC_PB::MarketDataUpdateSessionOpen_Int)},
  { 275, -1, sizeof(::DTC_PB::MarketDataUpdateSessionNumTrades)},
  { 283, -1, sizeof(::DTC_PB::MarketDataUpdateTradingSessionDate)},
  { 290, -1, sizeof(::DTC_PB::MarketDepthReject)},
  { 297, -1, sizeof(::DTC_PB::MarketDataUpdateTrade)},
  { 307, -1, sizeof(::DTC_PB::MarketDataUpdateTrade_Int)},
  { 317, -1, sizeof(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator)},
  { 328, -1, sizeof(::DTC_PB::MarketDataUpdateBidAsk)},
  { 339, -1, sizeof(::DTC_PB::MarketDataUpdateBidAsk_Int)},
  { 350, -1, sizeof(::DTC_PB::MarketDataUpdateBidAskCompact)},
  { 361, -1, sizeof(::DTC_PB::MarketDataUpdateTradeCompact)},
  { 371, -1, sizeof(::DTC_PB::MarketDataUpdateSessionVolume)},
  { 379, -1, sizeof(::DTC_PB::MarketDataUpdateOpenInterest)},
  { 387, -1, sizeof(::DTC_PB::MarketDataUpdateSessionHigh)},
  { 395, -1, sizeof(::DTC_PB::MarketDataUpdateSessionHigh_Int)},
  { 403, -1, sizeof(::DTC_PB::MarketDataUpdateSessionLow)},
  { 411, -1, sizeof(::DTC_PB::MarketDataUpdateSessionLow_Int)},
  { 419, -1, sizeof(::DTC_PB::MarketDataUpdateLastTradeSnapshot)},
  { 428, -1, sizeof(::DTC_PB::SubmitNewSingleOrder)},
  { 448, -1, sizeof(::DTC_PB::SubmitNewSingleOrderInt)},
  { 469, -1, sizeof(::DTC_PB::CancelReplaceOrder)},
  { 484, -1, sizeof(::DTC_PB::CancelReplaceOrderInt)},
  { 500, -1, sizeof(::DTC_PB::CancelOrder)},
  { 507, -1, sizeof(::DTC_PB::SubmitNewOCOOrder)},
  { 534, -1, sizeof(::DTC_PB::SubmitNewOCOOrderInt)},
  { 562, -1, sizeof(::DTC_PB::OpenOrdersRequest)},
  { 571, -1, sizeof(::DTC_PB::HistoricalOrderFillsRequest)},
  { 580, -1, sizeof(::DTC_PB::HistoricalOrderFillsReject)},
  { 587, -1, sizeof(::DTC_PB::CurrentPositionsRequest)},
  { 594, -1, sizeof(::DTC_PB::CurrentPositionsReject)},
  { 601, -1, sizeof(::DTC_PB::OrderUpdate)},
  { 640, -1, sizeof(::DTC_PB::OpenOrdersReject)},
  { 647, -1, sizeof(::DTC_PB::HistoricalOrderFillResponse)},
  { 666, -1, sizeof(::DTC_PB::PositionUpdate)},
  { 682, -1, sizeof(::DTC_PB::TradeAccountsRequest)},
  { 688, -1, sizeof(::DTC_PB::TradeAccountResponse)},
  { 697, -1, sizeof(::DTC_PB::ExchangeListRequest)},
  { 703, -1, sizeof(::DTC_PB::ExchangeListResponse)},
  { 712, -1, sizeof(::DTC_PB::SymbolsForExchangeRequest)},
  { 722, -1, sizeof(::DTC_PB::UnderlyingSymbolsForExchangeRequest)},
  { 730, -1, sizeof(::DTC_PB::SymbolsForUnderlyingRequest)},
  { 739, -1, sizeof(::DTC_PB::SymbolSearchRequest)},
  { 749, -1, sizeof(::DTC_PB::SecurityDefinitionForSymbolRequest)},
  { 757, -1, sizeof(::DTC_PB::SecurityDefinitionResponse)},
  { 789, -1, sizeof(::DTC_PB::SecurityDefinitionReject)},
  { 796, -1, sizeof(::DTC_PB::AccountBalanceRequest)},
  { 803, -1, sizeof(::DTC_PB::AccountBalanceReject)},
  { 810, -1, sizeof(::DTC_PB::AccountBalanceUpdate)},
  { 826, -1, sizeof(::DTC_PB::UserMessage)},
  { 833, -1, sizeof(::DTC_PB::GeneralLogMessage)},
  { 839, -1, sizeof(::DTC_PB::HistoricalPriceDataRequest)},
  { 854, -1, sizeof(::DTC_PB::HistoricalPriceDataResponseHeader)},
  { 864, -1, sizeof(::DTC_PB::HistoricalPriceDataReject)},
  { 873, -1, sizeof(::DTC_PB::HistoricalPriceDataRecordResponse)},
  { 889, -1, sizeof(::DTC_PB::HistoricalPriceDataTickRecordResponse)},
  { 900, -1, sizeof(::DTC_PB::HistoricalPriceDataRecordResponse_Int)},
  { 916, -1, sizeof(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int)},
  { 927, -1, sizeof(::DTC_PB::HistoricalPriceDataResponseTrailer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_EncodingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_EncodingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_LogonRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_LogonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_Logoff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_Heartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataFeedStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataFeedSymbolStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataSnapshot_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_DepthEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthFullUpdate20_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthFullUpdate10_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthSnapshotLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthSnapshotLevel_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthUpdateLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthUpdateLevel_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthUpdateLevelCompact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionSettlement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionSettlement_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionOpen_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionNumTrades_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTradingSessionDate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTrade_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTradeWithUnbundledIndicator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateBidAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateBidAsk_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateBidAskCompact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTradeCompact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateOpenInterest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionHigh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionHigh_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionLow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionLow_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateLastTradeSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewSingleOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewSingleOrderInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CancelReplaceOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CancelReplaceOrderInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CancelOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewOCOOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewOCOOrderInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_OpenOrdersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalOrderFillsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalOrderFillsReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CurrentPositionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CurrentPositionsReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_OrderUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_OpenOrdersReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalOrderFillResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_PositionUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_TradeAccountsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_TradeAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_ExchangeListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_ExchangeListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SymbolsForExchangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_UnderlyingSymbolsForExchangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SymbolsForUnderlyingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SymbolSearchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SecurityDefinitionForSymbolRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SecurityDefinitionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SecurityDefinitionReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_AccountBalanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_AccountBalanceReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_AccountBalanceUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_UserMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_GeneralLogMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataTickRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataRecordResponse_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataTickRecordResponse_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataResponseTrailer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "DTCProtocol.GPBV3.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 82);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027DTCProtocol.GPBV3.proto\022\006DTC_PB\"h\n\017Enc"
      "odingRequest\022\027\n\017ProtocolVersion\030\001 \001(\005\022&\n"
      "\010Encoding\030\002 \001(\0162\024.DTC_PB.EncodingEnum\022\024\n"
      "\014ProtocolType\030\003 \001(\t\"i\n\020EncodingResponse\022"
      "\027\n\017ProtocolVersion\030\001 \001(\005\022&\n\010Encoding\030\002 \001"
      "(\0162\024.DTC_PB.EncodingEnum\022\024\n\014ProtocolType"
      "\030\003 \001(\t\"\236\002\n\014LogonRequest\022\027\n\017ProtocolVersi"
      "on\030\001 \001(\005\022\020\n\010Username\030\002 \001(\t\022\020\n\010Password\030\003"
      " \001(\t\022\027\n\017GeneralTextData\030\004 \001(\t\022\021\n\tInteger"
      "_1\030\005 \001(\005\022\021\n\tInteger_2\030\006 \001(\005\022\"\n\032Heartbeat"
      "IntervalInSeconds\030\007 \001(\005\022(\n\tTradeMode\030\010 \001"
      "(\0162\025.DTC_PB.TradeModeEnum\022\024\n\014TradeAccoun"
      "t\030\t \001(\t\022\032\n\022HardwareIdentifier\030\n \001(\t\022\022\n\nC"
      "lientName\030\013 \001(\t\"\267\005\n\rLogonResponse\022\027\n\017Pro"
      "tocolVersion\030\001 \001(\005\022\'\n\006Result\030\002 \001(\0162\027.DTC"
      "_PB.LogonStatusEnum\022\022\n\nResultText\030\003 \001(\t\022"
      "\030\n\020ReconnectAddress\030\004 \001(\t\022\021\n\tInteger_1\030\005"
      " \001(\005\022\022\n\nServerName\030\006 \001(\t\022\'\n\037MarketDepthU"
      "pdatesBestBidAndAsk\030\007 \001(\r\022\032\n\022TradingIsSu"
      "pported\030\010 \001(\r\022\032\n\022OCOOrdersSupported\030\t \001("
      "\r\022#\n\033OrderCancelReplaceSupported\030\n \001(\r\022\037"
      "\n\027SymbolExchangeDelimiter\030\013 \001(\t\022$\n\034Secur"
      "ityDefinitionsSupported\030\014 \001(\r\022$\n\034Histori"
      "calPriceDataSupported\030\r \001(\r\022.\n&Resubscri"
      "beWhenMarketDataFeedAvailable\030\016 \001(\r\022\036\n\026M"
      "arketDepthIsSupported\030\017 \001(\r\0222\n*OneHistor"
      "icalPriceDataRequestPerConnection\030\020 \001(\r\022"
      "\036\n\026BracketOrdersSupported\030\021 \001(\r\022$\n\034UseIn"
      "tegerPriceOrderMessages\030\022 \001(\r\0225\n-UsesMul"
      "tiplePositionsPerSymbolAndTradeAccount\030\023"
      " \001(\r\022\033\n\023MarketDataSupported\030\024 \001(\r\"0\n\006Log"
      "off\022\016\n\006Reason\030\001 \001(\t\022\026\n\016DoNotReconnect\030\002 "
      "\001(\r\"@\n\tHeartbeat\022\032\n\022NumDroppedMessages\030\001"
      " \001(\r\022\027\n\017CurrentDateTime\030\002 \001(\020\"H\n\024MarketD"
      "ataFeedStatus\0220\n\006Status\030\001 \001(\0162 .DTC_PB.M"
      "arketDataFeedStatusEnum\"`\n\032MarketDataFee"
      "dSymbolStatus\022\020\n\010SymbolID\030\001 \001(\r\0220\n\006Statu"
      "s\030\002 \001(\0162 .DTC_PB.MarketDataFeedStatusEnu"
      "m\"y\n\021MarketDataRequest\0220\n\rRequestAction\030"
      "\001 \001(\0162\031.DTC_PB.RequestActionEnum\022\020\n\010Symb"
      "olID\030\002 \001(\r\022\016\n\006Symbol\030\003 \001(\t\022\020\n\010Exchange\030\004"
      " \001(\t\"\215\001\n\022MarketDepthRequest\0220\n\rRequestAc"
      "tion\030\001 \001(\0162\031.DTC_PB.RequestActionEnum\022\020\n"
      "\010SymbolID\030\002 \001(\r\022\016\n\006Symbol\030\003 \001(\t\022\020\n\010Excha"
      "nge\030\004 \001(\t\022\021\n\tNumLevels\030\005 \001(\005\"8\n\020MarketDa"
      "taReject\022\020\n\010SymbolID\030\001 \001(\r\022\022\n\nRejectText"
      "\030\002 \001(\t\"\313\003\n\022MarketDataSnapshot\022\020\n\010SymbolI"
      "D\030\001 \001(\r\022\036\n\026SessionSettlementPrice\030\002 \001(\001\022"
      "\030\n\020SessionOpenPrice\030\003 \001(\001\022\030\n\020SessionHigh"
      "Price\030\004 \001(\001\022\027\n\017SessionLowPrice\030\005 \001(\001\022\025\n\r"
      "SessionVolume\030\006 \001(\001\022\030\n\020SessionNumTrades\030"
      "\007 \001(\r\022\024\n\014OpenInterest\030\010 \001(\r\022\020\n\010BidPrice\030"
      "\t \001(\001\022\020\n\010AskPrice\030\n \001(\001\022\023\n\013AskQuantity\030\013"
      " \001(\001\022\023\n\013BidQuantity\030\014 \001(\001\022\026\n\016LastTradePr"
      "ice\030\r \001(\001\022\027\n\017LastTradeVolume\030\016 \001(\001\022\031\n\021La"
      "stTradeDateTime\030\017 \001(\001\022\026\n\016BidAskDateTime\030"
      "\020 \001(\001\022!\n\031SessionSettlementDateTime\030\021 \001(\r"
      "\022\032\n\022TradingSessionDate\030\022 \001(\r\"\317\003\n\026MarketD"
      "ataSnapshot_Int\022\020\n\010SymbolID\030\001 \001(\r\022\036\n\026Ses"
      "sionSettlementPrice\030\002 \001(\005\022\030\n\020SessionOpen"
      "Price\030\003 \001(\005\022\030\n\020SessionHighPrice\030\004 \001(\005\022\027\n"
      "\017SessionLowPrice\030\005 \001(\005\022\025\n\rSessionVolume\030"
      "\006 \001(\005\022\030\n\020SessionNumTrades\030\007 \001(\r\022\024\n\014OpenI"
      "nterest\030\010 \001(\r\022\020\n\010BidPrice\030\t \001(\005\022\020\n\010AskPr"
      "ice\030\n \001(\005\022\023\n\013AskQuantity\030\013 \001(\005\022\023\n\013BidQua"
      "ntity\030\014 \001(\005\022\026\n\016LastTradePrice\030\r \001(\005\022\027\n\017L"
      "astTradeVolume\030\016 \001(\005\022\031\n\021LastTradeDateTim"
      "e\030\017 \001(\001\022\026\n\016BidAskDateTime\030\020 \001(\001\022!\n\031Sessi"
      "onSettlementDateTime\030\021 \001(\r\022\032\n\022TradingSes"
      "sionDate\030\022 \001(\r\"-\n\nDepthEntry\022\r\n\005Price\030\001 "
      "\001(\001\022\020\n\010Quantity\030\014 \001(\002\"w\n\027MarketDepthFull"
      "Update20\022\020\n\010SymbolID\030\001 \001(\r\022$\n\010BidDepth\030\002"
      " \003(\0132\022.DTC_PB.DepthEntry\022$\n\010AskDepth\030\003 \003"
      "(\0132\022.DTC_PB.DepthEntry\"w\n\027MarketDepthFul"
      "lUpdate10\022\020\n\010SymbolID\030\001 \001(\r\022$\n\010BidDepth\030"
      "\002 \003(\0132\022.DTC_PB.DepthEntry\022$\n\010AskDepth\030\003 "
      "\003(\0132\022.DTC_PB.DepthEntry\"\344\001\n\030MarketDepthS"
      "napshotLevel\022\020\n\010SymbolID\030\001 \001(\r\022$\n\004Side\030\002"
      " \001(\0162\026.DTC_PB.AtBidOrAskEnum\022\r\n\005Price\030\003 "
      "\001(\001\022\020\n\010Quantity\030\004 \001(\001\022\r\n\005Level\030\005 \001(\r\022\035\n\025"
      "IsFirstMessageInBatch\030\006 \001(\r\022\034\n\024IsLastMes"
      "sageInBatch\030\007 \001(\r\022\020\n\010DateTime\030\010 \001(\001\022\021\n\tN"
      "umOrders\030\t \001(\r\"\350\001\n\034MarketDepthSnapshotLe"
      "vel_Int\022\020\n\010SymbolID\030\001 \001(\r\022$\n\004Side\030\002 \001(\0162"
      "\026.DTC_PB.AtBidOrAskEnum\022\r\n\005Price\030\003 \001(\005\022\020"
      "\n\010Quantity\030\004 \001(\005\022\r\n\005Level\030\005 \001(\r\022\035\n\025IsFir"
      "stMessageInBatch\030\006 \001(\r\022\034\n\024IsLastMessageI"
      "nBatch\030\007 \001(\r\022\020\n\010DateTime\030\010 \001(\001\022\021\n\tNumOrd"
      "ers\030\t \001(\r\"\315\001\n\026MarketDepthUpdateLevel\022\020\n\010"
      "SymbolID\030\001 \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.At"
      "BidOrAskEnum\022\r\n\005Price\030\003 \001(\001\022\020\n\010Quantity\030"
      "\004 \001(\001\0225\n\nUpdateType\030\005 \001(\0162!.DTC_PB.Marke"
      "tDepthUpdateTypeEnum\022\020\n\010DateTime\030\006 \001(\001\022\021"
      "\n\tNumOrders\030\007 \001(\r\"\321\001\n\032MarketDepthUpdateL"
      "evel_Int\022\020\n\010SymbolID\030\001 \001(\r\022$\n\004Side\030\002 \001(\016"
      "2\026.DTC_PB.AtBidOrAskEnum\022\r\n\005Price\030\003 \001(\005\022"
      "\020\n\010Quantity\030\004 \001(\005\0225\n\nUpdateType\030\005 \001(\0162!."
      "DTC_PB.MarketDepthUpdateTypeEnum\022\020\n\010Date"
      "Time\030\006 \001(\001\022\021\n\tNumOrders\030\007 \001(\r\"\324\001\n\035Market"
      "DepthUpdateLevelCompact\022\020\n\010SymbolID\030\001 \001("
      "\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.AtBidOrAskEnum\022"
      "\r\n\005Price\030\003 \001(\002\022\020\n\010Quantity\030\004 \001(\002\0225\n\nUpda"
      "teType\030\005 \001(\0162!.DTC_PB.MarketDepthUpdateT"
      "ypeEnum\022\020\n\010DateTime\030\006 \001(\r\022\021\n\tNumOrders\030\007"
      " \001(\r\"V\n!MarketDataUpdateSessionSettlemen"
      "t\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\001\022\020\n\010Da"
      "teTime\030\003 \001(\r\"Z\n%MarketDataUpdateSessionS"
      "ettlement_Int\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price"
      "\030\002 \001(\005\022\020\n\010DateTime\030\003 \001(\005\"Z\n\033MarketDataUp"
      "dateSessionOpen\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Pri"
      "ce\030\002 \001(\001\022\032\n\022TradingSessionDate\030\003 \001(\r\"^\n\037"
      "MarketDataUpdateSessionOpen_Int\022\020\n\010Symbo"
      "lID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\022\032\n\022TradingSessi"
      "onDate\030\003 \001(\r\"c\n MarketDataUpdateSessionN"
      "umTrades\022\020\n\010SymbolID\030\001 \001(\r\022\021\n\tNumTrades\030"
      "\002 \001(\005\022\032\n\022TradingSessionDate\030\003 \001(\r\"D\n\"Mar"
      "ketDataUpdateTradingSessionDate\022\020\n\010Symbo"
      "lID\030\001 \001(\r\022\014\n\004Date\030\002 \001(\r\"9\n\021MarketDepthRe"
      "ject\022\020\n\010SymbolID\030\001 \001(\r\022\022\n\nRejectText\030\002 \001"
      "(\t\"\206\001\n\025MarketDataUpdateTrade\022\020\n\010SymbolID"
      "\030\001 \001(\r\022*\n\nAtBidOrAsk\030\002 \001(\0162\026.DTC_PB.AtBi"
      "dOrAskEnum\022\r\n\005Price\030\003 \001(\001\022\016\n\006Volume\030\004 \001("
      "\001\022\020\n\010DateTime\030\005 \001(\001\"\212\001\n\031MarketDataUpdate"
      "Trade_Int\022\020\n\010SymbolID\030\001 \001(\r\022*\n\nAtBidOrAs"
      "k\030\002 \001(\0162\026.DTC_PB.AtBidOrAskEnum\022\r\n\005Price"
      "\030\003 \001(\005\022\016\n\006Volume\030\004 \001(\005\022\020\n\010DateTime\030\005 \001(\001"
      "\"\343\001\n+MarketDataUpdateTradeWithUnbundledI"
      "ndicator\022\020\n\010SymbolID\030\001 \001(\r\022+\n\nAtBidOrAsk"
      "\030\002 \001(\0162\027.DTC_PB.AtBidOrAskEnum8\022D\n\027Unbun"
      "dledTradeIndicator\030\003 \001(\0162#.DTC_PB.Unbund"
      "ledTradeIndicatorEnum\022\r\n\005Price\030\004 \001(\001\022\016\n\006"
      "Volume\030\005 \001(\r\022\020\n\010DateTime\030\006 \001(\001\"\212\001\n\026Marke"
      "tDataUpdateBidAsk\022\020\n\010SymbolID\030\001 \001(\r\022\020\n\010B"
      "idPrice\030\002 \001(\001\022\023\n\013BidQuantity\030\003 \001(\002\022\020\n\010As"
      "kPrice\030\004 \001(\001\022\023\n\013AskQuantity\030\005 \001(\002\022\020\n\010Dat"
      "eTime\030\006 \001(\017\"\216\001\n\032MarketDataUpdateBidAsk_I"
      "nt\022\020\n\010SymbolID\030\001 \001(\r\022\020\n\010BidPrice\030\002 \001(\005\022\023"
      "\n\013BidQuantity\030\003 \001(\005\022\020\n\010AskPrice\030\004 \001(\005\022\023\n"
      "\013AskQuantity\030\005 \001(\005\022\020\n\010DateTime\030\006 \001(\017\"\221\001\n"
      "\035MarketDataUpdateBidAskCompact\022\020\n\010BidPri"
      "ce\030\001 \001(\002\022\023\n\013BidQuantity\030\002 \001(\002\022\020\n\010AskPric"
      "e\030\003 \001(\002\022\023\n\013AskQuantity\030\004 \001(\002\022\020\n\010DateTime"
      "\030\005 \001(\017\022\020\n\010SymbolID\030\006 \001(\r\"\215\001\n\034MarketDataU"
      "pdateTradeCompact\022\r\n\005Price\030\001 \001(\002\022\016\n\006Volu"
      "me\030\002 \001(\002\022\020\n\010DateTime\030\003 \001(\017\022\020\n\010SymbolID\030\004"
      " \001(\r\022*\n\nAtBidOrAsk\030\005 \001(\0162\026.DTC_PB.AtBidO"
      "rAskEnum\"]\n\035MarketDataUpdateSessionVolum"
      "e\022\020\n\010SymbolID\030\001 \001(\r\022\016\n\006Volume\030\002 \001(\001\022\032\n\022T"
      "radingSessionDate\030\003 \001(\r\"b\n\034MarketDataUpd"
      "ateOpenInterest\022\020\n\010SymbolID\030\001 \001(\r\022\024\n\014Ope"
      "nInterest\030\002 \001(\r\022\032\n\022TradingSessionDate\030\003 "
      "\001(\r\"Z\n\033MarketDataUpdateSessionHigh\022\020\n\010Sy"
      "mbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\001\022\032\n\022TradingSe"
      "ssionDate\030\003 \001(\r\"^\n\037MarketDataUpdateSessi"
      "onHigh_Int\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 "
      "\001(\005\022\032\n\022TradingSessionDate\030\003 \001(\r\"Y\n\032Marke"
      "tDataUpdateSessionLow\022\020\n\010SymbolID\030\001 \001(\r\022"
      "\r\n\005Price\030\002 \001(\001\022\032\n\022TradingSessionDate\030\003 \001"
      "(\r\"]\n\036MarketDataUpdateSessionLow_Int\022\020\n\010"
      "SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\022\032\n\022Trading"
      "SessionDate\030\003 \001(\r\"\201\001\n!MarketDataUpdateLa"
      "stTradeSnapshot\022\020\n\010SymbolID\030\001 \001(\r\022\026\n\016Las"
      "tTradePrice\030\002 \001(\001\022\027\n\017LastTradeVolume\030\003 \001"
      "(\001\022\031\n\021LastTradeDateTime\030\004 \001(\001\"\247\003\n\024Submit"
      "NewSingleOrder\022\016\n\006Symbol\030\001 \001(\t\022\020\n\010Exchan"
      "ge\030\002 \001(\t\022\024\n\014TradeAccount\030\003 \001(\t\022\025\n\rClient"
      "OrderID\030\004 \001(\t\022(\n\tOrderType\030\005 \001(\0162\025.DTC_P"
      "B.OrderTypeEnum\022$\n\007BuySell\030\006 \001(\0162\023.DTC_P"
      "B.BuySellEnum\022\016\n\006Price1\030\007 \001(\001\022\016\n\006Price2\030"
      "\010 \001(\001\022\020\n\010Quantity\030\t \001(\001\022,\n\013TimeInForce\030\n"
      " \001(\0162\027.DTC_PB.TimeInForceEnum\022\030\n\020GoodTil"
      "lDateTime\030\013 \001(\020\022\030\n\020IsAutomatedOrder\030\014 \001("
      "\r\022\025\n\rIsParentOrder\030\r \001(\r\022\024\n\014FreeFormText"
      "\030\016 \001(\t\022/\n\013OpenOrClose\030\017 \001(\0162\032.DTC_PB.Ope"
      "nCloseTradeEnum\"\273\003\n\027SubmitNewSingleOrder"
      "Int\022\016\n\006Symbol\030\001 \001(\t\022\020\n\010Exchange\030\002 \001(\t\022\024\n"
      "\014TradeAccount\030\003 \001(\t\022\025\n\rClientOrderID\030\004 \001"
      "(\t\022(\n\tOrderType\030\005 \001(\0162\025.DTC_PB.OrderType"
      "Enum\022$\n\007BuySell\030\006 \001(\0162\023.DTC_PB.BuySellEn"
      "um\022\016\n\006Price1\030\007 \001(\003\022\016\n\006Price2\030\010 \001(\003\022\017\n\007Di"
      "visor\030\t \001(\002\022\020\n\010Quantity\030\n \001(\003\022,\n\013TimeInF"
      "orce\030\013 \001(\0162\027.DTC_PB.TimeInForceEnum\022\030\n\020G"
      "oodTillDateTime\030\014 \001(\020\022\030\n\020IsAutomatedOrde"
      "r\030\r \001(\r\022\025\n\rIsParentOrder\030\016 \001(\r\022\024\n\014FreeFo"
      "rmText\030\017 \001(\t\022/\n\013OpenOrClose\030\020 \001(\0162\032.DTC_"
      "PB.OpenCloseTradeEnum\"\212\002\n\022CancelReplaceO"
      "rder\022\025\n\rServerOrderID\030\001 \001(\t\022\025\n\rClientOrd"
      "erID\030\002 \001(\t\022\016\n\006Price1\030\003 \001(\001\022\016\n\006Price2\030\004 \001"
      "(\001\022\020\n\010Quantity\030\005 \001(\001\022\023\n\013Price1IsSet\030\006 \001("
      "\r\022\023\n\013Price2IsSet\030\007 \001(\r\022,\n\013TimeInForce\030\t "
      "\001(\0162\027.DTC_PB.TimeInForceEnum\022\030\n\020GoodTill"
      "DateTime\030\n \001(\004\022\"\n\032UpdatePrice1OffsetToPa"
      "rent\030\013 \001(\r\"\236\002\n\025CancelReplaceOrderInt\022\025\n\r"
      "ServerOrderID\030\001 \001(\t\022\025\n\rClientOrderID\030\002 \001"
      "(\t\022\016\n\006Price1\030\003 \001(\003\022\016\n\006Price2\030\004 \001(\003\022\017\n\007Di"
      "visor\030\005 \001(\002\022\020\n\010Quantity\030\006 \001(\003\022\023\n\013Price1I"
      "sSet\030\007 \001(\r\022\023\n\013Price2IsSet\030\010 \001(\r\022,\n\013TimeI"
      "nForce\030\n \001(\0162\027.DTC_PB.TimeInForceEnum\022\030\n"
      "\020GoodTillDateTime\030\013 \001(\004\022\"\n\032UpdatePrice1O"
      "ffsetToParent\030\014 \001(\r\";\n\013CancelOrder\022\025\n\rSe"
      "rverOrderID\030\001 \001(\t\022\025\n\rClientOrderID\030\002 \001(\t"
      "\"\240\005\n\021SubmitNewOCOOrder\022\016\n\006Symbol\030\001 \001(\t\022\020"
      "\n\010Exchange\030\002 \001(\t\022\027\n\017ClientOrderID_1\030\003 \001("
      "\t\022*\n\013OrderType_1\030\004 \001(\0162\025.DTC_PB.OrderTyp"
      "eEnum\022&\n\tBuySell_1\030\005 \001(\0162\023.DTC_PB.BuySel"
      "lEnum\022\020\n\010Price1_1\030\006 \001(\001\022\020\n\010Price2_1\030\007 \001("
      "\001\022\022\n\nQuantity_1\030\010 \001(\001\022\027\n\017ClientOrderID_2"
      "\030\t \001(\t\022*\n\013OrderType_2\030\n \001(\0162\025.DTC_PB.Ord"
      "erTypeEnum\022&\n\tBuySell_2\030\013 \001(\0162\023.DTC_PB.B"
      "uySellEnum\022\020\n\010Price1_2\030\014 \001(\001\022\020\n\010Price2_2"
      "\030\r \001(\001\022\022\n\nQuantity_2\030\016 \001(\001\022,\n\013TimeInForc"
      "e\030\017 \001(\0162\027.DTC_PB.TimeInForceEnum\022\030\n\020Good"
      "TillDateTime\030\020 \001(\020\022\024\n\014TradeAccount\030\021 \001(\t"
      "\022\030\n\020IsAutomatedOrder\030\022 \001(\r\022\"\n\032ParentTrig"
      "gerClientOrderID\030\023 \001(\t\022\024\n\014FreeFormText\030\024"
      " \001(\t\022/\n\013OpenOrClose\030\025 \001(\0162\032.DTC_PB.OpenC"
      "loseTradeEnum\022<\n\023PartialFillHandling\030\026 \001"
      "(\0162\037.DTC_PB.PartialFillHandlingEnum\"\264\005\n\024"
      "SubmitNewOCOOrderInt\022\016\n\006Symbol\030\001 \001(\t\022\020\n\010"
      "Exchange\030\002 \001(\t\022\027\n\017ClientOrderID_1\030\003 \001(\t\022"
      "*\n\013OrderType_1\030\004 \001(\0162\025.DTC_PB.OrderTypeE"
      "num\022&\n\tBuySell_1\030\005 \001(\0162\023.DTC_PB.BuySellE"
      "num\022\020\n\010Price1_1\030\006 \001(\003\022\020\n\010Price2_1\030\007 \001(\003\022"
      "\022\n\nQuantity_1\030\010 \001(\003\022\027\n\017ClientOrderID_2\030\t"
      " \001(\t\022*\n\013OrderType_2\030\n \001(\0162\025.DTC_PB.Order"
      "TypeEnum\022&\n\tBuySell_2\030\013 \001(\0162\023.DTC_PB.Buy"
      "SellEnum\022\020\n\010Price1_2\030\014 \001(\003\022\020\n\010Price2_2\030\r"
      " \001(\003\022\022\n\nQuantity_2\030\016 \001(\003\022,\n\013TimeInForce\030"
      "\017 \001(\0162\027.DTC_PB.TimeInForceEnum\022\030\n\020GoodTi"
      "llDateTime\030\020 \001(\020\022\024\n\014TradeAccount\030\021 \001(\t\022\030"
      "\n\020IsAutomatedOrder\030\022 \001(\r\022\"\n\032ParentTrigge"
      "rClientOrderID\030\023 \001(\t\022\024\n\014FreeFormText\030\024 \001"
      "(\t\022\017\n\007Divisor\030\025 \001(\002\022/\n\013OpenOrClose\030\026 \001(\016"
      "2\032.DTC_PB.OpenCloseTradeEnum\022<\n\023PartialF"
      "illHandling\030\027 \001(\0162\037.DTC_PB.PartialFillHa"
      "ndlingEnum\"m\n\021OpenOrdersRequest\022\021\n\tReque"
      "stID\030\001 \001(\005\022\030\n\020RequestAllOrders\030\002 \001(\005\022\025\n\r"
      "ServerOrderID\030\003 \001(\t\022\024\n\014TradeAccount\030\004 \001("
      "\t\"s\n\033HistoricalOrderFillsRequest\022\021\n\tRequ"
      "estID\030\001 \001(\005\022\025\n\rServerOrderID\030\002 \001(\t\022\024\n\014Nu"
      "mberOfDays\030\003 \001(\005\022\024\n\014TradeAccount\030\004 \001(\t\"C"
      "\n\032HistoricalOrderFillsReject\022\021\n\tRequestI"
      "D\030\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t\"B\n\027CurrentPo"
      "sitionsRequest\022\021\n\tRequestID\030\001 \001(\005\022\024\n\014Tra"
      "deAccount\030\002 \001(\t\"\?\n\026CurrentPositionsRejec"
      "t\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t"
      "\"\306\007\n\013OrderUpdate\022\021\n\tRequestID\030\001 \001(\005\022\030\n\020T"
      "otalNumMessages\030\002 \001(\005\022\025\n\rMessageNumber\030\003"
      " \001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010Exchange\030\005 \001(\t\022\035"
      "\n\025PreviousServerOrderID\030\006 \001(\t\022\025\n\rServerO"
      "rderID\030\007 \001(\t\022\025\n\rClientOrderID\030\010 \001(\t\022\027\n\017E"
      "xchangeOrderID\030\t \001(\t\022,\n\013OrderStatus\030\n \001("
      "\0162\027.DTC_PB.OrderStatusEnum\0228\n\021OrderUpdat"
      "eReason\030\013 \001(\0162\035.DTC_PB.OrderUpdateReason"
      "Enum\022(\n\tOrderType\030\014 \001(\0162\025.DTC_PB.OrderTy"
      "peEnum\022$\n\007BuySell\030\r \001(\0162\023.DTC_PB.BuySell"
      "Enum\022\016\n\006Price1\030\016 \001(\001\022\016\n\006Price2\030\017 \001(\001\022,\n\013"
      "TimeInForce\030\020 \001(\0162\027.DTC_PB.TimeInForceEn"
      "um\022\030\n\020GoodTillDateTime\030\021 \001(\020\022\025\n\rOrderQua"
      "ntity\030\022 \001(\001\022\026\n\016FilledQuantity\030\023 \001(\001\022\031\n\021R"
      "emainingQuantity\030\024 \001(\001\022\030\n\020AverageFillPri"
      "ce\030\025 \001(\001\022\025\n\rLastFillPrice\030\026 \001(\001\022\030\n\020LastF"
      "illDateTime\030\027 \001(\020\022\030\n\020LastFillQuantity\030\030 "
      "\001(\001\022\033\n\023LastFillExecutionID\030\031 \001(\t\022\024\n\014Trad"
      "eAccount\030\032 \001(\t\022\020\n\010InfoText\030\033 \001(\t\022\020\n\010NoOr"
      "ders\030\034 \001(\r\022\033\n\023ParentServerOrderID\030\035 \001(\t\022"
      "#\n\033OCOLinkedOrderServerOrderID\030\036 \001(\t\022/\n\013"
      "OpenOrClose\030\037 \001(\0162\032.DTC_PB.OpenCloseTrad"
      "eEnum\022\035\n\025PreviousClientOrderID\030  \001(\t\022\024\n\014"
      "FreeFormText\030! \001(\t\022\035\n\025OrderReceivedDateT"
      "ime\030\" \001(\020\"9\n\020OpenOrdersReject\022\021\n\tRequest"
      "ID\030\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t\"\354\002\n\033Histori"
      "calOrderFillResponse\022\021\n\tRequestID\030\001 \001(\005\022"
      "\033\n\023TotalNumberMessages\030\002 \001(\005\022\025\n\rMessageN"
      "umber\030\003 \001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010Exchange\030"
      "\005 \001(\t\022\025\n\rServerOrderID\030\006 \001(\t\022$\n\007BuySell\030"
      "\007 \001(\0162\023.DTC_PB.BuySellEnum\022\r\n\005Price\030\010 \001("
      "\001\022\020\n\010DateTime\030\t \001(\020\022\020\n\010Quantity\030\n \001(\001\022\031\n"
      "\021UniqueExecutionID\030\013 \001(\t\022\024\n\014TradeAccount"
      "\030\014 \001(\t\022-\n\tOpenClose\030\r \001(\0162\032.DTC_PB.OpenC"
      "loseTradeEnum\022\024\n\014NoOrderFills\030\016 \001(\r\"\375\001\n\016"
      "PositionUpdate\022\021\n\tRequestID\030\001 \001(\005\022\033\n\023Tot"
      "alNumberMessages\030\002 \001(\005\022\025\n\rMessageNumber\030"
      "\003 \001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010Exchange\030\005 \001(\t\022"
      "\020\n\010Quantity\030\006 \001(\001\022\024\n\014AveragePrice\030\007 \001(\001\022"
      "\032\n\022PositionIdentifier\030\010 \001(\t\022\024\n\014TradeAcco"
      "unt\030\t \001(\t\022\023\n\013NoPositions\030\n \001(\r\022\023\n\013Unsoli"
      "cited\030\013 \001(\r\")\n\024TradeAccountsRequest\022\021\n\tR"
      "equestID\030\001 \001(\005\"s\n\024TradeAccountResponse\022\033"
      "\n\023TotalNumberMessages\030\001 \001(\005\022\025\n\rMessageNu"
      "mber\030\002 \001(\005\022\024\n\014TradeAccount\030\003 \001(\t\022\021\n\tRequ"
      "estID\030\004 \001(\005\"(\n\023ExchangeListRequest\022\021\n\tRe"
      "questID\030\001 \001(\005\"h\n\024ExchangeListResponse\022\021\n"
      "\tRequestID\030\001 \001(\005\022\020\n\010Exchange\030\002 \001(\t\022\026\n\016Is"
      "FinalMessage\030\003 \001(\r\022\023\n\013Description\030\004 \001(\t\""
      "\262\001\n\031SymbolsForExchangeRequest\022\021\n\tRequest"
      "ID\030\001 \001(\005\022\020\n\010Exchange\030\002 \001(\t\022.\n\014SecurityTy"
      "pe\030\003 \001(\0162\030.DTC_PB.SecurityTypeEnum\0220\n\rRe"
      "questAction\030\004 \001(\0162\031.DTC_PB.RequestAction"
      "Enum\022\016\n\006Symbol\030\005 \001(\t\"z\n#UnderlyingSymbol"
      "sForExchangeRequest\022\021\n\tRequestID\030\001 \001(\005\022\020"
      "\n\010Exchange\030\002 \001(\t\022.\n\014SecurityType\030\003 \001(\0162\030"
      ".DTC_PB.SecurityTypeEnum\"\214\001\n\033SymbolsForU"
      "nderlyingRequest\022\021\n\tRequestID\030\001 \001(\005\022\030\n\020U"
      "nderlyingSymbol\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022"
      ".\n\014SecurityType\030\004 \001(\0162\030.DTC_PB.SecurityT"
      "ypeEnum\"\252\001\n\023SymbolSearchRequest\022\021\n\tReque"
      "stID\030\001 \001(\005\022\022\n\nSearchText\030\002 \001(\t\022\020\n\010Exchan"
      "ge\030\003 \001(\t\022.\n\014SecurityType\030\004 \001(\0162\030.DTC_PB."
      "SecurityTypeEnum\022*\n\nSearchType\030\005 \001(\0162\026.D"
      "TC_PB.SearchTypeEnum\"Y\n\"SecurityDefiniti"
      "onForSymbolRequest\022\021\n\tRequestID\030\001 \001(\005\022\016\n"
      "\006Symbol\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\"\303\006\n\032Secu"
      "rityDefinitionResponse\022\021\n\tRequestID\030\001 \001("
      "\005\022\016\n\006Symbol\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022.\n\014S"
      "ecurityType\030\004 \001(\0162\030.DTC_PB.SecurityTypeE"
      "num\022\023\n\013Description\030\005 \001(\t\022\031\n\021MinPriceIncr"
      "ement\030\006 \001(\002\022:\n\022PriceDisplayFormat\030\007 \001(\0162"
      "\036.DTC_PB.PriceDisplayFormatEnum\022!\n\031Curre"
      "ncyValuePerIncrement\030\010 \001(\002\022\026\n\016IsFinalMes"
      "sage\030\t \001(\r\022!\n\031FloatToIntPriceMultiplier\030"
      "\n \001(\002\022\036\n\026IntToFloatPriceDivisor\030\013 \001(\002\022\030\n"
      "\020UnderlyingSymbol\030\014 \001(\t\022\031\n\021UpdatesBidAsk"
      "Only\030\r \001(\r\022\023\n\013StrikePrice\030\016 \001(\002\022&\n\tPutOr"
      "Call\030\017 \001(\0162\023.DTC_PB.PutCallEnum\022\025\n\rShort"
      "Interest\030\020 \001(\r\022\036\n\026SecurityExpirationDate"
      "\030\021 \001(\017\022\033\n\023BuyRolloverInterest\030\022 \001(\002\022\034\n\024S"
      "ellRolloverInterest\030\023 \001(\002\022\030\n\020EarningsPer"
      "Share\030\024 \001(\002\022\031\n\021SharesOutstanding\030\025 \001(\r\022!"
      "\n\031IntToFloatQuantityDivisor\030\026 \001(\002\022\032\n\022Has"
      "MarketDepthData\030\027 \001(\r\022\036\n\026DisplayPriceMul"
      "tiplier\030\030 \001(\002\022\026\n\016ExchangeSymbol\030\031 \001(\t\022 \n"
      "\030InitialMarginRequirement\030\032 \001(\002\022$\n\034Maint"
      "enanceMarginRequirement\030\033 \001(\002\"A\n\030Securit"
      "yDefinitionReject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\n"
      "RejectText\030\002 \001(\t\"@\n\025AccountBalanceReques"
      "t\022\021\n\tRequestID\030\001 \001(\005\022\024\n\014TradeAccount\030\002 \001"
      "(\t\"=\n\024AccountBalanceReject\022\021\n\tRequestID\030"
      "\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t\"\256\002\n\024AccountBal"
      "anceUpdate\022\021\n\tRequestID\030\001 \001(\005\022\023\n\013CashBal"
      "ance\030\002 \001(\001\022\'\n\037BalanceAvailableForNewPosi"
      "tions\030\003 \001(\001\022\027\n\017AccountCurrency\030\004 \001(\t\022\024\n\014"
      "TradeAccount\030\005 \001(\t\022\027\n\017SecuritiesValue\030\006 "
      "\001(\001\022\031\n\021MarginRequirement\030\007 \001(\001\022\033\n\023TotalN"
      "umberMessages\030\010 \001(\005\022\025\n\rMessageNumber\030\t \001"
      "(\005\022\031\n\021NoAccountBalances\030\n \001(\r\022\023\n\013Unsolic"
      "ited\030\013 \001(\r\":\n\013UserMessage\022\023\n\013UserMessage"
      "\030\001 \001(\t\022\026\n\016IsPopupMessage\030\002 \001(\r\"(\n\021Genera"
      "lLogMessage\022\023\n\013MessageText\030\003 \001(\t\"\250\002\n\032His"
      "toricalPriceDataRequest\022\021\n\tRequestID\030\001 \001"
      "(\005\022\016\n\006Symbol\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022:\n\016"
      "RecordInterval\030\004 \001(\0162\".DTC_PB.Historical"
      "DataIntervalEnum\022\025\n\rStartDateTime\030\005 \001(\020\022"
      "\023\n\013EndDateTime\030\006 \001(\020\022\027\n\017MaxDaysToReturn\030"
      "\007 \001(\r\022\032\n\022UseZLibCompression\030\010 \001(\r\022(\n Req"
      "uestDividendAdjustedStockData\030\t \001(\r\022\016\n\006F"
      "lag_1\030\n \001(\r\"\311\001\n!HistoricalPriceDataRespo"
      "nseHeader\022\021\n\tRequestID\030\001 \001(\005\022:\n\016RecordIn"
      "terval\030\002 \001(\0162\".DTC_PB.HistoricalDataInte"
      "rvalEnum\022\032\n\022UseZLibCompression\030\003 \001(\r\022\031\n\021"
      "NoRecordsToReturn\030\004 \001(\r\022\036\n\026IntToFloatPri"
      "ceDivisor\030\005 \001(\002\"\251\001\n\031HistoricalPriceDataR"
      "eject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nRejectText\030\002"
      " \001(\t\022I\n\020RejectReasonCode\030\003 \001(\0162/.DTC_PB."
      "HistoricalPriceDataRejectReasonCodeEnum\022"
      "\032\n\022RetryTimeInSeconds\030\004 \001(\r\"\370\001\n!Historic"
      "alPriceDataRecordResponse\022\021\n\tRequestID\030\001"
      " \001(\005\022\025\n\rStartDateTime\030\002 \001(\020\022\021\n\tOpenPrice"
      "\030\003 \001(\001\022\021\n\tHighPrice\030\004 \001(\001\022\020\n\010LowPrice\030\005 "
      "\001(\001\022\021\n\tLastPrice\030\006 \001(\001\022\016\n\006Volume\030\007 \001(\001\022\021"
      "\n\tNumTrades\030\010 \001(\r\022\021\n\tBidVolume\030\t \001(\001\022\021\n\t"
      "AskVolume\030\n \001(\001\022\025\n\rIsFinalRecord\030\013 \001(\r\"\256"
      "\001\n%HistoricalPriceDataTickRecordResponse"
      "\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010DateTime\030\002 \001(\001\022*\n"
      "\nAtBidOrAsk\030\003 \001(\0162\026.DTC_PB.AtBidOrAskEnu"
      "m\022\r\n\005Price\030\004 \001(\001\022\016\n\006Volume\030\005 \001(\001\022\025\n\rIsFi"
      "nalRecord\030\006 \001(\r\"\374\001\n%HistoricalPriceDataR"
      "ecordResponse_Int\022\021\n\tRequestID\030\001 \001(\005\022\025\n\r"
      "StartDateTime\030\002 \001(\020\022\021\n\tOpenPrice\030\003 \001(\005\022\021"
      "\n\tHighPrice\030\004 \001(\005\022\020\n\010LowPrice\030\005 \001(\005\022\021\n\tL"
      "astPrice\030\006 \001(\005\022\016\n\006Volume\030\007 \001(\005\022\021\n\tNumTra"
      "des\030\010 \001(\r\022\021\n\tBidVolume\030\t \001(\005\022\021\n\tAskVolum"
      "e\030\n \001(\005\022\025\n\rIsFinalRecord\030\013 \001(\r\"\262\001\n)Histo"
      "ricalPriceDataTickRecordResponse_Int\022\021\n\t"
      "RequestID\030\001 \001(\005\022\020\n\010DateTime\030\002 \001(\001\022\r\n\005Pri"
      "ce\030\003 \001(\005\022\016\n\006Volume\030\004 \001(\005\022*\n\nAtBidOrAsk\030\005"
      " \001(\0162\026.DTC_PB.AtBidOrAskEnum\022\025\n\rIsFinalR"
      "ecord\030\006 \001(\r\"X\n\"HistoricalPriceDataRespon"
      "seTrailer\022\021\n\tRequestID\030\001 \001(\005\022\037\n\027FinalRec"
      "ordLastDateTime\030\002 \001(\001*8\n\nDTCVersion\022\025\n\021D"
      "TC_VERSION_UNSET\020\000\022\023\n\017CURRENT_VERSION\020\010*"
      "\323\024\n\016DTCMessageType\022\026\n\022MESSAGE_TYPE_UNSET"
      "\020\000\022\021\n\rLOGON_REQUEST\020\001\022\022\n\016LOGON_RESPONSE\020"
      "\002\022\r\n\tHEARTBEAT\020\003\022\n\n\006LOGOFF\020\005\022\024\n\020ENCODING"
      "_REQUEST\020\006\022\025\n\021ENCODING_RESPONSE\020\007\022\027\n\023MAR"
      "KET_DATA_REQUEST\020e\022\026\n\022MARKET_DATA_REJECT"
      "\020g\022\030\n\024MARKET_DATA_SNAPSHOT\020h\022\034\n\030MARKET_D"
      "ATA_SNAPSHOT_INT\020}\022\034\n\030MARKET_DATA_UPDATE"
      "_TRADE\020k\022$\n MARKET_DATA_UPDATE_TRADE_COM"
      "PACT\020p\022 \n\034MARKET_DATA_UPDATE_TRADE_INT\020~"
      "\022+\n&MARKET_DATA_UPDATE_LAST_TRADE_SNAPSH"
      "OT\020\206\001\022\036\n\032MARKET_DATA_UPDATE_BID_ASK\020l\022&\n"
      "\"MARKET_DATA_UPDATE_BID_ASK_COMPACT\020u\022\"\n"
      "\036MARKET_DATA_UPDATE_BID_ASK_INT\020\177\022#\n\037MAR"
      "KET_DATA_UPDATE_SESSION_OPEN\020x\022(\n#MARKET"
      "_DATA_UPDATE_SESSION_OPEN_INT\020\200\001\022#\n\037MARK"
      "ET_DATA_UPDATE_SESSION_HIGH\020r\022(\n#MARKET_"
      "DATA_UPDATE_SESSION_HIGH_INT\020\201\001\022\"\n\036MARKE"
      "T_DATA_UPDATE_SESSION_LOW\020s\022\'\n\"MARKET_DA"
      "TA_UPDATE_SESSION_LOW_INT\020\202\001\022%\n!MARKET_D"
      "ATA_UPDATE_SESSION_VOLUME\020q\022$\n MARKET_DA"
      "TA_UPDATE_OPEN_INTEREST\020|\022)\n%MARKET_DATA"
      "_UPDATE_SESSION_SETTLEMENT\020w\022.\n)MARKET_D"
      "ATA_UPDATE_SESSION_SETTLEMENT_INT\020\203\001\022*\n%"
      "MARKET_DATA_UPDATE_SESSION_NUM_TRADES\020\207\001"
      "\022,\n\'MARKET_DATA_UPDATE_TRADING_SESSION_D"
      "ATE\020\210\001\022\030\n\024MARKET_DEPTH_REQUEST\020f\022\027\n\023MARK"
      "ET_DEPTH_REJECT\020y\022\037\n\033MARKET_DEPTH_SNAPSH"
      "OT_LEVEL\020z\022$\n\037MARKET_DEPTH_SNAPSHOT_LEVE"
      "L_INT\020\204\001\022\035\n\031MARKET_DEPTH_UPDATE_LEVEL\020j\022"
      "%\n!MARKET_DEPTH_UPDATE_LEVEL_COMPACT\020v\022\""
      "\n\035MARKET_DEPTH_UPDATE_LEVEL_INT\020\205\001\022\037\n\033MA"
      "RKET_DEPTH_FULL_UPDATE_10\020{\022\037\n\033MARKET_DE"
      "PTH_FULL_UPDATE_20\020i\022\033\n\027MARKET_DATA_FEED"
      "_STATUS\020d\022\"\n\036MARKET_DATA_FEED_SYMBOL_STA"
      "TUS\020t\022\034\n\027SUBMIT_NEW_SINGLE_ORDER\020\320\001\022 \n\033S"
      "UBMIT_NEW_SINGLE_ORDER_INT\020\316\001\022\031\n\024SUBMIT_"
      "NEW_OCO_ORDER\020\311\001\022\035\n\030SUBMIT_NEW_OCO_ORDER"
      "_INT\020\317\001\022\021\n\014CANCEL_ORDER\020\313\001\022\031\n\024CANCEL_REP"
      "LACE_ORDER\020\314\001\022\035\n\030CANCEL_REPLACE_ORDER_IN"
      "T\020\315\001\022\030\n\023OPEN_ORDERS_REQUEST\020\254\002\022\027\n\022OPEN_O"
      "RDERS_REJECT\020\256\002\022\021\n\014ORDER_UPDATE\020\255\002\022#\n\036HI"
      "STORICAL_ORDER_FILLS_REQUEST\020\257\002\022#\n\036HISTO"
      "RICAL_ORDER_FILL_RESPONSE\020\260\002\022\"\n\035HISTORIC"
      "AL_ORDER_FILLS_REJECT\020\264\002\022\036\n\031CURRENT_POSI"
      "TIONS_REQUEST\020\261\002\022\035\n\030CURRENT_POSITIONS_RE"
      "JECT\020\263\002\022\024\n\017POSITION_UPDATE\020\262\002\022\033\n\026TRADE_A"
      "CCOUNTS_REQUEST\020\220\003\022\033\n\026TRADE_ACCOUNT_RESP"
      "ONSE\020\221\003\022\032\n\025EXCHANGE_LIST_REQUEST\020\364\003\022\033\n\026E"
      "XCHANGE_LIST_RESPONSE\020\365\003\022!\n\034SYMBOLS_FOR_"
      "EXCHANGE_REQUEST\020\366\003\022,\n\'UNDERLYING_SYMBOL"
      "S_FOR_EXCHANGE_REQUEST\020\367\003\022#\n\036SYMBOLS_FOR"
      "_UNDERLYING_REQUEST\020\370\003\022+\n&SECURITY_DEFIN"
      "ITION_FOR_SYMBOL_REQUEST\020\372\003\022!\n\034SECURITY_"
      "DEFINITION_RESPONSE\020\373\003\022\032\n\025SYMBOL_SEARCH_"
      "REQUEST\020\374\003\022\037\n\032SECURITY_DEFINITION_REJECT"
      "\020\375\003\022\034\n\027ACCOUNT_BALANCE_REQUEST\020\331\004\022\033\n\026ACC"
      "OUNT_BALANCE_REJECT\020\332\004\022\033\n\026ACCOUNT_BALANC"
      "E_UPDATE\020\330\004\022\021\n\014USER_MESSAGE\020\274\005\022\030\n\023GENERA"
      "L_LOG_MESSAGE\020\275\005\022\"\n\035HISTORICAL_PRICE_DAT"
      "A_REQUEST\020\240\006\022*\n%HISTORICAL_PRICE_DATA_RE"
      "SPONSE_HEADER\020\241\006\022!\n\034HISTORICAL_PRICE_DAT"
      "A_REJECT\020\242\006\022*\n%HISTORICAL_PRICE_DATA_REC"
      "ORD_RESPONSE\020\243\006\022/\n*HISTORICAL_PRICE_DATA"
      "_TICK_RECORD_RESPONSE\020\244\006\022.\n)HISTORICAL_P"
      "RICE_DATA_RECORD_RESPONSE_INT\020\245\006\0223\n.HIST"
      "ORICAL_PRICE_DATA_TICK_RECORD_RESPONSE_I"
      "NT\020\246\006*\220\001\n\014EncodingEnum\022\023\n\017BINARY_ENCODIN"
      "G\020\000\022\'\n#BINARY_WITH_VARIABLE_LENGTH_STRIN"
      "GS\020\001\022\021\n\rJSON_ENCODING\020\002\022\031\n\025JSON_COMPACT_"
      "ENCODING\020\003\022\024\n\020PROTOCOL_BUFFERS\020\004*\214\001\n\017Log"
      "onStatusEnum\022\026\n\022LOGON_STATUS_UNSET\020\000\022\021\n\r"
      "LOGON_SUCCESS\020\001\022\017\n\013LOGON_ERROR\020\002\022\034\n\030LOGO"
      "N_ERROR_NO_RECONNECT\020\003\022\037\n\033LOGON_RECONNEC"
      "T_NEW_ADDRESS\020\004*F\n\024MessageSupportedEnum\022"
      "\027\n\023MESSAGE_UNSUPPORTED\020\000\022\025\n\021MESSAGE_SUPP"
      "ORTED\020\001*i\n\rTradeModeEnum\022\024\n\020TRADE_MODE_U"
      "NSET\020\000\022\023\n\017TRADE_MODE_DEMO\020\001\022\030\n\024TRADE_MOD"
      "E_SIMULATED\020\002\022\023\n\017TRADE_MODE_LIVE\020\003*[\n\021Re"
      "questActionEnum\022\030\n\024REQUEST_ACTION_UNSET\020"
      "\000\022\r\n\tSUBSCRIBE\020\001\022\017\n\013UNSUBSCRIBE\020\002\022\014\n\010SNA"
      "PSHOT\020\003*\206\001\n\033UnbundledTradeIndicatorEnum\022"
      "\030\n\024UNBUNDLED_TRADE_NONE\020\000\022&\n\"FIRST_SUB_T"
      "RADE_OF_UNBUNDLED_TRADE\020\001\022%\n!LAST_SUB_TR"
      "ADE_OF_UNBUNDLED_TRADE\020\002*\336\002\n\017OrderStatus"
      "Enum\022\034\n\030ORDER_STATUS_UNSPECIFIED\020\000\022\033\n\027OR"
      "DER_STATUS_ORDER_SENT\020\001\022\035\n\031ORDER_STATUS_"
      "PENDING_OPEN\020\002\022\036\n\032ORDER_STATUS_PENDING_C"
      "HILD\020\003\022\025\n\021ORDER_STATUS_OPEN\020\004\022\'\n#ORDER_S"
      "TATUS_PENDING_CANCEL_REPLACE\020\005\022\037\n\033ORDER_"
      "STATUS_PENDING_CANCEL\020\006\022\027\n\023ORDER_STATUS_"
      "FILLED\020\007\022\031\n\025ORDER_STATUS_CANCELED\020\010\022\031\n\025O"
      "RDER_STATUS_REJECTED\020\t\022!\n\035ORDER_STATUS_P"
      "ARTIALLY_FILLED\020\n*\305\002\n\025OrderUpdateReasonE"
      "num\022\035\n\031ORDER_UPDATE_REASON_UNSET\020\000\022 \n\034OP"
      "EN_ORDERS_REQUEST_RESPONSE\020\001\022\026\n\022NEW_ORDE"
      "R_ACCEPTED\020\002\022\030\n\024GENERAL_ORDER_UPDATE\020\003\022\020"
      "\n\014ORDER_FILLED\020\004\022\032\n\026ORDER_FILLED_PARTIAL"
      "LY\020\005\022\022\n\016ORDER_CANCELED\020\006\022!\n\035ORDER_CANCEL"
      "_REPLACE_COMPLETE\020\007\022\026\n\022NEW_ORDER_REJECTE"
      "D\020\010\022\031\n\025ORDER_CANCEL_REJECTED\020\t\022!\n\035ORDER_"
      "CANCEL_REPLACE_REJECTED\020\n*;\n\016AtBidOrAskE"
      "num\022\021\n\rBID_ASK_UNSET\020\000\022\n\n\006AT_BID\020\001\022\n\n\006AT"
      "_ASK\020\002*B\n\017AtBidOrAskEnum8\022\023\n\017BID_ASK_UNS"
      "ET_8\020\000\022\014\n\010AT_BID_8\020\001\022\014\n\010AT_ASK_8\020\002*q\n\031Ma"
      "rketDepthUpdateTypeEnum\022\017\n\013DEPTH_UNSET\020\000"
      "\022$\n MARKET_DEPTH_INSERT_UPDATE_LEVEL\020\001\022\035"
      "\n\031MARKET_DEPTH_DELETE_LEVEL\020\002*\305\001\n\rOrderT"
      "ypeEnum\022\024\n\020ORDER_TYPE_UNSET\020\000\022\025\n\021ORDER_T"
      "YPE_MARKET\020\001\022\024\n\020ORDER_TYPE_LIMIT\020\002\022\023\n\017OR"
      "DER_TYPE_STOP\020\003\022\031\n\025ORDER_TYPE_STOP_LIMIT"
      "\020\004\022 \n\034ORDER_TYPE_MARKET_IF_TOUCHED\020\005\022\037\n\033"
      "ORDER_TYPE_LIMIT_IF_TOUCHED\020\006*\256\001\n\017TimeIn"
      "ForceEnum\022\r\n\tTIF_UNSET\020\000\022\013\n\007TIF_DAY\020\001\022\032\n"
      "\026TIF_GOOD_TILL_CANCELED\020\002\022\033\n\027TIF_GOOD_TI"
      "LL_DATE_TIME\020\003\022\033\n\027TIF_IMMEDIATE_OR_CANCE"
      "L\020\004\022\023\n\017TIF_ALL_OR_NONE\020\005\022\024\n\020TIF_FILL_OR_"
      "KILL\020\006*4\n\013BuySellEnum\022\022\n\016BUY_SELL_UNSET\020"
      "\000\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002*F\n\022OpenCloseTradeEn"
      "um\022\017\n\013TRADE_UNSET\020\000\022\016\n\nTRADE_OPEN\020\001\022\017\n\013T"
      "RADE_CLOSE\020\002*\210\001\n\027PartialFillHandlingEnum"
      "\022\026\n\022PARTIAL_FILL_UNSET\020\000\022)\n%PARTIAL_FILL"
      "_HANDLING_REDUCE_QUANTITY\020\001\022*\n&PARTIAL_F"
      "ILL_HANDLING_IMMEDIATE_CANCEL\020\002*\177\n\030Marke"
      "tDataFeedStatusEnum\022!\n\035MARKET_DATA_FEED_"
      "STATUS_UNSET\020\000\022 \n\034MARKET_DATA_FEED_UNAVA"
      "ILABLE\020\001\022\036\n\032MARKET_DATA_FEED_AVAILABLE\020\002"
      "*\330\006\n\026PriceDisplayFormatEnum\022\"\n\036PRICE_DIS"
      "PLAY_FORMAT_DECIMAL_0\020\000\022\"\n\036PRICE_DISPLAY"
      "_FORMAT_DECIMAL_1\020\001\022\"\n\036PRICE_DISPLAY_FOR"
      "MAT_DECIMAL_2\020\002\022\"\n\036PRICE_DISPLAY_FORMAT_"
      "DECIMAL_3\020\003\022\"\n\036PRICE_DISPLAY_FORMAT_DECI"
      "MAL_4\020\004\022\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL_"
      "5\020\005\022\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL_6\020\006\022"
      "\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL_7\020\007\022\"\n\036P"
      "RICE_DISPLAY_FORMAT_DECIMAL_8\020\010\022\"\n\036PRICE"
      "_DISPLAY_FORMAT_DECIMAL_9\020\t\022)\n$PRICE_DIS"
      "PLAY_FORMAT_DENOMINATOR_256\020\344\002\022)\n$PRICE_"
      "DISPLAY_FORMAT_DENOMINATOR_128\020\344\001\022(\n#PRI"
      "CE_DISPLAY_FORMAT_DENOMINATOR_64\020\244\001\0221\n,P"
      "RICE_DISPLAY_FORMAT_DENOMINATOR_32_QUART"
      "ERS\020\210\001\022/\n*PRICE_DISPLAY_FORMAT_DENOMINAT"
      "OR_32_HALVES\020\206\001\022(\n#PRICE_DISPLAY_FORMAT_"
      "DENOMINATOR_32\020\204\001\022\'\n#PRICE_DISPLAY_FORMA"
      "T_DENOMINATOR_16\020t\022&\n\"PRICE_DISPLAY_FORM"
      "AT_DENOMINATOR_8\020l\022&\n\"PRICE_DISPLAY_FORM"
      "AT_DENOMINATOR_4\020h\022&\n\"PRICE_DISPLAY_FORM"
      "AT_DENOMINATOR_2\020f\022\'\n\032PRICE_DISPLAY_FORM"
      "AT_UNSET\020\377\377\377\377\377\377\377\377\377\001*\315\002\n\020SecurityTypeEnum"
      "\022\027\n\023SECURITY_TYPE_UNSET\020\000\022\030\n\024SECURITY_TY"
      "PE_FUTURE\020\001\022\027\n\023SECURITY_TYPE_STOCK\020\002\022\027\n\023"
      "SECURITY_TYPE_FOREX\020\003\022\027\n\023SECURITY_TYPE_I"
      "NDEX\020\004\022\"\n\036SECURITY_TYPE_FUTURES_STRATEGY"
      "\020\005\022 \n\034SECURITY_TYPE_FUTURES_OPTION\020\007\022\036\n\032"
      "SECURITY_TYPE_STOCK_OPTION\020\006\022\036\n\032SECURITY"
      "_TYPE_INDEX_OPTION\020\010\022\026\n\022SECURITY_TYPE_BO"
      "ND\020\t\022\035\n\031SECURITY_TYPE_MUTUAL_FUND\020\n*4\n\013P"
      "utCallEnum\022\014\n\010PC_UNSET\020\000\022\013\n\007PC_CALL\020\001\022\n\n"
      "\006PC_PUT\020\002*b\n\016SearchTypeEnum\022\025\n\021SEARCH_TY"
      "PE_UNSET\020\000\022\031\n\025SEARCH_TYPE_BY_SYMBOL\020\001\022\036\n"
      "\032SEARCH_TYPE_BY_DESCRIPTION\020\002*\204\002\n\032Histor"
      "icalDataIntervalEnum\022\021\n\rINTERVAL_TICK\020\000\022"
      "\025\n\021INTERVAL_1_SECOND\020\001\022\026\n\022INTERVAL_2_SEC"
      "ONDS\020\002\022\026\n\022INTERVAL_4_SECONDS\020\004\022\026\n\022INTERV"
      "AL_5_SECONDS\020\005\022\027\n\023INTERVAL_10_SECONDS\020\n\022"
      "\027\n\023INTERVAL_30_SECONDS\020\036\022\025\n\021INTERVAL_1_M"
      "INUTE\020<\022\024\n\016INTERVAL_1_DAY\020\200\243\005\022\025\n\017INTERVA"
      "L_1_WEEK\020\200\365$*\347\001\n\'HistoricalPriceDataReje"
      "ctReasonCodeEnum\022\016\n\nHPDR_UNSET\020\000\022)\n%HPDR"
      "_UNABLE_TO_SERVE_DATA_RETRY_LATER\020\001\022*\n&H"
      "PDR_UNABLE_TO_SERVE_DATA_DO_NOT_RETRY\020\002\022"
      "6\n2HPDR_DATA_REQUEST_OUTSIDE_BOUNDS_OF_A"
      "VAILABLE_DATA\020\003\022\035\n\031HPDR_GENERAL_REJECT_E"
      "RROR\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 22534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DTCProtocol.GPBV3.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_DTCProtocol_2eGPBV3_2eproto
namespace DTC_PB {
const ::google::protobuf::EnumDescriptor* DTCVersion_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[0];
}
bool DTCVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DTCMessageType_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[1];
}
bool DTCMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 400:
    case 401:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 506:
    case 507:
    case 508:
    case 509:
    case 600:
    case 601:
    case 602:
    case 700:
    case 701:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EncodingEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[2];
}
bool EncodingEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogonStatusEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[3];
}
bool LogonStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageSupportedEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[4];
}
bool MessageSupportedEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeModeEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[5];
}
bool TradeModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestActionEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[6];
}
bool RequestActionEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnbundledTradeIndicatorEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[7];
}
bool UnbundledTradeIndicatorEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderStatusEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[8];
}
bool OrderStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderUpdateReasonEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[9];
}
bool OrderUpdateReasonEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AtBidOrAskEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[10];
}
bool AtBidOrAskEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AtBidOrAskEnum8_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[11];
}
bool AtBidOrAskEnum8_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketDepthUpdateTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[12];
}
bool MarketDepthUpdateTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[13];
}
bool OrderTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[14];
}
bool TimeInForceEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuySellEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[15];
}
bool BuySellEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenCloseTradeEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[16];
}
bool OpenCloseTradeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartialFillHandlingEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[17];
}
bool PartialFillHandlingEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketDataFeedStatusEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[18];
}
bool MarketDataFeedStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceDisplayFormatEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[19];
}
bool PriceDisplayFormatEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 102:
    case 104:
    case 108:
    case 116:
    case 132:
    case 134:
    case 136:
    case 164:
    case 228:
    case 356:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[20];
}
bool SecurityTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PutCallEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[21];
}
bool PutCallEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SearchTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[22];
}
bool SearchTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HistoricalDataIntervalEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[23];
}
bool HistoricalDataIntervalEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 10:
    case 30:
    case 60:
    case 86400:
    case 604800:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HistoricalPriceDataRejectReasonCodeEnum_descriptor() {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_enum_descriptors[24];
}
bool HistoricalPriceDataRejectReasonCodeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EncodingRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncodingRequest::kProtocolVersionFieldNumber;
const int EncodingRequest::kEncodingFieldNumber;
const int EncodingRequest::kProtocolTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncodingRequest::EncodingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_EncodingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.EncodingRequest)
}
EncodingRequest::EncodingRequest(const EncodingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocoltype().size() > 0) {
    protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.EncodingRequest)
}

void EncodingRequest::SharedCtor() {
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
}

EncodingRequest::~EncodingRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.EncodingRequest)
  SharedDtor();
}

void EncodingRequest::SharedDtor() {
  protocoltype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncodingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncodingRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncodingRequest& EncodingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_EncodingRequest.base);
  return *internal_default_instance();
}


void EncodingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.EncodingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocoltype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  _internal_metadata_.Clear();
}

bool EncodingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.EncodingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.EncodingEnum Encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::DTC_PB::EncodingEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ProtocolType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocoltype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.EncodingRequest.ProtocolType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.EncodingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.EncodingRequest)
  return false;
#undef DO_
}

void EncodingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.EncodingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // .DTC_PB.EncodingEnum Encoding = 2;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // string ProtocolType = 3;
  if (this->protocoltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.EncodingRequest.ProtocolType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->protocoltype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.EncodingRequest)
}

::google::protobuf::uint8* EncodingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.EncodingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // .DTC_PB.EncodingEnum Encoding = 2;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // string ProtocolType = 3;
  if (this->protocoltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.EncodingRequest.ProtocolType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocoltype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.EncodingRequest)
  return target;
}

size_t EncodingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.EncodingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ProtocolType = 3;
  if (this->protocoltype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocoltype());
  }

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocolversion());
  }

  // .DTC_PB.EncodingEnum Encoding = 2;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncodingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.EncodingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EncodingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncodingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.EncodingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.EncodingRequest)
    MergeFrom(*source);
  }
}

void EncodingRequest::MergeFrom(const EncodingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.EncodingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocoltype().size() > 0) {

    protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
  }
  if (from.protocolversion() != 0) {
    set_protocolversion(from.protocolversion());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void EncodingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.EncodingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodingRequest::CopyFrom(const EncodingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.EncodingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingRequest::IsInitialized() const {
  return true;
}

void EncodingRequest::Swap(EncodingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncodingRequest::InternalSwap(EncodingRequest* other) {
  using std::swap;
  protocoltype_.Swap(&other->protocoltype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(encoding_, other->encoding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncodingRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EncodingResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncodingResponse::kProtocolVersionFieldNumber;
const int EncodingResponse::kEncodingFieldNumber;
const int EncodingResponse::kProtocolTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncodingResponse::EncodingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_EncodingResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.EncodingResponse)
}
EncodingResponse::EncodingResponse(const EncodingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocoltype().size() > 0) {
    protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.EncodingResponse)
}

void EncodingResponse::SharedCtor() {
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
}

EncodingResponse::~EncodingResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.EncodingResponse)
  SharedDtor();
}

void EncodingResponse::SharedDtor() {
  protocoltype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncodingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncodingResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncodingResponse& EncodingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_EncodingResponse.base);
  return *internal_default_instance();
}


void EncodingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.EncodingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocoltype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  _internal_metadata_.Clear();
}

bool EncodingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.EncodingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.EncodingEnum Encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::DTC_PB::EncodingEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ProtocolType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocoltype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.EncodingResponse.ProtocolType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.EncodingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.EncodingResponse)
  return false;
#undef DO_
}

void EncodingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.EncodingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // .DTC_PB.EncodingEnum Encoding = 2;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // string ProtocolType = 3;
  if (this->protocoltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.EncodingResponse.ProtocolType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->protocoltype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.EncodingResponse)
}

::google::protobuf::uint8* EncodingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.EncodingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // .DTC_PB.EncodingEnum Encoding = 2;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // string ProtocolType = 3;
  if (this->protocoltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.EncodingResponse.ProtocolType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocoltype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.EncodingResponse)
  return target;
}

size_t EncodingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.EncodingResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ProtocolType = 3;
  if (this->protocoltype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocoltype());
  }

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocolversion());
  }

  // .DTC_PB.EncodingEnum Encoding = 2;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncodingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.EncodingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EncodingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncodingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.EncodingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.EncodingResponse)
    MergeFrom(*source);
  }
}

void EncodingResponse::MergeFrom(const EncodingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.EncodingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocoltype().size() > 0) {

    protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
  }
  if (from.protocolversion() != 0) {
    set_protocolversion(from.protocolversion());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void EncodingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.EncodingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodingResponse::CopyFrom(const EncodingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.EncodingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingResponse::IsInitialized() const {
  return true;
}

void EncodingResponse::Swap(EncodingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncodingResponse::InternalSwap(EncodingResponse* other) {
  using std::swap;
  protocoltype_.Swap(&other->protocoltype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(encoding_, other->encoding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncodingResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogonRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogonRequest::kProtocolVersionFieldNumber;
const int LogonRequest::kUsernameFieldNumber;
const int LogonRequest::kPasswordFieldNumber;
const int LogonRequest::kGeneralTextDataFieldNumber;
const int LogonRequest::kInteger1FieldNumber;
const int LogonRequest::kInteger2FieldNumber;
const int LogonRequest::kHeartbeatIntervalInSecondsFieldNumber;
const int LogonRequest::kTradeModeFieldNumber;
const int LogonRequest::kTradeAccountFieldNumber;
const int LogonRequest::kHardwareIdentifierFieldNumber;
const int LogonRequest::kClientNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogonRequest::LogonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_LogonRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.LogonRequest)
}
LogonRequest::LogonRequest(const LogonRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  generaltextdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.generaltextdata().size() > 0) {
    generaltextdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generaltextdata_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  hardwareidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hardwareidentifier().size() > 0) {
    hardwareidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardwareidentifier_);
  }
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientname().size() > 0) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&trademode_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(trademode_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.LogonRequest)
}

void LogonRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generaltextdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trademode_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(trademode_));
}

LogonRequest::~LogonRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.LogonRequest)
  SharedDtor();
}

void LogonRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generaltextdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareidentifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogonRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogonRequest& LogonRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_LogonRequest.base);
  return *internal_default_instance();
}


void LogonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.LogonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generaltextdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareidentifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trademode_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(trademode_));
  _internal_metadata_.Clear();
}

bool LogonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.LogonRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonRequest.Username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonRequest.Password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string GeneralTextData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generaltextdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->generaltextdata().data(), static_cast<int>(this->generaltextdata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonRequest.GeneralTextData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Integer_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Integer_2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 HeartbeatIntervalInSeconds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeatintervalinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TradeModeEnum TradeMode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trademode(static_cast< ::DTC_PB::TradeModeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonRequest.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HardwareIdentifier = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardwareidentifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hardwareidentifier().data(), static_cast<int>(this->hardwareidentifier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonRequest.HardwareIdentifier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonRequest.ClientName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.LogonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.LogonRequest)
  return false;
#undef DO_
}

void LogonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.LogonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // string Username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // string Password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // string GeneralTextData = 4;
  if (this->generaltextdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->generaltextdata().data(), static_cast<int>(this->generaltextdata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.GeneralTextData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->generaltextdata(), output);
  }

  // int32 Integer_1 = 5;
  if (this->integer_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integer_1(), output);
  }

  // int32 Integer_2 = 6;
  if (this->integer_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->integer_2(), output);
  }

  // int32 HeartbeatIntervalInSeconds = 7;
  if (this->heartbeatintervalinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->heartbeatintervalinseconds(), output);
  }

  // .DTC_PB.TradeModeEnum TradeMode = 8;
  if (this->trademode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->trademode(), output);
  }

  // string TradeAccount = 9;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradeaccount(), output);
  }

  // string HardwareIdentifier = 10;
  if (this->hardwareidentifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hardwareidentifier().data(), static_cast<int>(this->hardwareidentifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.HardwareIdentifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->hardwareidentifier(), output);
  }

  // string ClientName = 11;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.ClientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->clientname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.LogonRequest)
}

::google::protobuf::uint8* LogonRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.LogonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // string Username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // string Password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // string GeneralTextData = 4;
  if (this->generaltextdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->generaltextdata().data(), static_cast<int>(this->generaltextdata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.GeneralTextData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->generaltextdata(), target);
  }

  // int32 Integer_1 = 5;
  if (this->integer_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integer_1(), target);
  }

  // int32 Integer_2 = 6;
  if (this->integer_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->integer_2(), target);
  }

  // int32 HeartbeatIntervalInSeconds = 7;
  if (this->heartbeatintervalinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->heartbeatintervalinseconds(), target);
  }

  // .DTC_PB.TradeModeEnum TradeMode = 8;
  if (this->trademode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->trademode(), target);
  }

  // string TradeAccount = 9;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradeaccount(), target);
  }

  // string HardwareIdentifier = 10;
  if (this->hardwareidentifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hardwareidentifier().data(), static_cast<int>(this->hardwareidentifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.HardwareIdentifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hardwareidentifier(), target);
  }

  // string ClientName = 11;
  if (this->clientname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonRequest.ClientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clientname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.LogonRequest)
  return target;
}

size_t LogonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.LogonRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string Password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string GeneralTextData = 4;
  if (this->generaltextdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->generaltextdata());
  }

  // string TradeAccount = 9;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // string HardwareIdentifier = 10;
  if (this->hardwareidentifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hardwareidentifier());
  }

  // string ClientName = 11;
  if (this->clientname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientname());
  }

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocolversion());
  }

  // int32 Integer_1 = 5;
  if (this->integer_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer_1());
  }

  // int32 Integer_2 = 6;
  if (this->integer_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer_2());
  }

  // int32 HeartbeatIntervalInSeconds = 7;
  if (this->heartbeatintervalinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->heartbeatintervalinseconds());
  }

  // .DTC_PB.TradeModeEnum TradeMode = 8;
  if (this->trademode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trademode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.LogonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogonRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogonRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.LogonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.LogonRequest)
    MergeFrom(*source);
  }
}

void LogonRequest::MergeFrom(const LogonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.LogonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.generaltextdata().size() > 0) {

    generaltextdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generaltextdata_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.hardwareidentifier().size() > 0) {

    hardwareidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardwareidentifier_);
  }
  if (from.clientname().size() > 0) {

    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  if (from.protocolversion() != 0) {
    set_protocolversion(from.protocolversion());
  }
  if (from.integer_1() != 0) {
    set_integer_1(from.integer_1());
  }
  if (from.integer_2() != 0) {
    set_integer_2(from.integer_2());
  }
  if (from.heartbeatintervalinseconds() != 0) {
    set_heartbeatintervalinseconds(from.heartbeatintervalinseconds());
  }
  if (from.trademode() != 0) {
    set_trademode(from.trademode());
  }
}

void LogonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.LogonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonRequest::CopyFrom(const LogonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.LogonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonRequest::IsInitialized() const {
  return true;
}

void LogonRequest::Swap(LogonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogonRequest::InternalSwap(LogonRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generaltextdata_.Swap(&other->generaltextdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hardwareidentifier_.Swap(&other->hardwareidentifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientname_.Swap(&other->clientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(integer_1_, other->integer_1_);
  swap(integer_2_, other->integer_2_);
  swap(heartbeatintervalinseconds_, other->heartbeatintervalinseconds_);
  swap(trademode_, other->trademode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogonRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogonResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogonResponse::kProtocolVersionFieldNumber;
const int LogonResponse::kResultFieldNumber;
const int LogonResponse::kResultTextFieldNumber;
const int LogonResponse::kReconnectAddressFieldNumber;
const int LogonResponse::kInteger1FieldNumber;
const int LogonResponse::kServerNameFieldNumber;
const int LogonResponse::kMarketDepthUpdatesBestBidAndAskFieldNumber;
const int LogonResponse::kTradingIsSupportedFieldNumber;
const int LogonResponse::kOCOOrdersSupportedFieldNumber;
const int LogonResponse::kOrderCancelReplaceSupportedFieldNumber;
const int LogonResponse::kSymbolExchangeDelimiterFieldNumber;
const int LogonResponse::kSecurityDefinitionsSupportedFieldNumber;
const int LogonResponse::kHistoricalPriceDataSupportedFieldNumber;
const int LogonResponse::kResubscribeWhenMarketDataFeedAvailableFieldNumber;
const int LogonResponse::kMarketDepthIsSupportedFieldNumber;
const int LogonResponse::kOneHistoricalPriceDataRequestPerConnectionFieldNumber;
const int LogonResponse::kBracketOrdersSupportedFieldNumber;
const int LogonResponse::kUseIntegerPriceOrderMessagesFieldNumber;
const int LogonResponse::kUsesMultiplePositionsPerSymbolAndTradeAccountFieldNumber;
const int LogonResponse::kMarketDataSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogonResponse::LogonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_LogonResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.LogonResponse)
}
LogonResponse::LogonResponse(const LogonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resulttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resulttext().size() > 0) {
    resulttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resulttext_);
  }
  reconnectaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reconnectaddress().size() > 0) {
    reconnectaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reconnectaddress_);
  }
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  symbolexchangedelimiter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbolexchangedelimiter().size() > 0) {
    symbolexchangedelimiter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbolexchangedelimiter_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&marketdatasupported_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(marketdatasupported_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.LogonResponse)
}

void LogonResponse::SharedCtor() {
  resulttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconnectaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolexchangedelimiter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdatasupported_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(marketdatasupported_));
}

LogonResponse::~LogonResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.LogonResponse)
  SharedDtor();
}

void LogonResponse::SharedDtor() {
  resulttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconnectaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolexchangedelimiter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogonResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogonResponse& LogonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_LogonResponse.base);
  return *internal_default_instance();
}


void LogonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.LogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resulttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconnectaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolexchangedelimiter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdatasupported_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(marketdatasupported_));
  _internal_metadata_.Clear();
}

bool LogonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.LogonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.LogonStatusEnum Result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::DTC_PB::LogonStatusEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ResultText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resulttext().data(), static_cast<int>(this->resulttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonResponse.ResultText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ReconnectAddress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reconnectaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reconnectaddress().data(), static_cast<int>(this->reconnectaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonResponse.ReconnectAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Integer_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonResponse.ServerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MarketDepthUpdatesBestBidAndAsk = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthupdatesbestbidandask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingIsSupported = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingissupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OCOOrdersSupported = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ocoorderssupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OrderCancelReplaceSupported = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordercancelreplacesupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SymbolExchangeDelimiter = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbolexchangedelimiter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbolexchangedelimiter().data(), static_cast<int>(this->symbolexchangedelimiter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.LogonResponse.SymbolExchangeDelimiter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SecurityDefinitionsSupported = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &securitydefinitionssupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 HistoricalPriceDataSupported = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historicalpricedatasupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resubscribewhenmarketdatafeedavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MarketDepthIsSupported = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthissupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OneHistoricalPriceDataRequestPerConnection = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onehistoricalpricedatarequestperconnection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 BracketOrdersSupported = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bracketorderssupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UseIntegerPriceOrderMessages = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useintegerpriceordermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usesmultiplepositionspersymbolandtradeaccount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MarketDataSupported = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdatasupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.LogonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.LogonResponse)
  return false;
#undef DO_
}

void LogonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.LogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // .DTC_PB.LogonStatusEnum Result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // string ResultText = 3;
  if (this->resulttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resulttext().data(), static_cast<int>(this->resulttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.ResultText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resulttext(), output);
  }

  // string ReconnectAddress = 4;
  if (this->reconnectaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reconnectaddress().data(), static_cast<int>(this->reconnectaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.ReconnectAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reconnectaddress(), output);
  }

  // int32 Integer_1 = 5;
  if (this->integer_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integer_1(), output);
  }

  // string ServerName = 6;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.ServerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->servername(), output);
  }

  // uint32 MarketDepthUpdatesBestBidAndAsk = 7;
  if (this->marketdepthupdatesbestbidandask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->marketdepthupdatesbestbidandask(), output);
  }

  // uint32 TradingIsSupported = 8;
  if (this->tradingissupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tradingissupported(), output);
  }

  // uint32 OCOOrdersSupported = 9;
  if (this->ocoorderssupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ocoorderssupported(), output);
  }

  // uint32 OrderCancelReplaceSupported = 10;
  if (this->ordercancelreplacesupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ordercancelreplacesupported(), output);
  }

  // string SymbolExchangeDelimiter = 11;
  if (this->symbolexchangedelimiter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbolexchangedelimiter().data(), static_cast<int>(this->symbolexchangedelimiter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.SymbolExchangeDelimiter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->symbolexchangedelimiter(), output);
  }

  // uint32 SecurityDefinitionsSupported = 12;
  if (this->securitydefinitionssupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->securitydefinitionssupported(), output);
  }

  // uint32 HistoricalPriceDataSupported = 13;
  if (this->historicalpricedatasupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->historicalpricedatasupported(), output);
  }

  // uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
  if (this->resubscribewhenmarketdatafeedavailable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->resubscribewhenmarketdatafeedavailable(), output);
  }

  // uint32 MarketDepthIsSupported = 15;
  if (this->marketdepthissupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->marketdepthissupported(), output);
  }

  // uint32 OneHistoricalPriceDataRequestPerConnection = 16;
  if (this->onehistoricalpricedatarequestperconnection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->onehistoricalpricedatarequestperconnection(), output);
  }

  // uint32 BracketOrdersSupported = 17;
  if (this->bracketorderssupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bracketorderssupported(), output);
  }

  // uint32 UseIntegerPriceOrderMessages = 18;
  if (this->useintegerpriceordermessages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->useintegerpriceordermessages(), output);
  }

  // uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
  if (this->usesmultiplepositionspersymbolandtradeaccount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->usesmultiplepositionspersymbolandtradeaccount(), output);
  }

  // uint32 MarketDataSupported = 20;
  if (this->marketdatasupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->marketdatasupported(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.LogonResponse)
}

::google::protobuf::uint8* LogonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.LogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // .DTC_PB.LogonStatusEnum Result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // string ResultText = 3;
  if (this->resulttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resulttext().data(), static_cast<int>(this->resulttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.ResultText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resulttext(), target);
  }

  // string ReconnectAddress = 4;
  if (this->reconnectaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reconnectaddress().data(), static_cast<int>(this->reconnectaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.ReconnectAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reconnectaddress(), target);
  }

  // int32 Integer_1 = 5;
  if (this->integer_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integer_1(), target);
  }

  // string ServerName = 6;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.ServerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->servername(), target);
  }

  // uint32 MarketDepthUpdatesBestBidAndAsk = 7;
  if (this->marketdepthupdatesbestbidandask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->marketdepthupdatesbestbidandask(), target);
  }

  // uint32 TradingIsSupported = 8;
  if (this->tradingissupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tradingissupported(), target);
  }

  // uint32 OCOOrdersSupported = 9;
  if (this->ocoorderssupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ocoorderssupported(), target);
  }

  // uint32 OrderCancelReplaceSupported = 10;
  if (this->ordercancelreplacesupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ordercancelreplacesupported(), target);
  }

  // string SymbolExchangeDelimiter = 11;
  if (this->symbolexchangedelimiter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbolexchangedelimiter().data(), static_cast<int>(this->symbolexchangedelimiter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.LogonResponse.SymbolExchangeDelimiter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->symbolexchangedelimiter(), target);
  }

  // uint32 SecurityDefinitionsSupported = 12;
  if (this->securitydefinitionssupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->securitydefinitionssupported(), target);
  }

  // uint32 HistoricalPriceDataSupported = 13;
  if (this->historicalpricedatasupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->historicalpricedatasupported(), target);
  }

  // uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
  if (this->resubscribewhenmarketdatafeedavailable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->resubscribewhenmarketdatafeedavailable(), target);
  }

  // uint32 MarketDepthIsSupported = 15;
  if (this->marketdepthissupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->marketdepthissupported(), target);
  }

  // uint32 OneHistoricalPriceDataRequestPerConnection = 16;
  if (this->onehistoricalpricedatarequestperconnection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->onehistoricalpricedatarequestperconnection(), target);
  }

  // uint32 BracketOrdersSupported = 17;
  if (this->bracketorderssupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->bracketorderssupported(), target);
  }

  // uint32 UseIntegerPriceOrderMessages = 18;
  if (this->useintegerpriceordermessages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->useintegerpriceordermessages(), target);
  }

  // uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
  if (this->usesmultiplepositionspersymbolandtradeaccount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->usesmultiplepositionspersymbolandtradeaccount(), target);
  }

  // uint32 MarketDataSupported = 20;
  if (this->marketdatasupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->marketdatasupported(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.LogonResponse)
  return target;
}

size_t LogonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.LogonResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ResultText = 3;
  if (this->resulttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resulttext());
  }

  // string ReconnectAddress = 4;
  if (this->reconnectaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reconnectaddress());
  }

  // string ServerName = 6;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // string SymbolExchangeDelimiter = 11;
  if (this->symbolexchangedelimiter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbolexchangedelimiter());
  }

  // int32 ProtocolVersion = 1;
  if (this->protocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocolversion());
  }

  // .DTC_PB.LogonStatusEnum Result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // int32 Integer_1 = 5;
  if (this->integer_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer_1());
  }

  // uint32 MarketDepthUpdatesBestBidAndAsk = 7;
  if (this->marketdepthupdatesbestbidandask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->marketdepthupdatesbestbidandask());
  }

  // uint32 TradingIsSupported = 8;
  if (this->tradingissupported() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingissupported());
  }

  // uint32 OCOOrdersSupported = 9;
  if (this->ocoorderssupported() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ocoorderssupported());
  }

  // uint32 OrderCancelReplaceSupported = 10;
  if (this->ordercancelreplacesupported() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ordercancelreplacesupported());
  }

  // uint32 SecurityDefinitionsSupported = 12;
  if (this->securitydefinitionssupported() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->securitydefinitionssupported());
  }

  // uint32 HistoricalPriceDataSupported = 13;
  if (this->historicalpricedatasupported() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->historicalpricedatasupported());
  }

  // uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
  if (this->resubscribewhenmarketdatafeedavailable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resubscribewhenmarketdatafeedavailable());
  }

  // uint32 MarketDepthIsSupported = 15;
  if (this->marketdepthissupported() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->marketdepthissupported());
  }

  // uint32 OneHistoricalPriceDataRequestPerConnection = 16;
  if (this->onehistoricalpricedatarequestperconnection() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onehistoricalpricedatarequestperconnection());
  }

  // uint32 BracketOrdersSupported = 17;
  if (this->bracketorderssupported() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bracketorderssupported());
  }

  // uint32 UseIntegerPriceOrderMessages = 18;
  if (this->useintegerpriceordermessages() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->useintegerpriceordermessages());
  }

  // uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
  if (this->usesmultiplepositionspersymbolandtradeaccount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usesmultiplepositionspersymbolandtradeaccount());
  }

  // uint32 MarketDataSupported = 20;
  if (this->marketdatasupported() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->marketdatasupported());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.LogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.LogonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.LogonResponse)
    MergeFrom(*source);
  }
}

void LogonResponse::MergeFrom(const LogonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.LogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resulttext().size() > 0) {

    resulttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resulttext_);
  }
  if (from.reconnectaddress().size() > 0) {

    reconnectaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reconnectaddress_);
  }
  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.symbolexchangedelimiter().size() > 0) {

    symbolexchangedelimiter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbolexchangedelimiter_);
  }
  if (from.protocolversion() != 0) {
    set_protocolversion(from.protocolversion());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.integer_1() != 0) {
    set_integer_1(from.integer_1());
  }
  if (from.marketdepthupdatesbestbidandask() != 0) {
    set_marketdepthupdatesbestbidandask(from.marketdepthupdatesbestbidandask());
  }
  if (from.tradingissupported() != 0) {
    set_tradingissupported(from.tradingissupported());
  }
  if (from.ocoorderssupported() != 0) {
    set_ocoorderssupported(from.ocoorderssupported());
  }
  if (from.ordercancelreplacesupported() != 0) {
    set_ordercancelreplacesupported(from.ordercancelreplacesupported());
  }
  if (from.securitydefinitionssupported() != 0) {
    set_securitydefinitionssupported(from.securitydefinitionssupported());
  }
  if (from.historicalpricedatasupported() != 0) {
    set_historicalpricedatasupported(from.historicalpricedatasupported());
  }
  if (from.resubscribewhenmarketdatafeedavailable() != 0) {
    set_resubscribewhenmarketdatafeedavailable(from.resubscribewhenmarketdatafeedavailable());
  }
  if (from.marketdepthissupported() != 0) {
    set_marketdepthissupported(from.marketdepthissupported());
  }
  if (from.onehistoricalpricedatarequestperconnection() != 0) {
    set_onehistoricalpricedatarequestperconnection(from.onehistoricalpricedatarequestperconnection());
  }
  if (from.bracketorderssupported() != 0) {
    set_bracketorderssupported(from.bracketorderssupported());
  }
  if (from.useintegerpriceordermessages() != 0) {
    set_useintegerpriceordermessages(from.useintegerpriceordermessages());
  }
  if (from.usesmultiplepositionspersymbolandtradeaccount() != 0) {
    set_usesmultiplepositionspersymbolandtradeaccount(from.usesmultiplepositionspersymbolandtradeaccount());
  }
  if (from.marketdatasupported() != 0) {
    set_marketdatasupported(from.marketdatasupported());
  }
}

void LogonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.LogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonResponse::CopyFrom(const LogonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.LogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonResponse::IsInitialized() const {
  return true;
}

void LogonResponse::Swap(LogonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogonResponse::InternalSwap(LogonResponse* other) {
  using std::swap;
  resulttext_.Swap(&other->resulttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reconnectaddress_.Swap(&other->reconnectaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbolexchangedelimiter_.Swap(&other->symbolexchangedelimiter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(result_, other->result_);
  swap(integer_1_, other->integer_1_);
  swap(marketdepthupdatesbestbidandask_, other->marketdepthupdatesbestbidandask_);
  swap(tradingissupported_, other->tradingissupported_);
  swap(ocoorderssupported_, other->ocoorderssupported_);
  swap(ordercancelreplacesupported_, other->ordercancelreplacesupported_);
  swap(securitydefinitionssupported_, other->securitydefinitionssupported_);
  swap(historicalpricedatasupported_, other->historicalpricedatasupported_);
  swap(resubscribewhenmarketdatafeedavailable_, other->resubscribewhenmarketdatafeedavailable_);
  swap(marketdepthissupported_, other->marketdepthissupported_);
  swap(onehistoricalpricedatarequestperconnection_, other->onehistoricalpricedatarequestperconnection_);
  swap(bracketorderssupported_, other->bracketorderssupported_);
  swap(useintegerpriceordermessages_, other->useintegerpriceordermessages_);
  swap(usesmultiplepositionspersymbolandtradeaccount_, other->usesmultiplepositionspersymbolandtradeaccount_);
  swap(marketdatasupported_, other->marketdatasupported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogonResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Logoff::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logoff::kReasonFieldNumber;
const int Logoff::kDoNotReconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logoff::Logoff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_Logoff.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.Logoff)
}
Logoff::Logoff(const Logoff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  donotreconnect_ = from.donotreconnect_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.Logoff)
}

void Logoff::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donotreconnect_ = 0u;
}

Logoff::~Logoff() {
  // @@protoc_insertion_point(destructor:DTC_PB.Logoff)
  SharedDtor();
}

void Logoff::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Logoff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Logoff::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Logoff& Logoff::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_Logoff.base);
  return *internal_default_instance();
}


void Logoff::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.Logoff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donotreconnect_ = 0u;
  _internal_metadata_.Clear();
}

bool Logoff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.Logoff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.Logoff.Reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DoNotReconnect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donotreconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.Logoff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.Logoff)
  return false;
#undef DO_
}

void Logoff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.Logoff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.Logoff.Reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // uint32 DoNotReconnect = 2;
  if (this->donotreconnect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->donotreconnect(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.Logoff)
}

::google::protobuf::uint8* Logoff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.Logoff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Reason = 1;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.Logoff.Reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // uint32 DoNotReconnect = 2;
  if (this->donotreconnect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->donotreconnect(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.Logoff)
  return target;
}

size_t Logoff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.Logoff)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // uint32 DoNotReconnect = 2;
  if (this->donotreconnect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->donotreconnect());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logoff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.Logoff)
  GOOGLE_DCHECK_NE(&from, this);
  const Logoff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logoff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.Logoff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.Logoff)
    MergeFrom(*source);
  }
}

void Logoff::MergeFrom(const Logoff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.Logoff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.donotreconnect() != 0) {
    set_donotreconnect(from.donotreconnect());
  }
}

void Logoff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.Logoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logoff::CopyFrom(const Logoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.Logoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logoff::IsInitialized() const {
  return true;
}

void Logoff::Swap(Logoff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logoff::InternalSwap(Logoff* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(donotreconnect_, other->donotreconnect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Logoff::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Heartbeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kNumDroppedMessagesFieldNumber;
const int Heartbeat::kCurrentDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_Heartbeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentdatetime_, &from.currentdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&numdroppedmessages_) -
    reinterpret_cast<char*>(&currentdatetime_)) + sizeof(numdroppedmessages_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.Heartbeat)
}

void Heartbeat::SharedCtor() {
  ::memset(&currentdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numdroppedmessages_) -
      reinterpret_cast<char*>(&currentdatetime_)) + sizeof(numdroppedmessages_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:DTC_PB.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
}

void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Heartbeat& Heartbeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_Heartbeat.base);
  return *internal_default_instance();
}


void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currentdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numdroppedmessages_) -
      reinterpret_cast<char*>(&currentdatetime_)) + sizeof(numdroppedmessages_));
  _internal_metadata_.Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.Heartbeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 NumDroppedMessages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numdroppedmessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 CurrentDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &currentdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 NumDroppedMessages = 1;
  if (this->numdroppedmessages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numdroppedmessages(), output);
  }

  // sfixed64 CurrentDateTime = 2;
  if (this->currentdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->currentdatetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 NumDroppedMessages = 1;
  if (this->numdroppedmessages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numdroppedmessages(), target);
  }

  // sfixed64 CurrentDateTime = 2;
  if (this->currentdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->currentdatetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.Heartbeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed64 CurrentDateTime = 2;
  if (this->currentdatetime() != 0) {
    total_size += 1 + 8;
  }

  // uint32 NumDroppedMessages = 1;
  if (this->numdroppedmessages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numdroppedmessages());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentdatetime() != 0) {
    set_currentdatetime(from.currentdatetime());
  }
  if (from.numdroppedmessages() != 0) {
    set_numdroppedmessages(from.numdroppedmessages());
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  swap(currentdatetime_, other->currentdatetime_);
  swap(numdroppedmessages_, other->numdroppedmessages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataFeedStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataFeedStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataFeedStatus::MarketDataFeedStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataFeedStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataFeedStatus)
}
MarketDataFeedStatus::MarketDataFeedStatus(const MarketDataFeedStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataFeedStatus)
}

void MarketDataFeedStatus::SharedCtor() {
  status_ = 0;
}

MarketDataFeedStatus::~MarketDataFeedStatus() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataFeedStatus)
  SharedDtor();
}

void MarketDataFeedStatus::SharedDtor() {
}

void MarketDataFeedStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataFeedStatus::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataFeedStatus& MarketDataFeedStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataFeedStatus.base);
  return *internal_default_instance();
}


void MarketDataFeedStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataFeedStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

bool MarketDataFeedStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataFeedStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DTC_PB.MarketDataFeedStatusEnum Status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::DTC_PB::MarketDataFeedStatusEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataFeedStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataFeedStatus)
  return false;
#undef DO_
}

void MarketDataFeedStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataFeedStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataFeedStatus)
}

::google::protobuf::uint8* MarketDataFeedStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataFeedStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataFeedStatus)
  return target;
}

size_t MarketDataFeedStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataFeedStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataFeedStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataFeedStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataFeedStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataFeedStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataFeedStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataFeedStatus)
    MergeFrom(*source);
  }
}

void MarketDataFeedStatus::MergeFrom(const MarketDataFeedStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataFeedStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void MarketDataFeedStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataFeedStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataFeedStatus::CopyFrom(const MarketDataFeedStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataFeedStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataFeedStatus::IsInitialized() const {
  return true;
}

void MarketDataFeedStatus::Swap(MarketDataFeedStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataFeedStatus::InternalSwap(MarketDataFeedStatus* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataFeedStatus::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataFeedSymbolStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataFeedSymbolStatus::kSymbolIDFieldNumber;
const int MarketDataFeedSymbolStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataFeedSymbolStatus::MarketDataFeedSymbolStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataFeedSymbolStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataFeedSymbolStatus)
}
MarketDataFeedSymbolStatus::MarketDataFeedSymbolStatus(const MarketDataFeedSymbolStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataFeedSymbolStatus)
}

void MarketDataFeedSymbolStatus::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(status_));
}

MarketDataFeedSymbolStatus::~MarketDataFeedSymbolStatus() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataFeedSymbolStatus)
  SharedDtor();
}

void MarketDataFeedSymbolStatus::SharedDtor() {
}

void MarketDataFeedSymbolStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataFeedSymbolStatus::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataFeedSymbolStatus& MarketDataFeedSymbolStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataFeedSymbolStatus.base);
  return *internal_default_instance();
}


void MarketDataFeedSymbolStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataFeedSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool MarketDataFeedSymbolStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataFeedSymbolStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.MarketDataFeedStatusEnum Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::DTC_PB::MarketDataFeedStatusEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataFeedSymbolStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataFeedSymbolStatus)
  return false;
#undef DO_
}

void MarketDataFeedSymbolStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataFeedSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.MarketDataFeedStatusEnum Status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataFeedSymbolStatus)
}

::google::protobuf::uint8* MarketDataFeedSymbolStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataFeedSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.MarketDataFeedStatusEnum Status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataFeedSymbolStatus)
  return target;
}

size_t MarketDataFeedSymbolStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataFeedSymbolStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.MarketDataFeedStatusEnum Status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataFeedSymbolStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataFeedSymbolStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataFeedSymbolStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataFeedSymbolStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataFeedSymbolStatus)
    MergeFrom(*source);
  }
}

void MarketDataFeedSymbolStatus::MergeFrom(const MarketDataFeedSymbolStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void MarketDataFeedSymbolStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataFeedSymbolStatus::CopyFrom(const MarketDataFeedSymbolStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataFeedSymbolStatus::IsInitialized() const {
  return true;
}

void MarketDataFeedSymbolStatus::Swap(MarketDataFeedSymbolStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataFeedSymbolStatus::InternalSwap(MarketDataFeedSymbolStatus* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataFeedSymbolStatus::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataRequest::kRequestActionFieldNumber;
const int MarketDataRequest::kSymbolIDFieldNumber;
const int MarketDataRequest::kSymbolFieldNumber;
const int MarketDataRequest::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataRequest::MarketDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataRequest)
}
MarketDataRequest::MarketDataRequest(const MarketDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestaction_, &from.requestaction_,
    static_cast<size_t>(reinterpret_cast<char*>(&symbolid_) -
    reinterpret_cast<char*>(&requestaction_)) + sizeof(symbolid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataRequest)
}

void MarketDataRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&requestaction_)) + sizeof(symbolid_));
}

MarketDataRequest::~MarketDataRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataRequest)
  SharedDtor();
}

void MarketDataRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataRequest& MarketDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataRequest.base);
  return *internal_default_instance();
}


void MarketDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&requestaction_)) + sizeof(symbolid_));
  _internal_metadata_.Clear();
}

bool MarketDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DTC_PB.RequestActionEnum RequestAction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SymbolID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.MarketDataRequest.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.MarketDataRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataRequest)
  return false;
#undef DO_
}

void MarketDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTC_PB.RequestActionEnum RequestAction = 1;
  if (this->requestaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requestaction(), output);
  }

  // uint32 SymbolID = 2;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->symbolid(), output);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDataRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // string Exchange = 4;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDataRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataRequest)
}

::google::protobuf::uint8* MarketDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTC_PB.RequestActionEnum RequestAction = 1;
  if (this->requestaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requestaction(), target);
  }

  // uint32 SymbolID = 2;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->symbolid(), target);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDataRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // string Exchange = 4;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDataRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataRequest)
  return target;
}

size_t MarketDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 4;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // .DTC_PB.RequestActionEnum RequestAction = 1;
  if (this->requestaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
  }

  // uint32 SymbolID = 2;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataRequest)
    MergeFrom(*source);
  }
}

void MarketDataRequest::MergeFrom(const MarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.requestaction() != 0) {
    set_requestaction(from.requestaction());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
}

void MarketDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataRequest::CopyFrom(const MarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataRequest::IsInitialized() const {
  return true;
}

void MarketDataRequest::Swap(MarketDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataRequest::InternalSwap(MarketDataRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestaction_, other->requestaction_);
  swap(symbolid_, other->symbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthRequest::kRequestActionFieldNumber;
const int MarketDepthRequest::kSymbolIDFieldNumber;
const int MarketDepthRequest::kSymbolFieldNumber;
const int MarketDepthRequest::kExchangeFieldNumber;
const int MarketDepthRequest::kNumLevelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthRequest::MarketDepthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthRequest)
}
MarketDepthRequest::MarketDepthRequest(const MarketDepthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestaction_, &from.requestaction_,
    static_cast<size_t>(reinterpret_cast<char*>(&numlevels_) -
    reinterpret_cast<char*>(&requestaction_)) + sizeof(numlevels_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthRequest)
}

void MarketDepthRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numlevels_) -
      reinterpret_cast<char*>(&requestaction_)) + sizeof(numlevels_));
}

MarketDepthRequest::~MarketDepthRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthRequest)
  SharedDtor();
}

void MarketDepthRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthRequest& MarketDepthRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthRequest.base);
  return *internal_default_instance();
}


void MarketDepthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numlevels_) -
      reinterpret_cast<char*>(&requestaction_)) + sizeof(numlevels_));
  _internal_metadata_.Clear();
}

bool MarketDepthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DTC_PB.RequestActionEnum RequestAction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SymbolID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.MarketDepthRequest.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.MarketDepthRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 NumLevels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlevels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthRequest)
  return false;
#undef DO_
}

void MarketDepthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTC_PB.RequestActionEnum RequestAction = 1;
  if (this->requestaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requestaction(), output);
  }

  // uint32 SymbolID = 2;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->symbolid(), output);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // string Exchange = 4;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange(), output);
  }

  // int32 NumLevels = 5;
  if (this->numlevels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numlevels(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthRequest)
}

::google::protobuf::uint8* MarketDepthRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTC_PB.RequestActionEnum RequestAction = 1;
  if (this->requestaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requestaction(), target);
  }

  // uint32 SymbolID = 2;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->symbolid(), target);
  }

  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // string Exchange = 4;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange(), target);
  }

  // int32 NumLevels = 5;
  if (this->numlevels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numlevels(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthRequest)
  return target;
}

size_t MarketDepthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 4;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // .DTC_PB.RequestActionEnum RequestAction = 1;
  if (this->requestaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
  }

  // uint32 SymbolID = 2;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 NumLevels = 5;
  if (this->numlevels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numlevels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthRequest)
    MergeFrom(*source);
  }
}

void MarketDepthRequest::MergeFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.requestaction() != 0) {
    set_requestaction(from.requestaction());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.numlevels() != 0) {
    set_numlevels(from.numlevels());
  }
}

void MarketDepthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthRequest::CopyFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthRequest::IsInitialized() const {
  return true;
}

void MarketDepthRequest::Swap(MarketDepthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthRequest::InternalSwap(MarketDepthRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestaction_, other->requestaction_);
  swap(symbolid_, other->symbolid_);
  swap(numlevels_, other->numlevels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataReject::kSymbolIDFieldNumber;
const int MarketDataReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataReject::MarketDataReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataReject)
}
MarketDataReject::MarketDataReject(const MarketDataReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataReject)
}

void MarketDataReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolid_ = 0u;
}

MarketDataReject::~MarketDataReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataReject)
  SharedDtor();
}

void MarketDataReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDataReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataReject& MarketDataReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataReject.base);
  return *internal_default_instance();
}


void MarketDataReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolid_ = 0u;
  _internal_metadata_.Clear();
}

bool MarketDataReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.MarketDataReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataReject)
  return false;
#undef DO_
}

void MarketDataReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDataReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataReject)
}

::google::protobuf::uint8* MarketDataReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDataReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataReject)
  return target;
}

size_t MarketDataReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataReject)
    MergeFrom(*source);
  }
}

void MarketDataReject::MergeFrom(const MarketDataReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
}

void MarketDataReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataReject::CopyFrom(const MarketDataReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataReject::IsInitialized() const {
  return true;
}

void MarketDataReject::Swap(MarketDataReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataReject::InternalSwap(MarketDataReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataSnapshot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSnapshot::kSymbolIDFieldNumber;
const int MarketDataSnapshot::kSessionSettlementPriceFieldNumber;
const int MarketDataSnapshot::kSessionOpenPriceFieldNumber;
const int MarketDataSnapshot::kSessionHighPriceFieldNumber;
const int MarketDataSnapshot::kSessionLowPriceFieldNumber;
const int MarketDataSnapshot::kSessionVolumeFieldNumber;
const int MarketDataSnapshot::kSessionNumTradesFieldNumber;
const int MarketDataSnapshot::kOpenInterestFieldNumber;
const int MarketDataSnapshot::kBidPriceFieldNumber;
const int MarketDataSnapshot::kAskPriceFieldNumber;
const int MarketDataSnapshot::kAskQuantityFieldNumber;
const int MarketDataSnapshot::kBidQuantityFieldNumber;
const int MarketDataSnapshot::kLastTradePriceFieldNumber;
const int MarketDataSnapshot::kLastTradeVolumeFieldNumber;
const int MarketDataSnapshot::kLastTradeDateTimeFieldNumber;
const int MarketDataSnapshot::kBidAskDateTimeFieldNumber;
const int MarketDataSnapshot::kSessionSettlementDateTimeFieldNumber;
const int MarketDataSnapshot::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSnapshot::MarketDataSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataSnapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataSnapshot)
}
MarketDataSnapshot::MarketDataSnapshot(const MarketDataSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionsettlementprice_, &from.sessionsettlementprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&sessionsettlementprice_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataSnapshot)
}

void MarketDataSnapshot::SharedCtor() {
  ::memset(&sessionsettlementprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&sessionsettlementprice_)) + sizeof(tradingsessiondate_));
}

MarketDataSnapshot::~MarketDataSnapshot() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataSnapshot)
  SharedDtor();
}

void MarketDataSnapshot::SharedDtor() {
}

void MarketDataSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataSnapshot::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataSnapshot& MarketDataSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataSnapshot.base);
  return *internal_default_instance();
}


void MarketDataSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sessionsettlementprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&sessionsettlementprice_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SessionSettlementPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionsettlementprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SessionOpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionopenprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SessionHighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionhighprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SessionLowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionlowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SessionVolume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SessionNumTrades = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionnumtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OpenInterest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BidPrice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AskPrice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AskQuantity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BidQuantity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastTradePrice = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastTradeVolume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastTradeDateTime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BidAskDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidaskdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SessionSettlementDateTime = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionsettlementdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataSnapshot)
  return false;
#undef DO_
}

void MarketDataSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double SessionSettlementPrice = 2;
  if (this->sessionsettlementprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sessionsettlementprice(), output);
  }

  // double SessionOpenPrice = 3;
  if (this->sessionopenprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sessionopenprice(), output);
  }

  // double SessionHighPrice = 4;
  if (this->sessionhighprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sessionhighprice(), output);
  }

  // double SessionLowPrice = 5;
  if (this->sessionlowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sessionlowprice(), output);
  }

  // double SessionVolume = 6;
  if (this->sessionvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sessionvolume(), output);
  }

  // uint32 SessionNumTrades = 7;
  if (this->sessionnumtrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionnumtrades(), output);
  }

  // uint32 OpenInterest = 8;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->openinterest(), output);
  }

  // double BidPrice = 9;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidprice(), output);
  }

  // double AskPrice = 10;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askprice(), output);
  }

  // double AskQuantity = 11;
  if (this->askquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->askquantity(), output);
  }

  // double BidQuantity = 12;
  if (this->bidquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->bidquantity(), output);
  }

  // double LastTradePrice = 13;
  if (this->lasttradeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lasttradeprice(), output);
  }

  // double LastTradeVolume = 14;
  if (this->lasttradevolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->lasttradevolume(), output);
  }

  // double LastTradeDateTime = 15;
  if (this->lasttradedatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lasttradedatetime(), output);
  }

  // double BidAskDateTime = 16;
  if (this->bidaskdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidaskdatetime(), output);
  }

  // uint32 SessionSettlementDateTime = 17;
  if (this->sessionsettlementdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sessionsettlementdatetime(), output);
  }

  // uint32 TradingSessionDate = 18;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataSnapshot)
}

::google::protobuf::uint8* MarketDataSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double SessionSettlementPrice = 2;
  if (this->sessionsettlementprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sessionsettlementprice(), target);
  }

  // double SessionOpenPrice = 3;
  if (this->sessionopenprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sessionopenprice(), target);
  }

  // double SessionHighPrice = 4;
  if (this->sessionhighprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sessionhighprice(), target);
  }

  // double SessionLowPrice = 5;
  if (this->sessionlowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sessionlowprice(), target);
  }

  // double SessionVolume = 6;
  if (this->sessionvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sessionvolume(), target);
  }

  // uint32 SessionNumTrades = 7;
  if (this->sessionnumtrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionnumtrades(), target);
  }

  // uint32 OpenInterest = 8;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->openinterest(), target);
  }

  // double BidPrice = 9;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidprice(), target);
  }

  // double AskPrice = 10;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askprice(), target);
  }

  // double AskQuantity = 11;
  if (this->askquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->askquantity(), target);
  }

  // double BidQuantity = 12;
  if (this->bidquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->bidquantity(), target);
  }

  // double LastTradePrice = 13;
  if (this->lasttradeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lasttradeprice(), target);
  }

  // double LastTradeVolume = 14;
  if (this->lasttradevolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->lasttradevolume(), target);
  }

  // double LastTradeDateTime = 15;
  if (this->lasttradedatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lasttradedatetime(), target);
  }

  // double BidAskDateTime = 16;
  if (this->bidaskdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidaskdatetime(), target);
  }

  // uint32 SessionSettlementDateTime = 17;
  if (this->sessionsettlementdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sessionsettlementdatetime(), target);
  }

  // uint32 TradingSessionDate = 18;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataSnapshot)
  return target;
}

size_t MarketDataSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataSnapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double SessionSettlementPrice = 2;
  if (this->sessionsettlementprice() != 0) {
    total_size += 1 + 8;
  }

  // double SessionOpenPrice = 3;
  if (this->sessionopenprice() != 0) {
    total_size += 1 + 8;
  }

  // double SessionHighPrice = 4;
  if (this->sessionhighprice() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 SessionNumTrades = 7;
  if (this->sessionnumtrades() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessionnumtrades());
  }

  // double SessionLowPrice = 5;
  if (this->sessionlowprice() != 0) {
    total_size += 1 + 8;
  }

  // double SessionVolume = 6;
  if (this->sessionvolume() != 0) {
    total_size += 1 + 8;
  }

  // double BidPrice = 9;
  if (this->bidprice() != 0) {
    total_size += 1 + 8;
  }

  // double AskPrice = 10;
  if (this->askprice() != 0) {
    total_size += 1 + 8;
  }

  // double AskQuantity = 11;
  if (this->askquantity() != 0) {
    total_size += 1 + 8;
  }

  // double BidQuantity = 12;
  if (this->bidquantity() != 0) {
    total_size += 1 + 8;
  }

  // uint32 OpenInterest = 8;
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->openinterest());
  }

  // uint32 SessionSettlementDateTime = 17;
  if (this->sessionsettlementdatetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessionsettlementdatetime());
  }

  // double LastTradePrice = 13;
  if (this->lasttradeprice() != 0) {
    total_size += 1 + 8;
  }

  // double LastTradeVolume = 14;
  if (this->lasttradevolume() != 0) {
    total_size += 1 + 8;
  }

  // double LastTradeDateTime = 15;
  if (this->lasttradedatetime() != 0) {
    total_size += 1 + 8;
  }

  // double BidAskDateTime = 16;
  if (this->bidaskdatetime() != 0) {
    total_size += 2 + 8;
  }

  // uint32 TradingSessionDate = 18;
  if (this->tradingsessiondate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataSnapshot)
    MergeFrom(*source);
  }
}

void MarketDataSnapshot::MergeFrom(const MarketDataSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionsettlementprice() != 0) {
    set_sessionsettlementprice(from.sessionsettlementprice());
  }
  if (from.sessionopenprice() != 0) {
    set_sessionopenprice(from.sessionopenprice());
  }
  if (from.sessionhighprice() != 0) {
    set_sessionhighprice(from.sessionhighprice());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.sessionnumtrades() != 0) {
    set_sessionnumtrades(from.sessionnumtrades());
  }
  if (from.sessionlowprice() != 0) {
    set_sessionlowprice(from.sessionlowprice());
  }
  if (from.sessionvolume() != 0) {
    set_sessionvolume(from.sessionvolume());
  }
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.askquantity() != 0) {
    set_askquantity(from.askquantity());
  }
  if (from.bidquantity() != 0) {
    set_bidquantity(from.bidquantity());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.sessionsettlementdatetime() != 0) {
    set_sessionsettlementdatetime(from.sessionsettlementdatetime());
  }
  if (from.lasttradeprice() != 0) {
    set_lasttradeprice(from.lasttradeprice());
  }
  if (from.lasttradevolume() != 0) {
    set_lasttradevolume(from.lasttradevolume());
  }
  if (from.lasttradedatetime() != 0) {
    set_lasttradedatetime(from.lasttradedatetime());
  }
  if (from.bidaskdatetime() != 0) {
    set_bidaskdatetime(from.bidaskdatetime());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSnapshot::CopyFrom(const MarketDataSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSnapshot::IsInitialized() const {
  return true;
}

void MarketDataSnapshot::Swap(MarketDataSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSnapshot::InternalSwap(MarketDataSnapshot* other) {
  using std::swap;
  swap(sessionsettlementprice_, other->sessionsettlementprice_);
  swap(sessionopenprice_, other->sessionopenprice_);
  swap(sessionhighprice_, other->sessionhighprice_);
  swap(symbolid_, other->symbolid_);
  swap(sessionnumtrades_, other->sessionnumtrades_);
  swap(sessionlowprice_, other->sessionlowprice_);
  swap(sessionvolume_, other->sessionvolume_);
  swap(bidprice_, other->bidprice_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(bidquantity_, other->bidquantity_);
  swap(openinterest_, other->openinterest_);
  swap(sessionsettlementdatetime_, other->sessionsettlementdatetime_);
  swap(lasttradeprice_, other->lasttradeprice_);
  swap(lasttradevolume_, other->lasttradevolume_);
  swap(lasttradedatetime_, other->lasttradedatetime_);
  swap(bidaskdatetime_, other->bidaskdatetime_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataSnapshot::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataSnapshot_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSnapshot_Int::kSymbolIDFieldNumber;
const int MarketDataSnapshot_Int::kSessionSettlementPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionOpenPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionHighPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionLowPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionVolumeFieldNumber;
const int MarketDataSnapshot_Int::kSessionNumTradesFieldNumber;
const int MarketDataSnapshot_Int::kOpenInterestFieldNumber;
const int MarketDataSnapshot_Int::kBidPriceFieldNumber;
const int MarketDataSnapshot_Int::kAskPriceFieldNumber;
const int MarketDataSnapshot_Int::kAskQuantityFieldNumber;
const int MarketDataSnapshot_Int::kBidQuantityFieldNumber;
const int MarketDataSnapshot_Int::kLastTradePriceFieldNumber;
const int MarketDataSnapshot_Int::kLastTradeVolumeFieldNumber;
const int MarketDataSnapshot_Int::kLastTradeDateTimeFieldNumber;
const int MarketDataSnapshot_Int::kBidAskDateTimeFieldNumber;
const int MarketDataSnapshot_Int::kSessionSettlementDateTimeFieldNumber;
const int MarketDataSnapshot_Int::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSnapshot_Int::MarketDataSnapshot_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataSnapshot_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataSnapshot_Int)
}
MarketDataSnapshot_Int::MarketDataSnapshot_Int(const MarketDataSnapshot_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataSnapshot_Int)
}

void MarketDataSnapshot_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataSnapshot_Int::~MarketDataSnapshot_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataSnapshot_Int)
  SharedDtor();
}

void MarketDataSnapshot_Int::SharedDtor() {
}

void MarketDataSnapshot_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataSnapshot_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataSnapshot_Int& MarketDataSnapshot_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataSnapshot_Int.base);
  return *internal_default_instance();
}


void MarketDataSnapshot_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataSnapshot_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataSnapshot_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataSnapshot_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SessionSettlementPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionsettlementprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SessionOpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionopenprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SessionHighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionhighprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SessionLowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionlowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SessionVolume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SessionNumTrades = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionnumtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OpenInterest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BidPrice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AskPrice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AskQuantity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BidQuantity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastTradePrice = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttradeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastTradeVolume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttradevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastTradeDateTime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BidAskDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidaskdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SessionSettlementDateTime = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionsettlementdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataSnapshot_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataSnapshot_Int)
  return false;
#undef DO_
}

void MarketDataSnapshot_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataSnapshot_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // int32 SessionSettlementPrice = 2;
  if (this->sessionsettlementprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionsettlementprice(), output);
  }

  // int32 SessionOpenPrice = 3;
  if (this->sessionopenprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionopenprice(), output);
  }

  // int32 SessionHighPrice = 4;
  if (this->sessionhighprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionhighprice(), output);
  }

  // int32 SessionLowPrice = 5;
  if (this->sessionlowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sessionlowprice(), output);
  }

  // int32 SessionVolume = 6;
  if (this->sessionvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sessionvolume(), output);
  }

  // uint32 SessionNumTrades = 7;
  if (this->sessionnumtrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionnumtrades(), output);
  }

  // uint32 OpenInterest = 8;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->openinterest(), output);
  }

  // int32 BidPrice = 9;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidprice(), output);
  }

  // int32 AskPrice = 10;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->askprice(), output);
  }

  // int32 AskQuantity = 11;
  if (this->askquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->askquantity(), output);
  }

  // int32 BidQuantity = 12;
  if (this->bidquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bidquantity(), output);
  }

  // int32 LastTradePrice = 13;
  if (this->lasttradeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lasttradeprice(), output);
  }

  // int32 LastTradeVolume = 14;
  if (this->lasttradevolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lasttradevolume(), output);
  }

  // double LastTradeDateTime = 15;
  if (this->lasttradedatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lasttradedatetime(), output);
  }

  // double BidAskDateTime = 16;
  if (this->bidaskdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidaskdatetime(), output);
  }

  // uint32 SessionSettlementDateTime = 17;
  if (this->sessionsettlementdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sessionsettlementdatetime(), output);
  }

  // uint32 TradingSessionDate = 18;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataSnapshot_Int)
}

::google::protobuf::uint8* MarketDataSnapshot_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataSnapshot_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // int32 SessionSettlementPrice = 2;
  if (this->sessionsettlementprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sessionsettlementprice(), target);
  }

  // int32 SessionOpenPrice = 3;
  if (this->sessionopenprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sessionopenprice(), target);
  }

  // int32 SessionHighPrice = 4;
  if (this->sessionhighprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionhighprice(), target);
  }

  // int32 SessionLowPrice = 5;
  if (this->sessionlowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sessionlowprice(), target);
  }

  // int32 SessionVolume = 6;
  if (this->sessionvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sessionvolume(), target);
  }

  // uint32 SessionNumTrades = 7;
  if (this->sessionnumtrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionnumtrades(), target);
  }

  // uint32 OpenInterest = 8;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->openinterest(), target);
  }

  // int32 BidPrice = 9;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidprice(), target);
  }

  // int32 AskPrice = 10;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->askprice(), target);
  }

  // int32 AskQuantity = 11;
  if (this->askquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->askquantity(), target);
  }

  // int32 BidQuantity = 12;
  if (this->bidquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bidquantity(), target);
  }

  // int32 LastTradePrice = 13;
  if (this->lasttradeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lasttradeprice(), target);
  }

  // int32 LastTradeVolume = 14;
  if (this->lasttradevolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lasttradevolume(), target);
  }

  // double LastTradeDateTime = 15;
  if (this->lasttradedatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lasttradedatetime(), target);
  }

  // double BidAskDateTime = 16;
  if (this->bidaskdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidaskdatetime(), target);
  }

  // uint32 SessionSettlementDateTime = 17;
  if (this->sessionsettlementdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sessionsettlementdatetime(), target);
  }

  // uint32 TradingSessionDate = 18;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataSnapshot_Int)
  return target;
}

size_t MarketDataSnapshot_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataSnapshot_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 SessionSettlementPrice = 2;
  if (this->sessionsettlementprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionsettlementprice());
  }

  // int32 SessionOpenPrice = 3;
  if (this->sessionopenprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionopenprice());
  }

  // int32 SessionHighPrice = 4;
  if (this->sessionhighprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionhighprice());
  }

  // int32 SessionLowPrice = 5;
  if (this->sessionlowprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionlowprice());
  }

  // int32 SessionVolume = 6;
  if (this->sessionvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionvolume());
  }

  // uint32 SessionNumTrades = 7;
  if (this->sessionnumtrades() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessionnumtrades());
  }

  // uint32 OpenInterest = 8;
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->openinterest());
  }

  // int32 BidPrice = 9;
  if (this->bidprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bidprice());
  }

  // int32 AskPrice = 10;
  if (this->askprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->askprice());
  }

  // int32 AskQuantity = 11;
  if (this->askquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->askquantity());
  }

  // int32 BidQuantity = 12;
  if (this->bidquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bidquantity());
  }

  // int32 LastTradePrice = 13;
  if (this->lasttradeprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasttradeprice());
  }

  // int32 LastTradeVolume = 14;
  if (this->lasttradevolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasttradevolume());
  }

  // double LastTradeDateTime = 15;
  if (this->lasttradedatetime() != 0) {
    total_size += 1 + 8;
  }

  // double BidAskDateTime = 16;
  if (this->bidaskdatetime() != 0) {
    total_size += 2 + 8;
  }

  // uint32 SessionSettlementDateTime = 17;
  if (this->sessionsettlementdatetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessionsettlementdatetime());
  }

  // uint32 TradingSessionDate = 18;
  if (this->tradingsessiondate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataSnapshot_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataSnapshot_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataSnapshot_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataSnapshot_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataSnapshot_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataSnapshot_Int)
    MergeFrom(*source);
  }
}

void MarketDataSnapshot_Int::MergeFrom(const MarketDataSnapshot_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataSnapshot_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.sessionsettlementprice() != 0) {
    set_sessionsettlementprice(from.sessionsettlementprice());
  }
  if (from.sessionopenprice() != 0) {
    set_sessionopenprice(from.sessionopenprice());
  }
  if (from.sessionhighprice() != 0) {
    set_sessionhighprice(from.sessionhighprice());
  }
  if (from.sessionlowprice() != 0) {
    set_sessionlowprice(from.sessionlowprice());
  }
  if (from.sessionvolume() != 0) {
    set_sessionvolume(from.sessionvolume());
  }
  if (from.sessionnumtrades() != 0) {
    set_sessionnumtrades(from.sessionnumtrades());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.askquantity() != 0) {
    set_askquantity(from.askquantity());
  }
  if (from.bidquantity() != 0) {
    set_bidquantity(from.bidquantity());
  }
  if (from.lasttradeprice() != 0) {
    set_lasttradeprice(from.lasttradeprice());
  }
  if (from.lasttradevolume() != 0) {
    set_lasttradevolume(from.lasttradevolume());
  }
  if (from.lasttradedatetime() != 0) {
    set_lasttradedatetime(from.lasttradedatetime());
  }
  if (from.bidaskdatetime() != 0) {
    set_bidaskdatetime(from.bidaskdatetime());
  }
  if (from.sessionsettlementdatetime() != 0) {
    set_sessionsettlementdatetime(from.sessionsettlementdatetime());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataSnapshot_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataSnapshot_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSnapshot_Int::CopyFrom(const MarketDataSnapshot_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataSnapshot_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSnapshot_Int::IsInitialized() const {
  return true;
}

void MarketDataSnapshot_Int::Swap(MarketDataSnapshot_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSnapshot_Int::InternalSwap(MarketDataSnapshot_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(sessionsettlementprice_, other->sessionsettlementprice_);
  swap(sessionopenprice_, other->sessionopenprice_);
  swap(sessionhighprice_, other->sessionhighprice_);
  swap(sessionlowprice_, other->sessionlowprice_);
  swap(sessionvolume_, other->sessionvolume_);
  swap(sessionnumtrades_, other->sessionnumtrades_);
  swap(openinterest_, other->openinterest_);
  swap(bidprice_, other->bidprice_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(bidquantity_, other->bidquantity_);
  swap(lasttradeprice_, other->lasttradeprice_);
  swap(lasttradevolume_, other->lasttradevolume_);
  swap(lasttradedatetime_, other->lasttradedatetime_);
  swap(bidaskdatetime_, other->bidaskdatetime_);
  swap(sessionsettlementdatetime_, other->sessionsettlementdatetime_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataSnapshot_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DepthEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthEntry::kPriceFieldNumber;
const int DepthEntry::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthEntry::DepthEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_DepthEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.DepthEntry)
}
DepthEntry::DepthEntry(const DepthEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.DepthEntry)
}

void DepthEntry::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
}

DepthEntry::~DepthEntry() {
  // @@protoc_insertion_point(destructor:DTC_PB.DepthEntry)
  SharedDtor();
}

void DepthEntry::SharedDtor() {
}

void DepthEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DepthEntry::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthEntry& DepthEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_DepthEntry.base);
  return *internal_default_instance();
}


void DepthEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.DepthEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  _internal_metadata_.Clear();
}

bool DepthEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.DepthEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double Price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Quantity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.DepthEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.DepthEntry)
  return false;
#undef DO_
}

void DepthEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.DepthEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Price = 1;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // float Quantity = 12;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->quantity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.DepthEntry)
}

::google::protobuf::uint8* DepthEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.DepthEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Price = 1;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // float Quantity = 12;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->quantity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.DepthEntry)
  return target;
}

size_t DepthEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.DepthEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double Price = 1;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // float Quantity = 12;
  if (this->quantity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.DepthEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.DepthEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.DepthEntry)
    MergeFrom(*source);
  }
}

void DepthEntry::MergeFrom(const DepthEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.DepthEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
}

void DepthEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.DepthEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthEntry::CopyFrom(const DepthEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.DepthEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthEntry::IsInitialized() const {
  return true;
}

void DepthEntry::Swap(DepthEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthEntry::InternalSwap(DepthEntry* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DepthEntry::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthFullUpdate20::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthFullUpdate20::kSymbolIDFieldNumber;
const int MarketDepthFullUpdate20::kBidDepthFieldNumber;
const int MarketDepthFullUpdate20::kAskDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthFullUpdate20::MarketDepthFullUpdate20()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthFullUpdate20.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthFullUpdate20)
}
MarketDepthFullUpdate20::MarketDepthFullUpdate20(const MarketDepthFullUpdate20& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      biddepth_(from.biddepth_),
      askdepth_(from.askdepth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthFullUpdate20)
}

void MarketDepthFullUpdate20::SharedCtor() {
  symbolid_ = 0u;
}

MarketDepthFullUpdate20::~MarketDepthFullUpdate20() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthFullUpdate20)
  SharedDtor();
}

void MarketDepthFullUpdate20::SharedDtor() {
}

void MarketDepthFullUpdate20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthFullUpdate20::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthFullUpdate20& MarketDepthFullUpdate20::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthFullUpdate20.base);
  return *internal_default_instance();
}


void MarketDepthFullUpdate20::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthFullUpdate20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  biddepth_.Clear();
  askdepth_.Clear();
  symbolid_ = 0u;
  _internal_metadata_.Clear();
}

bool MarketDepthFullUpdate20::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthFullUpdate20)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry BidDepth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_biddepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry AskDepth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_askdepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthFullUpdate20)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthFullUpdate20)
  return false;
#undef DO_
}

void MarketDepthFullUpdate20::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthFullUpdate20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->biddepth(static_cast<int>(i)),
      output);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->askdepth(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthFullUpdate20)
}

::google::protobuf::uint8* MarketDepthFullUpdate20::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthFullUpdate20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->biddepth(static_cast<int>(i)), deterministic, target);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->askdepth(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthFullUpdate20)
  return target;
}

size_t MarketDepthFullUpdate20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthFullUpdate20)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->biddepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->biddepth(static_cast<int>(i)));
    }
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->askdepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->askdepth(static_cast<int>(i)));
    }
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthFullUpdate20::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthFullUpdate20)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthFullUpdate20* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthFullUpdate20>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthFullUpdate20)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthFullUpdate20)
    MergeFrom(*source);
  }
}

void MarketDepthFullUpdate20::MergeFrom(const MarketDepthFullUpdate20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthFullUpdate20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  biddepth_.MergeFrom(from.biddepth_);
  askdepth_.MergeFrom(from.askdepth_);
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
}

void MarketDepthFullUpdate20::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthFullUpdate20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthFullUpdate20::CopyFrom(const MarketDepthFullUpdate20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthFullUpdate20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthFullUpdate20::IsInitialized() const {
  return true;
}

void MarketDepthFullUpdate20::Swap(MarketDepthFullUpdate20* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthFullUpdate20::InternalSwap(MarketDepthFullUpdate20* other) {
  using std::swap;
  CastToBase(&biddepth_)->InternalSwap(CastToBase(&other->biddepth_));
  CastToBase(&askdepth_)->InternalSwap(CastToBase(&other->askdepth_));
  swap(symbolid_, other->symbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthFullUpdate20::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthFullUpdate10::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthFullUpdate10::kSymbolIDFieldNumber;
const int MarketDepthFullUpdate10::kBidDepthFieldNumber;
const int MarketDepthFullUpdate10::kAskDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthFullUpdate10::MarketDepthFullUpdate10()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthFullUpdate10.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthFullUpdate10)
}
MarketDepthFullUpdate10::MarketDepthFullUpdate10(const MarketDepthFullUpdate10& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      biddepth_(from.biddepth_),
      askdepth_(from.askdepth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthFullUpdate10)
}

void MarketDepthFullUpdate10::SharedCtor() {
  symbolid_ = 0u;
}

MarketDepthFullUpdate10::~MarketDepthFullUpdate10() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthFullUpdate10)
  SharedDtor();
}

void MarketDepthFullUpdate10::SharedDtor() {
}

void MarketDepthFullUpdate10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthFullUpdate10::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthFullUpdate10& MarketDepthFullUpdate10::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthFullUpdate10.base);
  return *internal_default_instance();
}


void MarketDepthFullUpdate10::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthFullUpdate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  biddepth_.Clear();
  askdepth_.Clear();
  symbolid_ = 0u;
  _internal_metadata_.Clear();
}

bool MarketDepthFullUpdate10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthFullUpdate10)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry BidDepth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_biddepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry AskDepth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_askdepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthFullUpdate10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthFullUpdate10)
  return false;
#undef DO_
}

void MarketDepthFullUpdate10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthFullUpdate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->biddepth(static_cast<int>(i)),
      output);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->askdepth(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthFullUpdate10)
}

::google::protobuf::uint8* MarketDepthFullUpdate10::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthFullUpdate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->biddepth(static_cast<int>(i)), deterministic, target);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->askdepth(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthFullUpdate10)
  return target;
}

size_t MarketDepthFullUpdate10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthFullUpdate10)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->biddepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->biddepth(static_cast<int>(i)));
    }
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->askdepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->askdepth(static_cast<int>(i)));
    }
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthFullUpdate10::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthFullUpdate10)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthFullUpdate10* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthFullUpdate10>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthFullUpdate10)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthFullUpdate10)
    MergeFrom(*source);
  }
}

void MarketDepthFullUpdate10::MergeFrom(const MarketDepthFullUpdate10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthFullUpdate10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  biddepth_.MergeFrom(from.biddepth_);
  askdepth_.MergeFrom(from.askdepth_);
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
}

void MarketDepthFullUpdate10::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthFullUpdate10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthFullUpdate10::CopyFrom(const MarketDepthFullUpdate10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthFullUpdate10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthFullUpdate10::IsInitialized() const {
  return true;
}

void MarketDepthFullUpdate10::Swap(MarketDepthFullUpdate10* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthFullUpdate10::InternalSwap(MarketDepthFullUpdate10* other) {
  using std::swap;
  CastToBase(&biddepth_)->InternalSwap(CastToBase(&other->biddepth_));
  CastToBase(&askdepth_)->InternalSwap(CastToBase(&other->askdepth_));
  swap(symbolid_, other->symbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthFullUpdate10::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthSnapshotLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthSnapshotLevel::kSymbolIDFieldNumber;
const int MarketDepthSnapshotLevel::kSideFieldNumber;
const int MarketDepthSnapshotLevel::kPriceFieldNumber;
const int MarketDepthSnapshotLevel::kQuantityFieldNumber;
const int MarketDepthSnapshotLevel::kLevelFieldNumber;
const int MarketDepthSnapshotLevel::kIsFirstMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel::kIsLastMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel::kDateTimeFieldNumber;
const int MarketDepthSnapshotLevel::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthSnapshotLevel::MarketDepthSnapshotLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthSnapshotLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthSnapshotLevel)
}
MarketDepthSnapshotLevel::MarketDepthSnapshotLevel(const MarketDepthSnapshotLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthSnapshotLevel)
}

void MarketDepthSnapshotLevel::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthSnapshotLevel::~MarketDepthSnapshotLevel() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthSnapshotLevel)
  SharedDtor();
}

void MarketDepthSnapshotLevel::SharedDtor() {
}

void MarketDepthSnapshotLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthSnapshotLevel& MarketDepthSnapshotLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthSnapshotLevel.base);
  return *internal_default_instance();
}


void MarketDepthSnapshotLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthSnapshotLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  _internal_metadata_.Clear();
}

bool MarketDepthSnapshotLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthSnapshotLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFirstMessageInBatch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsLastMessageInBatch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islastmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NumOrders = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthSnapshotLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthSnapshotLevel)
  return false;
#undef DO_
}

void MarketDepthSnapshotLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthSnapshotLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // double Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // double Quantity = 4;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quantity(), output);
  }

  // uint32 Level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // uint32 IsFirstMessageInBatch = 6;
  if (this->isfirstmessageinbatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfirstmessageinbatch(), output);
  }

  // uint32 IsLastMessageInBatch = 7;
  if (this->islastmessageinbatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->islastmessageinbatch(), output);
  }

  // double DateTime = 8;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->datetime(), output);
  }

  // uint32 NumOrders = 9;
  if (this->numorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->numorders(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthSnapshotLevel)
}

::google::protobuf::uint8* MarketDepthSnapshotLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthSnapshotLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // double Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // double Quantity = 4;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quantity(), target);
  }

  // uint32 Level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // uint32 IsFirstMessageInBatch = 6;
  if (this->isfirstmessageinbatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfirstmessageinbatch(), target);
  }

  // uint32 IsLastMessageInBatch = 7;
  if (this->islastmessageinbatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->islastmessageinbatch(), target);
  }

  // double DateTime = 8;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->datetime(), target);
  }

  // uint32 NumOrders = 9;
  if (this->numorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->numorders(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthSnapshotLevel)
  return target;
}

size_t MarketDepthSnapshotLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthSnapshotLevel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // double Price = 3;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double Quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 + 8;
  }

  // uint32 Level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 IsFirstMessageInBatch = 6;
  if (this->isfirstmessageinbatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfirstmessageinbatch());
  }

  // double DateTime = 8;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  // uint32 IsLastMessageInBatch = 7;
  if (this->islastmessageinbatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->islastmessageinbatch());
  }

  // uint32 NumOrders = 9;
  if (this->numorders() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSnapshotLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthSnapshotLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSnapshotLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthSnapshotLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthSnapshotLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthSnapshotLevel)
    MergeFrom(*source);
  }
}

void MarketDepthSnapshotLevel::MergeFrom(const MarketDepthSnapshotLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthSnapshotLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.isfirstmessageinbatch() != 0) {
    set_isfirstmessageinbatch(from.isfirstmessageinbatch());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.islastmessageinbatch() != 0) {
    set_islastmessageinbatch(from.islastmessageinbatch());
  }
  if (from.numorders() != 0) {
    set_numorders(from.numorders());
  }
}

void MarketDepthSnapshotLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthSnapshotLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSnapshotLevel::CopyFrom(const MarketDepthSnapshotLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthSnapshotLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSnapshotLevel::IsInitialized() const {
  return true;
}

void MarketDepthSnapshotLevel::Swap(MarketDepthSnapshotLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthSnapshotLevel::InternalSwap(MarketDepthSnapshotLevel* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
  swap(isfirstmessageinbatch_, other->isfirstmessageinbatch_);
  swap(datetime_, other->datetime_);
  swap(islastmessageinbatch_, other->islastmessageinbatch_);
  swap(numorders_, other->numorders_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthSnapshotLevel::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthSnapshotLevel_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthSnapshotLevel_Int::kSymbolIDFieldNumber;
const int MarketDepthSnapshotLevel_Int::kSideFieldNumber;
const int MarketDepthSnapshotLevel_Int::kPriceFieldNumber;
const int MarketDepthSnapshotLevel_Int::kQuantityFieldNumber;
const int MarketDepthSnapshotLevel_Int::kLevelFieldNumber;
const int MarketDepthSnapshotLevel_Int::kIsFirstMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel_Int::kIsLastMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel_Int::kDateTimeFieldNumber;
const int MarketDepthSnapshotLevel_Int::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthSnapshotLevel_Int::MarketDepthSnapshotLevel_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthSnapshotLevel_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthSnapshotLevel_Int)
}
MarketDepthSnapshotLevel_Int::MarketDepthSnapshotLevel_Int(const MarketDepthSnapshotLevel_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthSnapshotLevel_Int)
}

void MarketDepthSnapshotLevel_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthSnapshotLevel_Int::~MarketDepthSnapshotLevel_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthSnapshotLevel_Int)
  SharedDtor();
}

void MarketDepthSnapshotLevel_Int::SharedDtor() {
}

void MarketDepthSnapshotLevel_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthSnapshotLevel_Int& MarketDepthSnapshotLevel_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthSnapshotLevel_Int.base);
  return *internal_default_instance();
}


void MarketDepthSnapshotLevel_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  _internal_metadata_.Clear();
}

bool MarketDepthSnapshotLevel_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFirstMessageInBatch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsLastMessageInBatch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islastmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NumOrders = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthSnapshotLevel_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthSnapshotLevel_Int)
  return false;
#undef DO_
}

void MarketDepthSnapshotLevel_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // int32 Quantity = 4;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }

  // uint32 Level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // uint32 IsFirstMessageInBatch = 6;
  if (this->isfirstmessageinbatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfirstmessageinbatch(), output);
  }

  // uint32 IsLastMessageInBatch = 7;
  if (this->islastmessageinbatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->islastmessageinbatch(), output);
  }

  // double DateTime = 8;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->datetime(), output);
  }

  // uint32 NumOrders = 9;
  if (this->numorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->numorders(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthSnapshotLevel_Int)
}

::google::protobuf::uint8* MarketDepthSnapshotLevel_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // int32 Quantity = 4;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }

  // uint32 Level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // uint32 IsFirstMessageInBatch = 6;
  if (this->isfirstmessageinbatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfirstmessageinbatch(), target);
  }

  // uint32 IsLastMessageInBatch = 7;
  if (this->islastmessageinbatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->islastmessageinbatch(), target);
  }

  // double DateTime = 8;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->datetime(), target);
  }

  // uint32 NumOrders = 9;
  if (this->numorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->numorders(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthSnapshotLevel_Int)
  return target;
}

size_t MarketDepthSnapshotLevel_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 Quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantity());
  }

  // uint32 Level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 IsFirstMessageInBatch = 6;
  if (this->isfirstmessageinbatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfirstmessageinbatch());
  }

  // double DateTime = 8;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  // uint32 IsLastMessageInBatch = 7;
  if (this->islastmessageinbatch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->islastmessageinbatch());
  }

  // uint32 NumOrders = 9;
  if (this->numorders() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSnapshotLevel_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSnapshotLevel_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthSnapshotLevel_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthSnapshotLevel_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthSnapshotLevel_Int)
    MergeFrom(*source);
  }
}

void MarketDepthSnapshotLevel_Int::MergeFrom(const MarketDepthSnapshotLevel_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.isfirstmessageinbatch() != 0) {
    set_isfirstmessageinbatch(from.isfirstmessageinbatch());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.islastmessageinbatch() != 0) {
    set_islastmessageinbatch(from.islastmessageinbatch());
  }
  if (from.numorders() != 0) {
    set_numorders(from.numorders());
  }
}

void MarketDepthSnapshotLevel_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSnapshotLevel_Int::CopyFrom(const MarketDepthSnapshotLevel_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSnapshotLevel_Int::IsInitialized() const {
  return true;
}

void MarketDepthSnapshotLevel_Int::Swap(MarketDepthSnapshotLevel_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthSnapshotLevel_Int::InternalSwap(MarketDepthSnapshotLevel_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
  swap(isfirstmessageinbatch_, other->isfirstmessageinbatch_);
  swap(datetime_, other->datetime_);
  swap(islastmessageinbatch_, other->islastmessageinbatch_);
  swap(numorders_, other->numorders_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthSnapshotLevel_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdateLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdateLevel::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevel::kSideFieldNumber;
const int MarketDepthUpdateLevel::kPriceFieldNumber;
const int MarketDepthUpdateLevel::kQuantityFieldNumber;
const int MarketDepthUpdateLevel::kUpdateTypeFieldNumber;
const int MarketDepthUpdateLevel::kDateTimeFieldNumber;
const int MarketDepthUpdateLevel::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdateLevel::MarketDepthUpdateLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthUpdateLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevel)
}
MarketDepthUpdateLevel::MarketDepthUpdateLevel(const MarketDepthUpdateLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevel)
}

void MarketDepthUpdateLevel::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthUpdateLevel::~MarketDepthUpdateLevel() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevel)
  SharedDtor();
}

void MarketDepthUpdateLevel::SharedDtor() {
}

void MarketDepthUpdateLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthUpdateLevel& MarketDepthUpdateLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthUpdateLevel.base);
  return *internal_default_instance();
}


void MarketDepthUpdateLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthUpdateLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  _internal_metadata_.Clear();
}

bool MarketDepthUpdateLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NumOrders = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevel)
  return false;
#undef DO_
}

void MarketDepthUpdateLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // double Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // double Quantity = 4;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quantity(), output);
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->datetime(), output);
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numorders(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevel)
}

::google::protobuf::uint8* MarketDepthUpdateLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // double Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // double Quantity = 4;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quantity(), target);
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->datetime(), target);
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numorders(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevel)
  return target;
}

size_t MarketDepthUpdateLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthUpdateLevel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // double Price = 3;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double Quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 + 8;
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdateLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthUpdateLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdateLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthUpdateLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthUpdateLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthUpdateLevel)
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevel::MergeFrom(const MarketDepthUpdateLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthUpdateLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.updatetype() != 0) {
    set_updatetype(from.updatetype());
  }
  if (from.numorders() != 0) {
    set_numorders(from.numorders());
  }
}

void MarketDepthUpdateLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthUpdateLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevel::CopyFrom(const MarketDepthUpdateLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthUpdateLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevel::IsInitialized() const {
  return true;
}

void MarketDepthUpdateLevel::Swap(MarketDepthUpdateLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdateLevel::InternalSwap(MarketDepthUpdateLevel* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(datetime_, other->datetime_);
  swap(updatetype_, other->updatetype_);
  swap(numorders_, other->numorders_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthUpdateLevel::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdateLevel_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdateLevel_Int::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevel_Int::kSideFieldNumber;
const int MarketDepthUpdateLevel_Int::kPriceFieldNumber;
const int MarketDepthUpdateLevel_Int::kQuantityFieldNumber;
const int MarketDepthUpdateLevel_Int::kUpdateTypeFieldNumber;
const int MarketDepthUpdateLevel_Int::kDateTimeFieldNumber;
const int MarketDepthUpdateLevel_Int::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdateLevel_Int::MarketDepthUpdateLevel_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthUpdateLevel_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevel_Int)
}
MarketDepthUpdateLevel_Int::MarketDepthUpdateLevel_Int(const MarketDepthUpdateLevel_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevel_Int)
}

void MarketDepthUpdateLevel_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthUpdateLevel_Int::~MarketDepthUpdateLevel_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevel_Int)
  SharedDtor();
}

void MarketDepthUpdateLevel_Int::SharedDtor() {
}

void MarketDepthUpdateLevel_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthUpdateLevel_Int& MarketDepthUpdateLevel_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthUpdateLevel_Int.base);
  return *internal_default_instance();
}


void MarketDepthUpdateLevel_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthUpdateLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  _internal_metadata_.Clear();
}

bool MarketDepthUpdateLevel_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevel_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NumOrders = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevel_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevel_Int)
  return false;
#undef DO_
}

void MarketDepthUpdateLevel_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // int32 Quantity = 4;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->datetime(), output);
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numorders(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevel_Int)
}

::google::protobuf::uint8* MarketDepthUpdateLevel_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // int32 Quantity = 4;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->datetime(), target);
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numorders(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevel_Int)
  return target;
}

size_t MarketDepthUpdateLevel_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthUpdateLevel_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 Quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantity());
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdateLevel_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdateLevel_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthUpdateLevel_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthUpdateLevel_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthUpdateLevel_Int)
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevel_Int::MergeFrom(const MarketDepthUpdateLevel_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.updatetype() != 0) {
    set_updatetype(from.updatetype());
  }
  if (from.numorders() != 0) {
    set_numorders(from.numorders());
  }
}

void MarketDepthUpdateLevel_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevel_Int::CopyFrom(const MarketDepthUpdateLevel_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevel_Int::IsInitialized() const {
  return true;
}

void MarketDepthUpdateLevel_Int::Swap(MarketDepthUpdateLevel_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdateLevel_Int::InternalSwap(MarketDepthUpdateLevel_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(datetime_, other->datetime_);
  swap(updatetype_, other->updatetype_);
  swap(numorders_, other->numorders_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthUpdateLevel_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdateLevelCompact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdateLevelCompact::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevelCompact::kSideFieldNumber;
const int MarketDepthUpdateLevelCompact::kPriceFieldNumber;
const int MarketDepthUpdateLevelCompact::kQuantityFieldNumber;
const int MarketDepthUpdateLevelCompact::kUpdateTypeFieldNumber;
const int MarketDepthUpdateLevelCompact::kDateTimeFieldNumber;
const int MarketDepthUpdateLevelCompact::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdateLevelCompact::MarketDepthUpdateLevelCompact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthUpdateLevelCompact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevelCompact)
}
MarketDepthUpdateLevelCompact::MarketDepthUpdateLevelCompact(const MarketDepthUpdateLevelCompact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevelCompact)
}

void MarketDepthUpdateLevelCompact::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthUpdateLevelCompact::~MarketDepthUpdateLevelCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevelCompact)
  SharedDtor();
}

void MarketDepthUpdateLevelCompact::SharedDtor() {
}

void MarketDepthUpdateLevelCompact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevelCompact::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthUpdateLevelCompact& MarketDepthUpdateLevelCompact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthUpdateLevelCompact.base);
  return *internal_default_instance();
}


void MarketDepthUpdateLevelCompact::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthUpdateLevelCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  _internal_metadata_.Clear();
}

bool MarketDepthUpdateLevelCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevelCompact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NumOrders = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevelCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevelCompact)
  return false;
#undef DO_
}

void MarketDepthUpdateLevelCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevelCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // float Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // float Quantity = 4;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->quantity(), output);
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  // uint32 DateTime = 6;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->datetime(), output);
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numorders(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevelCompact)
}

::google::protobuf::uint8* MarketDepthUpdateLevelCompact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevelCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // float Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // float Quantity = 4;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->quantity(), target);
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  // uint32 DateTime = 6;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->datetime(), target);
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numorders(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevelCompact)
  return target;
}

size_t MarketDepthUpdateLevelCompact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthUpdateLevelCompact)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum Side = 2;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // float Price = 3;
  if (this->price() != 0) {
    total_size += 1 + 4;
  }

  // float Quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 + 4;
  }

  // .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (this->updatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
  }

  // uint32 DateTime = 6;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datetime());
  }

  // uint32 NumOrders = 7;
  if (this->numorders() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdateLevelCompact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdateLevelCompact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthUpdateLevelCompact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthUpdateLevelCompact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthUpdateLevelCompact)
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevelCompact::MergeFrom(const MarketDepthUpdateLevelCompact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.updatetype() != 0) {
    set_updatetype(from.updatetype());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.numorders() != 0) {
    set_numorders(from.numorders());
  }
}

void MarketDepthUpdateLevelCompact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevelCompact::CopyFrom(const MarketDepthUpdateLevelCompact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevelCompact::IsInitialized() const {
  return true;
}

void MarketDepthUpdateLevelCompact::Swap(MarketDepthUpdateLevelCompact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdateLevelCompact::InternalSwap(MarketDepthUpdateLevelCompact* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(updatetype_, other->updatetype_);
  swap(datetime_, other->datetime_);
  swap(numorders_, other->numorders_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthUpdateLevelCompact::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionSettlement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionSettlement::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionSettlement::kPriceFieldNumber;
const int MarketDataUpdateSessionSettlement::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionSettlement::MarketDataUpdateSessionSettlement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionSettlement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionSettlement)
}
MarketDataUpdateSessionSettlement::MarketDataUpdateSessionSettlement(const MarketDataUpdateSessionSettlement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&price_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionSettlement)
}

void MarketDataUpdateSessionSettlement::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&price_)) + sizeof(datetime_));
}

MarketDataUpdateSessionSettlement::~MarketDataUpdateSessionSettlement() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionSettlement)
  SharedDtor();
}

void MarketDataUpdateSessionSettlement::SharedDtor() {
}

void MarketDataUpdateSessionSettlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionSettlement& MarketDataUpdateSessionSettlement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionSettlement.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&price_)) + sizeof(datetime_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionSettlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionSettlement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionSettlement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionSettlement)
  return false;
#undef DO_
}

void MarketDataUpdateSessionSettlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // uint32 DateTime = 3;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->datetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionSettlement)
}

::google::protobuf::uint8* MarketDataUpdateSessionSettlement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // uint32 DateTime = 3;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->datetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionSettlement)
  return target;
}

size_t MarketDataUpdateSessionSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionSettlement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double Price = 2;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 DateTime = 3;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->datetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionSettlement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionSettlement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionSettlement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionSettlement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionSettlement)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionSettlement::MergeFrom(const MarketDataUpdateSessionSettlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
}

void MarketDataUpdateSessionSettlement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionSettlement::CopyFrom(const MarketDataUpdateSessionSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionSettlement::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionSettlement::Swap(MarketDataUpdateSessionSettlement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionSettlement::InternalSwap(MarketDataUpdateSessionSettlement* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(datetime_, other->datetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionSettlement::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionSettlement_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionSettlement_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionSettlement_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionSettlement_Int::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionSettlement_Int::MarketDataUpdateSessionSettlement_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionSettlement_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}
MarketDataUpdateSessionSettlement_Int::MarketDataUpdateSessionSettlement_Int(const MarketDataUpdateSessionSettlement_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}

void MarketDataUpdateSessionSettlement_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateSessionSettlement_Int::~MarketDataUpdateSessionSettlement_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  SharedDtor();
}

void MarketDataUpdateSessionSettlement_Int::SharedDtor() {
}

void MarketDataUpdateSessionSettlement_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionSettlement_Int& MarketDataUpdateSessionSettlement_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionSettlement_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionSettlement_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionSettlement_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionSettlement_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // int32 DateTime = 3;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->datetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionSettlement_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // int32 DateTime = 3;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->datetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return target;
}

size_t MarketDataUpdateSessionSettlement_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 DateTime = 3;
  if (this->datetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionSettlement_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionSettlement_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionSettlement_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionSettlement_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionSettlement_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionSettlement_Int::MergeFrom(const MarketDataUpdateSessionSettlement_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
}

void MarketDataUpdateSessionSettlement_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionSettlement_Int::CopyFrom(const MarketDataUpdateSessionSettlement_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionSettlement_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionSettlement_Int::Swap(MarketDataUpdateSessionSettlement_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionSettlement_Int::InternalSwap(MarketDataUpdateSessionSettlement_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(datetime_, other->datetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionSettlement_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionOpen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionOpen::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionOpen::kPriceFieldNumber;
const int MarketDataUpdateSessionOpen::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionOpen::MarketDataUpdateSessionOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionOpen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionOpen)
}
MarketDataUpdateSessionOpen::MarketDataUpdateSessionOpen(const MarketDataUpdateSessionOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionOpen)
}

void MarketDataUpdateSessionOpen::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionOpen::~MarketDataUpdateSessionOpen() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionOpen)
  SharedDtor();
}

void MarketDataUpdateSessionOpen::SharedDtor() {
}

void MarketDataUpdateSessionOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionOpen& MarketDataUpdateSessionOpen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionOpen.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionOpen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionOpen)
  return false;
#undef DO_
}

void MarketDataUpdateSessionOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionOpen)
}

::google::protobuf::uint8* MarketDataUpdateSessionOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionOpen)
  return target;
}

size_t MarketDataUpdateSessionOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionOpen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double Price = 2;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionOpen)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionOpen::MergeFrom(const MarketDataUpdateSessionOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionOpen::CopyFrom(const MarketDataUpdateSessionOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionOpen::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionOpen::Swap(MarketDataUpdateSessionOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionOpen::InternalSwap(MarketDataUpdateSessionOpen* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionOpen::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionOpen_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionOpen_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionOpen_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionOpen_Int::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionOpen_Int::MarketDataUpdateSessionOpen_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionOpen_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
}
MarketDataUpdateSessionOpen_Int::MarketDataUpdateSessionOpen_Int(const MarketDataUpdateSessionOpen_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
}

void MarketDataUpdateSessionOpen_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionOpen_Int::~MarketDataUpdateSessionOpen_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
  SharedDtor();
}

void MarketDataUpdateSessionOpen_Int::SharedDtor() {
}

void MarketDataUpdateSessionOpen_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionOpen_Int& MarketDataUpdateSessionOpen_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionOpen_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionOpen_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionOpen_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionOpen_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionOpen_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionOpen_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return target;
}

size_t MarketDataUpdateSessionOpen_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionOpen_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionOpen_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionOpen_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionOpen_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionOpen_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionOpen_Int::MergeFrom(const MarketDataUpdateSessionOpen_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionOpen_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionOpen_Int::CopyFrom(const MarketDataUpdateSessionOpen_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionOpen_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionOpen_Int::Swap(MarketDataUpdateSessionOpen_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionOpen_Int::InternalSwap(MarketDataUpdateSessionOpen_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionOpen_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionNumTrades::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionNumTrades::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionNumTrades::kNumTradesFieldNumber;
const int MarketDataUpdateSessionNumTrades::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionNumTrades::MarketDataUpdateSessionNumTrades()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionNumTrades.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionNumTrades)
}
MarketDataUpdateSessionNumTrades::MarketDataUpdateSessionNumTrades(const MarketDataUpdateSessionNumTrades& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionNumTrades)
}

void MarketDataUpdateSessionNumTrades::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionNumTrades::~MarketDataUpdateSessionNumTrades() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionNumTrades)
  SharedDtor();
}

void MarketDataUpdateSessionNumTrades::SharedDtor() {
}

void MarketDataUpdateSessionNumTrades::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionNumTrades::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionNumTrades& MarketDataUpdateSessionNumTrades::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionNumTrades.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionNumTrades::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionNumTrades::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 NumTrades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionNumTrades)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionNumTrades)
  return false;
#undef DO_
}

void MarketDataUpdateSessionNumTrades::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // int32 NumTrades = 2;
  if (this->numtrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numtrades(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionNumTrades)
}

::google::protobuf::uint8* MarketDataUpdateSessionNumTrades::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // int32 NumTrades = 2;
  if (this->numtrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numtrades(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionNumTrades)
  return target;
}

size_t MarketDataUpdateSessionNumTrades::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 NumTrades = 2;
  if (this->numtrades() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numtrades());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionNumTrades::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionNumTrades* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionNumTrades>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionNumTrades)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionNumTrades)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionNumTrades::MergeFrom(const MarketDataUpdateSessionNumTrades& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.numtrades() != 0) {
    set_numtrades(from.numtrades());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionNumTrades::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionNumTrades::CopyFrom(const MarketDataUpdateSessionNumTrades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionNumTrades::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionNumTrades::Swap(MarketDataUpdateSessionNumTrades* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionNumTrades::InternalSwap(MarketDataUpdateSessionNumTrades* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(numtrades_, other->numtrades_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionNumTrades::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTradingSessionDate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTradingSessionDate::kSymbolIDFieldNumber;
const int MarketDataUpdateTradingSessionDate::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTradingSessionDate::MarketDataUpdateTradingSessionDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTradingSessionDate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTradingSessionDate)
}
MarketDataUpdateTradingSessionDate::MarketDataUpdateTradingSessionDate(const MarketDataUpdateTradingSessionDate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTradingSessionDate)
}

void MarketDataUpdateTradingSessionDate::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(date_));
}

MarketDataUpdateTradingSessionDate::~MarketDataUpdateTradingSessionDate() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTradingSessionDate)
  SharedDtor();
}

void MarketDataUpdateTradingSessionDate::SharedDtor() {
}

void MarketDataUpdateTradingSessionDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTradingSessionDate::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTradingSessionDate& MarketDataUpdateTradingSessionDate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTradingSessionDate.base);
  return *internal_default_instance();
}


void MarketDataUpdateTradingSessionDate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(date_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTradingSessionDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTradingSessionDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTradingSessionDate)
  return false;
#undef DO_
}

void MarketDataUpdateTradingSessionDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // uint32 Date = 2;
  if (this->date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTradingSessionDate)
}

::google::protobuf::uint8* MarketDataUpdateTradingSessionDate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // uint32 Date = 2;
  if (this->date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTradingSessionDate)
  return target;
}

size_t MarketDataUpdateTradingSessionDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 Date = 2;
  if (this->date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTradingSessionDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTradingSessionDate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTradingSessionDate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTradingSessionDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTradingSessionDate)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTradingSessionDate::MergeFrom(const MarketDataUpdateTradingSessionDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.date() != 0) {
    set_date(from.date());
  }
}

void MarketDataUpdateTradingSessionDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTradingSessionDate::CopyFrom(const MarketDataUpdateTradingSessionDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTradingSessionDate::IsInitialized() const {
  return true;
}

void MarketDataUpdateTradingSessionDate::Swap(MarketDataUpdateTradingSessionDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTradingSessionDate::InternalSwap(MarketDataUpdateTradingSessionDate* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(date_, other->date_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTradingSessionDate::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthReject::kSymbolIDFieldNumber;
const int MarketDepthReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthReject::MarketDepthReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthReject)
}
MarketDepthReject::MarketDepthReject(const MarketDepthReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthReject)
}

void MarketDepthReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolid_ = 0u;
}

MarketDepthReject::~MarketDepthReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthReject)
  SharedDtor();
}

void MarketDepthReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthReject& MarketDepthReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDepthReject.base);
  return *internal_default_instance();
}


void MarketDepthReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolid_ = 0u;
  _internal_metadata_.Clear();
}

bool MarketDepthReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.MarketDepthReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthReject)
  return false;
#undef DO_
}

void MarketDepthReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDepthReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthReject)
}

::google::protobuf::uint8* MarketDepthReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.MarketDepthReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthReject)
  return target;
}

size_t MarketDepthReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthReject)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthReject)
    MergeFrom(*source);
  }
}

void MarketDepthReject::MergeFrom(const MarketDepthReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
}

void MarketDepthReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthReject::CopyFrom(const MarketDepthReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthReject::IsInitialized() const {
  return true;
}

void MarketDepthReject::Swap(MarketDepthReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthReject::InternalSwap(MarketDepthReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTrade::kSymbolIDFieldNumber;
const int MarketDataUpdateTrade::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTrade::kPriceFieldNumber;
const int MarketDataUpdateTrade::kVolumeFieldNumber;
const int MarketDataUpdateTrade::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTrade::MarketDataUpdateTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTrade)
}
MarketDataUpdateTrade::MarketDataUpdateTrade(const MarketDataUpdateTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTrade)
}

void MarketDataUpdateTrade::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateTrade::~MarketDataUpdateTrade() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTrade)
  SharedDtor();
}

void MarketDataUpdateTrade::SharedDtor() {
}

void MarketDataUpdateTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTrade::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTrade& MarketDataUpdateTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTrade.base);
  return *internal_default_instance();
}


void MarketDataUpdateTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTrade)
  return false;
#undef DO_
}

void MarketDataUpdateTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // double Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // double Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // double DateTime = 5;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->datetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTrade)
}

::google::protobuf::uint8* MarketDataUpdateTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // double Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // double Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  // double DateTime = 5;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->datetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTrade)
  return target;
}

size_t MarketDataUpdateTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTrade)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
  }

  // double Price = 3;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // double DateTime = 5;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTrade)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTrade::MergeFrom(const MarketDataUpdateTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.atbidorask() != 0) {
    set_atbidorask(from.atbidorask());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
}

void MarketDataUpdateTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTrade::CopyFrom(const MarketDataUpdateTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTrade::IsInitialized() const {
  return true;
}

void MarketDataUpdateTrade::Swap(MarketDataUpdateTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTrade::InternalSwap(MarketDataUpdateTrade* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTrade::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTrade_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTrade_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateTrade_Int::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTrade_Int::kPriceFieldNumber;
const int MarketDataUpdateTrade_Int::kVolumeFieldNumber;
const int MarketDataUpdateTrade_Int::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTrade_Int::MarketDataUpdateTrade_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTrade_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTrade_Int)
}
MarketDataUpdateTrade_Int::MarketDataUpdateTrade_Int(const MarketDataUpdateTrade_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTrade_Int)
}

void MarketDataUpdateTrade_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateTrade_Int::~MarketDataUpdateTrade_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTrade_Int)
  SharedDtor();
}

void MarketDataUpdateTrade_Int::SharedDtor() {
}

void MarketDataUpdateTrade_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTrade_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTrade_Int& MarketDataUpdateTrade_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTrade_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateTrade_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTrade_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTrade_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTrade_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTrade_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTrade_Int)
  return false;
#undef DO_
}

void MarketDataUpdateTrade_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTrade_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // double DateTime = 5;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->datetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTrade_Int)
}

::google::protobuf::uint8* MarketDataUpdateTrade_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTrade_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // double DateTime = 5;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->datetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTrade_Int)
  return target;
}

size_t MarketDataUpdateTrade_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTrade_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // double DateTime = 5;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTrade_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTrade_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTrade_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTrade_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTrade_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTrade_Int::MergeFrom(const MarketDataUpdateTrade_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.atbidorask() != 0) {
    set_atbidorask(from.atbidorask());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
}

void MarketDataUpdateTrade_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTrade_Int::CopyFrom(const MarketDataUpdateTrade_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTrade_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateTrade_Int::Swap(MarketDataUpdateTrade_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTrade_Int::InternalSwap(MarketDataUpdateTrade_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTrade_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTradeWithUnbundledIndicator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTradeWithUnbundledIndicator::kSymbolIDFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kUnbundledTradeIndicatorFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kPriceFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kVolumeFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTradeWithUnbundledIndicator::MarketDataUpdateTradeWithUnbundledIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTradeWithUnbundledIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
}
MarketDataUpdateTradeWithUnbundledIndicator::MarketDataUpdateTradeWithUnbundledIndicator(const MarketDataUpdateTradeWithUnbundledIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
}

void MarketDataUpdateTradeWithUnbundledIndicator::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateTradeWithUnbundledIndicator::~MarketDataUpdateTradeWithUnbundledIndicator() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  SharedDtor();
}

void MarketDataUpdateTradeWithUnbundledIndicator::SharedDtor() {
}

void MarketDataUpdateTradeWithUnbundledIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTradeWithUnbundledIndicator::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTradeWithUnbundledIndicator& MarketDataUpdateTradeWithUnbundledIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTradeWithUnbundledIndicator.base);
  return *internal_default_instance();
}


void MarketDataUpdateTradeWithUnbundledIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTradeWithUnbundledIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum8 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unbundledtradeindicator(static_cast< ::DTC_PB::UnbundledTradeIndicatorEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Volume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  return false;
#undef DO_
}

void MarketDataUpdateTradeWithUnbundledIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
  if (this->unbundledtradeindicator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->unbundledtradeindicator(), output);
  }

  // double Price = 4;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }

  // uint32 Volume = 5;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->volume(), output);
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->datetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
}

::google::protobuf::uint8* MarketDataUpdateTradeWithUnbundledIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
  if (this->unbundledtradeindicator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->unbundledtradeindicator(), target);
  }

  // double Price = 4;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }

  // uint32 Volume = 5;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->volume(), target);
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->datetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  return target;
}

size_t MarketDataUpdateTradeWithUnbundledIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
  if (this->atbidorask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
  }

  // double Price = 4;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
  if (this->unbundledtradeindicator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unbundledtradeindicator());
  }

  // uint32 Volume = 5;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume());
  }

  // double DateTime = 6;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTradeWithUnbundledIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTradeWithUnbundledIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTradeWithUnbundledIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTradeWithUnbundledIndicator::MergeFrom(const MarketDataUpdateTradeWithUnbundledIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.atbidorask() != 0) {
    set_atbidorask(from.atbidorask());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.unbundledtradeindicator() != 0) {
    set_unbundledtradeindicator(from.unbundledtradeindicator());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
}

void MarketDataUpdateTradeWithUnbundledIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTradeWithUnbundledIndicator::CopyFrom(const MarketDataUpdateTradeWithUnbundledIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTradeWithUnbundledIndicator::IsInitialized() const {
  return true;
}

void MarketDataUpdateTradeWithUnbundledIndicator::Swap(MarketDataUpdateTradeWithUnbundledIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTradeWithUnbundledIndicator::InternalSwap(MarketDataUpdateTradeWithUnbundledIndicator* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(unbundledtradeindicator_, other->unbundledtradeindicator_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTradeWithUnbundledIndicator::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateBidAsk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateBidAsk::kSymbolIDFieldNumber;
const int MarketDataUpdateBidAsk::kBidPriceFieldNumber;
const int MarketDataUpdateBidAsk::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAsk::kAskPriceFieldNumber;
const int MarketDataUpdateBidAsk::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAsk::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateBidAsk::MarketDataUpdateBidAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateBidAsk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAsk)
}
MarketDataUpdateBidAsk::MarketDataUpdateBidAsk(const MarketDataUpdateBidAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bidprice_, &from.bidprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&bidprice_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAsk)
}

void MarketDataUpdateBidAsk::SharedCtor() {
  ::memset(&bidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&bidprice_)) + sizeof(datetime_));
}

MarketDataUpdateBidAsk::~MarketDataUpdateBidAsk() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAsk)
  SharedDtor();
}

void MarketDataUpdateBidAsk::SharedDtor() {
}

void MarketDataUpdateBidAsk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateBidAsk& MarketDataUpdateBidAsk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateBidAsk.base);
  return *internal_default_instance();
}


void MarketDataUpdateBidAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateBidAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&bidprice_)) + sizeof(datetime_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateBidAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAsk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BidPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float BidQuantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AskPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AskQuantity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAsk)
  return false;
#undef DO_
}

void MarketDataUpdateBidAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double BidPrice = 2;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bidprice(), output);
  }

  // float BidQuantity = 3;
  if (this->bidquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bidquantity(), output);
  }

  // double AskPrice = 4;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->askprice(), output);
  }

  // float AskQuantity = 5;
  if (this->askquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->askquantity(), output);
  }

  // sfixed32 DateTime = 6;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->datetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAsk)
}

::google::protobuf::uint8* MarketDataUpdateBidAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double BidPrice = 2;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bidprice(), target);
  }

  // float BidQuantity = 3;
  if (this->bidquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bidquantity(), target);
  }

  // double AskPrice = 4;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->askprice(), target);
  }

  // float AskQuantity = 5;
  if (this->askquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->askquantity(), target);
  }

  // sfixed32 DateTime = 6;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->datetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAsk)
  return target;
}

size_t MarketDataUpdateBidAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateBidAsk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double BidPrice = 2;
  if (this->bidprice() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // float BidQuantity = 3;
  if (this->bidquantity() != 0) {
    total_size += 1 + 4;
  }

  // double AskPrice = 4;
  if (this->askprice() != 0) {
    total_size += 1 + 8;
  }

  // float AskQuantity = 5;
  if (this->askquantity() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 DateTime = 6;
  if (this->datetime() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateBidAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateBidAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateBidAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateBidAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateBidAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateBidAsk)
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAsk::MergeFrom(const MarketDataUpdateBidAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateBidAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.bidquantity() != 0) {
    set_bidquantity(from.bidquantity());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.askquantity() != 0) {
    set_askquantity(from.askquantity());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
}

void MarketDataUpdateBidAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateBidAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAsk::CopyFrom(const MarketDataUpdateBidAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateBidAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAsk::IsInitialized() const {
  return true;
}

void MarketDataUpdateBidAsk::Swap(MarketDataUpdateBidAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateBidAsk::InternalSwap(MarketDataUpdateBidAsk* other) {
  using std::swap;
  swap(bidprice_, other->bidprice_);
  swap(symbolid_, other->symbolid_);
  swap(bidquantity_, other->bidquantity_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(datetime_, other->datetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateBidAsk::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateBidAsk_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateBidAsk_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateBidAsk_Int::kBidPriceFieldNumber;
const int MarketDataUpdateBidAsk_Int::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAsk_Int::kAskPriceFieldNumber;
const int MarketDataUpdateBidAsk_Int::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAsk_Int::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateBidAsk_Int::MarketDataUpdateBidAsk_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateBidAsk_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAsk_Int)
}
MarketDataUpdateBidAsk_Int::MarketDataUpdateBidAsk_Int(const MarketDataUpdateBidAsk_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAsk_Int)
}

void MarketDataUpdateBidAsk_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateBidAsk_Int::~MarketDataUpdateBidAsk_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAsk_Int)
  SharedDtor();
}

void MarketDataUpdateBidAsk_Int::SharedDtor() {
}

void MarketDataUpdateBidAsk_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateBidAsk_Int& MarketDataUpdateBidAsk_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateBidAsk_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateBidAsk_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateBidAsk_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BidPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BidQuantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AskPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AskQuantity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAsk_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAsk_Int)
  return false;
#undef DO_
}

void MarketDataUpdateBidAsk_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // int32 BidPrice = 2;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bidprice(), output);
  }

  // int32 BidQuantity = 3;
  if (this->bidquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bidquantity(), output);
  }

  // int32 AskPrice = 4;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->askprice(), output);
  }

  // int32 AskQuantity = 5;
  if (this->askquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->askquantity(), output);
  }

  // sfixed32 DateTime = 6;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->datetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAsk_Int)
}

::google::protobuf::uint8* MarketDataUpdateBidAsk_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // int32 BidPrice = 2;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bidprice(), target);
  }

  // int32 BidQuantity = 3;
  if (this->bidquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bidquantity(), target);
  }

  // int32 AskPrice = 4;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->askprice(), target);
  }

  // int32 AskQuantity = 5;
  if (this->askquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->askquantity(), target);
  }

  // sfixed32 DateTime = 6;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->datetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAsk_Int)
  return target;
}

size_t MarketDataUpdateBidAsk_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 BidPrice = 2;
  if (this->bidprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bidprice());
  }

  // int32 BidQuantity = 3;
  if (this->bidquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bidquantity());
  }

  // int32 AskPrice = 4;
  if (this->askprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->askprice());
  }

  // int32 AskQuantity = 5;
  if (this->askquantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->askquantity());
  }

  // sfixed32 DateTime = 6;
  if (this->datetime() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateBidAsk_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateBidAsk_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateBidAsk_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateBidAsk_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateBidAsk_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAsk_Int::MergeFrom(const MarketDataUpdateBidAsk_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.bidquantity() != 0) {
    set_bidquantity(from.bidquantity());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.askquantity() != 0) {
    set_askquantity(from.askquantity());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
}

void MarketDataUpdateBidAsk_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAsk_Int::CopyFrom(const MarketDataUpdateBidAsk_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAsk_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateBidAsk_Int::Swap(MarketDataUpdateBidAsk_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateBidAsk_Int::InternalSwap(MarketDataUpdateBidAsk_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(bidprice_, other->bidprice_);
  swap(bidquantity_, other->bidquantity_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(datetime_, other->datetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateBidAsk_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateBidAskCompact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateBidAskCompact::kBidPriceFieldNumber;
const int MarketDataUpdateBidAskCompact::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAskCompact::kAskPriceFieldNumber;
const int MarketDataUpdateBidAskCompact::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAskCompact::kDateTimeFieldNumber;
const int MarketDataUpdateBidAskCompact::kSymbolIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateBidAskCompact::MarketDataUpdateBidAskCompact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateBidAskCompact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAskCompact)
}
MarketDataUpdateBidAskCompact::MarketDataUpdateBidAskCompact(const MarketDataUpdateBidAskCompact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bidprice_, &from.bidprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&symbolid_) -
    reinterpret_cast<char*>(&bidprice_)) + sizeof(symbolid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAskCompact)
}

void MarketDataUpdateBidAskCompact::SharedCtor() {
  ::memset(&bidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&bidprice_)) + sizeof(symbolid_));
}

MarketDataUpdateBidAskCompact::~MarketDataUpdateBidAskCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAskCompact)
  SharedDtor();
}

void MarketDataUpdateBidAskCompact::SharedDtor() {
}

void MarketDataUpdateBidAskCompact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAskCompact::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateBidAskCompact& MarketDataUpdateBidAskCompact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateBidAskCompact.base);
  return *internal_default_instance();
}


void MarketDataUpdateBidAskCompact::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateBidAskCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&bidprice_)) + sizeof(symbolid_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateBidAskCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAskCompact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float BidPrice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float BidQuantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AskPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AskQuantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 DateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SymbolID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAskCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAskCompact)
  return false;
#undef DO_
}

void MarketDataUpdateBidAskCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAskCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float BidPrice = 1;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bidprice(), output);
  }

  // float BidQuantity = 2;
  if (this->bidquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bidquantity(), output);
  }

  // float AskPrice = 3;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->askprice(), output);
  }

  // float AskQuantity = 4;
  if (this->askquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->askquantity(), output);
  }

  // sfixed32 DateTime = 5;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->datetime(), output);
  }

  // uint32 SymbolID = 6;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->symbolid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAskCompact)
}

::google::protobuf::uint8* MarketDataUpdateBidAskCompact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAskCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float BidPrice = 1;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bidprice(), target);
  }

  // float BidQuantity = 2;
  if (this->bidquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bidquantity(), target);
  }

  // float AskPrice = 3;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->askprice(), target);
  }

  // float AskQuantity = 4;
  if (this->askquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->askquantity(), target);
  }

  // sfixed32 DateTime = 5;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->datetime(), target);
  }

  // uint32 SymbolID = 6;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->symbolid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAskCompact)
  return target;
}

size_t MarketDataUpdateBidAskCompact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateBidAskCompact)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float BidPrice = 1;
  if (this->bidprice() != 0) {
    total_size += 1 + 4;
  }

  // float BidQuantity = 2;
  if (this->bidquantity() != 0) {
    total_size += 1 + 4;
  }

  // float AskPrice = 3;
  if (this->askprice() != 0) {
    total_size += 1 + 4;
  }

  // float AskQuantity = 4;
  if (this->askquantity() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 DateTime = 5;
  if (this->datetime() != 0) {
    total_size += 1 + 4;
  }

  // uint32 SymbolID = 6;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateBidAskCompact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateBidAskCompact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateBidAskCompact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateBidAskCompact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateBidAskCompact)
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAskCompact::MergeFrom(const MarketDataUpdateBidAskCompact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.bidquantity() != 0) {
    set_bidquantity(from.bidquantity());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.askquantity() != 0) {
    set_askquantity(from.askquantity());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
}

void MarketDataUpdateBidAskCompact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAskCompact::CopyFrom(const MarketDataUpdateBidAskCompact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAskCompact::IsInitialized() const {
  return true;
}

void MarketDataUpdateBidAskCompact::Swap(MarketDataUpdateBidAskCompact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateBidAskCompact::InternalSwap(MarketDataUpdateBidAskCompact* other) {
  using std::swap;
  swap(bidprice_, other->bidprice_);
  swap(bidquantity_, other->bidquantity_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(datetime_, other->datetime_);
  swap(symbolid_, other->symbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateBidAskCompact::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTradeCompact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTradeCompact::kPriceFieldNumber;
const int MarketDataUpdateTradeCompact::kVolumeFieldNumber;
const int MarketDataUpdateTradeCompact::kDateTimeFieldNumber;
const int MarketDataUpdateTradeCompact::kSymbolIDFieldNumber;
const int MarketDataUpdateTradeCompact::kAtBidOrAskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTradeCompact::MarketDataUpdateTradeCompact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTradeCompact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTradeCompact)
}
MarketDataUpdateTradeCompact::MarketDataUpdateTradeCompact(const MarketDataUpdateTradeCompact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&atbidorask_) -
    reinterpret_cast<char*>(&price_)) + sizeof(atbidorask_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTradeCompact)
}

void MarketDataUpdateTradeCompact::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atbidorask_) -
      reinterpret_cast<char*>(&price_)) + sizeof(atbidorask_));
}

MarketDataUpdateTradeCompact::~MarketDataUpdateTradeCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTradeCompact)
  SharedDtor();
}

void MarketDataUpdateTradeCompact::SharedDtor() {
}

void MarketDataUpdateTradeCompact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTradeCompact::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTradeCompact& MarketDataUpdateTradeCompact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateTradeCompact.base);
  return *internal_default_instance();
}


void MarketDataUpdateTradeCompact::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTradeCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atbidorask_) -
      reinterpret_cast<char*>(&price_)) + sizeof(atbidorask_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTradeCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTradeCompact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float Price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Volume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 DateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SymbolID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTradeCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTradeCompact)
  return false;
#undef DO_
}

void MarketDataUpdateTradeCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTradeCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float Price = 1;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->price(), output);
  }

  // float Volume = 2;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->volume(), output);
  }

  // sfixed32 DateTime = 3;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->datetime(), output);
  }

  // uint32 SymbolID = 4;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->symbolid(), output);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (this->atbidorask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->atbidorask(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTradeCompact)
}

::google::protobuf::uint8* MarketDataUpdateTradeCompact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTradeCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float Price = 1;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->price(), target);
  }

  // float Volume = 2;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->volume(), target);
  }

  // sfixed32 DateTime = 3;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->datetime(), target);
  }

  // uint32 SymbolID = 4;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->symbolid(), target);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (this->atbidorask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->atbidorask(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTradeCompact)
  return target;
}

size_t MarketDataUpdateTradeCompact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTradeCompact)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float Price = 1;
  if (this->price() != 0) {
    total_size += 1 + 4;
  }

  // float Volume = 2;
  if (this->volume() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 DateTime = 3;
  if (this->datetime() != 0) {
    total_size += 1 + 4;
  }

  // uint32 SymbolID = 4;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (this->atbidorask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTradeCompact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTradeCompact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTradeCompact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTradeCompact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTradeCompact)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTradeCompact::MergeFrom(const MarketDataUpdateTradeCompact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.atbidorask() != 0) {
    set_atbidorask(from.atbidorask());
  }
}

void MarketDataUpdateTradeCompact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTradeCompact::CopyFrom(const MarketDataUpdateTradeCompact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTradeCompact::IsInitialized() const {
  return true;
}

void MarketDataUpdateTradeCompact::Swap(MarketDataUpdateTradeCompact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTradeCompact::InternalSwap(MarketDataUpdateTradeCompact* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTradeCompact::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionVolume::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionVolume::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionVolume::kVolumeFieldNumber;
const int MarketDataUpdateSessionVolume::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionVolume::MarketDataUpdateSessionVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionVolume.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionVolume)
}
MarketDataUpdateSessionVolume::MarketDataUpdateSessionVolume(const MarketDataUpdateSessionVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionVolume)
}

void MarketDataUpdateSessionVolume::SharedCtor() {
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionVolume::~MarketDataUpdateSessionVolume() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionVolume)
  SharedDtor();
}

void MarketDataUpdateSessionVolume::SharedDtor() {
}

void MarketDataUpdateSessionVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionVolume::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionVolume& MarketDataUpdateSessionVolume::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionVolume.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionVolume)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Volume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionVolume)
  return false;
#undef DO_
}

void MarketDataUpdateSessionVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double Volume = 2;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->volume(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionVolume)
}

::google::protobuf::uint8* MarketDataUpdateSessionVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double Volume = 2;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->volume(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionVolume)
  return target;
}

size_t MarketDataUpdateSessionVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionVolume)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double Volume = 2;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionVolume)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionVolume::MergeFrom(const MarketDataUpdateSessionVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionVolume::CopyFrom(const MarketDataUpdateSessionVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionVolume::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionVolume::Swap(MarketDataUpdateSessionVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionVolume::InternalSwap(MarketDataUpdateSessionVolume* other) {
  using std::swap;
  swap(volume_, other->volume_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionVolume::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateOpenInterest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateOpenInterest::kSymbolIDFieldNumber;
const int MarketDataUpdateOpenInterest::kOpenInterestFieldNumber;
const int MarketDataUpdateOpenInterest::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateOpenInterest::MarketDataUpdateOpenInterest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateOpenInterest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateOpenInterest)
}
MarketDataUpdateOpenInterest::MarketDataUpdateOpenInterest(const MarketDataUpdateOpenInterest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateOpenInterest)
}

void MarketDataUpdateOpenInterest::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateOpenInterest::~MarketDataUpdateOpenInterest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateOpenInterest)
  SharedDtor();
}

void MarketDataUpdateOpenInterest::SharedDtor() {
}

void MarketDataUpdateOpenInterest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateOpenInterest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateOpenInterest& MarketDataUpdateOpenInterest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateOpenInterest.base);
  return *internal_default_instance();
}


void MarketDataUpdateOpenInterest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateOpenInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateOpenInterest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateOpenInterest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OpenInterest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateOpenInterest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateOpenInterest)
  return false;
#undef DO_
}

void MarketDataUpdateOpenInterest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateOpenInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // uint32 OpenInterest = 2;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->openinterest(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateOpenInterest)
}

::google::protobuf::uint8* MarketDataUpdateOpenInterest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateOpenInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // uint32 OpenInterest = 2;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->openinterest(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateOpenInterest)
  return target;
}

size_t MarketDataUpdateOpenInterest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateOpenInterest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 OpenInterest = 2;
  if (this->openinterest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->openinterest());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateOpenInterest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateOpenInterest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateOpenInterest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateOpenInterest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateOpenInterest)
    MergeFrom(*source);
  }
}

void MarketDataUpdateOpenInterest::MergeFrom(const MarketDataUpdateOpenInterest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateOpenInterest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateOpenInterest::CopyFrom(const MarketDataUpdateOpenInterest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateOpenInterest::IsInitialized() const {
  return true;
}

void MarketDataUpdateOpenInterest::Swap(MarketDataUpdateOpenInterest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateOpenInterest::InternalSwap(MarketDataUpdateOpenInterest* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(openinterest_, other->openinterest_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateOpenInterest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionHigh::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionHigh::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionHigh::kPriceFieldNumber;
const int MarketDataUpdateSessionHigh::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionHigh::MarketDataUpdateSessionHigh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionHigh.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionHigh)
}
MarketDataUpdateSessionHigh::MarketDataUpdateSessionHigh(const MarketDataUpdateSessionHigh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionHigh)
}

void MarketDataUpdateSessionHigh::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionHigh::~MarketDataUpdateSessionHigh() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionHigh)
  SharedDtor();
}

void MarketDataUpdateSessionHigh::SharedDtor() {
}

void MarketDataUpdateSessionHigh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionHigh& MarketDataUpdateSessionHigh::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionHigh.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionHigh::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionHigh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionHigh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionHigh)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionHigh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionHigh)
  return false;
#undef DO_
}

void MarketDataUpdateSessionHigh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionHigh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionHigh)
}

::google::protobuf::uint8* MarketDataUpdateSessionHigh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionHigh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionHigh)
  return target;
}

size_t MarketDataUpdateSessionHigh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionHigh)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double Price = 2;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionHigh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionHigh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionHigh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionHigh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionHigh)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionHigh::MergeFrom(const MarketDataUpdateSessionHigh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionHigh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionHigh::CopyFrom(const MarketDataUpdateSessionHigh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionHigh::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionHigh::Swap(MarketDataUpdateSessionHigh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionHigh::InternalSwap(MarketDataUpdateSessionHigh* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionHigh::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionHigh_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionHigh_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionHigh_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionHigh_Int::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionHigh_Int::MarketDataUpdateSessionHigh_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionHigh_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
}
MarketDataUpdateSessionHigh_Int::MarketDataUpdateSessionHigh_Int(const MarketDataUpdateSessionHigh_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
}

void MarketDataUpdateSessionHigh_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionHigh_Int::~MarketDataUpdateSessionHigh_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
  SharedDtor();
}

void MarketDataUpdateSessionHigh_Int::SharedDtor() {
}

void MarketDataUpdateSessionHigh_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionHigh_Int& MarketDataUpdateSessionHigh_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionHigh_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionHigh_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionHigh_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionHigh_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionHigh_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionHigh_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return target;
}

size_t MarketDataUpdateSessionHigh_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionHigh_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionHigh_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionHigh_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionHigh_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionHigh_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionHigh_Int::MergeFrom(const MarketDataUpdateSessionHigh_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionHigh_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionHigh_Int::CopyFrom(const MarketDataUpdateSessionHigh_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionHigh_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionHigh_Int::Swap(MarketDataUpdateSessionHigh_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionHigh_Int::InternalSwap(MarketDataUpdateSessionHigh_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionHigh_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionLow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionLow::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionLow::kPriceFieldNumber;
const int MarketDataUpdateSessionLow::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionLow::MarketDataUpdateSessionLow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionLow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionLow)
}
MarketDataUpdateSessionLow::MarketDataUpdateSessionLow(const MarketDataUpdateSessionLow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionLow)
}

void MarketDataUpdateSessionLow::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionLow::~MarketDataUpdateSessionLow() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionLow)
  SharedDtor();
}

void MarketDataUpdateSessionLow::SharedDtor() {
}

void MarketDataUpdateSessionLow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionLow& MarketDataUpdateSessionLow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionLow.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionLow::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionLow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionLow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionLow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionLow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionLow)
  return false;
#undef DO_
}

void MarketDataUpdateSessionLow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionLow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionLow)
}

::google::protobuf::uint8* MarketDataUpdateSessionLow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionLow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionLow)
  return target;
}

size_t MarketDataUpdateSessionLow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionLow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double Price = 2;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionLow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionLow)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionLow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionLow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionLow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionLow)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionLow::MergeFrom(const MarketDataUpdateSessionLow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionLow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionLow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionLow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionLow::CopyFrom(const MarketDataUpdateSessionLow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionLow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionLow::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionLow::Swap(MarketDataUpdateSessionLow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionLow::InternalSwap(MarketDataUpdateSessionLow* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionLow::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionLow_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionLow_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionLow_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionLow_Int::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionLow_Int::MarketDataUpdateSessionLow_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionLow_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionLow_Int)
}
MarketDataUpdateSessionLow_Int::MarketDataUpdateSessionLow_Int(const MarketDataUpdateSessionLow_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionLow_Int)
}

void MarketDataUpdateSessionLow_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionLow_Int::~MarketDataUpdateSessionLow_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionLow_Int)
  SharedDtor();
}

void MarketDataUpdateSessionLow_Int::SharedDtor() {
}

void MarketDataUpdateSessionLow_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionLow_Int& MarketDataUpdateSessionLow_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateSessionLow_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionLow_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionLow_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionLow_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionLow_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionLow_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionLow_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionLow_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionLow_Int)
  return target;
}

size_t MarketDataUpdateSessionLow_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  // int32 Price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // uint32 TradingSessionDate = 3;
  if (this->tradingsessiondate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradingsessiondate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionLow_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionLow_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionLow_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionLow_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionLow_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionLow_Int::MergeFrom(const MarketDataUpdateSessionLow_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.tradingsessiondate() != 0) {
    set_tradingsessiondate(from.tradingsessiondate());
  }
}

void MarketDataUpdateSessionLow_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionLow_Int::CopyFrom(const MarketDataUpdateSessionLow_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionLow_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionLow_Int::Swap(MarketDataUpdateSessionLow_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionLow_Int::InternalSwap(MarketDataUpdateSessionLow_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionLow_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateLastTradeSnapshot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateLastTradeSnapshot::kSymbolIDFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradePriceFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradeVolumeFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradeDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateLastTradeSnapshot::MarketDataUpdateLastTradeSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateLastTradeSnapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}
MarketDataUpdateLastTradeSnapshot::MarketDataUpdateLastTradeSnapshot(const MarketDataUpdateLastTradeSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lasttradeprice_, &from.lasttradeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&symbolid_) -
    reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(symbolid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}

void MarketDataUpdateLastTradeSnapshot::SharedCtor() {
  ::memset(&lasttradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(symbolid_));
}

MarketDataUpdateLastTradeSnapshot::~MarketDataUpdateLastTradeSnapshot() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  SharedDtor();
}

void MarketDataUpdateLastTradeSnapshot::SharedDtor() {
}

void MarketDataUpdateLastTradeSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateLastTradeSnapshot::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateLastTradeSnapshot& MarketDataUpdateLastTradeSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_MarketDataUpdateLastTradeSnapshot.base);
  return *internal_default_instance();
}


void MarketDataUpdateLastTradeSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lasttradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(symbolid_));
  _internal_metadata_.Clear();
}

bool MarketDataUpdateLastTradeSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastTradePrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastTradeVolume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastTradeDateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return false;
#undef DO_
}

void MarketDataUpdateLastTradeSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // double LastTradePrice = 2;
  if (this->lasttradeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lasttradeprice(), output);
  }

  // double LastTradeVolume = 3;
  if (this->lasttradevolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lasttradevolume(), output);
  }

  // double LastTradeDateTime = 4;
  if (this->lasttradedatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lasttradedatetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}

::google::protobuf::uint8* MarketDataUpdateLastTradeSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // double LastTradePrice = 2;
  if (this->lasttradeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lasttradeprice(), target);
  }

  // double LastTradeVolume = 3;
  if (this->lasttradevolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lasttradevolume(), target);
  }

  // double LastTradeDateTime = 4;
  if (this->lasttradedatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lasttradedatetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return target;
}

size_t MarketDataUpdateLastTradeSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double LastTradePrice = 2;
  if (this->lasttradeprice() != 0) {
    total_size += 1 + 8;
  }

  // double LastTradeVolume = 3;
  if (this->lasttradevolume() != 0) {
    total_size += 1 + 8;
  }

  // double LastTradeDateTime = 4;
  if (this->lasttradedatetime() != 0) {
    total_size += 1 + 8;
  }

  // uint32 SymbolID = 1;
  if (this->symbolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateLastTradeSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateLastTradeSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateLastTradeSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateLastTradeSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateLastTradeSnapshot)
    MergeFrom(*source);
  }
}

void MarketDataUpdateLastTradeSnapshot::MergeFrom(const MarketDataUpdateLastTradeSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lasttradeprice() != 0) {
    set_lasttradeprice(from.lasttradeprice());
  }
  if (from.lasttradevolume() != 0) {
    set_lasttradevolume(from.lasttradevolume());
  }
  if (from.lasttradedatetime() != 0) {
    set_lasttradedatetime(from.lasttradedatetime());
  }
  if (from.symbolid() != 0) {
    set_symbolid(from.symbolid());
  }
}

void MarketDataUpdateLastTradeSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateLastTradeSnapshot::CopyFrom(const MarketDataUpdateLastTradeSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateLastTradeSnapshot::IsInitialized() const {
  return true;
}

void MarketDataUpdateLastTradeSnapshot::Swap(MarketDataUpdateLastTradeSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateLastTradeSnapshot::InternalSwap(MarketDataUpdateLastTradeSnapshot* other) {
  using std::swap;
  swap(lasttradeprice_, other->lasttradeprice_);
  swap(lasttradevolume_, other->lasttradevolume_);
  swap(lasttradedatetime_, other->lasttradedatetime_);
  swap(symbolid_, other->symbolid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateLastTradeSnapshot::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewSingleOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewSingleOrder::kSymbolFieldNumber;
const int SubmitNewSingleOrder::kExchangeFieldNumber;
const int SubmitNewSingleOrder::kTradeAccountFieldNumber;
const int SubmitNewSingleOrder::kClientOrderIDFieldNumber;
const int SubmitNewSingleOrder::kOrderTypeFieldNumber;
const int SubmitNewSingleOrder::kBuySellFieldNumber;
const int SubmitNewSingleOrder::kPrice1FieldNumber;
const int SubmitNewSingleOrder::kPrice2FieldNumber;
const int SubmitNewSingleOrder::kQuantityFieldNumber;
const int SubmitNewSingleOrder::kTimeInForceFieldNumber;
const int SubmitNewSingleOrder::kGoodTillDateTimeFieldNumber;
const int SubmitNewSingleOrder::kIsAutomatedOrderFieldNumber;
const int SubmitNewSingleOrder::kIsParentOrderFieldNumber;
const int SubmitNewSingleOrder::kFreeFormTextFieldNumber;
const int SubmitNewSingleOrder::kOpenOrCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewSingleOrder::SubmitNewSingleOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewSingleOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewSingleOrder)
}
SubmitNewSingleOrder::SubmitNewSingleOrder(const SubmitNewSingleOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid().size() > 0) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.freeformtext().size() > 0) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_, &from.ordertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&openorclose_) -
    reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewSingleOrder)
}

void SubmitNewSingleOrder::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openorclose_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
}

SubmitNewSingleOrder::~SubmitNewSingleOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewSingleOrder)
  SharedDtor();
}

void SubmitNewSingleOrder::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewSingleOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewSingleOrder::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewSingleOrder& SubmitNewSingleOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewSingleOrder.base);
  return *internal_default_instance();
}


void SubmitNewSingleOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewSingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openorclose_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
  _internal_metadata_.Clear();
}

bool SubmitNewSingleOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewSingleOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrder.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrder.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrder.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrder.ClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderTypeEnum OrderType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TimeInForceEnum TimeInForce = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 GoodTillDateTime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsAutomatedOrder = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsParentOrder = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isparentorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FreeFormText = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrder.FreeFormText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewSingleOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewSingleOrder)
  return false;
#undef DO_
}

void SubmitNewSingleOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewSingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // string ClientOrderID = 4;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientorderid(), output);
  }

  // .DTC_PB.OrderTypeEnum OrderType = 5;
  if (this->ordertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ordertype(), output);
  }

  // .DTC_PB.BuySellEnum BuySell = 6;
  if (this->buysell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->buysell(), output);
  }

  // double Price1 = 7;
  if (this->price1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price1(), output);
  }

  // double Price2 = 8;
  if (this->price2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price2(), output);
  }

  // double Quantity = 9;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->quantity(), output);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->timeinforce(), output);
  }

  // sfixed64 GoodTillDateTime = 11;
  if (this->goodtilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->goodtilldatetime(), output);
  }

  // uint32 IsAutomatedOrder = 12;
  if (this->isautomatedorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->isautomatedorder(), output);
  }

  // uint32 IsParentOrder = 13;
  if (this->isparentorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->isparentorder(), output);
  }

  // string FreeFormText = 14;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->freeformtext(), output);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
  if (this->openorclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->openorclose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewSingleOrder)
}

::google::protobuf::uint8* SubmitNewSingleOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewSingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // string ClientOrderID = 4;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientorderid(), target);
  }

  // .DTC_PB.OrderTypeEnum OrderType = 5;
  if (this->ordertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ordertype(), target);
  }

  // .DTC_PB.BuySellEnum BuySell = 6;
  if (this->buysell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->buysell(), target);
  }

  // double Price1 = 7;
  if (this->price1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price1(), target);
  }

  // double Price2 = 8;
  if (this->price2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price2(), target);
  }

  // double Quantity = 9;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->quantity(), target);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->timeinforce(), target);
  }

  // sfixed64 GoodTillDateTime = 11;
  if (this->goodtilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->goodtilldatetime(), target);
  }

  // uint32 IsAutomatedOrder = 12;
  if (this->isautomatedorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->isautomatedorder(), target);
  }

  // uint32 IsParentOrder = 13;
  if (this->isparentorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->isparentorder(), target);
  }

  // string FreeFormText = 14;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->freeformtext(), target);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
  if (this->openorclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->openorclose(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewSingleOrder)
  return target;
}

size_t SubmitNewSingleOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewSingleOrder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // string ClientOrderID = 4;
  if (this->clientorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid());
  }

  // string FreeFormText = 14;
  if (this->freeformtext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->freeformtext());
  }

  // .DTC_PB.OrderTypeEnum OrderType = 5;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
  }

  // .DTC_PB.BuySellEnum BuySell = 6;
  if (this->buysell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
  }

  // double Price1 = 7;
  if (this->price1() != 0) {
    total_size += 1 + 8;
  }

  // double Price2 = 8;
  if (this->price2() != 0) {
    total_size += 1 + 8;
  }

  // double Quantity = 9;
  if (this->quantity() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 GoodTillDateTime = 11;
  if (this->goodtilldatetime() != 0) {
    total_size += 1 + 8;
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // uint32 IsAutomatedOrder = 12;
  if (this->isautomatedorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isautomatedorder());
  }

  // uint32 IsParentOrder = 13;
  if (this->isparentorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isparentorder());
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
  if (this->openorclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewSingleOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewSingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewSingleOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewSingleOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewSingleOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewSingleOrder)
    MergeFrom(*source);
  }
}

void SubmitNewSingleOrder::MergeFrom(const SubmitNewSingleOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewSingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.clientorderid().size() > 0) {

    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  if (from.freeformtext().size() > 0) {

    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  if (from.ordertype() != 0) {
    set_ordertype(from.ordertype());
  }
  if (from.buysell() != 0) {
    set_buysell(from.buysell());
  }
  if (from.price1() != 0) {
    set_price1(from.price1());
  }
  if (from.price2() != 0) {
    set_price2(from.price2());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.goodtilldatetime() != 0) {
    set_goodtilldatetime(from.goodtilldatetime());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.isautomatedorder() != 0) {
    set_isautomatedorder(from.isautomatedorder());
  }
  if (from.isparentorder() != 0) {
    set_isparentorder(from.isparentorder());
  }
  if (from.openorclose() != 0) {
    set_openorclose(from.openorclose());
  }
}

void SubmitNewSingleOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewSingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewSingleOrder::CopyFrom(const SubmitNewSingleOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewSingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewSingleOrder::IsInitialized() const {
  return true;
}

void SubmitNewSingleOrder::Swap(SubmitNewSingleOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewSingleOrder::InternalSwap(SubmitNewSingleOrder* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_, other->ordertype_);
  swap(buysell_, other->buysell_);
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(isparentorder_, other->isparentorder_);
  swap(openorclose_, other->openorclose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewSingleOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewSingleOrderInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewSingleOrderInt::kSymbolFieldNumber;
const int SubmitNewSingleOrderInt::kExchangeFieldNumber;
const int SubmitNewSingleOrderInt::kTradeAccountFieldNumber;
const int SubmitNewSingleOrderInt::kClientOrderIDFieldNumber;
const int SubmitNewSingleOrderInt::kOrderTypeFieldNumber;
const int SubmitNewSingleOrderInt::kBuySellFieldNumber;
const int SubmitNewSingleOrderInt::kPrice1FieldNumber;
const int SubmitNewSingleOrderInt::kPrice2FieldNumber;
const int SubmitNewSingleOrderInt::kDivisorFieldNumber;
const int SubmitNewSingleOrderInt::kQuantityFieldNumber;
const int SubmitNewSingleOrderInt::kTimeInForceFieldNumber;
const int SubmitNewSingleOrderInt::kGoodTillDateTimeFieldNumber;
const int SubmitNewSingleOrderInt::kIsAutomatedOrderFieldNumber;
const int SubmitNewSingleOrderInt::kIsParentOrderFieldNumber;
const int SubmitNewSingleOrderInt::kFreeFormTextFieldNumber;
const int SubmitNewSingleOrderInt::kOpenOrCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewSingleOrderInt::SubmitNewSingleOrderInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewSingleOrderInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewSingleOrderInt)
}
SubmitNewSingleOrderInt::SubmitNewSingleOrderInt(const SubmitNewSingleOrderInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid().size() > 0) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.freeformtext().size() > 0) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_, &from.ordertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&openorclose_) -
    reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewSingleOrderInt)
}

void SubmitNewSingleOrderInt::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openorclose_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
}

SubmitNewSingleOrderInt::~SubmitNewSingleOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewSingleOrderInt)
  SharedDtor();
}

void SubmitNewSingleOrderInt::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewSingleOrderInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewSingleOrderInt::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewSingleOrderInt& SubmitNewSingleOrderInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewSingleOrderInt.base);
  return *internal_default_instance();
}


void SubmitNewSingleOrderInt::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewSingleOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openorclose_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
  _internal_metadata_.Clear();
}

bool SubmitNewSingleOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewSingleOrderInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.ClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderTypeEnum OrderType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Divisor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Quantity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TimeInForceEnum TimeInForce = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 GoodTillDateTime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsAutomatedOrder = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsParentOrder = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isparentorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FreeFormText = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.FreeFormText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewSingleOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewSingleOrderInt)
  return false;
#undef DO_
}

void SubmitNewSingleOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewSingleOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // string ClientOrderID = 4;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientorderid(), output);
  }

  // .DTC_PB.OrderTypeEnum OrderType = 5;
  if (this->ordertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ordertype(), output);
  }

  // .DTC_PB.BuySellEnum BuySell = 6;
  if (this->buysell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->buysell(), output);
  }

  // int64 Price1 = 7;
  if (this->price1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->price1(), output);
  }

  // int64 Price2 = 8;
  if (this->price2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->price2(), output);
  }

  // float Divisor = 9;
  if (this->divisor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->divisor(), output);
  }

  // int64 Quantity = 10;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->quantity(), output);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 11;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->timeinforce(), output);
  }

  // sfixed64 GoodTillDateTime = 12;
  if (this->goodtilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->goodtilldatetime(), output);
  }

  // uint32 IsAutomatedOrder = 13;
  if (this->isautomatedorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->isautomatedorder(), output);
  }

  // uint32 IsParentOrder = 14;
  if (this->isparentorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->isparentorder(), output);
  }

  // string FreeFormText = 15;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->freeformtext(), output);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
  if (this->openorclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->openorclose(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewSingleOrderInt)
}

::google::protobuf::uint8* SubmitNewSingleOrderInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewSingleOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // string ClientOrderID = 4;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientorderid(), target);
  }

  // .DTC_PB.OrderTypeEnum OrderType = 5;
  if (this->ordertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ordertype(), target);
  }

  // .DTC_PB.BuySellEnum BuySell = 6;
  if (this->buysell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->buysell(), target);
  }

  // int64 Price1 = 7;
  if (this->price1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->price1(), target);
  }

  // int64 Price2 = 8;
  if (this->price2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->price2(), target);
  }

  // float Divisor = 9;
  if (this->divisor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->divisor(), target);
  }

  // int64 Quantity = 10;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->quantity(), target);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 11;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->timeinforce(), target);
  }

  // sfixed64 GoodTillDateTime = 12;
  if (this->goodtilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->goodtilldatetime(), target);
  }

  // uint32 IsAutomatedOrder = 13;
  if (this->isautomatedorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->isautomatedorder(), target);
  }

  // uint32 IsParentOrder = 14;
  if (this->isparentorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->isparentorder(), target);
  }

  // string FreeFormText = 15;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->freeformtext(), target);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
  if (this->openorclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->openorclose(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewSingleOrderInt)
  return target;
}

size_t SubmitNewSingleOrderInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewSingleOrderInt)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // string ClientOrderID = 4;
  if (this->clientorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid());
  }

  // string FreeFormText = 15;
  if (this->freeformtext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->freeformtext());
  }

  // .DTC_PB.OrderTypeEnum OrderType = 5;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
  }

  // .DTC_PB.BuySellEnum BuySell = 6;
  if (this->buysell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
  }

  // int64 Price1 = 7;
  if (this->price1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price1());
  }

  // int64 Price2 = 8;
  if (this->price2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price2());
  }

  // int64 Quantity = 10;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quantity());
  }

  // float Divisor = 9;
  if (this->divisor() != 0) {
    total_size += 1 + 4;
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 11;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // sfixed64 GoodTillDateTime = 12;
  if (this->goodtilldatetime() != 0) {
    total_size += 1 + 8;
  }

  // uint32 IsAutomatedOrder = 13;
  if (this->isautomatedorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isautomatedorder());
  }

  // uint32 IsParentOrder = 14;
  if (this->isparentorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isparentorder());
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
  if (this->openorclose() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewSingleOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewSingleOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewSingleOrderInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewSingleOrderInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewSingleOrderInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewSingleOrderInt)
    MergeFrom(*source);
  }
}

void SubmitNewSingleOrderInt::MergeFrom(const SubmitNewSingleOrderInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewSingleOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.clientorderid().size() > 0) {

    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  if (from.freeformtext().size() > 0) {

    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  if (from.ordertype() != 0) {
    set_ordertype(from.ordertype());
  }
  if (from.buysell() != 0) {
    set_buysell(from.buysell());
  }
  if (from.price1() != 0) {
    set_price1(from.price1());
  }
  if (from.price2() != 0) {
    set_price2(from.price2());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.divisor() != 0) {
    set_divisor(from.divisor());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.goodtilldatetime() != 0) {
    set_goodtilldatetime(from.goodtilldatetime());
  }
  if (from.isautomatedorder() != 0) {
    set_isautomatedorder(from.isautomatedorder());
  }
  if (from.isparentorder() != 0) {
    set_isparentorder(from.isparentorder());
  }
  if (from.openorclose() != 0) {
    set_openorclose(from.openorclose());
  }
}

void SubmitNewSingleOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewSingleOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewSingleOrderInt::CopyFrom(const SubmitNewSingleOrderInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewSingleOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewSingleOrderInt::IsInitialized() const {
  return true;
}

void SubmitNewSingleOrderInt::Swap(SubmitNewSingleOrderInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewSingleOrderInt::InternalSwap(SubmitNewSingleOrderInt* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_, other->ordertype_);
  swap(buysell_, other->buysell_);
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(divisor_, other->divisor_);
  swap(timeinforce_, other->timeinforce_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(isparentorder_, other->isparentorder_);
  swap(openorclose_, other->openorclose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewSingleOrderInt::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CancelReplaceOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelReplaceOrder::kServerOrderIDFieldNumber;
const int CancelReplaceOrder::kClientOrderIDFieldNumber;
const int CancelReplaceOrder::kPrice1FieldNumber;
const int CancelReplaceOrder::kPrice2FieldNumber;
const int CancelReplaceOrder::kQuantityFieldNumber;
const int CancelReplaceOrder::kPrice1IsSetFieldNumber;
const int CancelReplaceOrder::kPrice2IsSetFieldNumber;
const int CancelReplaceOrder::kTimeInForceFieldNumber;
const int CancelReplaceOrder::kGoodTillDateTimeFieldNumber;
const int CancelReplaceOrder::kUpdatePrice1OffsetToParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelReplaceOrder::CancelReplaceOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CancelReplaceOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelReplaceOrder)
}
CancelReplaceOrder::CancelReplaceOrder(const CancelReplaceOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverorderid().size() > 0) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid().size() > 0) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  ::memcpy(&price1_, &from.price1_,
    static_cast<size_t>(reinterpret_cast<char*>(&updateprice1offsettoparent_) -
    reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelReplaceOrder)
}

void CancelReplaceOrder::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateprice1offsettoparent_) -
      reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
}

CancelReplaceOrder::~CancelReplaceOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelReplaceOrder)
  SharedDtor();
}

void CancelReplaceOrder::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelReplaceOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CancelReplaceOrder::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelReplaceOrder& CancelReplaceOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CancelReplaceOrder.base);
  return *internal_default_instance();
}


void CancelReplaceOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CancelReplaceOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateprice1offsettoparent_) -
      reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
  _internal_metadata_.Clear();
}

bool CancelReplaceOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelReplaceOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ServerOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CancelReplaceOrder.ServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CancelReplaceOrder.ClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Price1IsSet = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price1isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Price2IsSet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TimeInForceEnum TimeInForce = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 GoodTillDateTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UpdatePrice1OffsetToParent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateprice1offsettoparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelReplaceOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelReplaceOrder)
  return false;
#undef DO_
}

void CancelReplaceOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelReplaceOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  // double Price1 = 3;
  if (this->price1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price1(), output);
  }

  // double Price2 = 4;
  if (this->price2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price2(), output);
  }

  // double Quantity = 5;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->quantity(), output);
  }

  // uint32 Price1IsSet = 6;
  if (this->price1isset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price1isset(), output);
  }

  // uint32 Price2IsSet = 7;
  if (this->price2isset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price2isset(), output);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 9;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->timeinforce(), output);
  }

  // uint64 GoodTillDateTime = 10;
  if (this->goodtilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->goodtilldatetime(), output);
  }

  // uint32 UpdatePrice1OffsetToParent = 11;
  if (this->updateprice1offsettoparent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->updateprice1offsettoparent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelReplaceOrder)
}

::google::protobuf::uint8* CancelReplaceOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelReplaceOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  // double Price1 = 3;
  if (this->price1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price1(), target);
  }

  // double Price2 = 4;
  if (this->price2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price2(), target);
  }

  // double Quantity = 5;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->quantity(), target);
  }

  // uint32 Price1IsSet = 6;
  if (this->price1isset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->price1isset(), target);
  }

  // uint32 Price2IsSet = 7;
  if (this->price2isset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price2isset(), target);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 9;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->timeinforce(), target);
  }

  // uint64 GoodTillDateTime = 10;
  if (this->goodtilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->goodtilldatetime(), target);
  }

  // uint32 UpdatePrice1OffsetToParent = 11;
  if (this->updateprice1offsettoparent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->updateprice1offsettoparent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelReplaceOrder)
  return target;
}

size_t CancelReplaceOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CancelReplaceOrder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverorderid());
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid());
  }

  // double Price1 = 3;
  if (this->price1() != 0) {
    total_size += 1 + 8;
  }

  // double Price2 = 4;
  if (this->price2() != 0) {
    total_size += 1 + 8;
  }

  // double Quantity = 5;
  if (this->quantity() != 0) {
    total_size += 1 + 8;
  }

  // uint32 Price1IsSet = 6;
  if (this->price1isset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price1isset());
  }

  // uint32 Price2IsSet = 7;
  if (this->price2isset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price2isset());
  }

  // uint64 GoodTillDateTime = 10;
  if (this->goodtilldatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->goodtilldatetime());
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 9;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // uint32 UpdatePrice1OffsetToParent = 11;
  if (this->updateprice1offsettoparent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateprice1offsettoparent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelReplaceOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CancelReplaceOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelReplaceOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelReplaceOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CancelReplaceOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CancelReplaceOrder)
    MergeFrom(*source);
  }
}

void CancelReplaceOrder::MergeFrom(const CancelReplaceOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CancelReplaceOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverorderid().size() > 0) {

    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  if (from.clientorderid().size() > 0) {

    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  if (from.price1() != 0) {
    set_price1(from.price1());
  }
  if (from.price2() != 0) {
    set_price2(from.price2());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.price1isset() != 0) {
    set_price1isset(from.price1isset());
  }
  if (from.price2isset() != 0) {
    set_price2isset(from.price2isset());
  }
  if (from.goodtilldatetime() != 0) {
    set_goodtilldatetime(from.goodtilldatetime());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.updateprice1offsettoparent() != 0) {
    set_updateprice1offsettoparent(from.updateprice1offsettoparent());
  }
}

void CancelReplaceOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CancelReplaceOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelReplaceOrder::CopyFrom(const CancelReplaceOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CancelReplaceOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelReplaceOrder::IsInitialized() const {
  return true;
}

void CancelReplaceOrder::Swap(CancelReplaceOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelReplaceOrder::InternalSwap(CancelReplaceOrder* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(price1isset_, other->price1isset_);
  swap(price2isset_, other->price2isset_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(updateprice1offsettoparent_, other->updateprice1offsettoparent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelReplaceOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CancelReplaceOrderInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelReplaceOrderInt::kServerOrderIDFieldNumber;
const int CancelReplaceOrderInt::kClientOrderIDFieldNumber;
const int CancelReplaceOrderInt::kPrice1FieldNumber;
const int CancelReplaceOrderInt::kPrice2FieldNumber;
const int CancelReplaceOrderInt::kDivisorFieldNumber;
const int CancelReplaceOrderInt::kQuantityFieldNumber;
const int CancelReplaceOrderInt::kPrice1IsSetFieldNumber;
const int CancelReplaceOrderInt::kPrice2IsSetFieldNumber;
const int CancelReplaceOrderInt::kTimeInForceFieldNumber;
const int CancelReplaceOrderInt::kGoodTillDateTimeFieldNumber;
const int CancelReplaceOrderInt::kUpdatePrice1OffsetToParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelReplaceOrderInt::CancelReplaceOrderInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CancelReplaceOrderInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelReplaceOrderInt)
}
CancelReplaceOrderInt::CancelReplaceOrderInt(const CancelReplaceOrderInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverorderid().size() > 0) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid().size() > 0) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  ::memcpy(&price1_, &from.price1_,
    static_cast<size_t>(reinterpret_cast<char*>(&updateprice1offsettoparent_) -
    reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelReplaceOrderInt)
}

void CancelReplaceOrderInt::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateprice1offsettoparent_) -
      reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
}

CancelReplaceOrderInt::~CancelReplaceOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelReplaceOrderInt)
  SharedDtor();
}

void CancelReplaceOrderInt::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelReplaceOrderInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CancelReplaceOrderInt::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelReplaceOrderInt& CancelReplaceOrderInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CancelReplaceOrderInt.base);
  return *internal_default_instance();
}


void CancelReplaceOrderInt::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CancelReplaceOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateprice1offsettoparent_) -
      reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
  _internal_metadata_.Clear();
}

bool CancelReplaceOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelReplaceOrderInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ServerOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CancelReplaceOrderInt.ServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CancelReplaceOrderInt.ClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Divisor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Quantity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Price1IsSet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price1isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Price2IsSet = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TimeInForceEnum TimeInForce = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 GoodTillDateTime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UpdatePrice1OffsetToParent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateprice1offsettoparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelReplaceOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelReplaceOrderInt)
  return false;
#undef DO_
}

void CancelReplaceOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelReplaceOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  // int64 Price1 = 3;
  if (this->price1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->price1(), output);
  }

  // int64 Price2 = 4;
  if (this->price2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->price2(), output);
  }

  // float Divisor = 5;
  if (this->divisor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->divisor(), output);
  }

  // int64 Quantity = 6;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->quantity(), output);
  }

  // uint32 Price1IsSet = 7;
  if (this->price1isset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price1isset(), output);
  }

  // uint32 Price2IsSet = 8;
  if (this->price2isset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->price2isset(), output);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->timeinforce(), output);
  }

  // uint64 GoodTillDateTime = 11;
  if (this->goodtilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->goodtilldatetime(), output);
  }

  // uint32 UpdatePrice1OffsetToParent = 12;
  if (this->updateprice1offsettoparent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->updateprice1offsettoparent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelReplaceOrderInt)
}

::google::protobuf::uint8* CancelReplaceOrderInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelReplaceOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  // int64 Price1 = 3;
  if (this->price1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->price1(), target);
  }

  // int64 Price2 = 4;
  if (this->price2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->price2(), target);
  }

  // float Divisor = 5;
  if (this->divisor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->divisor(), target);
  }

  // int64 Quantity = 6;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->quantity(), target);
  }

  // uint32 Price1IsSet = 7;
  if (this->price1isset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price1isset(), target);
  }

  // uint32 Price2IsSet = 8;
  if (this->price2isset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->price2isset(), target);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->timeinforce(), target);
  }

  // uint64 GoodTillDateTime = 11;
  if (this->goodtilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->goodtilldatetime(), target);
  }

  // uint32 UpdatePrice1OffsetToParent = 12;
  if (this->updateprice1offsettoparent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->updateprice1offsettoparent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelReplaceOrderInt)
  return target;
}

size_t CancelReplaceOrderInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CancelReplaceOrderInt)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverorderid());
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid());
  }

  // int64 Price1 = 3;
  if (this->price1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price1());
  }

  // int64 Price2 = 4;
  if (this->price2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price2());
  }

  // int64 Quantity = 6;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quantity());
  }

  // float Divisor = 5;
  if (this->divisor() != 0) {
    total_size += 1 + 4;
  }

  // uint32 Price1IsSet = 7;
  if (this->price1isset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price1isset());
  }

  // uint32 Price2IsSet = 8;
  if (this->price2isset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price2isset());
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // uint64 GoodTillDateTime = 11;
  if (this->goodtilldatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->goodtilldatetime());
  }

  // uint32 UpdatePrice1OffsetToParent = 12;
  if (this->updateprice1offsettoparent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updateprice1offsettoparent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelReplaceOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CancelReplaceOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelReplaceOrderInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelReplaceOrderInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CancelReplaceOrderInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CancelReplaceOrderInt)
    MergeFrom(*source);
  }
}

void CancelReplaceOrderInt::MergeFrom(const CancelReplaceOrderInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CancelReplaceOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverorderid().size() > 0) {

    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  if (from.clientorderid().size() > 0) {

    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  if (from.price1() != 0) {
    set_price1(from.price1());
  }
  if (from.price2() != 0) {
    set_price2(from.price2());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.divisor() != 0) {
    set_divisor(from.divisor());
  }
  if (from.price1isset() != 0) {
    set_price1isset(from.price1isset());
  }
  if (from.price2isset() != 0) {
    set_price2isset(from.price2isset());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.goodtilldatetime() != 0) {
    set_goodtilldatetime(from.goodtilldatetime());
  }
  if (from.updateprice1offsettoparent() != 0) {
    set_updateprice1offsettoparent(from.updateprice1offsettoparent());
  }
}

void CancelReplaceOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CancelReplaceOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelReplaceOrderInt::CopyFrom(const CancelReplaceOrderInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CancelReplaceOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelReplaceOrderInt::IsInitialized() const {
  return true;
}

void CancelReplaceOrderInt::Swap(CancelReplaceOrderInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelReplaceOrderInt::InternalSwap(CancelReplaceOrderInt* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(divisor_, other->divisor_);
  swap(price1isset_, other->price1isset_);
  swap(price2isset_, other->price2isset_);
  swap(timeinforce_, other->timeinforce_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(updateprice1offsettoparent_, other->updateprice1offsettoparent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelReplaceOrderInt::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CancelOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelOrder::kServerOrderIDFieldNumber;
const int CancelOrder::kClientOrderIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelOrder::CancelOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CancelOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelOrder)
}
CancelOrder::CancelOrder(const CancelOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverorderid().size() > 0) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid().size() > 0) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelOrder)
}

void CancelOrder::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelOrder)
  SharedDtor();
}

void CancelOrder::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CancelOrder::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelOrder& CancelOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CancelOrder.base);
  return *internal_default_instance();
}


void CancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CancelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ServerOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CancelOrder.ServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CancelOrder.ClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelOrder)
  return false;
#undef DO_
}

void CancelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelOrder.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelOrder.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelOrder)
}

::google::protobuf::uint8* CancelOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelOrder.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CancelOrder.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelOrder)
  return target;
}

size_t CancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CancelOrder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServerOrderID = 1;
  if (this->serverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverorderid());
  }

  // string ClientOrderID = 2;
  if (this->clientorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CancelOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CancelOrder)
    MergeFrom(*source);
  }
}

void CancelOrder::MergeFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverorderid().size() > 0) {

    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  if (from.clientorderid().size() > 0) {

    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
}

void CancelOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {
  return true;
}

void CancelOrder::Swap(CancelOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelOrder::InternalSwap(CancelOrder* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewOCOOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewOCOOrder::kSymbolFieldNumber;
const int SubmitNewOCOOrder::kExchangeFieldNumber;
const int SubmitNewOCOOrder::kClientOrderID1FieldNumber;
const int SubmitNewOCOOrder::kOrderType1FieldNumber;
const int SubmitNewOCOOrder::kBuySell1FieldNumber;
const int SubmitNewOCOOrder::kPrice11FieldNumber;
const int SubmitNewOCOOrder::kPrice21FieldNumber;
const int SubmitNewOCOOrder::kQuantity1FieldNumber;
const int SubmitNewOCOOrder::kClientOrderID2FieldNumber;
const int SubmitNewOCOOrder::kOrderType2FieldNumber;
const int SubmitNewOCOOrder::kBuySell2FieldNumber;
const int SubmitNewOCOOrder::kPrice12FieldNumber;
const int SubmitNewOCOOrder::kPrice22FieldNumber;
const int SubmitNewOCOOrder::kQuantity2FieldNumber;
const int SubmitNewOCOOrder::kTimeInForceFieldNumber;
const int SubmitNewOCOOrder::kGoodTillDateTimeFieldNumber;
const int SubmitNewOCOOrder::kTradeAccountFieldNumber;
const int SubmitNewOCOOrder::kIsAutomatedOrderFieldNumber;
const int SubmitNewOCOOrder::kParentTriggerClientOrderIDFieldNumber;
const int SubmitNewOCOOrder::kFreeFormTextFieldNumber;
const int SubmitNewOCOOrder::kOpenOrCloseFieldNumber;
const int SubmitNewOCOOrder::kPartialFillHandlingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewOCOOrder::SubmitNewOCOOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewOCOOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewOCOOrder)
}
SubmitNewOCOOrder::SubmitNewOCOOrder(const SubmitNewOCOOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid_1().size() > 0) {
    clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
  }
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid_2().size() > 0) {
    clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parenttriggerclientorderid().size() > 0) {
    parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.freeformtext().size() > 0) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_1_, &from.ordertype_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&partialfillhandling_) -
    reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewOCOOrder)
}

void SubmitNewOCOOrder::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partialfillhandling_) -
      reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
}

SubmitNewOCOOrder::~SubmitNewOCOOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewOCOOrder)
  SharedDtor();
}

void SubmitNewOCOOrder::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewOCOOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewOCOOrder::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewOCOOrder& SubmitNewOCOOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewOCOOrder.base);
  return *internal_default_instance();
}


void SubmitNewOCOOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewOCOOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partialfillhandling_) -
      reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
  _internal_metadata_.Clear();
}

bool SubmitNewOCOOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewOCOOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrder.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrder.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrder.ClientOrderID_1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ordertype_1(static_cast< ::DTC_PB::OrderTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell_1(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price1_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price2_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID_2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrder.ClientOrderID_2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ordertype_2(static_cast< ::DTC_PB::OrderTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell_2(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price1_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price2_2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity_2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TimeInForceEnum TimeInForce = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 GoodTillDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrder.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsAutomatedOrder = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ParentTriggerClientOrderID = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parenttriggerclientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrder.ParentTriggerClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FreeFormText = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrder.FreeFormText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_partialfillhandling(static_cast< ::DTC_PB::PartialFillHandlingEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewOCOOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewOCOOrder)
  return false;
#undef DO_
}

void SubmitNewOCOOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewOCOOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // string ClientOrderID_1 = 3;
  if (this->clientorderid_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientorderid_1(), output);
  }

  // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (this->ordertype_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ordertype_1(), output);
  }

  // .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (this->buysell_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->buysell_1(), output);
  }

  // double Price1_1 = 6;
  if (this->price1_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price1_1(), output);
  }

  // double Price2_1 = 7;
  if (this->price2_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price2_1(), output);
  }

  // double Quantity_1 = 8;
  if (this->quantity_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->quantity_1(), output);
  }

  // string ClientOrderID_2 = 9;
  if (this->clientorderid_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientorderid_2(), output);
  }

  // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (this->ordertype_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ordertype_2(), output);
  }

  // .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (this->buysell_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->buysell_2(), output);
  }

  // double Price1_2 = 12;
  if (this->price1_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->price1_2(), output);
  }

  // double Price2_2 = 13;
  if (this->price2_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->price2_2(), output);
  }

  // double Quantity_2 = 14;
  if (this->quantity_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->quantity_2(), output);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->timeinforce(), output);
  }

  // sfixed64 GoodTillDateTime = 16;
  if (this->goodtilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->goodtilldatetime(), output);
  }

  // string TradeAccount = 17;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->tradeaccount(), output);
  }

  // uint32 IsAutomatedOrder = 18;
  if (this->isautomatedorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->isautomatedorder(), output);
  }

  // string ParentTriggerClientOrderID = 19;
  if (this->parenttriggerclientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ParentTriggerClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->parenttriggerclientorderid(), output);
  }

  // string FreeFormText = 20;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->freeformtext(), output);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
  if (this->openorclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->openorclose(), output);
  }

  // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
  if (this->partialfillhandling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->partialfillhandling(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewOCOOrder)
}

::google::protobuf::uint8* SubmitNewOCOOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewOCOOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // string ClientOrderID_1 = 3;
  if (this->clientorderid_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientorderid_1(), target);
  }

  // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (this->ordertype_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ordertype_1(), target);
  }

  // .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (this->buysell_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->buysell_1(), target);
  }

  // double Price1_1 = 6;
  if (this->price1_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price1_1(), target);
  }

  // double Price2_1 = 7;
  if (this->price2_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price2_1(), target);
  }

  // double Quantity_1 = 8;
  if (this->quantity_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->quantity_1(), target);
  }

  // string ClientOrderID_2 = 9;
  if (this->clientorderid_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientorderid_2(), target);
  }

  // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (this->ordertype_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ordertype_2(), target);
  }

  // .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (this->buysell_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->buysell_2(), target);
  }

  // double Price1_2 = 12;
  if (this->price1_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->price1_2(), target);
  }

  // double Price2_2 = 13;
  if (this->price2_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->price2_2(), target);
  }

  // double Quantity_2 = 14;
  if (this->quantity_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->quantity_2(), target);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->timeinforce(), target);
  }

  // sfixed64 GoodTillDateTime = 16;
  if (this->goodtilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->goodtilldatetime(), target);
  }

  // string TradeAccount = 17;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradeaccount(), target);
  }

  // uint32 IsAutomatedOrder = 18;
  if (this->isautomatedorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->isautomatedorder(), target);
  }

  // string ParentTriggerClientOrderID = 19;
  if (this->parenttriggerclientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ParentTriggerClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->parenttriggerclientorderid(), target);
  }

  // string FreeFormText = 20;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->freeformtext(), target);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
  if (this->openorclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->openorclose(), target);
  }

  // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
  if (this->partialfillhandling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->partialfillhandling(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewOCOOrder)
  return target;
}

size_t SubmitNewOCOOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewOCOOrder)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string ClientOrderID_1 = 3;
  if (this->clientorderid_1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid_1());
  }

  // string ClientOrderID_2 = 9;
  if (this->clientorderid_2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid_2());
  }

  // string TradeAccount = 17;
  if (this->tradeaccount().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // string ParentTriggerClientOrderID = 19;
  if (this->parenttriggerclientorderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parenttriggerclientorderid());
  }

  // string FreeFormText = 20;
  if (this->freeformtext().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->freeformtext());
  }

  // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (this->ordertype_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_1());
  }

  // .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (this->buysell_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_1());
  }

  // double Price1_1 = 6;
  if (this->price1_1() != 0) {
    total_size += 1 + 8;
  }

  // double Price2_1 = 7;
  if (this->price2_1() != 0) {
    total_size += 1 + 8;
  }

  // double Quantity_1 = 8;
  if (this->quantity_1() != 0) {
    total_size += 1 + 8;
  }

  // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (this->ordertype_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_2());
  }

  // .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (this->buysell_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_2());
  }

  // double Price1_2 = 12;
  if (this->price1_2() != 0) {
    total_size += 1 + 8;
  }

  // double Price2_2 = 13;
  if (this->price2_2() != 0) {
    total_size += 1 + 8;
  }

  // double Quantity_2 = 14;
  if (this->quantity_2() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 GoodTillDateTime = 16;
  if (this->goodtilldatetime() != 0) {
    total_size += 2 + 8;
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // uint32 IsAutomatedOrder = 18;
  if (this->isautomatedorder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isautomatedorder());
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
  if (this->openorclose() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
  }

  // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
  if (this->partialfillhandling() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->partialfillhandling());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewOCOOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewOCOOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewOCOOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewOCOOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewOCOOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewOCOOrder)
    MergeFrom(*source);
  }
}

void SubmitNewOCOOrder::MergeFrom(const SubmitNewOCOOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewOCOOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.clientorderid_1().size() > 0) {

    clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
  }
  if (from.clientorderid_2().size() > 0) {

    clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.parenttriggerclientorderid().size() > 0) {

    parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
  }
  if (from.freeformtext().size() > 0) {

    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  if (from.ordertype_1() != 0) {
    set_ordertype_1(from.ordertype_1());
  }
  if (from.buysell_1() != 0) {
    set_buysell_1(from.buysell_1());
  }
  if (from.price1_1() != 0) {
    set_price1_1(from.price1_1());
  }
  if (from.price2_1() != 0) {
    set_price2_1(from.price2_1());
  }
  if (from.quantity_1() != 0) {
    set_quantity_1(from.quantity_1());
  }
  if (from.ordertype_2() != 0) {
    set_ordertype_2(from.ordertype_2());
  }
  if (from.buysell_2() != 0) {
    set_buysell_2(from.buysell_2());
  }
  if (from.price1_2() != 0) {
    set_price1_2(from.price1_2());
  }
  if (from.price2_2() != 0) {
    set_price2_2(from.price2_2());
  }
  if (from.quantity_2() != 0) {
    set_quantity_2(from.quantity_2());
  }
  if (from.goodtilldatetime() != 0) {
    set_goodtilldatetime(from.goodtilldatetime());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.isautomatedorder() != 0) {
    set_isautomatedorder(from.isautomatedorder());
  }
  if (from.openorclose() != 0) {
    set_openorclose(from.openorclose());
  }
  if (from.partialfillhandling() != 0) {
    set_partialfillhandling(from.partialfillhandling());
  }
}

void SubmitNewOCOOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewOCOOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewOCOOrder::CopyFrom(const SubmitNewOCOOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewOCOOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewOCOOrder::IsInitialized() const {
  return true;
}

void SubmitNewOCOOrder::Swap(SubmitNewOCOOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewOCOOrder::InternalSwap(SubmitNewOCOOrder* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_1_.Swap(&other->clientorderid_1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_2_.Swap(&other->clientorderid_2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parenttriggerclientorderid_.Swap(&other->parenttriggerclientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_1_, other->ordertype_1_);
  swap(buysell_1_, other->buysell_1_);
  swap(price1_1_, other->price1_1_);
  swap(price2_1_, other->price2_1_);
  swap(quantity_1_, other->quantity_1_);
  swap(ordertype_2_, other->ordertype_2_);
  swap(buysell_2_, other->buysell_2_);
  swap(price1_2_, other->price1_2_);
  swap(price2_2_, other->price2_2_);
  swap(quantity_2_, other->quantity_2_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(openorclose_, other->openorclose_);
  swap(partialfillhandling_, other->partialfillhandling_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewOCOOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewOCOOrderInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewOCOOrderInt::kSymbolFieldNumber;
const int SubmitNewOCOOrderInt::kExchangeFieldNumber;
const int SubmitNewOCOOrderInt::kClientOrderID1FieldNumber;
const int SubmitNewOCOOrderInt::kOrderType1FieldNumber;
const int SubmitNewOCOOrderInt::kBuySell1FieldNumber;
const int SubmitNewOCOOrderInt::kPrice11FieldNumber;
const int SubmitNewOCOOrderInt::kPrice21FieldNumber;
const int SubmitNewOCOOrderInt::kQuantity1FieldNumber;
const int SubmitNewOCOOrderInt::kClientOrderID2FieldNumber;
const int SubmitNewOCOOrderInt::kOrderType2FieldNumber;
const int SubmitNewOCOOrderInt::kBuySell2FieldNumber;
const int SubmitNewOCOOrderInt::kPrice12FieldNumber;
const int SubmitNewOCOOrderInt::kPrice22FieldNumber;
const int SubmitNewOCOOrderInt::kQuantity2FieldNumber;
const int SubmitNewOCOOrderInt::kTimeInForceFieldNumber;
const int SubmitNewOCOOrderInt::kGoodTillDateTimeFieldNumber;
const int SubmitNewOCOOrderInt::kTradeAccountFieldNumber;
const int SubmitNewOCOOrderInt::kIsAutomatedOrderFieldNumber;
const int SubmitNewOCOOrderInt::kParentTriggerClientOrderIDFieldNumber;
const int SubmitNewOCOOrderInt::kFreeFormTextFieldNumber;
const int SubmitNewOCOOrderInt::kDivisorFieldNumber;
const int SubmitNewOCOOrderInt::kOpenOrCloseFieldNumber;
const int SubmitNewOCOOrderInt::kPartialFillHandlingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewOCOOrderInt::SubmitNewOCOOrderInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewOCOOrderInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewOCOOrderInt)
}
SubmitNewOCOOrderInt::SubmitNewOCOOrderInt(const SubmitNewOCOOrderInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid_1().size() > 0) {
    clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
  }
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid_2().size() > 0) {
    clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parenttriggerclientorderid().size() > 0) {
    parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.freeformtext().size() > 0) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_1_, &from.ordertype_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&partialfillhandling_) -
    reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewOCOOrderInt)
}

void SubmitNewOCOOrderInt::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partialfillhandling_) -
      reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
}

SubmitNewOCOOrderInt::~SubmitNewOCOOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewOCOOrderInt)
  SharedDtor();
}

void SubmitNewOCOOrderInt::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewOCOOrderInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewOCOOrderInt::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewOCOOrderInt& SubmitNewOCOOrderInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SubmitNewOCOOrderInt.base);
  return *internal_default_instance();
}


void SubmitNewOCOOrderInt::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewOCOOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partialfillhandling_) -
      reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
  _internal_metadata_.Clear();
}

bool SubmitNewOCOOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewOCOOrderInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ordertype_1(static_cast< ::DTC_PB::OrderTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell_1(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price1_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price2_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Quantity_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID_2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ordertype_2(static_cast< ::DTC_PB::OrderTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell_2(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price1_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Price2_2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Quantity_2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TimeInForceEnum TimeInForce = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 GoodTillDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsAutomatedOrder = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ParentTriggerClientOrderID = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parenttriggerclientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.ParentTriggerClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FreeFormText = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.FreeFormText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Divisor = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_partialfillhandling(static_cast< ::DTC_PB::PartialFillHandlingEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewOCOOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewOCOOrderInt)
  return false;
#undef DO_
}

void SubmitNewOCOOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewOCOOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // string ClientOrderID_1 = 3;
  if (this->clientorderid_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientorderid_1(), output);
  }

  // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (this->ordertype_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ordertype_1(), output);
  }

  // .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (this->buysell_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->buysell_1(), output);
  }

  // int64 Price1_1 = 6;
  if (this->price1_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->price1_1(), output);
  }

  // int64 Price2_1 = 7;
  if (this->price2_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->price2_1(), output);
  }

  // int64 Quantity_1 = 8;
  if (this->quantity_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->quantity_1(), output);
  }

  // string ClientOrderID_2 = 9;
  if (this->clientorderid_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientorderid_2(), output);
  }

  // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (this->ordertype_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ordertype_2(), output);
  }

  // .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (this->buysell_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->buysell_2(), output);
  }

  // int64 Price1_2 = 12;
  if (this->price1_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->price1_2(), output);
  }

  // int64 Price2_2 = 13;
  if (this->price2_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->price2_2(), output);
  }

  // int64 Quantity_2 = 14;
  if (this->quantity_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->quantity_2(), output);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->timeinforce(), output);
  }

  // sfixed64 GoodTillDateTime = 16;
  if (this->goodtilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->goodtilldatetime(), output);
  }

  // string TradeAccount = 17;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->tradeaccount(), output);
  }

  // uint32 IsAutomatedOrder = 18;
  if (this->isautomatedorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->isautomatedorder(), output);
  }

  // string ParentTriggerClientOrderID = 19;
  if (this->parenttriggerclientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ParentTriggerClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->parenttriggerclientorderid(), output);
  }

  // string FreeFormText = 20;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->freeformtext(), output);
  }

  // float Divisor = 21;
  if (this->divisor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->divisor(), output);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
  if (this->openorclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->openorclose(), output);
  }

  // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
  if (this->partialfillhandling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->partialfillhandling(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewOCOOrderInt)
}

::google::protobuf::uint8* SubmitNewOCOOrderInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewOCOOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // string ClientOrderID_1 = 3;
  if (this->clientorderid_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientorderid_1(), target);
  }

  // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (this->ordertype_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ordertype_1(), target);
  }

  // .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (this->buysell_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->buysell_1(), target);
  }

  // int64 Price1_1 = 6;
  if (this->price1_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->price1_1(), target);
  }

  // int64 Price2_1 = 7;
  if (this->price2_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->price2_1(), target);
  }

  // int64 Quantity_1 = 8;
  if (this->quantity_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->quantity_1(), target);
  }

  // string ClientOrderID_2 = 9;
  if (this->clientorderid_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientorderid_2(), target);
  }

  // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (this->ordertype_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ordertype_2(), target);
  }

  // .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (this->buysell_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->buysell_2(), target);
  }

  // int64 Price1_2 = 12;
  if (this->price1_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->price1_2(), target);
  }

  // int64 Price2_2 = 13;
  if (this->price2_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->price2_2(), target);
  }

  // int64 Quantity_2 = 14;
  if (this->quantity_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->quantity_2(), target);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->timeinforce(), target);
  }

  // sfixed64 GoodTillDateTime = 16;
  if (this->goodtilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->goodtilldatetime(), target);
  }

  // string TradeAccount = 17;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradeaccount(), target);
  }

  // uint32 IsAutomatedOrder = 18;
  if (this->isautomatedorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->isautomatedorder(), target);
  }

  // string ParentTriggerClientOrderID = 19;
  if (this->parenttriggerclientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ParentTriggerClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->parenttriggerclientorderid(), target);
  }

  // string FreeFormText = 20;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->freeformtext(), target);
  }

  // float Divisor = 21;
  if (this->divisor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->divisor(), target);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
  if (this->openorclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->openorclose(), target);
  }

  // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
  if (this->partialfillhandling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->partialfillhandling(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewOCOOrderInt)
  return target;
}

size_t SubmitNewOCOOrderInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewOCOOrderInt)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string ClientOrderID_1 = 3;
  if (this->clientorderid_1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid_1());
  }

  // string ClientOrderID_2 = 9;
  if (this->clientorderid_2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid_2());
  }

  // string TradeAccount = 17;
  if (this->tradeaccount().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // string ParentTriggerClientOrderID = 19;
  if (this->parenttriggerclientorderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parenttriggerclientorderid());
  }

  // string FreeFormText = 20;
  if (this->freeformtext().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->freeformtext());
  }

  // .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (this->ordertype_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_1());
  }

  // .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (this->buysell_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_1());
  }

  // int64 Price1_1 = 6;
  if (this->price1_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price1_1());
  }

  // int64 Price2_1 = 7;
  if (this->price2_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price2_1());
  }

  // int64 Quantity_1 = 8;
  if (this->quantity_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quantity_1());
  }

  // .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (this->ordertype_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_2());
  }

  // .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (this->buysell_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_2());
  }

  // int64 Price1_2 = 12;
  if (this->price1_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price1_2());
  }

  // int64 Price2_2 = 13;
  if (this->price2_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->price2_2());
  }

  // int64 Quantity_2 = 14;
  if (this->quantity_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quantity_2());
  }

  // sfixed64 GoodTillDateTime = 16;
  if (this->goodtilldatetime() != 0) {
    total_size += 2 + 8;
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (this->timeinforce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // uint32 IsAutomatedOrder = 18;
  if (this->isautomatedorder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isautomatedorder());
  }

  // float Divisor = 21;
  if (this->divisor() != 0) {
    total_size += 2 + 4;
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
  if (this->openorclose() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
  }

  // .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
  if (this->partialfillhandling() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->partialfillhandling());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewOCOOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewOCOOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewOCOOrderInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewOCOOrderInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewOCOOrderInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewOCOOrderInt)
    MergeFrom(*source);
  }
}

void SubmitNewOCOOrderInt::MergeFrom(const SubmitNewOCOOrderInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewOCOOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.clientorderid_1().size() > 0) {

    clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
  }
  if (from.clientorderid_2().size() > 0) {

    clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.parenttriggerclientorderid().size() > 0) {

    parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
  }
  if (from.freeformtext().size() > 0) {

    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  if (from.ordertype_1() != 0) {
    set_ordertype_1(from.ordertype_1());
  }
  if (from.buysell_1() != 0) {
    set_buysell_1(from.buysell_1());
  }
  if (from.price1_1() != 0) {
    set_price1_1(from.price1_1());
  }
  if (from.price2_1() != 0) {
    set_price2_1(from.price2_1());
  }
  if (from.quantity_1() != 0) {
    set_quantity_1(from.quantity_1());
  }
  if (from.ordertype_2() != 0) {
    set_ordertype_2(from.ordertype_2());
  }
  if (from.buysell_2() != 0) {
    set_buysell_2(from.buysell_2());
  }
  if (from.price1_2() != 0) {
    set_price1_2(from.price1_2());
  }
  if (from.price2_2() != 0) {
    set_price2_2(from.price2_2());
  }
  if (from.quantity_2() != 0) {
    set_quantity_2(from.quantity_2());
  }
  if (from.goodtilldatetime() != 0) {
    set_goodtilldatetime(from.goodtilldatetime());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.isautomatedorder() != 0) {
    set_isautomatedorder(from.isautomatedorder());
  }
  if (from.divisor() != 0) {
    set_divisor(from.divisor());
  }
  if (from.openorclose() != 0) {
    set_openorclose(from.openorclose());
  }
  if (from.partialfillhandling() != 0) {
    set_partialfillhandling(from.partialfillhandling());
  }
}

void SubmitNewOCOOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewOCOOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewOCOOrderInt::CopyFrom(const SubmitNewOCOOrderInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewOCOOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewOCOOrderInt::IsInitialized() const {
  return true;
}

void SubmitNewOCOOrderInt::Swap(SubmitNewOCOOrderInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewOCOOrderInt::InternalSwap(SubmitNewOCOOrderInt* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_1_.Swap(&other->clientorderid_1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_2_.Swap(&other->clientorderid_2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parenttriggerclientorderid_.Swap(&other->parenttriggerclientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_1_, other->ordertype_1_);
  swap(buysell_1_, other->buysell_1_);
  swap(price1_1_, other->price1_1_);
  swap(price2_1_, other->price2_1_);
  swap(quantity_1_, other->quantity_1_);
  swap(ordertype_2_, other->ordertype_2_);
  swap(buysell_2_, other->buysell_2_);
  swap(price1_2_, other->price1_2_);
  swap(price2_2_, other->price2_2_);
  swap(quantity_2_, other->quantity_2_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(divisor_, other->divisor_);
  swap(openorclose_, other->openorclose_);
  swap(partialfillhandling_, other->partialfillhandling_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewOCOOrderInt::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenOrdersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenOrdersRequest::kRequestIDFieldNumber;
const int OpenOrdersRequest::kRequestAllOrdersFieldNumber;
const int OpenOrdersRequest::kServerOrderIDFieldNumber;
const int OpenOrdersRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenOrdersRequest::OpenOrdersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_OpenOrdersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OpenOrdersRequest)
}
OpenOrdersRequest::OpenOrdersRequest(const OpenOrdersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverorderid().size() > 0) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestallorders_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(requestallorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OpenOrdersRequest)
}

void OpenOrdersRequest::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestallorders_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(requestallorders_));
}

OpenOrdersRequest::~OpenOrdersRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.OpenOrdersRequest)
  SharedDtor();
}

void OpenOrdersRequest::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenOrdersRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenOrdersRequest& OpenOrdersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_OpenOrdersRequest.base);
  return *internal_default_instance();
}


void OpenOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.OpenOrdersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestallorders_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(requestallorders_));
  _internal_metadata_.Clear();
}

bool OpenOrdersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OpenOrdersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RequestAllOrders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestallorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerOrderID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OpenOrdersRequest.ServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OpenOrdersRequest.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OpenOrdersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OpenOrdersRequest)
  return false;
#undef DO_
}

void OpenOrdersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OpenOrdersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // int32 RequestAllOrders = 2;
  if (this->requestallorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->requestallorders(), output);
  }

  // string ServerOrderID = 3;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverorderid(), output);
  }

  // string TradeAccount = 4;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradeaccount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OpenOrdersRequest)
}

::google::protobuf::uint8* OpenOrdersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OpenOrdersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // int32 RequestAllOrders = 2;
  if (this->requestallorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requestallorders(), target);
  }

  // string ServerOrderID = 3;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverorderid(), target);
  }

  // string TradeAccount = 4;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeaccount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OpenOrdersRequest)
  return target;
}

size_t OpenOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.OpenOrdersRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServerOrderID = 3;
  if (this->serverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverorderid());
  }

  // string TradeAccount = 4;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 RequestAllOrders = 2;
  if (this->requestallorders() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestallorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenOrdersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.OpenOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenOrdersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenOrdersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.OpenOrdersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.OpenOrdersRequest)
    MergeFrom(*source);
  }
}

void OpenOrdersRequest::MergeFrom(const OpenOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.OpenOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverorderid().size() > 0) {

    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.requestallorders() != 0) {
    set_requestallorders(from.requestallorders());
  }
}

void OpenOrdersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.OpenOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrdersRequest::CopyFrom(const OpenOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.OpenOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrdersRequest::IsInitialized() const {
  return true;
}

void OpenOrdersRequest::Swap(OpenOrdersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenOrdersRequest::InternalSwap(OpenOrdersRequest* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(requestallorders_, other->requestallorders_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenOrdersRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalOrderFillsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalOrderFillsRequest::kRequestIDFieldNumber;
const int HistoricalOrderFillsRequest::kServerOrderIDFieldNumber;
const int HistoricalOrderFillsRequest::kNumberOfDaysFieldNumber;
const int HistoricalOrderFillsRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalOrderFillsRequest::HistoricalOrderFillsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalOrderFillsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillsRequest)
}
HistoricalOrderFillsRequest::HistoricalOrderFillsRequest(const HistoricalOrderFillsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverorderid().size() > 0) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofdays_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(numberofdays_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillsRequest)
}

void HistoricalOrderFillsRequest::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofdays_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(numberofdays_));
}

HistoricalOrderFillsRequest::~HistoricalOrderFillsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillsRequest)
  SharedDtor();
}

void HistoricalOrderFillsRequest::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalOrderFillsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalOrderFillsRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalOrderFillsRequest& HistoricalOrderFillsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalOrderFillsRequest.base);
  return *internal_default_instance();
}


void HistoricalOrderFillsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalOrderFillsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofdays_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(numberofdays_));
  _internal_metadata_.Clear();
}

bool HistoricalOrderFillsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillsRequest.ServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 NumberOfDays = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofdays_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillsRequest.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillsRequest)
  return false;
#undef DO_
}

void HistoricalOrderFillsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string ServerOrderID = 2;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverorderid(), output);
  }

  // int32 NumberOfDays = 3;
  if (this->numberofdays() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numberofdays(), output);
  }

  // string TradeAccount = 4;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradeaccount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillsRequest)
}

::google::protobuf::uint8* HistoricalOrderFillsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string ServerOrderID = 2;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverorderid(), target);
  }

  // int32 NumberOfDays = 3;
  if (this->numberofdays() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numberofdays(), target);
  }

  // string TradeAccount = 4;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeaccount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillsRequest)
  return target;
}

size_t HistoricalOrderFillsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalOrderFillsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServerOrderID = 2;
  if (this->serverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverorderid());
  }

  // string TradeAccount = 4;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 NumberOfDays = 3;
  if (this->numberofdays() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numberofdays());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalOrderFillsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalOrderFillsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalOrderFillsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalOrderFillsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalOrderFillsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalOrderFillsRequest)
    MergeFrom(*source);
  }
}

void HistoricalOrderFillsRequest::MergeFrom(const HistoricalOrderFillsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalOrderFillsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serverorderid().size() > 0) {

    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.numberofdays() != 0) {
    set_numberofdays(from.numberofdays());
  }
}

void HistoricalOrderFillsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalOrderFillsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillsRequest::CopyFrom(const HistoricalOrderFillsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalOrderFillsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillsRequest::IsInitialized() const {
  return true;
}

void HistoricalOrderFillsRequest::Swap(HistoricalOrderFillsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalOrderFillsRequest::InternalSwap(HistoricalOrderFillsRequest* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(numberofdays_, other->numberofdays_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalOrderFillsRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalOrderFillsReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalOrderFillsReject::kRequestIDFieldNumber;
const int HistoricalOrderFillsReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalOrderFillsReject::HistoricalOrderFillsReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalOrderFillsReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillsReject)
}
HistoricalOrderFillsReject::HistoricalOrderFillsReject(const HistoricalOrderFillsReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillsReject)
}

void HistoricalOrderFillsReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

HistoricalOrderFillsReject::~HistoricalOrderFillsReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillsReject)
  SharedDtor();
}

void HistoricalOrderFillsReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalOrderFillsReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalOrderFillsReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalOrderFillsReject& HistoricalOrderFillsReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalOrderFillsReject.base);
  return *internal_default_instance();
}


void HistoricalOrderFillsReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalOrderFillsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool HistoricalOrderFillsReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillsReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillsReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillsReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillsReject)
  return false;
#undef DO_
}

void HistoricalOrderFillsReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillsReject)
}

::google::protobuf::uint8* HistoricalOrderFillsReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillsReject)
  return target;
}

size_t HistoricalOrderFillsReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalOrderFillsReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalOrderFillsReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalOrderFillsReject)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalOrderFillsReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalOrderFillsReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalOrderFillsReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalOrderFillsReject)
    MergeFrom(*source);
  }
}

void HistoricalOrderFillsReject::MergeFrom(const HistoricalOrderFillsReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalOrderFillsReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void HistoricalOrderFillsReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalOrderFillsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillsReject::CopyFrom(const HistoricalOrderFillsReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalOrderFillsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillsReject::IsInitialized() const {
  return true;
}

void HistoricalOrderFillsReject::Swap(HistoricalOrderFillsReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalOrderFillsReject::InternalSwap(HistoricalOrderFillsReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalOrderFillsReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrentPositionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentPositionsRequest::kRequestIDFieldNumber;
const int CurrentPositionsRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentPositionsRequest::CurrentPositionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CurrentPositionsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CurrentPositionsRequest)
}
CurrentPositionsRequest::CurrentPositionsRequest(const CurrentPositionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CurrentPositionsRequest)
}

void CurrentPositionsRequest::SharedCtor() {
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

CurrentPositionsRequest::~CurrentPositionsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.CurrentPositionsRequest)
  SharedDtor();
}

void CurrentPositionsRequest::SharedDtor() {
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrentPositionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurrentPositionsRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrentPositionsRequest& CurrentPositionsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CurrentPositionsRequest.base);
  return *internal_default_instance();
}


void CurrentPositionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CurrentPositionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool CurrentPositionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CurrentPositionsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CurrentPositionsRequest.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CurrentPositionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CurrentPositionsRequest)
  return false;
#undef DO_
}

void CurrentPositionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CurrentPositionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string TradeAccount = 2;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CurrentPositionsRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradeaccount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CurrentPositionsRequest)
}

::google::protobuf::uint8* CurrentPositionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CurrentPositionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string TradeAccount = 2;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CurrentPositionsRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradeaccount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CurrentPositionsRequest)
  return target;
}

size_t CurrentPositionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CurrentPositionsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string TradeAccount = 2;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentPositionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CurrentPositionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentPositionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentPositionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CurrentPositionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CurrentPositionsRequest)
    MergeFrom(*source);
  }
}

void CurrentPositionsRequest::MergeFrom(const CurrentPositionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CurrentPositionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void CurrentPositionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CurrentPositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPositionsRequest::CopyFrom(const CurrentPositionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CurrentPositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionsRequest::IsInitialized() const {
  return true;
}

void CurrentPositionsRequest::Swap(CurrentPositionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentPositionsRequest::InternalSwap(CurrentPositionsRequest* other) {
  using std::swap;
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurrentPositionsRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrentPositionsReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentPositionsReject::kRequestIDFieldNumber;
const int CurrentPositionsReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentPositionsReject::CurrentPositionsReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CurrentPositionsReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CurrentPositionsReject)
}
CurrentPositionsReject::CurrentPositionsReject(const CurrentPositionsReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CurrentPositionsReject)
}

void CurrentPositionsReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

CurrentPositionsReject::~CurrentPositionsReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.CurrentPositionsReject)
  SharedDtor();
}

void CurrentPositionsReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrentPositionsReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurrentPositionsReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrentPositionsReject& CurrentPositionsReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_CurrentPositionsReject.base);
  return *internal_default_instance();
}


void CurrentPositionsReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CurrentPositionsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool CurrentPositionsReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CurrentPositionsReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.CurrentPositionsReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CurrentPositionsReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CurrentPositionsReject)
  return false;
#undef DO_
}

void CurrentPositionsReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CurrentPositionsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CurrentPositionsReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CurrentPositionsReject)
}

::google::protobuf::uint8* CurrentPositionsReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CurrentPositionsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.CurrentPositionsReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CurrentPositionsReject)
  return target;
}

size_t CurrentPositionsReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CurrentPositionsReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentPositionsReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CurrentPositionsReject)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentPositionsReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentPositionsReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CurrentPositionsReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CurrentPositionsReject)
    MergeFrom(*source);
  }
}

void CurrentPositionsReject::MergeFrom(const CurrentPositionsReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CurrentPositionsReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void CurrentPositionsReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CurrentPositionsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPositionsReject::CopyFrom(const CurrentPositionsReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CurrentPositionsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionsReject::IsInitialized() const {
  return true;
}

void CurrentPositionsReject::Swap(CurrentPositionsReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentPositionsReject::InternalSwap(CurrentPositionsReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurrentPositionsReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderUpdate::kRequestIDFieldNumber;
const int OrderUpdate::kTotalNumMessagesFieldNumber;
const int OrderUpdate::kMessageNumberFieldNumber;
const int OrderUpdate::kSymbolFieldNumber;
const int OrderUpdate::kExchangeFieldNumber;
const int OrderUpdate::kPreviousServerOrderIDFieldNumber;
const int OrderUpdate::kServerOrderIDFieldNumber;
const int OrderUpdate::kClientOrderIDFieldNumber;
const int OrderUpdate::kExchangeOrderIDFieldNumber;
const int OrderUpdate::kOrderStatusFieldNumber;
const int OrderUpdate::kOrderUpdateReasonFieldNumber;
const int OrderUpdate::kOrderTypeFieldNumber;
const int OrderUpdate::kBuySellFieldNumber;
const int OrderUpdate::kPrice1FieldNumber;
const int OrderUpdate::kPrice2FieldNumber;
const int OrderUpdate::kTimeInForceFieldNumber;
const int OrderUpdate::kGoodTillDateTimeFieldNumber;
const int OrderUpdate::kOrderQuantityFieldNumber;
const int OrderUpdate::kFilledQuantityFieldNumber;
const int OrderUpdate::kRemainingQuantityFieldNumber;
const int OrderUpdate::kAverageFillPriceFieldNumber;
const int OrderUpdate::kLastFillPriceFieldNumber;
const int OrderUpdate::kLastFillDateTimeFieldNumber;
const int OrderUpdate::kLastFillQuantityFieldNumber;
const int OrderUpdate::kLastFillExecutionIDFieldNumber;
const int OrderUpdate::kTradeAccountFieldNumber;
const int OrderUpdate::kInfoTextFieldNumber;
const int OrderUpdate::kNoOrdersFieldNumber;
const int OrderUpdate::kParentServerOrderIDFieldNumber;
const int OrderUpdate::kOCOLinkedOrderServerOrderIDFieldNumber;
const int OrderUpdate::kOpenOrCloseFieldNumber;
const int OrderUpdate::kPreviousClientOrderIDFieldNumber;
const int OrderUpdate::kFreeFormTextFieldNumber;
const int OrderUpdate::kOrderReceivedDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderUpdate::OrderUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_OrderUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OrderUpdate)
}
OrderUpdate::OrderUpdate(const OrderUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  previousserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previousserverorderid().size() > 0) {
    previousserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousserverorderid_);
  }
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverorderid().size() > 0) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientorderid().size() > 0) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  exchangeorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeorderid().size() > 0) {
    exchangeorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeorderid_);
  }
  lastfillexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lastfillexecutionid().size() > 0) {
    lastfillexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastfillexecutionid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.infotext().size() > 0) {
    infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
  }
  parentserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parentserverorderid().size() > 0) {
    parentserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentserverorderid_);
  }
  ocolinkedorderserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ocolinkedorderserverorderid().size() > 0) {
    ocolinkedorderserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ocolinkedorderserverorderid_);
  }
  previousclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previousclientorderid().size() > 0) {
    previousclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousclientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.freeformtext().size() > 0) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderreceiveddatetime_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(orderreceiveddatetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OrderUpdate)
}

void OrderUpdate::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastfillexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ocolinkedorderserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderreceiveddatetime_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(orderreceiveddatetime_));
}

OrderUpdate::~OrderUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.OrderUpdate)
  SharedDtor();
}

void OrderUpdate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousserverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastfillexecutionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentserverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ocolinkedorderserverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousclientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderUpdate::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderUpdate& OrderUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_OrderUpdate.base);
  return *internal_default_instance();
}


void OrderUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.OrderUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousserverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastfillexecutionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentserverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ocolinkedorderserverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousclientorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderreceiveddatetime_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(orderreceiveddatetime_));
  _internal_metadata_.Clear();
}

bool OrderUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OrderUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TotalNumMessages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnummessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MessageNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PreviousServerOrderID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previousserverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->previousserverorderid().data(), static_cast<int>(this->previousserverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.PreviousServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerOrderID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.ServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientOrderID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.ClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExchangeOrderID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeorderid().data(), static_cast<int>(this->exchangeorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.ExchangeOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderStatusEnum OrderStatus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_orderstatus(static_cast< ::DTC_PB::OrderStatusEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_orderupdatereason(static_cast< ::DTC_PB::OrderUpdateReasonEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OrderTypeEnum OrderType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price1 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price2 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.TimeInForceEnum TimeInForce = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 GoodTillDateTime = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OrderQuantity = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FilledQuantity = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &filledquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double RemainingQuantity = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remainingquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AverageFillPrice = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averagefillprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastFillPrice = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfillprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 LastFillDateTime = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &lastfilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastFillQuantity = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfillquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string LastFillExecutionID = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastfillexecutionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lastfillexecutionid().data(), static_cast<int>(this->lastfillexecutionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.LastFillExecutionID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InfoText = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->infotext().data(), static_cast<int>(this->infotext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.InfoText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NoOrders = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ParentServerOrderID = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentserverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parentserverorderid().data(), static_cast<int>(this->parentserverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.ParentServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string OCOLinkedOrderServerOrderID = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ocolinkedorderserverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ocolinkedorderserverorderid().data(), static_cast<int>(this->ocolinkedorderserverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.OCOLinkedOrderServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PreviousClientOrderID = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previousclientorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->previousclientorderid().data(), static_cast<int>(this->previousclientorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.PreviousClientOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string FreeFormText = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OrderUpdate.FreeFormText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 OrderReceivedDateTime = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &orderreceiveddatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OrderUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OrderUpdate)
  return false;
#undef DO_
}

void OrderUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OrderUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // int32 TotalNumMessages = 2;
  if (this->totalnummessages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnummessages(), output);
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // string PreviousServerOrderID = 6;
  if (this->previousserverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->previousserverorderid().data(), static_cast<int>(this->previousserverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->previousserverorderid(), output);
  }

  // string ServerOrderID = 7;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serverorderid(), output);
  }

  // string ClientOrderID = 8;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->clientorderid(), output);
  }

  // string ExchangeOrderID = 9;
  if (this->exchangeorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeorderid().data(), static_cast<int>(this->exchangeorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ExchangeOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->exchangeorderid(), output);
  }

  // .DTC_PB.OrderStatusEnum OrderStatus = 10;
  if (this->orderstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->orderstatus(), output);
  }

  // .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
  if (this->orderupdatereason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->orderupdatereason(), output);
  }

  // .DTC_PB.OrderTypeEnum OrderType = 12;
  if (this->ordertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->ordertype(), output);
  }

  // .DTC_PB.BuySellEnum BuySell = 13;
  if (this->buysell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->buysell(), output);
  }

  // double Price1 = 14;
  if (this->price1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->price1(), output);
  }

  // double Price2 = 15;
  if (this->price2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->price2(), output);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 16;
  if (this->timeinforce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->timeinforce(), output);
  }

  // sfixed64 GoodTillDateTime = 17;
  if (this->goodtilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(17, this->goodtilldatetime(), output);
  }

  // double OrderQuantity = 18;
  if (this->orderquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->orderquantity(), output);
  }

  // double FilledQuantity = 19;
  if (this->filledquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->filledquantity(), output);
  }

  // double RemainingQuantity = 20;
  if (this->remainingquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->remainingquantity(), output);
  }

  // double AverageFillPrice = 21;
  if (this->averagefillprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->averagefillprice(), output);
  }

  // double LastFillPrice = 22;
  if (this->lastfillprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->lastfillprice(), output);
  }

  // sfixed64 LastFillDateTime = 23;
  if (this->lastfilldatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(23, this->lastfilldatetime(), output);
  }

  // double LastFillQuantity = 24;
  if (this->lastfillquantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->lastfillquantity(), output);
  }

  // string LastFillExecutionID = 25;
  if (this->lastfillexecutionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastfillexecutionid().data(), static_cast<int>(this->lastfillexecutionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.LastFillExecutionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->lastfillexecutionid(), output);
  }

  // string TradeAccount = 26;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->tradeaccount(), output);
  }

  // string InfoText = 27;
  if (this->infotext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.InfoText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->infotext(), output);
  }

  // uint32 NoOrders = 28;
  if (this->noorders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->noorders(), output);
  }

  // string ParentServerOrderID = 29;
  if (this->parentserverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parentserverorderid().data(), static_cast<int>(this->parentserverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ParentServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->parentserverorderid(), output);
  }

  // string OCOLinkedOrderServerOrderID = 30;
  if (this->ocolinkedorderserverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ocolinkedorderserverorderid().data(), static_cast<int>(this->ocolinkedorderserverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.OCOLinkedOrderServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->ocolinkedorderserverorderid(), output);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
  if (this->openorclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->openorclose(), output);
  }

  // string PreviousClientOrderID = 32;
  if (this->previousclientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->previousclientorderid().data(), static_cast<int>(this->previousclientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->previousclientorderid(), output);
  }

  // string FreeFormText = 33;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->freeformtext(), output);
  }

  // sfixed64 OrderReceivedDateTime = 34;
  if (this->orderreceiveddatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(34, this->orderreceiveddatetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OrderUpdate)
}

::google::protobuf::uint8* OrderUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OrderUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // int32 TotalNumMessages = 2;
  if (this->totalnummessages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnummessages(), target);
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // string PreviousServerOrderID = 6;
  if (this->previousserverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->previousserverorderid().data(), static_cast<int>(this->previousserverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->previousserverorderid(), target);
  }

  // string ServerOrderID = 7;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serverorderid(), target);
  }

  // string ClientOrderID = 8;
  if (this->clientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->clientorderid(), target);
  }

  // string ExchangeOrderID = 9;
  if (this->exchangeorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeorderid().data(), static_cast<int>(this->exchangeorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ExchangeOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->exchangeorderid(), target);
  }

  // .DTC_PB.OrderStatusEnum OrderStatus = 10;
  if (this->orderstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->orderstatus(), target);
  }

  // .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
  if (this->orderupdatereason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->orderupdatereason(), target);
  }

  // .DTC_PB.OrderTypeEnum OrderType = 12;
  if (this->ordertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->ordertype(), target);
  }

  // .DTC_PB.BuySellEnum BuySell = 13;
  if (this->buysell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->buysell(), target);
  }

  // double Price1 = 14;
  if (this->price1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->price1(), target);
  }

  // double Price2 = 15;
  if (this->price2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->price2(), target);
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 16;
  if (this->timeinforce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->timeinforce(), target);
  }

  // sfixed64 GoodTillDateTime = 17;
  if (this->goodtilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(17, this->goodtilldatetime(), target);
  }

  // double OrderQuantity = 18;
  if (this->orderquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->orderquantity(), target);
  }

  // double FilledQuantity = 19;
  if (this->filledquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->filledquantity(), target);
  }

  // double RemainingQuantity = 20;
  if (this->remainingquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->remainingquantity(), target);
  }

  // double AverageFillPrice = 21;
  if (this->averagefillprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->averagefillprice(), target);
  }

  // double LastFillPrice = 22;
  if (this->lastfillprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->lastfillprice(), target);
  }

  // sfixed64 LastFillDateTime = 23;
  if (this->lastfilldatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(23, this->lastfilldatetime(), target);
  }

  // double LastFillQuantity = 24;
  if (this->lastfillquantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->lastfillquantity(), target);
  }

  // string LastFillExecutionID = 25;
  if (this->lastfillexecutionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lastfillexecutionid().data(), static_cast<int>(this->lastfillexecutionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.LastFillExecutionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->lastfillexecutionid(), target);
  }

  // string TradeAccount = 26;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->tradeaccount(), target);
  }

  // string InfoText = 27;
  if (this->infotext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.InfoText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->infotext(), target);
  }

  // uint32 NoOrders = 28;
  if (this->noorders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->noorders(), target);
  }

  // string ParentServerOrderID = 29;
  if (this->parentserverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parentserverorderid().data(), static_cast<int>(this->parentserverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.ParentServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->parentserverorderid(), target);
  }

  // string OCOLinkedOrderServerOrderID = 30;
  if (this->ocolinkedorderserverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ocolinkedorderserverorderid().data(), static_cast<int>(this->ocolinkedorderserverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.OCOLinkedOrderServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->ocolinkedorderserverorderid(), target);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
  if (this->openorclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->openorclose(), target);
  }

  // string PreviousClientOrderID = 32;
  if (this->previousclientorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->previousclientorderid().data(), static_cast<int>(this->previousclientorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->previousclientorderid(), target);
  }

  // string FreeFormText = 33;
  if (this->freeformtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OrderUpdate.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->freeformtext(), target);
  }

  // sfixed64 OrderReceivedDateTime = 34;
  if (this->orderreceiveddatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(34, this->orderreceiveddatetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OrderUpdate)
  return target;
}

size_t OrderUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.OrderUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string PreviousServerOrderID = 6;
  if (this->previousserverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->previousserverorderid());
  }

  // string ServerOrderID = 7;
  if (this->serverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverorderid());
  }

  // string ClientOrderID = 8;
  if (this->clientorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientorderid());
  }

  // string ExchangeOrderID = 9;
  if (this->exchangeorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangeorderid());
  }

  // string LastFillExecutionID = 25;
  if (this->lastfillexecutionid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lastfillexecutionid());
  }

  // string TradeAccount = 26;
  if (this->tradeaccount().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // string InfoText = 27;
  if (this->infotext().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->infotext());
  }

  // string ParentServerOrderID = 29;
  if (this->parentserverorderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parentserverorderid());
  }

  // string OCOLinkedOrderServerOrderID = 30;
  if (this->ocolinkedorderserverorderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ocolinkedorderserverorderid());
  }

  // string PreviousClientOrderID = 32;
  if (this->previousclientorderid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->previousclientorderid());
  }

  // string FreeFormText = 33;
  if (this->freeformtext().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->freeformtext());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 TotalNumMessages = 2;
  if (this->totalnummessages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalnummessages());
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagenumber());
  }

  // .DTC_PB.OrderStatusEnum OrderStatus = 10;
  if (this->orderstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderstatus());
  }

  // .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
  if (this->orderupdatereason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderupdatereason());
  }

  // .DTC_PB.OrderTypeEnum OrderType = 12;
  if (this->ordertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
  }

  // double Price1 = 14;
  if (this->price1() != 0) {
    total_size += 1 + 8;
  }

  // .DTC_PB.BuySellEnum BuySell = 13;
  if (this->buysell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
  }

  // .DTC_PB.TimeInForceEnum TimeInForce = 16;
  if (this->timeinforce() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
  }

  // double Price2 = 15;
  if (this->price2() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 GoodTillDateTime = 17;
  if (this->goodtilldatetime() != 0) {
    total_size += 2 + 8;
  }

  // double OrderQuantity = 18;
  if (this->orderquantity() != 0) {
    total_size += 2 + 8;
  }

  // double FilledQuantity = 19;
  if (this->filledquantity() != 0) {
    total_size += 2 + 8;
  }

  // double RemainingQuantity = 20;
  if (this->remainingquantity() != 0) {
    total_size += 2 + 8;
  }

  // double AverageFillPrice = 21;
  if (this->averagefillprice() != 0) {
    total_size += 2 + 8;
  }

  // double LastFillPrice = 22;
  if (this->lastfillprice() != 0) {
    total_size += 2 + 8;
  }

  // sfixed64 LastFillDateTime = 23;
  if (this->lastfilldatetime() != 0) {
    total_size += 2 + 8;
  }

  // double LastFillQuantity = 24;
  if (this->lastfillquantity() != 0) {
    total_size += 2 + 8;
  }

  // uint32 NoOrders = 28;
  if (this->noorders() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->noorders());
  }

  // .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
  if (this->openorclose() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
  }

  // sfixed64 OrderReceivedDateTime = 34;
  if (this->orderreceiveddatetime() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.OrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.OrderUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.OrderUpdate)
    MergeFrom(*source);
  }
}

void OrderUpdate::MergeFrom(const OrderUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.OrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.previousserverorderid().size() > 0) {

    previousserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousserverorderid_);
  }
  if (from.serverorderid().size() > 0) {

    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  if (from.clientorderid().size() > 0) {

    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  if (from.exchangeorderid().size() > 0) {

    exchangeorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeorderid_);
  }
  if (from.lastfillexecutionid().size() > 0) {

    lastfillexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastfillexecutionid_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.infotext().size() > 0) {

    infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
  }
  if (from.parentserverorderid().size() > 0) {

    parentserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentserverorderid_);
  }
  if (from.ocolinkedorderserverorderid().size() > 0) {

    ocolinkedorderserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ocolinkedorderserverorderid_);
  }
  if (from.previousclientorderid().size() > 0) {

    previousclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousclientorderid_);
  }
  if (from.freeformtext().size() > 0) {

    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.totalnummessages() != 0) {
    set_totalnummessages(from.totalnummessages());
  }
  if (from.messagenumber() != 0) {
    set_messagenumber(from.messagenumber());
  }
  if (from.orderstatus() != 0) {
    set_orderstatus(from.orderstatus());
  }
  if (from.orderupdatereason() != 0) {
    set_orderupdatereason(from.orderupdatereason());
  }
  if (from.ordertype() != 0) {
    set_ordertype(from.ordertype());
  }
  if (from.price1() != 0) {
    set_price1(from.price1());
  }
  if (from.buysell() != 0) {
    set_buysell(from.buysell());
  }
  if (from.timeinforce() != 0) {
    set_timeinforce(from.timeinforce());
  }
  if (from.price2() != 0) {
    set_price2(from.price2());
  }
  if (from.goodtilldatetime() != 0) {
    set_goodtilldatetime(from.goodtilldatetime());
  }
  if (from.orderquantity() != 0) {
    set_orderquantity(from.orderquantity());
  }
  if (from.filledquantity() != 0) {
    set_filledquantity(from.filledquantity());
  }
  if (from.remainingquantity() != 0) {
    set_remainingquantity(from.remainingquantity());
  }
  if (from.averagefillprice() != 0) {
    set_averagefillprice(from.averagefillprice());
  }
  if (from.lastfillprice() != 0) {
    set_lastfillprice(from.lastfillprice());
  }
  if (from.lastfilldatetime() != 0) {
    set_lastfilldatetime(from.lastfilldatetime());
  }
  if (from.lastfillquantity() != 0) {
    set_lastfillquantity(from.lastfillquantity());
  }
  if (from.noorders() != 0) {
    set_noorders(from.noorders());
  }
  if (from.openorclose() != 0) {
    set_openorclose(from.openorclose());
  }
  if (from.orderreceiveddatetime() != 0) {
    set_orderreceiveddatetime(from.orderreceiveddatetime());
  }
}

void OrderUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.OrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderUpdate::CopyFrom(const OrderUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.OrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdate::IsInitialized() const {
  return true;
}

void OrderUpdate::Swap(OrderUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderUpdate::InternalSwap(OrderUpdate* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previousserverorderid_.Swap(&other->previousserverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchangeorderid_.Swap(&other->exchangeorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastfillexecutionid_.Swap(&other->lastfillexecutionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  infotext_.Swap(&other->infotext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parentserverorderid_.Swap(&other->parentserverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ocolinkedorderserverorderid_.Swap(&other->ocolinkedorderserverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previousclientorderid_.Swap(&other->previousclientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(totalnummessages_, other->totalnummessages_);
  swap(messagenumber_, other->messagenumber_);
  swap(orderstatus_, other->orderstatus_);
  swap(orderupdatereason_, other->orderupdatereason_);
  swap(ordertype_, other->ordertype_);
  swap(price1_, other->price1_);
  swap(buysell_, other->buysell_);
  swap(timeinforce_, other->timeinforce_);
  swap(price2_, other->price2_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(orderquantity_, other->orderquantity_);
  swap(filledquantity_, other->filledquantity_);
  swap(remainingquantity_, other->remainingquantity_);
  swap(averagefillprice_, other->averagefillprice_);
  swap(lastfillprice_, other->lastfillprice_);
  swap(lastfilldatetime_, other->lastfilldatetime_);
  swap(lastfillquantity_, other->lastfillquantity_);
  swap(noorders_, other->noorders_);
  swap(openorclose_, other->openorclose_);
  swap(orderreceiveddatetime_, other->orderreceiveddatetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderUpdate::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenOrdersReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenOrdersReject::kRequestIDFieldNumber;
const int OpenOrdersReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenOrdersReject::OpenOrdersReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_OpenOrdersReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OpenOrdersReject)
}
OpenOrdersReject::OpenOrdersReject(const OpenOrdersReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OpenOrdersReject)
}

void OpenOrdersReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

OpenOrdersReject::~OpenOrdersReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.OpenOrdersReject)
  SharedDtor();
}

void OpenOrdersReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenOrdersReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenOrdersReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenOrdersReject& OpenOrdersReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_OpenOrdersReject.base);
  return *internal_default_instance();
}


void OpenOrdersReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.OpenOrdersReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool OpenOrdersReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OpenOrdersReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.OpenOrdersReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OpenOrdersReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OpenOrdersReject)
  return false;
#undef DO_
}

void OpenOrdersReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OpenOrdersReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OpenOrdersReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OpenOrdersReject)
}

::google::protobuf::uint8* OpenOrdersReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OpenOrdersReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.OpenOrdersReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OpenOrdersReject)
  return target;
}

size_t OpenOrdersReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.OpenOrdersReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenOrdersReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.OpenOrdersReject)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenOrdersReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenOrdersReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.OpenOrdersReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.OpenOrdersReject)
    MergeFrom(*source);
  }
}

void OpenOrdersReject::MergeFrom(const OpenOrdersReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.OpenOrdersReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void OpenOrdersReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.OpenOrdersReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrdersReject::CopyFrom(const OpenOrdersReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.OpenOrdersReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrdersReject::IsInitialized() const {
  return true;
}

void OpenOrdersReject::Swap(OpenOrdersReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenOrdersReject::InternalSwap(OpenOrdersReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenOrdersReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalOrderFillResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalOrderFillResponse::kRequestIDFieldNumber;
const int HistoricalOrderFillResponse::kTotalNumberMessagesFieldNumber;
const int HistoricalOrderFillResponse::kMessageNumberFieldNumber;
const int HistoricalOrderFillResponse::kSymbolFieldNumber;
const int HistoricalOrderFillResponse::kExchangeFieldNumber;
const int HistoricalOrderFillResponse::kServerOrderIDFieldNumber;
const int HistoricalOrderFillResponse::kBuySellFieldNumber;
const int HistoricalOrderFillResponse::kPriceFieldNumber;
const int HistoricalOrderFillResponse::kDateTimeFieldNumber;
const int HistoricalOrderFillResponse::kQuantityFieldNumber;
const int HistoricalOrderFillResponse::kUniqueExecutionIDFieldNumber;
const int HistoricalOrderFillResponse::kTradeAccountFieldNumber;
const int HistoricalOrderFillResponse::kOpenCloseFieldNumber;
const int HistoricalOrderFillResponse::kNoOrderFillsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalOrderFillResponse::HistoricalOrderFillResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalOrderFillResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillResponse)
}
HistoricalOrderFillResponse::HistoricalOrderFillResponse(const HistoricalOrderFillResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverorderid().size() > 0) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  uniqueexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uniqueexecutionid().size() > 0) {
    uniqueexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uniqueexecutionid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&noorderfills_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(noorderfills_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillResponse)
}

void HistoricalOrderFillResponse::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqueexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noorderfills_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(noorderfills_));
}

HistoricalOrderFillResponse::~HistoricalOrderFillResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillResponse)
  SharedDtor();
}

void HistoricalOrderFillResponse::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqueexecutionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalOrderFillResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalOrderFillResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalOrderFillResponse& HistoricalOrderFillResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalOrderFillResponse.base);
  return *internal_default_instance();
}


void HistoricalOrderFillResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalOrderFillResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqueexecutionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noorderfills_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(noorderfills_));
  _internal_metadata_.Clear();
}

bool HistoricalOrderFillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TotalNumberMessages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MessageNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServerOrderID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.ServerOrderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.BuySellEnum BuySell = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 DateTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UniqueExecutionID = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueexecutionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uniqueexecutionid().data(), static_cast<int>(this->uniqueexecutionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.UniqueExecutionID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_openclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NoOrderFills = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noorderfills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillResponse)
  return false;
#undef DO_
}

void HistoricalOrderFillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // int32 TotalNumberMessages = 2;
  if (this->totalnumbermessages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnumbermessages(), output);
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // string ServerOrderID = 6;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serverorderid(), output);
  }

  // .DTC_PB.BuySellEnum BuySell = 7;
  if (this->buysell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->buysell(), output);
  }

  // double Price = 8;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price(), output);
  }

  // sfixed64 DateTime = 9;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->datetime(), output);
  }

  // double Quantity = 10;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->quantity(), output);
  }

  // string UniqueExecutionID = 11;
  if (this->uniqueexecutionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uniqueexecutionid().data(), static_cast<int>(this->uniqueexecutionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.UniqueExecutionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->uniqueexecutionid(), output);
  }

  // string TradeAccount = 12;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->tradeaccount(), output);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
  if (this->openclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->openclose(), output);
  }

  // uint32 NoOrderFills = 14;
  if (this->noorderfills() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->noorderfills(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillResponse)
}

::google::protobuf::uint8* HistoricalOrderFillResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // int32 TotalNumberMessages = 2;
  if (this->totalnumbermessages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnumbermessages(), target);
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // string ServerOrderID = 6;
  if (this->serverorderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serverorderid(), target);
  }

  // .DTC_PB.BuySellEnum BuySell = 7;
  if (this->buysell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->buysell(), target);
  }

  // double Price = 8;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price(), target);
  }

  // sfixed64 DateTime = 9;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(9, this->datetime(), target);
  }

  // double Quantity = 10;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->quantity(), target);
  }

  // string UniqueExecutionID = 11;
  if (this->uniqueexecutionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uniqueexecutionid().data(), static_cast<int>(this->uniqueexecutionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.UniqueExecutionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uniqueexecutionid(), target);
  }

  // string TradeAccount = 12;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->tradeaccount(), target);
  }

  // .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
  if (this->openclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->openclose(), target);
  }

  // uint32 NoOrderFills = 14;
  if (this->noorderfills() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->noorderfills(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillResponse)
  return target;
}

size_t HistoricalOrderFillResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalOrderFillResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string ServerOrderID = 6;
  if (this->serverorderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverorderid());
  }

  // string UniqueExecutionID = 11;
  if (this->uniqueexecutionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uniqueexecutionid());
  }

  // string TradeAccount = 12;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 TotalNumberMessages = 2;
  if (this->totalnumbermessages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalnumbermessages());
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagenumber());
  }

  // .DTC_PB.BuySellEnum BuySell = 7;
  if (this->buysell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
  }

  // double Price = 8;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 DateTime = 9;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  // double Quantity = 10;
  if (this->quantity() != 0) {
    total_size += 1 + 8;
  }

  // .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
  if (this->openclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->openclose());
  }

  // uint32 NoOrderFills = 14;
  if (this->noorderfills() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->noorderfills());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalOrderFillResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalOrderFillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalOrderFillResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalOrderFillResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalOrderFillResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalOrderFillResponse)
    MergeFrom(*source);
  }
}

void HistoricalOrderFillResponse::MergeFrom(const HistoricalOrderFillResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalOrderFillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.serverorderid().size() > 0) {

    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  if (from.uniqueexecutionid().size() > 0) {

    uniqueexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uniqueexecutionid_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.totalnumbermessages() != 0) {
    set_totalnumbermessages(from.totalnumbermessages());
  }
  if (from.messagenumber() != 0) {
    set_messagenumber(from.messagenumber());
  }
  if (from.buysell() != 0) {
    set_buysell(from.buysell());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.openclose() != 0) {
    set_openclose(from.openclose());
  }
  if (from.noorderfills() != 0) {
    set_noorderfills(from.noorderfills());
  }
}

void HistoricalOrderFillResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalOrderFillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillResponse::CopyFrom(const HistoricalOrderFillResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalOrderFillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillResponse::IsInitialized() const {
  return true;
}

void HistoricalOrderFillResponse::Swap(HistoricalOrderFillResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalOrderFillResponse::InternalSwap(HistoricalOrderFillResponse* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uniqueexecutionid_.Swap(&other->uniqueexecutionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(messagenumber_, other->messagenumber_);
  swap(buysell_, other->buysell_);
  swap(price_, other->price_);
  swap(datetime_, other->datetime_);
  swap(quantity_, other->quantity_);
  swap(openclose_, other->openclose_);
  swap(noorderfills_, other->noorderfills_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalOrderFillResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionUpdate::kRequestIDFieldNumber;
const int PositionUpdate::kTotalNumberMessagesFieldNumber;
const int PositionUpdate::kMessageNumberFieldNumber;
const int PositionUpdate::kSymbolFieldNumber;
const int PositionUpdate::kExchangeFieldNumber;
const int PositionUpdate::kQuantityFieldNumber;
const int PositionUpdate::kAveragePriceFieldNumber;
const int PositionUpdate::kPositionIdentifierFieldNumber;
const int PositionUpdate::kTradeAccountFieldNumber;
const int PositionUpdate::kNoPositionsFieldNumber;
const int PositionUpdate::kUnsolicitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionUpdate::PositionUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_PositionUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.PositionUpdate)
}
PositionUpdate::PositionUpdate(const PositionUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  positionidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.positionidentifier().size() > 0) {
    positionidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionidentifier_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsolicited_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(unsolicited_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.PositionUpdate)
}

void PositionUpdate::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsolicited_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(unsolicited_));
}

PositionUpdate::~PositionUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.PositionUpdate)
  SharedDtor();
}

void PositionUpdate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionidentifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PositionUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionUpdate::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionUpdate& PositionUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_PositionUpdate.base);
  return *internal_default_instance();
}


void PositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionidentifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsolicited_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(unsolicited_));
  _internal_metadata_.Clear();
}

bool PositionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.PositionUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TotalNumberMessages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MessageNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.PositionUpdate.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.PositionUpdate.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Quantity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AveragePrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PositionIdentifier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionidentifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positionidentifier().data(), static_cast<int>(this->positionidentifier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.PositionUpdate.PositionIdentifier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.PositionUpdate.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NoPositions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nopositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Unsolicited = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsolicited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.PositionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.PositionUpdate)
  return false;
#undef DO_
}

void PositionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // int32 TotalNumberMessages = 2;
  if (this->totalnumbermessages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnumbermessages(), output);
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // double Quantity = 6;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->quantity(), output);
  }

  // double AveragePrice = 7;
  if (this->averageprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->averageprice(), output);
  }

  // string PositionIdentifier = 8;
  if (this->positionidentifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionidentifier().data(), static_cast<int>(this->positionidentifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.PositionIdentifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->positionidentifier(), output);
  }

  // string TradeAccount = 9;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradeaccount(), output);
  }

  // uint32 NoPositions = 10;
  if (this->nopositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nopositions(), output);
  }

  // uint32 Unsolicited = 11;
  if (this->unsolicited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unsolicited(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.PositionUpdate)
}

::google::protobuf::uint8* PositionUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // int32 TotalNumberMessages = 2;
  if (this->totalnumbermessages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnumbermessages(), target);
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // double Quantity = 6;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->quantity(), target);
  }

  // double AveragePrice = 7;
  if (this->averageprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->averageprice(), target);
  }

  // string PositionIdentifier = 8;
  if (this->positionidentifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionidentifier().data(), static_cast<int>(this->positionidentifier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.PositionIdentifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->positionidentifier(), target);
  }

  // string TradeAccount = 9;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.PositionUpdate.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradeaccount(), target);
  }

  // uint32 NoPositions = 10;
  if (this->nopositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nopositions(), target);
  }

  // uint32 Unsolicited = 11;
  if (this->unsolicited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unsolicited(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.PositionUpdate)
  return target;
}

size_t PositionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.PositionUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 4;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 5;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string PositionIdentifier = 8;
  if (this->positionidentifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positionidentifier());
  }

  // string TradeAccount = 9;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 TotalNumberMessages = 2;
  if (this->totalnumbermessages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalnumbermessages());
  }

  // double Quantity = 6;
  if (this->quantity() != 0) {
    total_size += 1 + 8;
  }

  // int32 MessageNumber = 3;
  if (this->messagenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagenumber());
  }

  // uint32 NoPositions = 10;
  if (this->nopositions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nopositions());
  }

  // double AveragePrice = 7;
  if (this->averageprice() != 0) {
    total_size += 1 + 8;
  }

  // uint32 Unsolicited = 11;
  if (this->unsolicited() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unsolicited());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.PositionUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.PositionUpdate)
    MergeFrom(*source);
  }
}

void PositionUpdate::MergeFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.positionidentifier().size() > 0) {

    positionidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionidentifier_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.totalnumbermessages() != 0) {
    set_totalnumbermessages(from.totalnumbermessages());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.messagenumber() != 0) {
    set_messagenumber(from.messagenumber());
  }
  if (from.nopositions() != 0) {
    set_nopositions(from.nopositions());
  }
  if (from.averageprice() != 0) {
    set_averageprice(from.averageprice());
  }
  if (from.unsolicited() != 0) {
    set_unsolicited(from.unsolicited());
  }
}

void PositionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionUpdate::CopyFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionUpdate::IsInitialized() const {
  return true;
}

void PositionUpdate::Swap(PositionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionUpdate::InternalSwap(PositionUpdate* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  positionidentifier_.Swap(&other->positionidentifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(quantity_, other->quantity_);
  swap(messagenumber_, other->messagenumber_);
  swap(nopositions_, other->nopositions_);
  swap(averageprice_, other->averageprice_);
  swap(unsolicited_, other->unsolicited_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionUpdate::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeAccountsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeAccountsRequest::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeAccountsRequest::TradeAccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_TradeAccountsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.TradeAccountsRequest)
}
TradeAccountsRequest::TradeAccountsRequest(const TradeAccountsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.TradeAccountsRequest)
}

void TradeAccountsRequest::SharedCtor() {
  requestid_ = 0;
}

TradeAccountsRequest::~TradeAccountsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.TradeAccountsRequest)
  SharedDtor();
}

void TradeAccountsRequest::SharedDtor() {
}

void TradeAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeAccountsRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeAccountsRequest& TradeAccountsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_TradeAccountsRequest.base);
  return *internal_default_instance();
}


void TradeAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.TradeAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool TradeAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.TradeAccountsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.TradeAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.TradeAccountsRequest)
  return false;
#undef DO_
}

void TradeAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.TradeAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.TradeAccountsRequest)
}

::google::protobuf::uint8* TradeAccountsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.TradeAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.TradeAccountsRequest)
  return target;
}

size_t TradeAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.TradeAccountsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.TradeAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeAccountsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeAccountsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.TradeAccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.TradeAccountsRequest)
    MergeFrom(*source);
  }
}

void TradeAccountsRequest::MergeFrom(const TradeAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.TradeAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void TradeAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.TradeAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountsRequest::CopyFrom(const TradeAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.TradeAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountsRequest::IsInitialized() const {
  return true;
}

void TradeAccountsRequest::Swap(TradeAccountsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeAccountsRequest::InternalSwap(TradeAccountsRequest* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeAccountsRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeAccountResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeAccountResponse::kTotalNumberMessagesFieldNumber;
const int TradeAccountResponse::kMessageNumberFieldNumber;
const int TradeAccountResponse::kTradeAccountFieldNumber;
const int TradeAccountResponse::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeAccountResponse::TradeAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_TradeAccountResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.TradeAccountResponse)
}
TradeAccountResponse::TradeAccountResponse(const TradeAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&totalnumbermessages_, &from.totalnumbermessages_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&totalnumbermessages_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.TradeAccountResponse)
}

void TradeAccountResponse::SharedCtor() {
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&totalnumbermessages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&totalnumbermessages_)) + sizeof(requestid_));
}

TradeAccountResponse::~TradeAccountResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.TradeAccountResponse)
  SharedDtor();
}

void TradeAccountResponse::SharedDtor() {
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeAccountResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeAccountResponse& TradeAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_TradeAccountResponse.base);
  return *internal_default_instance();
}


void TradeAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.TradeAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&totalnumbermessages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&totalnumbermessages_)) + sizeof(requestid_));
  _internal_metadata_.Clear();
}

bool TradeAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.TradeAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 TotalNumberMessages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MessageNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.TradeAccountResponse.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RequestID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.TradeAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.TradeAccountResponse)
  return false;
#undef DO_
}

void TradeAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.TradeAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TotalNumberMessages = 1;
  if (this->totalnumbermessages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalnumbermessages(), output);
  }

  // int32 MessageNumber = 2;
  if (this->messagenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messagenumber(), output);
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.TradeAccountResponse.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // int32 RequestID = 4;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->requestid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.TradeAccountResponse)
}

::google::protobuf::uint8* TradeAccountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.TradeAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TotalNumberMessages = 1;
  if (this->totalnumbermessages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalnumbermessages(), target);
  }

  // int32 MessageNumber = 2;
  if (this->messagenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messagenumber(), target);
  }

  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.TradeAccountResponse.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // int32 RequestID = 4;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->requestid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.TradeAccountResponse)
  return target;
}

size_t TradeAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.TradeAccountResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string TradeAccount = 3;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // int32 TotalNumberMessages = 1;
  if (this->totalnumbermessages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalnumbermessages());
  }

  // int32 MessageNumber = 2;
  if (this->messagenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagenumber());
  }

  // int32 RequestID = 4;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.TradeAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeAccountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeAccountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.TradeAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.TradeAccountResponse)
    MergeFrom(*source);
  }
}

void TradeAccountResponse::MergeFrom(const TradeAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.TradeAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.totalnumbermessages() != 0) {
    set_totalnumbermessages(from.totalnumbermessages());
  }
  if (from.messagenumber() != 0) {
    set_messagenumber(from.messagenumber());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void TradeAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.TradeAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountResponse::CopyFrom(const TradeAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.TradeAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountResponse::IsInitialized() const {
  return true;
}

void TradeAccountResponse::Swap(TradeAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeAccountResponse::InternalSwap(TradeAccountResponse* other) {
  using std::swap;
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(messagenumber_, other->messagenumber_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeAccountResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeListRequest::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeListRequest::ExchangeListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_ExchangeListRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.ExchangeListRequest)
}
ExchangeListRequest::ExchangeListRequest(const ExchangeListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.ExchangeListRequest)
}

void ExchangeListRequest::SharedCtor() {
  requestid_ = 0;
}

ExchangeListRequest::~ExchangeListRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.ExchangeListRequest)
  SharedDtor();
}

void ExchangeListRequest::SharedDtor() {
}

void ExchangeListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExchangeListRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeListRequest& ExchangeListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_ExchangeListRequest.base);
  return *internal_default_instance();
}


void ExchangeListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.ExchangeListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool ExchangeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.ExchangeListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.ExchangeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.ExchangeListRequest)
  return false;
#undef DO_
}

void ExchangeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.ExchangeListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.ExchangeListRequest)
}

::google::protobuf::uint8* ExchangeListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.ExchangeListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.ExchangeListRequest)
  return target;
}

size_t ExchangeListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.ExchangeListRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.ExchangeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.ExchangeListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.ExchangeListRequest)
    MergeFrom(*source);
  }
}

void ExchangeListRequest::MergeFrom(const ExchangeListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.ExchangeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void ExchangeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.ExchangeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeListRequest::CopyFrom(const ExchangeListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.ExchangeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeListRequest::IsInitialized() const {
  return true;
}

void ExchangeListRequest::Swap(ExchangeListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeListRequest::InternalSwap(ExchangeListRequest* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExchangeListRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeListResponse::kRequestIDFieldNumber;
const int ExchangeListResponse::kExchangeFieldNumber;
const int ExchangeListResponse::kIsFinalMessageFieldNumber;
const int ExchangeListResponse::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeListResponse::ExchangeListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_ExchangeListResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.ExchangeListResponse)
}
ExchangeListResponse::ExchangeListResponse(const ExchangeListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalmessage_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(isfinalmessage_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.ExchangeListResponse)
}

void ExchangeListResponse::SharedCtor() {
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalmessage_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(isfinalmessage_));
}

ExchangeListResponse::~ExchangeListResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.ExchangeListResponse)
  SharedDtor();
}

void ExchangeListResponse::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExchangeListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExchangeListResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeListResponse& ExchangeListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_ExchangeListResponse.base);
  return *internal_default_instance();
}


void ExchangeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.ExchangeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalmessage_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(isfinalmessage_));
  _internal_metadata_.Clear();
}

bool ExchangeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.ExchangeListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.ExchangeListResponse.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFinalMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalmessage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.ExchangeListResponse.Description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.ExchangeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.ExchangeListResponse)
  return false;
#undef DO_
}

void ExchangeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.ExchangeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // uint32 IsFinalMessage = 3;
  if (this->isfinalmessage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfinalmessage(), output);
  }

  // string Description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.ExchangeListResponse)
}

::google::protobuf::uint8* ExchangeListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.ExchangeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // uint32 IsFinalMessage = 3;
  if (this->isfinalmessage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isfinalmessage(), target);
  }

  // string Description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.ExchangeListResponse)
  return target;
}

size_t ExchangeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.ExchangeListResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string Description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // uint32 IsFinalMessage = 3;
  if (this->isfinalmessage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfinalmessage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.ExchangeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.ExchangeListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.ExchangeListResponse)
    MergeFrom(*source);
  }
}

void ExchangeListResponse::MergeFrom(const ExchangeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.ExchangeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.isfinalmessage() != 0) {
    set_isfinalmessage(from.isfinalmessage());
  }
}

void ExchangeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.ExchangeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeListResponse::CopyFrom(const ExchangeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.ExchangeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeListResponse::IsInitialized() const {
  return true;
}

void ExchangeListResponse::Swap(ExchangeListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeListResponse::InternalSwap(ExchangeListResponse* other) {
  using std::swap;
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(isfinalmessage_, other->isfinalmessage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExchangeListResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolsForExchangeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolsForExchangeRequest::kRequestIDFieldNumber;
const int SymbolsForExchangeRequest::kExchangeFieldNumber;
const int SymbolsForExchangeRequest::kSecurityTypeFieldNumber;
const int SymbolsForExchangeRequest::kRequestActionFieldNumber;
const int SymbolsForExchangeRequest::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolsForExchangeRequest::SymbolsForExchangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SymbolsForExchangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolsForExchangeRequest)
}
SymbolsForExchangeRequest::SymbolsForExchangeRequest(const SymbolsForExchangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestaction_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(requestaction_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolsForExchangeRequest)
}

void SymbolsForExchangeRequest::SharedCtor() {
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestaction_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(requestaction_));
}

SymbolsForExchangeRequest::~SymbolsForExchangeRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolsForExchangeRequest)
  SharedDtor();
}

void SymbolsForExchangeRequest::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolsForExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SymbolsForExchangeRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolsForExchangeRequest& SymbolsForExchangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SymbolsForExchangeRequest.base);
  return *internal_default_instance();
}


void SymbolsForExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestaction_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(requestaction_));
  _internal_metadata_.Clear();
}

bool SymbolsForExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolsForExchangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SymbolsForExchangeRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.SecurityTypeEnum SecurityType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.RequestActionEnum RequestAction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SymbolsForExchangeRequest.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolsForExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolsForExchangeRequest)
  return false;
#undef DO_
}

void SymbolsForExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->securitytype(), output);
  }

  // .DTC_PB.RequestActionEnum RequestAction = 4;
  if (this->requestaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->requestaction(), output);
  }

  // string Symbol = 5;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->symbol(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolsForExchangeRequest)
}

::google::protobuf::uint8* SymbolsForExchangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->securitytype(), target);
  }

  // .DTC_PB.RequestActionEnum RequestAction = 4;
  if (this->requestaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->requestaction(), target);
  }

  // string Symbol = 5;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->symbol(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolsForExchangeRequest)
  return target;
}

size_t SymbolsForExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SymbolsForExchangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string Symbol = 5;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // .DTC_PB.RequestActionEnum RequestAction = 4;
  if (this->requestaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolsForExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolsForExchangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolsForExchangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SymbolsForExchangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SymbolsForExchangeRequest)
    MergeFrom(*source);
  }
}

void SymbolsForExchangeRequest::MergeFrom(const SymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.requestaction() != 0) {
    set_requestaction(from.requestaction());
  }
}

void SymbolsForExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolsForExchangeRequest::CopyFrom(const SymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolsForExchangeRequest::IsInitialized() const {
  return true;
}

void SymbolsForExchangeRequest::Swap(SymbolsForExchangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolsForExchangeRequest::InternalSwap(SymbolsForExchangeRequest* other) {
  using std::swap;
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(requestaction_, other->requestaction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SymbolsForExchangeRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnderlyingSymbolsForExchangeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnderlyingSymbolsForExchangeRequest::kRequestIDFieldNumber;
const int UnderlyingSymbolsForExchangeRequest::kExchangeFieldNumber;
const int UnderlyingSymbolsForExchangeRequest::kSecurityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnderlyingSymbolsForExchangeRequest::UnderlyingSymbolsForExchangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_UnderlyingSymbolsForExchangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}
UnderlyingSymbolsForExchangeRequest::UnderlyingSymbolsForExchangeRequest(const UnderlyingSymbolsForExchangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&securitytype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}

void UnderlyingSymbolsForExchangeRequest::SharedCtor() {
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
}

UnderlyingSymbolsForExchangeRequest::~UnderlyingSymbolsForExchangeRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  SharedDtor();
}

void UnderlyingSymbolsForExchangeRequest::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnderlyingSymbolsForExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnderlyingSymbolsForExchangeRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnderlyingSymbolsForExchangeRequest& UnderlyingSymbolsForExchangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_UnderlyingSymbolsForExchangeRequest.base);
  return *internal_default_instance();
}


void UnderlyingSymbolsForExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  _internal_metadata_.Clear();
}

bool UnderlyingSymbolsForExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.UnderlyingSymbolsForExchangeRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.SecurityTypeEnum SecurityType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return false;
#undef DO_
}

void UnderlyingSymbolsForExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.UnderlyingSymbolsForExchangeRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->securitytype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}

::google::protobuf::uint8* UnderlyingSymbolsForExchangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.UnderlyingSymbolsForExchangeRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->securitytype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return target;
}

size_t UnderlyingSymbolsForExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnderlyingSymbolsForExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnderlyingSymbolsForExchangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnderlyingSymbolsForExchangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.UnderlyingSymbolsForExchangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.UnderlyingSymbolsForExchangeRequest)
    MergeFrom(*source);
  }
}

void UnderlyingSymbolsForExchangeRequest::MergeFrom(const UnderlyingSymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
}

void UnderlyingSymbolsForExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingSymbolsForExchangeRequest::CopyFrom(const UnderlyingSymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingSymbolsForExchangeRequest::IsInitialized() const {
  return true;
}

void UnderlyingSymbolsForExchangeRequest::Swap(UnderlyingSymbolsForExchangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnderlyingSymbolsForExchangeRequest::InternalSwap(UnderlyingSymbolsForExchangeRequest* other) {
  using std::swap;
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnderlyingSymbolsForExchangeRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolsForUnderlyingRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolsForUnderlyingRequest::kRequestIDFieldNumber;
const int SymbolsForUnderlyingRequest::kUnderlyingSymbolFieldNumber;
const int SymbolsForUnderlyingRequest::kExchangeFieldNumber;
const int SymbolsForUnderlyingRequest::kSecurityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolsForUnderlyingRequest::SymbolsForUnderlyingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SymbolsForUnderlyingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolsForUnderlyingRequest)
}
SymbolsForUnderlyingRequest::SymbolsForUnderlyingRequest(const SymbolsForUnderlyingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.underlyingsymbol().size() > 0) {
    underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&securitytype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolsForUnderlyingRequest)
}

void SymbolsForUnderlyingRequest::SharedCtor() {
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
}

SymbolsForUnderlyingRequest::~SymbolsForUnderlyingRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolsForUnderlyingRequest)
  SharedDtor();
}

void SymbolsForUnderlyingRequest::SharedDtor() {
  underlyingsymbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolsForUnderlyingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SymbolsForUnderlyingRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolsForUnderlyingRequest& SymbolsForUnderlyingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SymbolsForUnderlyingRequest.base);
  return *internal_default_instance();
}


void SymbolsForUnderlyingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SymbolsForUnderlyingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  underlyingsymbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  _internal_metadata_.Clear();
}

bool SymbolsForUnderlyingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolsForUnderlyingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UnderlyingSymbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsymbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SymbolsForUnderlyingRequest.UnderlyingSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SymbolsForUnderlyingRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolsForUnderlyingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolsForUnderlyingRequest)
  return false;
#undef DO_
}

void SymbolsForUnderlyingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolsForUnderlyingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string UnderlyingSymbol = 2;
  if (this->underlyingsymbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.UnderlyingSymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->underlyingsymbol(), output);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolsForUnderlyingRequest)
}

::google::protobuf::uint8* SymbolsForUnderlyingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolsForUnderlyingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string UnderlyingSymbol = 2;
  if (this->underlyingsymbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.UnderlyingSymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlyingsymbol(), target);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolsForUnderlyingRequest)
  return target;
}

size_t SymbolsForUnderlyingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SymbolsForUnderlyingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string UnderlyingSymbol = 2;
  if (this->underlyingsymbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlyingsymbol());
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolsForUnderlyingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolsForUnderlyingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolsForUnderlyingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SymbolsForUnderlyingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SymbolsForUnderlyingRequest)
    MergeFrom(*source);
  }
}

void SymbolsForUnderlyingRequest::MergeFrom(const SymbolsForUnderlyingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.underlyingsymbol().size() > 0) {

    underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
}

void SymbolsForUnderlyingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolsForUnderlyingRequest::CopyFrom(const SymbolsForUnderlyingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolsForUnderlyingRequest::IsInitialized() const {
  return true;
}

void SymbolsForUnderlyingRequest::Swap(SymbolsForUnderlyingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolsForUnderlyingRequest::InternalSwap(SymbolsForUnderlyingRequest* other) {
  using std::swap;
  underlyingsymbol_.Swap(&other->underlyingsymbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SymbolsForUnderlyingRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolSearchRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolSearchRequest::kRequestIDFieldNumber;
const int SymbolSearchRequest::kSearchTextFieldNumber;
const int SymbolSearchRequest::kExchangeFieldNumber;
const int SymbolSearchRequest::kSecurityTypeFieldNumber;
const int SymbolSearchRequest::kSearchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolSearchRequest::SymbolSearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SymbolSearchRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolSearchRequest)
}
SymbolSearchRequest::SymbolSearchRequest(const SymbolSearchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  searchtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.searchtext().size() > 0) {
    searchtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchtext_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&searchtype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(searchtype_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolSearchRequest)
}

void SymbolSearchRequest::SharedCtor() {
  searchtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&searchtype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(searchtype_));
}

SymbolSearchRequest::~SymbolSearchRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolSearchRequest)
  SharedDtor();
}

void SymbolSearchRequest::SharedDtor() {
  searchtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SymbolSearchRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolSearchRequest& SymbolSearchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SymbolSearchRequest.base);
  return *internal_default_instance();
}


void SymbolSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SymbolSearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  searchtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&searchtype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(searchtype_));
  _internal_metadata_.Clear();
}

bool SymbolSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolSearchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SearchText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->searchtext().data(), static_cast<int>(this->searchtext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SymbolSearchRequest.SearchText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SymbolSearchRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.SearchTypeEnum SearchType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_searchtype(static_cast< ::DTC_PB::SearchTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolSearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolSearchRequest)
  return false;
#undef DO_
}

void SymbolSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolSearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string SearchText = 2;
  if (this->searchtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->searchtext().data(), static_cast<int>(this->searchtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.SearchText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->searchtext(), output);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  // .DTC_PB.SearchTypeEnum SearchType = 5;
  if (this->searchtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->searchtype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolSearchRequest)
}

::google::protobuf::uint8* SymbolSearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolSearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string SearchText = 2;
  if (this->searchtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->searchtext().data(), static_cast<int>(this->searchtext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.SearchText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->searchtext(), target);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  // .DTC_PB.SearchTypeEnum SearchType = 5;
  if (this->searchtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->searchtype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolSearchRequest)
  return target;
}

size_t SymbolSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SymbolSearchRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string SearchText = 2;
  if (this->searchtext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchtext());
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // .DTC_PB.SearchTypeEnum SearchType = 5;
  if (this->searchtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->searchtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SymbolSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolSearchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolSearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SymbolSearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SymbolSearchRequest)
    MergeFrom(*source);
  }
}

void SymbolSearchRequest::MergeFrom(const SymbolSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SymbolSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.searchtext().size() > 0) {

    searchtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchtext_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.searchtype() != 0) {
    set_searchtype(from.searchtype());
  }
}

void SymbolSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SymbolSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolSearchRequest::CopyFrom(const SymbolSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SymbolSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolSearchRequest::IsInitialized() const {
  return true;
}

void SymbolSearchRequest::Swap(SymbolSearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolSearchRequest::InternalSwap(SymbolSearchRequest* other) {
  using std::swap;
  searchtext_.Swap(&other->searchtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(searchtype_, other->searchtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SymbolSearchRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityDefinitionForSymbolRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityDefinitionForSymbolRequest::kRequestIDFieldNumber;
const int SecurityDefinitionForSymbolRequest::kSymbolFieldNumber;
const int SecurityDefinitionForSymbolRequest::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityDefinitionForSymbolRequest::SecurityDefinitionForSymbolRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SecurityDefinitionForSymbolRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionForSymbolRequest)
}
SecurityDefinitionForSymbolRequest::SecurityDefinitionForSymbolRequest(const SecurityDefinitionForSymbolRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionForSymbolRequest)
}

void SecurityDefinitionForSymbolRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

SecurityDefinitionForSymbolRequest::~SecurityDefinitionForSymbolRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionForSymbolRequest)
  SharedDtor();
}

void SecurityDefinitionForSymbolRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityDefinitionForSymbolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityDefinitionForSymbolRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityDefinitionForSymbolRequest& SecurityDefinitionForSymbolRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SecurityDefinitionForSymbolRequest.base);
  return *internal_default_instance();
}


void SecurityDefinitionForSymbolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool SecurityDefinitionForSymbolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionForSymbolRequest.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionForSymbolRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionForSymbolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionForSymbolRequest)
  return false;
#undef DO_
}

void SecurityDefinitionForSymbolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionForSymbolRequest)
}

::google::protobuf::uint8* SecurityDefinitionForSymbolRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionForSymbolRequest)
  return target;
}

size_t SecurityDefinitionForSymbolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDefinitionForSymbolRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityDefinitionForSymbolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityDefinitionForSymbolRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SecurityDefinitionForSymbolRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SecurityDefinitionForSymbolRequest)
    MergeFrom(*source);
  }
}

void SecurityDefinitionForSymbolRequest::MergeFrom(const SecurityDefinitionForSymbolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void SecurityDefinitionForSymbolRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionForSymbolRequest::CopyFrom(const SecurityDefinitionForSymbolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionForSymbolRequest::IsInitialized() const {
  return true;
}

void SecurityDefinitionForSymbolRequest::Swap(SecurityDefinitionForSymbolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityDefinitionForSymbolRequest::InternalSwap(SecurityDefinitionForSymbolRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityDefinitionForSymbolRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityDefinitionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityDefinitionResponse::kRequestIDFieldNumber;
const int SecurityDefinitionResponse::kSymbolFieldNumber;
const int SecurityDefinitionResponse::kExchangeFieldNumber;
const int SecurityDefinitionResponse::kSecurityTypeFieldNumber;
const int SecurityDefinitionResponse::kDescriptionFieldNumber;
const int SecurityDefinitionResponse::kMinPriceIncrementFieldNumber;
const int SecurityDefinitionResponse::kPriceDisplayFormatFieldNumber;
const int SecurityDefinitionResponse::kCurrencyValuePerIncrementFieldNumber;
const int SecurityDefinitionResponse::kIsFinalMessageFieldNumber;
const int SecurityDefinitionResponse::kFloatToIntPriceMultiplierFieldNumber;
const int SecurityDefinitionResponse::kIntToFloatPriceDivisorFieldNumber;
const int SecurityDefinitionResponse::kUnderlyingSymbolFieldNumber;
const int SecurityDefinitionResponse::kUpdatesBidAskOnlyFieldNumber;
const int SecurityDefinitionResponse::kStrikePriceFieldNumber;
const int SecurityDefinitionResponse::kPutOrCallFieldNumber;
const int SecurityDefinitionResponse::kShortInterestFieldNumber;
const int SecurityDefinitionResponse::kSecurityExpirationDateFieldNumber;
const int SecurityDefinitionResponse::kBuyRolloverInterestFieldNumber;
const int SecurityDefinitionResponse::kSellRolloverInterestFieldNumber;
const int SecurityDefinitionResponse::kEarningsPerShareFieldNumber;
const int SecurityDefinitionResponse::kSharesOutstandingFieldNumber;
const int SecurityDefinitionResponse::kIntToFloatQuantityDivisorFieldNumber;
const int SecurityDefinitionResponse::kHasMarketDepthDataFieldNumber;
const int SecurityDefinitionResponse::kDisplayPriceMultiplierFieldNumber;
const int SecurityDefinitionResponse::kExchangeSymbolFieldNumber;
const int SecurityDefinitionResponse::kInitialMarginRequirementFieldNumber;
const int SecurityDefinitionResponse::kMaintenanceMarginRequirementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityDefinitionResponse::SecurityDefinitionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SecurityDefinitionResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionResponse)
}
SecurityDefinitionResponse::SecurityDefinitionResponse(const SecurityDefinitionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.underlyingsymbol().size() > 0) {
    underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
  }
  exchangesymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchangesymbol().size() > 0) {
    exchangesymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangesymbol_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maintenancemarginrequirement_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(maintenancemarginrequirement_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionResponse)
}

void SecurityDefinitionResponse::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maintenancemarginrequirement_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(maintenancemarginrequirement_));
}

SecurityDefinitionResponse::~SecurityDefinitionResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionResponse)
  SharedDtor();
}

void SecurityDefinitionResponse::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyingsymbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityDefinitionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityDefinitionResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityDefinitionResponse& SecurityDefinitionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SecurityDefinitionResponse.base);
  return *internal_default_instance();
}


void SecurityDefinitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SecurityDefinitionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyingsymbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maintenancemarginrequirement_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(maintenancemarginrequirement_));
  _internal_metadata_.Clear();
}

bool SecurityDefinitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionResponse.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionResponse.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionResponse.Description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MinPriceIncrement = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minpriceincrement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pricedisplayformat(static_cast< ::DTC_PB::PriceDisplayFormatEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CurrencyValuePerIncrement = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currencyvalueperincrement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFinalMessage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalmessage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float FloatToIntPriceMultiplier = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floattointpricemultiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float IntToFloatPriceDivisor = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatpricedivisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UnderlyingSymbol = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsymbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionResponse.UnderlyingSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UpdatesBidAskOnly = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatesbidaskonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float StrikePrice = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.PutCallEnum PutOrCall = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_putorcall(static_cast< ::DTC_PB::PutCallEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ShortInterest = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 SecurityExpirationDate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &securityexpirationdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float BuyRolloverInterest = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buyrolloverinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SellRolloverInterest = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sellrolloverinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EarningsPerShare = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &earningspershare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SharesOutstanding = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharesoutstanding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float IntToFloatQuantityDivisor = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatquantitydivisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 HasMarketDepthData = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasmarketdepthdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float DisplayPriceMultiplier = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &displaypricemultiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ExchangeSymbol = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangesymbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionResponse.ExchangeSymbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float InitialMarginRequirement = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initialmarginrequirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MaintenanceMarginRequirement = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maintenancemarginrequirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionResponse)
  return false;
#undef DO_
}

void SecurityDefinitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  // string Description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // float MinPriceIncrement = 6;
  if (this->minpriceincrement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minpriceincrement(), output);
  }

  // .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
  if (this->pricedisplayformat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pricedisplayformat(), output);
  }

  // float CurrencyValuePerIncrement = 8;
  if (this->currencyvalueperincrement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->currencyvalueperincrement(), output);
  }

  // uint32 IsFinalMessage = 9;
  if (this->isfinalmessage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isfinalmessage(), output);
  }

  // float FloatToIntPriceMultiplier = 10;
  if (this->floattointpricemultiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->floattointpricemultiplier(), output);
  }

  // float IntToFloatPriceDivisor = 11;
  if (this->inttofloatpricedivisor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->inttofloatpricedivisor(), output);
  }

  // string UnderlyingSymbol = 12;
  if (this->underlyingsymbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.UnderlyingSymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->underlyingsymbol(), output);
  }

  // uint32 UpdatesBidAskOnly = 13;
  if (this->updatesbidaskonly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->updatesbidaskonly(), output);
  }

  // float StrikePrice = 14;
  if (this->strikeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->strikeprice(), output);
  }

  // .DTC_PB.PutCallEnum PutOrCall = 15;
  if (this->putorcall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->putorcall(), output);
  }

  // uint32 ShortInterest = 16;
  if (this->shortinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->shortinterest(), output);
  }

  // sfixed32 SecurityExpirationDate = 17;
  if (this->securityexpirationdate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(17, this->securityexpirationdate(), output);
  }

  // float BuyRolloverInterest = 18;
  if (this->buyrolloverinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->buyrolloverinterest(), output);
  }

  // float SellRolloverInterest = 19;
  if (this->sellrolloverinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->sellrolloverinterest(), output);
  }

  // float EarningsPerShare = 20;
  if (this->earningspershare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->earningspershare(), output);
  }

  // uint32 SharesOutstanding = 21;
  if (this->sharesoutstanding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->sharesoutstanding(), output);
  }

  // float IntToFloatQuantityDivisor = 22;
  if (this->inttofloatquantitydivisor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->inttofloatquantitydivisor(), output);
  }

  // uint32 HasMarketDepthData = 23;
  if (this->hasmarketdepthdata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->hasmarketdepthdata(), output);
  }

  // float DisplayPriceMultiplier = 24;
  if (this->displaypricemultiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->displaypricemultiplier(), output);
  }

  // string ExchangeSymbol = 25;
  if (this->exchangesymbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.ExchangeSymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->exchangesymbol(), output);
  }

  // float InitialMarginRequirement = 26;
  if (this->initialmarginrequirement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->initialmarginrequirement(), output);
  }

  // float MaintenanceMarginRequirement = 27;
  if (this->maintenancemarginrequirement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->maintenancemarginrequirement(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionResponse)
}

::google::protobuf::uint8* SecurityDefinitionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  // string Description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // float MinPriceIncrement = 6;
  if (this->minpriceincrement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minpriceincrement(), target);
  }

  // .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
  if (this->pricedisplayformat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pricedisplayformat(), target);
  }

  // float CurrencyValuePerIncrement = 8;
  if (this->currencyvalueperincrement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->currencyvalueperincrement(), target);
  }

  // uint32 IsFinalMessage = 9;
  if (this->isfinalmessage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isfinalmessage(), target);
  }

  // float FloatToIntPriceMultiplier = 10;
  if (this->floattointpricemultiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->floattointpricemultiplier(), target);
  }

  // float IntToFloatPriceDivisor = 11;
  if (this->inttofloatpricedivisor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->inttofloatpricedivisor(), target);
  }

  // string UnderlyingSymbol = 12;
  if (this->underlyingsymbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.UnderlyingSymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->underlyingsymbol(), target);
  }

  // uint32 UpdatesBidAskOnly = 13;
  if (this->updatesbidaskonly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->updatesbidaskonly(), target);
  }

  // float StrikePrice = 14;
  if (this->strikeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->strikeprice(), target);
  }

  // .DTC_PB.PutCallEnum PutOrCall = 15;
  if (this->putorcall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->putorcall(), target);
  }

  // uint32 ShortInterest = 16;
  if (this->shortinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->shortinterest(), target);
  }

  // sfixed32 SecurityExpirationDate = 17;
  if (this->securityexpirationdate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(17, this->securityexpirationdate(), target);
  }

  // float BuyRolloverInterest = 18;
  if (this->buyrolloverinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->buyrolloverinterest(), target);
  }

  // float SellRolloverInterest = 19;
  if (this->sellrolloverinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->sellrolloverinterest(), target);
  }

  // float EarningsPerShare = 20;
  if (this->earningspershare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->earningspershare(), target);
  }

  // uint32 SharesOutstanding = 21;
  if (this->sharesoutstanding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->sharesoutstanding(), target);
  }

  // float IntToFloatQuantityDivisor = 22;
  if (this->inttofloatquantitydivisor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->inttofloatquantitydivisor(), target);
  }

  // uint32 HasMarketDepthData = 23;
  if (this->hasmarketdepthdata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->hasmarketdepthdata(), target);
  }

  // float DisplayPriceMultiplier = 24;
  if (this->displaypricemultiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->displaypricemultiplier(), target);
  }

  // string ExchangeSymbol = 25;
  if (this->exchangesymbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.ExchangeSymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->exchangesymbol(), target);
  }

  // float InitialMarginRequirement = 26;
  if (this->initialmarginrequirement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->initialmarginrequirement(), target);
  }

  // float MaintenanceMarginRequirement = 27;
  if (this->maintenancemarginrequirement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->maintenancemarginrequirement(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionResponse)
  return target;
}

size_t SecurityDefinitionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SecurityDefinitionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string Description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string UnderlyingSymbol = 12;
  if (this->underlyingsymbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->underlyingsymbol());
  }

  // string ExchangeSymbol = 25;
  if (this->exchangesymbol().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchangesymbol());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (this->securitytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
  }

  // float MinPriceIncrement = 6;
  if (this->minpriceincrement() != 0) {
    total_size += 1 + 4;
  }

  // .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
  if (this->pricedisplayformat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricedisplayformat());
  }

  // float CurrencyValuePerIncrement = 8;
  if (this->currencyvalueperincrement() != 0) {
    total_size += 1 + 4;
  }

  // uint32 IsFinalMessage = 9;
  if (this->isfinalmessage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfinalmessage());
  }

  // float FloatToIntPriceMultiplier = 10;
  if (this->floattointpricemultiplier() != 0) {
    total_size += 1 + 4;
  }

  // float IntToFloatPriceDivisor = 11;
  if (this->inttofloatpricedivisor() != 0) {
    total_size += 1 + 4;
  }

  // uint32 UpdatesBidAskOnly = 13;
  if (this->updatesbidaskonly() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updatesbidaskonly());
  }

  // float StrikePrice = 14;
  if (this->strikeprice() != 0) {
    total_size += 1 + 4;
  }

  // .DTC_PB.PutCallEnum PutOrCall = 15;
  if (this->putorcall() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->putorcall());
  }

  // uint32 ShortInterest = 16;
  if (this->shortinterest() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shortinterest());
  }

  // sfixed32 SecurityExpirationDate = 17;
  if (this->securityexpirationdate() != 0) {
    total_size += 2 + 4;
  }

  // float BuyRolloverInterest = 18;
  if (this->buyrolloverinterest() != 0) {
    total_size += 2 + 4;
  }

  // float SellRolloverInterest = 19;
  if (this->sellrolloverinterest() != 0) {
    total_size += 2 + 4;
  }

  // float EarningsPerShare = 20;
  if (this->earningspershare() != 0) {
    total_size += 2 + 4;
  }

  // uint32 SharesOutstanding = 21;
  if (this->sharesoutstanding() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sharesoutstanding());
  }

  // float IntToFloatQuantityDivisor = 22;
  if (this->inttofloatquantitydivisor() != 0) {
    total_size += 2 + 4;
  }

  // uint32 HasMarketDepthData = 23;
  if (this->hasmarketdepthdata() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hasmarketdepthdata());
  }

  // float DisplayPriceMultiplier = 24;
  if (this->displaypricemultiplier() != 0) {
    total_size += 2 + 4;
  }

  // float InitialMarginRequirement = 26;
  if (this->initialmarginrequirement() != 0) {
    total_size += 2 + 4;
  }

  // float MaintenanceMarginRequirement = 27;
  if (this->maintenancemarginrequirement() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDefinitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SecurityDefinitionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityDefinitionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityDefinitionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SecurityDefinitionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SecurityDefinitionResponse)
    MergeFrom(*source);
  }
}

void SecurityDefinitionResponse::MergeFrom(const SecurityDefinitionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SecurityDefinitionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.underlyingsymbol().size() > 0) {

    underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
  }
  if (from.exchangesymbol().size() > 0) {

    exchangesymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangesymbol_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.securitytype() != 0) {
    set_securitytype(from.securitytype());
  }
  if (from.minpriceincrement() != 0) {
    set_minpriceincrement(from.minpriceincrement());
  }
  if (from.pricedisplayformat() != 0) {
    set_pricedisplayformat(from.pricedisplayformat());
  }
  if (from.currencyvalueperincrement() != 0) {
    set_currencyvalueperincrement(from.currencyvalueperincrement());
  }
  if (from.isfinalmessage() != 0) {
    set_isfinalmessage(from.isfinalmessage());
  }
  if (from.floattointpricemultiplier() != 0) {
    set_floattointpricemultiplier(from.floattointpricemultiplier());
  }
  if (from.inttofloatpricedivisor() != 0) {
    set_inttofloatpricedivisor(from.inttofloatpricedivisor());
  }
  if (from.updatesbidaskonly() != 0) {
    set_updatesbidaskonly(from.updatesbidaskonly());
  }
  if (from.strikeprice() != 0) {
    set_strikeprice(from.strikeprice());
  }
  if (from.putorcall() != 0) {
    set_putorcall(from.putorcall());
  }
  if (from.shortinterest() != 0) {
    set_shortinterest(from.shortinterest());
  }
  if (from.securityexpirationdate() != 0) {
    set_securityexpirationdate(from.securityexpirationdate());
  }
  if (from.buyrolloverinterest() != 0) {
    set_buyrolloverinterest(from.buyrolloverinterest());
  }
  if (from.sellrolloverinterest() != 0) {
    set_sellrolloverinterest(from.sellrolloverinterest());
  }
  if (from.earningspershare() != 0) {
    set_earningspershare(from.earningspershare());
  }
  if (from.sharesoutstanding() != 0) {
    set_sharesoutstanding(from.sharesoutstanding());
  }
  if (from.inttofloatquantitydivisor() != 0) {
    set_inttofloatquantitydivisor(from.inttofloatquantitydivisor());
  }
  if (from.hasmarketdepthdata() != 0) {
    set_hasmarketdepthdata(from.hasmarketdepthdata());
  }
  if (from.displaypricemultiplier() != 0) {
    set_displaypricemultiplier(from.displaypricemultiplier());
  }
  if (from.initialmarginrequirement() != 0) {
    set_initialmarginrequirement(from.initialmarginrequirement());
  }
  if (from.maintenancemarginrequirement() != 0) {
    set_maintenancemarginrequirement(from.maintenancemarginrequirement());
  }
}

void SecurityDefinitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SecurityDefinitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionResponse::CopyFrom(const SecurityDefinitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SecurityDefinitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionResponse::IsInitialized() const {
  return true;
}

void SecurityDefinitionResponse::Swap(SecurityDefinitionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityDefinitionResponse::InternalSwap(SecurityDefinitionResponse* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlyingsymbol_.Swap(&other->underlyingsymbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchangesymbol_.Swap(&other->exchangesymbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(minpriceincrement_, other->minpriceincrement_);
  swap(pricedisplayformat_, other->pricedisplayformat_);
  swap(currencyvalueperincrement_, other->currencyvalueperincrement_);
  swap(isfinalmessage_, other->isfinalmessage_);
  swap(floattointpricemultiplier_, other->floattointpricemultiplier_);
  swap(inttofloatpricedivisor_, other->inttofloatpricedivisor_);
  swap(updatesbidaskonly_, other->updatesbidaskonly_);
  swap(strikeprice_, other->strikeprice_);
  swap(putorcall_, other->putorcall_);
  swap(shortinterest_, other->shortinterest_);
  swap(securityexpirationdate_, other->securityexpirationdate_);
  swap(buyrolloverinterest_, other->buyrolloverinterest_);
  swap(sellrolloverinterest_, other->sellrolloverinterest_);
  swap(earningspershare_, other->earningspershare_);
  swap(sharesoutstanding_, other->sharesoutstanding_);
  swap(inttofloatquantitydivisor_, other->inttofloatquantitydivisor_);
  swap(hasmarketdepthdata_, other->hasmarketdepthdata_);
  swap(displaypricemultiplier_, other->displaypricemultiplier_);
  swap(initialmarginrequirement_, other->initialmarginrequirement_);
  swap(maintenancemarginrequirement_, other->maintenancemarginrequirement_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityDefinitionResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityDefinitionReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityDefinitionReject::kRequestIDFieldNumber;
const int SecurityDefinitionReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityDefinitionReject::SecurityDefinitionReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SecurityDefinitionReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionReject)
}
SecurityDefinitionReject::SecurityDefinitionReject(const SecurityDefinitionReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionReject)
}

void SecurityDefinitionReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

SecurityDefinitionReject::~SecurityDefinitionReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionReject)
  SharedDtor();
}

void SecurityDefinitionReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityDefinitionReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityDefinitionReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityDefinitionReject& SecurityDefinitionReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_SecurityDefinitionReject.base);
  return *internal_default_instance();
}


void SecurityDefinitionReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SecurityDefinitionReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool SecurityDefinitionReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.SecurityDefinitionReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionReject)
  return false;
#undef DO_
}

void SecurityDefinitionReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionReject)
}

::google::protobuf::uint8* SecurityDefinitionReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.SecurityDefinitionReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionReject)
  return target;
}

size_t SecurityDefinitionReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SecurityDefinitionReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDefinitionReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SecurityDefinitionReject)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityDefinitionReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityDefinitionReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SecurityDefinitionReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SecurityDefinitionReject)
    MergeFrom(*source);
  }
}

void SecurityDefinitionReject::MergeFrom(const SecurityDefinitionReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SecurityDefinitionReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void SecurityDefinitionReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SecurityDefinitionReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionReject::CopyFrom(const SecurityDefinitionReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SecurityDefinitionReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionReject::IsInitialized() const {
  return true;
}

void SecurityDefinitionReject::Swap(SecurityDefinitionReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityDefinitionReject::InternalSwap(SecurityDefinitionReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityDefinitionReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountBalanceRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountBalanceRequest::kRequestIDFieldNumber;
const int AccountBalanceRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountBalanceRequest::AccountBalanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_AccountBalanceRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceRequest)
}
AccountBalanceRequest::AccountBalanceRequest(const AccountBalanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceRequest)
}

void AccountBalanceRequest::SharedCtor() {
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

AccountBalanceRequest::~AccountBalanceRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceRequest)
  SharedDtor();
}

void AccountBalanceRequest::SharedDtor() {
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountBalanceRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountBalanceRequest& AccountBalanceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_AccountBalanceRequest.base);
  return *internal_default_instance();
}


void AccountBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.AccountBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool AccountBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.AccountBalanceRequest.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceRequest)
  return false;
#undef DO_
}

void AccountBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string TradeAccount = 2;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradeaccount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceRequest)
}

::google::protobuf::uint8* AccountBalanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string TradeAccount = 2;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradeaccount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceRequest)
  return target;
}

size_t AccountBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.AccountBalanceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string TradeAccount = 2;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.AccountBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountBalanceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountBalanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.AccountBalanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.AccountBalanceRequest)
    MergeFrom(*source);
  }
}

void AccountBalanceRequest::MergeFrom(const AccountBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.AccountBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void AccountBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.AccountBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceRequest::CopyFrom(const AccountBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.AccountBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceRequest::IsInitialized() const {
  return true;
}

void AccountBalanceRequest::Swap(AccountBalanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountBalanceRequest::InternalSwap(AccountBalanceRequest* other) {
  using std::swap;
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountBalanceRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountBalanceReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountBalanceReject::kRequestIDFieldNumber;
const int AccountBalanceReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountBalanceReject::AccountBalanceReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_AccountBalanceReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceReject)
}
AccountBalanceReject::AccountBalanceReject(const AccountBalanceReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceReject)
}

void AccountBalanceReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

AccountBalanceReject::~AccountBalanceReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceReject)
  SharedDtor();
}

void AccountBalanceReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountBalanceReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountBalanceReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountBalanceReject& AccountBalanceReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_AccountBalanceReject.base);
  return *internal_default_instance();
}


void AccountBalanceReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.AccountBalanceReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
  _internal_metadata_.Clear();
}

bool AccountBalanceReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.AccountBalanceReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceReject)
  return false;
#undef DO_
}

void AccountBalanceReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceReject)
}

::google::protobuf::uint8* AccountBalanceReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceReject)
  return target;
}

size_t AccountBalanceReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.AccountBalanceReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountBalanceReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.AccountBalanceReject)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountBalanceReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountBalanceReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.AccountBalanceReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.AccountBalanceReject)
    MergeFrom(*source);
  }
}

void AccountBalanceReject::MergeFrom(const AccountBalanceReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.AccountBalanceReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void AccountBalanceReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.AccountBalanceReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceReject::CopyFrom(const AccountBalanceReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.AccountBalanceReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceReject::IsInitialized() const {
  return true;
}

void AccountBalanceReject::Swap(AccountBalanceReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountBalanceReject::InternalSwap(AccountBalanceReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountBalanceReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountBalanceUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountBalanceUpdate::kRequestIDFieldNumber;
const int AccountBalanceUpdate::kCashBalanceFieldNumber;
const int AccountBalanceUpdate::kBalanceAvailableForNewPositionsFieldNumber;
const int AccountBalanceUpdate::kAccountCurrencyFieldNumber;
const int AccountBalanceUpdate::kTradeAccountFieldNumber;
const int AccountBalanceUpdate::kSecuritiesValueFieldNumber;
const int AccountBalanceUpdate::kMarginRequirementFieldNumber;
const int AccountBalanceUpdate::kTotalNumberMessagesFieldNumber;
const int AccountBalanceUpdate::kMessageNumberFieldNumber;
const int AccountBalanceUpdate::kNoAccountBalancesFieldNumber;
const int AccountBalanceUpdate::kUnsolicitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountBalanceUpdate::AccountBalanceUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_AccountBalanceUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceUpdate)
}
AccountBalanceUpdate::AccountBalanceUpdate(const AccountBalanceUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.accountcurrency().size() > 0) {
    accountcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountcurrency_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradeaccount().size() > 0) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&cashbalance_, &from.cashbalance_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsolicited_) -
    reinterpret_cast<char*>(&cashbalance_)) + sizeof(unsolicited_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceUpdate)
}

void AccountBalanceUpdate::SharedCtor() {
  accountcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cashbalance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsolicited_) -
      reinterpret_cast<char*>(&cashbalance_)) + sizeof(unsolicited_));
}

AccountBalanceUpdate::~AccountBalanceUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceUpdate)
  SharedDtor();
}

void AccountBalanceUpdate::SharedDtor() {
  accountcurrency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountBalanceUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountBalanceUpdate::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountBalanceUpdate& AccountBalanceUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_AccountBalanceUpdate.base);
  return *internal_default_instance();
}


void AccountBalanceUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.AccountBalanceUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountcurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cashbalance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsolicited_) -
      reinterpret_cast<char*>(&cashbalance_)) + sizeof(unsolicited_));
  _internal_metadata_.Clear();
}

bool AccountBalanceUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CashBalance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashbalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BalanceAvailableForNewPositions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balanceavailablefornewpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string AccountCurrency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountcurrency()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.AccountBalanceUpdate.AccountCurrency"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TradeAccount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.AccountBalanceUpdate.TradeAccount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SecuritiesValue = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &securitiesvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double MarginRequirement = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrequirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TotalNumberMessages = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MessageNumber = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NoAccountBalances = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noaccountbalances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Unsolicited = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsolicited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceUpdate)
  return false;
#undef DO_
}

void AccountBalanceUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // double CashBalance = 2;
  if (this->cashbalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cashbalance(), output);
  }

  // double BalanceAvailableForNewPositions = 3;
  if (this->balanceavailablefornewpositions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->balanceavailablefornewpositions(), output);
  }

  // string AccountCurrency = 4;
  if (this->accountcurrency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.AccountCurrency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accountcurrency(), output);
  }

  // string TradeAccount = 5;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradeaccount(), output);
  }

  // double SecuritiesValue = 6;
  if (this->securitiesvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->securitiesvalue(), output);
  }

  // double MarginRequirement = 7;
  if (this->marginrequirement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->marginrequirement(), output);
  }

  // int32 TotalNumberMessages = 8;
  if (this->totalnumbermessages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalnumbermessages(), output);
  }

  // int32 MessageNumber = 9;
  if (this->messagenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->messagenumber(), output);
  }

  // uint32 NoAccountBalances = 10;
  if (this->noaccountbalances() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->noaccountbalances(), output);
  }

  // uint32 Unsolicited = 11;
  if (this->unsolicited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unsolicited(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceUpdate)
}

::google::protobuf::uint8* AccountBalanceUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // double CashBalance = 2;
  if (this->cashbalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cashbalance(), target);
  }

  // double BalanceAvailableForNewPositions = 3;
  if (this->balanceavailablefornewpositions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->balanceavailablefornewpositions(), target);
  }

  // string AccountCurrency = 4;
  if (this->accountcurrency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.AccountCurrency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountcurrency(), target);
  }

  // string TradeAccount = 5;
  if (this->tradeaccount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tradeaccount(), target);
  }

  // double SecuritiesValue = 6;
  if (this->securitiesvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->securitiesvalue(), target);
  }

  // double MarginRequirement = 7;
  if (this->marginrequirement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->marginrequirement(), target);
  }

  // int32 TotalNumberMessages = 8;
  if (this->totalnumbermessages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalnumbermessages(), target);
  }

  // int32 MessageNumber = 9;
  if (this->messagenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->messagenumber(), target);
  }

  // uint32 NoAccountBalances = 10;
  if (this->noaccountbalances() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->noaccountbalances(), target);
  }

  // uint32 Unsolicited = 11;
  if (this->unsolicited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unsolicited(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceUpdate)
  return target;
}

size_t AccountBalanceUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.AccountBalanceUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string AccountCurrency = 4;
  if (this->accountcurrency().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accountcurrency());
  }

  // string TradeAccount = 5;
  if (this->tradeaccount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeaccount());
  }

  // double CashBalance = 2;
  if (this->cashbalance() != 0) {
    total_size += 1 + 8;
  }

  // double BalanceAvailableForNewPositions = 3;
  if (this->balanceavailablefornewpositions() != 0) {
    total_size += 1 + 8;
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 TotalNumberMessages = 8;
  if (this->totalnumbermessages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalnumbermessages());
  }

  // double SecuritiesValue = 6;
  if (this->securitiesvalue() != 0) {
    total_size += 1 + 8;
  }

  // double MarginRequirement = 7;
  if (this->marginrequirement() != 0) {
    total_size += 1 + 8;
  }

  // int32 MessageNumber = 9;
  if (this->messagenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->messagenumber());
  }

  // uint32 NoAccountBalances = 10;
  if (this->noaccountbalances() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->noaccountbalances());
  }

  // uint32 Unsolicited = 11;
  if (this->unsolicited() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unsolicited());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountBalanceUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.AccountBalanceUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountBalanceUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountBalanceUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.AccountBalanceUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.AccountBalanceUpdate)
    MergeFrom(*source);
  }
}

void AccountBalanceUpdate::MergeFrom(const AccountBalanceUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.AccountBalanceUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountcurrency().size() > 0) {

    accountcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountcurrency_);
  }
  if (from.tradeaccount().size() > 0) {

    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  if (from.cashbalance() != 0) {
    set_cashbalance(from.cashbalance());
  }
  if (from.balanceavailablefornewpositions() != 0) {
    set_balanceavailablefornewpositions(from.balanceavailablefornewpositions());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.totalnumbermessages() != 0) {
    set_totalnumbermessages(from.totalnumbermessages());
  }
  if (from.securitiesvalue() != 0) {
    set_securitiesvalue(from.securitiesvalue());
  }
  if (from.marginrequirement() != 0) {
    set_marginrequirement(from.marginrequirement());
  }
  if (from.messagenumber() != 0) {
    set_messagenumber(from.messagenumber());
  }
  if (from.noaccountbalances() != 0) {
    set_noaccountbalances(from.noaccountbalances());
  }
  if (from.unsolicited() != 0) {
    set_unsolicited(from.unsolicited());
  }
}

void AccountBalanceUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.AccountBalanceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceUpdate::CopyFrom(const AccountBalanceUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.AccountBalanceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceUpdate::IsInitialized() const {
  return true;
}

void AccountBalanceUpdate::Swap(AccountBalanceUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountBalanceUpdate::InternalSwap(AccountBalanceUpdate* other) {
  using std::swap;
  accountcurrency_.Swap(&other->accountcurrency_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cashbalance_, other->cashbalance_);
  swap(balanceavailablefornewpositions_, other->balanceavailablefornewpositions_);
  swap(requestid_, other->requestid_);
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(securitiesvalue_, other->securitiesvalue_);
  swap(marginrequirement_, other->marginrequirement_);
  swap(messagenumber_, other->messagenumber_);
  swap(noaccountbalances_, other->noaccountbalances_);
  swap(unsolicited_, other->unsolicited_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountBalanceUpdate::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMessage::kUserMessageFieldNumber;
const int UserMessage::kIsPopupMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMessage::UserMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_UserMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.UserMessage)
}
UserMessage::UserMessage(const UserMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usermessage().size() > 0) {
    usermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermessage_);
  }
  ispopupmessage_ = from.ispopupmessage_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.UserMessage)
}

void UserMessage::SharedCtor() {
  usermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispopupmessage_ = 0u;
}

UserMessage::~UserMessage() {
  // @@protoc_insertion_point(destructor:DTC_PB.UserMessage)
  SharedDtor();
}

void UserMessage::SharedDtor() {
  usermessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserMessage::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMessage& UserMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_UserMessage.base);
  return *internal_default_instance();
}


void UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispopupmessage_ = 0u;
  _internal_metadata_.Clear();
}

bool UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.UserMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string UserMessage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usermessage().data(), static_cast<int>(this->usermessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.UserMessage.UserMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsPopupMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispopupmessage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.UserMessage)
  return false;
#undef DO_
}

void UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserMessage = 1;
  if (this->usermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usermessage().data(), static_cast<int>(this->usermessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.UserMessage.UserMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usermessage(), output);
  }

  // uint32 IsPopupMessage = 2;
  if (this->ispopupmessage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ispopupmessage(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.UserMessage)
}

::google::protobuf::uint8* UserMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserMessage = 1;
  if (this->usermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usermessage().data(), static_cast<int>(this->usermessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.UserMessage.UserMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usermessage(), target);
  }

  // uint32 IsPopupMessage = 2;
  if (this->ispopupmessage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ispopupmessage(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.UserMessage)
  return target;
}

size_t UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.UserMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string UserMessage = 1;
  if (this->usermessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usermessage());
  }

  // uint32 IsPopupMessage = 2;
  if (this->ispopupmessage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ispopupmessage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.UserMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.UserMessage)
    MergeFrom(*source);
  }
}

void UserMessage::MergeFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usermessage().size() > 0) {

    usermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermessage_);
  }
  if (from.ispopupmessage() != 0) {
    set_ispopupmessage(from.ispopupmessage());
  }
}

void UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMessage::CopyFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessage::IsInitialized() const {
  return true;
}

void UserMessage::Swap(UserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserMessage::InternalSwap(UserMessage* other) {
  using std::swap;
  usermessage_.Swap(&other->usermessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ispopupmessage_, other->ispopupmessage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserMessage::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeneralLogMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralLogMessage::kMessageTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralLogMessage::GeneralLogMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_GeneralLogMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.GeneralLogMessage)
}
GeneralLogMessage::GeneralLogMessage(const GeneralLogMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.messagetext().size() > 0) {
    messagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetext_);
  }
  // @@protoc_insertion_point(copy_constructor:DTC_PB.GeneralLogMessage)
}

void GeneralLogMessage::SharedCtor() {
  messagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GeneralLogMessage::~GeneralLogMessage() {
  // @@protoc_insertion_point(destructor:DTC_PB.GeneralLogMessage)
  SharedDtor();
}

void GeneralLogMessage::SharedDtor() {
  messagetext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeneralLogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeneralLogMessage::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeneralLogMessage& GeneralLogMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_GeneralLogMessage.base);
  return *internal_default_instance();
}


void GeneralLogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.GeneralLogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messagetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GeneralLogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.GeneralLogMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string MessageText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->messagetext().data(), static_cast<int>(this->messagetext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.GeneralLogMessage.MessageText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.GeneralLogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.GeneralLogMessage)
  return false;
#undef DO_
}

void GeneralLogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.GeneralLogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MessageText = 3;
  if (this->messagetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->messagetext().data(), static_cast<int>(this->messagetext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.GeneralLogMessage.MessageText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagetext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.GeneralLogMessage)
}

::google::protobuf::uint8* GeneralLogMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.GeneralLogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MessageText = 3;
  if (this->messagetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->messagetext().data(), static_cast<int>(this->messagetext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.GeneralLogMessage.MessageText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagetext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.GeneralLogMessage)
  return target;
}

size_t GeneralLogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.GeneralLogMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string MessageText = 3;
  if (this->messagetext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralLogMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.GeneralLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralLogMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralLogMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.GeneralLogMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.GeneralLogMessage)
    MergeFrom(*source);
  }
}

void GeneralLogMessage::MergeFrom(const GeneralLogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.GeneralLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.messagetext().size() > 0) {

    messagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetext_);
  }
}

void GeneralLogMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.GeneralLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralLogMessage::CopyFrom(const GeneralLogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.GeneralLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralLogMessage::IsInitialized() const {
  return true;
}

void GeneralLogMessage::Swap(GeneralLogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralLogMessage::InternalSwap(GeneralLogMessage* other) {
  using std::swap;
  messagetext_.Swap(&other->messagetext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeneralLogMessage::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataRequest::kRequestIDFieldNumber;
const int HistoricalPriceDataRequest::kSymbolFieldNumber;
const int HistoricalPriceDataRequest::kExchangeFieldNumber;
const int HistoricalPriceDataRequest::kRecordIntervalFieldNumber;
const int HistoricalPriceDataRequest::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRequest::kEndDateTimeFieldNumber;
const int HistoricalPriceDataRequest::kMaxDaysToReturnFieldNumber;
const int HistoricalPriceDataRequest::kUseZLibCompressionFieldNumber;
const int HistoricalPriceDataRequest::kRequestDividendAdjustedStockDataFieldNumber;
const int HistoricalPriceDataRequest::kFlag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataRequest::HistoricalPriceDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRequest)
}
HistoricalPriceDataRequest::HistoricalPriceDataRequest(const HistoricalPriceDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_1_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(flag_1_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRequest)
}

void HistoricalPriceDataRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_1_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(flag_1_));
}

HistoricalPriceDataRequest::~HistoricalPriceDataRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRequest)
  SharedDtor();
}

void HistoricalPriceDataRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalPriceDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRequest::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataRequest& HistoricalPriceDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataRequest.base);
  return *internal_default_instance();
}


void HistoricalPriceDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_1_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(flag_1_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalPriceDataRequest.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalPriceDataRequest.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_recordinterval(static_cast< ::DTC_PB::HistoricalDataIntervalEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 StartDateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 EndDateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &enddatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MaxDaysToReturn = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxdaystoreturn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UseZLibCompression = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usezlibcompression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 RequestDividendAdjustedStockData = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestdividendadjustedstockdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Flag_1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRequest)
  return false;
#undef DO_
}

void HistoricalPriceDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
  if (this->recordinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->recordinterval(), output);
  }

  // sfixed64 StartDateTime = 5;
  if (this->startdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->startdatetime(), output);
  }

  // sfixed64 EndDateTime = 6;
  if (this->enddatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->enddatetime(), output);
  }

  // uint32 MaxDaysToReturn = 7;
  if (this->maxdaystoreturn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxdaystoreturn(), output);
  }

  // uint32 UseZLibCompression = 8;
  if (this->usezlibcompression() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usezlibcompression(), output);
  }

  // uint32 RequestDividendAdjustedStockData = 9;
  if (this->requestdividendadjustedstockdata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->requestdividendadjustedstockdata(), output);
  }

  // uint32 Flag_1 = 10;
  if (this->flag_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flag_1(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRequest)
}

::google::protobuf::uint8* HistoricalPriceDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
  if (this->recordinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->recordinterval(), target);
  }

  // sfixed64 StartDateTime = 5;
  if (this->startdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->startdatetime(), target);
  }

  // sfixed64 EndDateTime = 6;
  if (this->enddatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->enddatetime(), target);
  }

  // uint32 MaxDaysToReturn = 7;
  if (this->maxdaystoreturn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxdaystoreturn(), target);
  }

  // uint32 UseZLibCompression = 8;
  if (this->usezlibcompression() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usezlibcompression(), target);
  }

  // uint32 RequestDividendAdjustedStockData = 9;
  if (this->requestdividendadjustedstockdata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->requestdividendadjustedstockdata(), target);
  }

  // uint32 Flag_1 = 10;
  if (this->flag_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flag_1(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRequest)
  return target;
}

size_t HistoricalPriceDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
  if (this->recordinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordinterval());
  }

  // sfixed64 StartDateTime = 5;
  if (this->startdatetime() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 EndDateTime = 6;
  if (this->enddatetime() != 0) {
    total_size += 1 + 8;
  }

  // uint32 MaxDaysToReturn = 7;
  if (this->maxdaystoreturn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxdaystoreturn());
  }

  // uint32 UseZLibCompression = 8;
  if (this->usezlibcompression() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usezlibcompression());
  }

  // uint32 RequestDividendAdjustedStockData = 9;
  if (this->requestdividendadjustedstockdata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestdividendadjustedstockdata());
  }

  // uint32 Flag_1 = 10;
  if (this->flag_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag_1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataRequest)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRequest::MergeFrom(const HistoricalPriceDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.recordinterval() != 0) {
    set_recordinterval(from.recordinterval());
  }
  if (from.startdatetime() != 0) {
    set_startdatetime(from.startdatetime());
  }
  if (from.enddatetime() != 0) {
    set_enddatetime(from.enddatetime());
  }
  if (from.maxdaystoreturn() != 0) {
    set_maxdaystoreturn(from.maxdaystoreturn());
  }
  if (from.usezlibcompression() != 0) {
    set_usezlibcompression(from.usezlibcompression());
  }
  if (from.requestdividendadjustedstockdata() != 0) {
    set_requestdividendadjustedstockdata(from.requestdividendadjustedstockdata());
  }
  if (from.flag_1() != 0) {
    set_flag_1(from.flag_1());
  }
}

void HistoricalPriceDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRequest::CopyFrom(const HistoricalPriceDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRequest::IsInitialized() const {
  return true;
}

void HistoricalPriceDataRequest::Swap(HistoricalPriceDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataRequest::InternalSwap(HistoricalPriceDataRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(recordinterval_, other->recordinterval_);
  swap(startdatetime_, other->startdatetime_);
  swap(enddatetime_, other->enddatetime_);
  swap(maxdaystoreturn_, other->maxdaystoreturn_);
  swap(usezlibcompression_, other->usezlibcompression_);
  swap(requestdividendadjustedstockdata_, other->requestdividendadjustedstockdata_);
  swap(flag_1_, other->flag_1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataResponseHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataResponseHeader::kRequestIDFieldNumber;
const int HistoricalPriceDataResponseHeader::kRecordIntervalFieldNumber;
const int HistoricalPriceDataResponseHeader::kUseZLibCompressionFieldNumber;
const int HistoricalPriceDataResponseHeader::kNoRecordsToReturnFieldNumber;
const int HistoricalPriceDataResponseHeader::kIntToFloatPriceDivisorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataResponseHeader::HistoricalPriceDataResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataResponseHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataResponseHeader)
}
HistoricalPriceDataResponseHeader::HistoricalPriceDataResponseHeader(const HistoricalPriceDataResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inttofloatpricedivisor_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(inttofloatpricedivisor_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataResponseHeader)
}

void HistoricalPriceDataResponseHeader::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inttofloatpricedivisor_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(inttofloatpricedivisor_));
}

HistoricalPriceDataResponseHeader::~HistoricalPriceDataResponseHeader() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataResponseHeader)
  SharedDtor();
}

void HistoricalPriceDataResponseHeader::SharedDtor() {
}

void HistoricalPriceDataResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseHeader::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataResponseHeader& HistoricalPriceDataResponseHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataResponseHeader.base);
  return *internal_default_instance();
}


void HistoricalPriceDataResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inttofloatpricedivisor_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(inttofloatpricedivisor_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataResponseHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_recordinterval(static_cast< ::DTC_PB::HistoricalDataIntervalEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UseZLibCompression = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usezlibcompression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NoRecordsToReturn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &norecordstoreturn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float IntToFloatPriceDivisor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatpricedivisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataResponseHeader)
  return false;
#undef DO_
}

void HistoricalPriceDataResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
  if (this->recordinterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->recordinterval(), output);
  }

  // uint32 UseZLibCompression = 3;
  if (this->usezlibcompression() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usezlibcompression(), output);
  }

  // uint32 NoRecordsToReturn = 4;
  if (this->norecordstoreturn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->norecordstoreturn(), output);
  }

  // float IntToFloatPriceDivisor = 5;
  if (this->inttofloatpricedivisor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->inttofloatpricedivisor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataResponseHeader)
}

::google::protobuf::uint8* HistoricalPriceDataResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
  if (this->recordinterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->recordinterval(), target);
  }

  // uint32 UseZLibCompression = 3;
  if (this->usezlibcompression() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usezlibcompression(), target);
  }

  // uint32 NoRecordsToReturn = 4;
  if (this->norecordstoreturn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->norecordstoreturn(), target);
  }

  // float IntToFloatPriceDivisor = 5;
  if (this->inttofloatpricedivisor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->inttofloatpricedivisor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataResponseHeader)
  return target;
}

size_t HistoricalPriceDataResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataResponseHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
  if (this->recordinterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordinterval());
  }

  // uint32 UseZLibCompression = 3;
  if (this->usezlibcompression() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usezlibcompression());
  }

  // uint32 NoRecordsToReturn = 4;
  if (this->norecordstoreturn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->norecordstoreturn());
  }

  // float IntToFloatPriceDivisor = 5;
  if (this->inttofloatpricedivisor() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataResponseHeader)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataResponseHeader::MergeFrom(const HistoricalPriceDataResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.recordinterval() != 0) {
    set_recordinterval(from.recordinterval());
  }
  if (from.usezlibcompression() != 0) {
    set_usezlibcompression(from.usezlibcompression());
  }
  if (from.norecordstoreturn() != 0) {
    set_norecordstoreturn(from.norecordstoreturn());
  }
  if (from.inttofloatpricedivisor() != 0) {
    set_inttofloatpricedivisor(from.inttofloatpricedivisor());
  }
}

void HistoricalPriceDataResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataResponseHeader::CopyFrom(const HistoricalPriceDataResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataResponseHeader::IsInitialized() const {
  return true;
}

void HistoricalPriceDataResponseHeader::Swap(HistoricalPriceDataResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataResponseHeader::InternalSwap(HistoricalPriceDataResponseHeader* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  swap(recordinterval_, other->recordinterval_);
  swap(usezlibcompression_, other->usezlibcompression_);
  swap(norecordstoreturn_, other->norecordstoreturn_);
  swap(inttofloatpricedivisor_, other->inttofloatpricedivisor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataResponseHeader::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataReject::kRequestIDFieldNumber;
const int HistoricalPriceDataReject::kRejectTextFieldNumber;
const int HistoricalPriceDataReject::kRejectReasonCodeFieldNumber;
const int HistoricalPriceDataReject::kRetryTimeInSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataReject::HistoricalPriceDataReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataReject)
}
HistoricalPriceDataReject::HistoricalPriceDataReject(const HistoricalPriceDataReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rejecttext().size() > 0) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retrytimeinseconds_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(retrytimeinseconds_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataReject)
}

void HistoricalPriceDataReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrytimeinseconds_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(retrytimeinseconds_));
}

HistoricalPriceDataReject::~HistoricalPriceDataReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataReject)
  SharedDtor();
}

void HistoricalPriceDataReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalPriceDataReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataReject::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataReject& HistoricalPriceDataReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataReject.base);
  return *internal_default_instance();
}


void HistoricalPriceDataReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejecttext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrytimeinseconds_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(retrytimeinseconds_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DTC_PB.HistoricalPriceDataReject.RejectText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rejectreasoncode(static_cast< ::DTC_PB::HistoricalPriceDataRejectReasonCodeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 RetryTimeInSeconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrytimeinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataReject)
  return false;
#undef DO_
}

void HistoricalPriceDataReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalPriceDataReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  // .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
  if (this->rejectreasoncode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rejectreasoncode(), output);
  }

  // uint32 RetryTimeInSeconds = 4;
  if (this->retrytimeinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retrytimeinseconds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataReject)
}

::google::protobuf::uint8* HistoricalPriceDataReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DTC_PB.HistoricalPriceDataReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  // .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
  if (this->rejectreasoncode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rejectreasoncode(), target);
  }

  // uint32 RetryTimeInSeconds = 4;
  if (this->retrytimeinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retrytimeinseconds(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataReject)
  return target;
}

size_t HistoricalPriceDataReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataReject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string RejectText = 2;
  if (this->rejecttext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rejecttext());
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
  if (this->rejectreasoncode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rejectreasoncode());
  }

  // uint32 RetryTimeInSeconds = 4;
  if (this->retrytimeinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retrytimeinseconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataReject)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataReject::MergeFrom(const HistoricalPriceDataReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rejecttext().size() > 0) {

    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.rejectreasoncode() != 0) {
    set_rejectreasoncode(from.rejectreasoncode());
  }
  if (from.retrytimeinseconds() != 0) {
    set_retrytimeinseconds(from.retrytimeinseconds());
  }
}

void HistoricalPriceDataReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataReject::CopyFrom(const HistoricalPriceDataReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataReject::IsInitialized() const {
  return true;
}

void HistoricalPriceDataReject::Swap(HistoricalPriceDataReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataReject::InternalSwap(HistoricalPriceDataReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(rejectreasoncode_, other->rejectreasoncode_);
  swap(retrytimeinseconds_, other->retrytimeinseconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataReject::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataRecordResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataRecordResponse::kRequestIDFieldNumber;
const int HistoricalPriceDataRecordResponse::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRecordResponse::kOpenPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kHighPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kLowPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kLastPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kNumTradesFieldNumber;
const int HistoricalPriceDataRecordResponse::kBidVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kAskVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataRecordResponse::HistoricalPriceDataRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataRecordResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRecordResponse)
}
HistoricalPriceDataRecordResponse::HistoricalPriceDataRecordResponse(const HistoricalPriceDataRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startdatetime_, &from.startdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRecordResponse)
}

void HistoricalPriceDataRecordResponse::SharedCtor() {
  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataRecordResponse::~HistoricalPriceDataRecordResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRecordResponse)
  SharedDtor();
}

void HistoricalPriceDataRecordResponse::SharedDtor() {
}

void HistoricalPriceDataRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataRecordResponse& HistoricalPriceDataRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataRecordResponse.base);
  return *internal_default_instance();
}


void HistoricalPriceDataRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 StartDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double HighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NumTrades = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BidVolume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AskVolume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFinalRecord = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRecordResponse)
  return false;
#undef DO_
}

void HistoricalPriceDataRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // sfixed64 StartDateTime = 2;
  if (this->startdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->startdatetime(), output);
  }

  // double OpenPrice = 3;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openprice(), output);
  }

  // double HighPrice = 4;
  if (this->highprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->highprice(), output);
  }

  // double LowPrice = 5;
  if (this->lowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lowprice(), output);
  }

  // double LastPrice = 6;
  if (this->lastprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lastprice(), output);
  }

  // double Volume = 7;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->volume(), output);
  }

  // uint32 NumTrades = 8;
  if (this->numtrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numtrades(), output);
  }

  // double BidVolume = 9;
  if (this->bidvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidvolume(), output);
  }

  // double AskVolume = 10;
  if (this->askvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askvolume(), output);
  }

  // uint32 IsFinalRecord = 11;
  if (this->isfinalrecord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isfinalrecord(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRecordResponse)
}

::google::protobuf::uint8* HistoricalPriceDataRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // sfixed64 StartDateTime = 2;
  if (this->startdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->startdatetime(), target);
  }

  // double OpenPrice = 3;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->openprice(), target);
  }

  // double HighPrice = 4;
  if (this->highprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->highprice(), target);
  }

  // double LowPrice = 5;
  if (this->lowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lowprice(), target);
  }

  // double LastPrice = 6;
  if (this->lastprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lastprice(), target);
  }

  // double Volume = 7;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->volume(), target);
  }

  // uint32 NumTrades = 8;
  if (this->numtrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numtrades(), target);
  }

  // double BidVolume = 9;
  if (this->bidvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidvolume(), target);
  }

  // double AskVolume = 10;
  if (this->askvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askvolume(), target);
  }

  // uint32 IsFinalRecord = 11;
  if (this->isfinalrecord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isfinalrecord(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRecordResponse)
  return target;
}

size_t HistoricalPriceDataRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataRecordResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed64 StartDateTime = 2;
  if (this->startdatetime() != 0) {
    total_size += 1 + 8;
  }

  // double OpenPrice = 3;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // double HighPrice = 4;
  if (this->highprice() != 0) {
    total_size += 1 + 8;
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // uint32 NumTrades = 8;
  if (this->numtrades() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numtrades());
  }

  // double LowPrice = 5;
  if (this->lowprice() != 0) {
    total_size += 1 + 8;
  }

  // double LastPrice = 6;
  if (this->lastprice() != 0) {
    total_size += 1 + 8;
  }

  // double Volume = 7;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // double BidVolume = 9;
  if (this->bidvolume() != 0) {
    total_size += 1 + 8;
  }

  // double AskVolume = 10;
  if (this->askvolume() != 0) {
    total_size += 1 + 8;
  }

  // uint32 IsFinalRecord = 11;
  if (this->isfinalrecord() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfinalrecord());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataRecordResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataRecordResponse)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRecordResponse::MergeFrom(const HistoricalPriceDataRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startdatetime() != 0) {
    set_startdatetime(from.startdatetime());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.highprice() != 0) {
    set_highprice(from.highprice());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.numtrades() != 0) {
    set_numtrades(from.numtrades());
  }
  if (from.lowprice() != 0) {
    set_lowprice(from.lowprice());
  }
  if (from.lastprice() != 0) {
    set_lastprice(from.lastprice());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.bidvolume() != 0) {
    set_bidvolume(from.bidvolume());
  }
  if (from.askvolume() != 0) {
    set_askvolume(from.askvolume());
  }
  if (from.isfinalrecord() != 0) {
    set_isfinalrecord(from.isfinalrecord());
  }
}

void HistoricalPriceDataRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRecordResponse::CopyFrom(const HistoricalPriceDataRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRecordResponse::IsInitialized() const {
  return true;
}

void HistoricalPriceDataRecordResponse::Swap(HistoricalPriceDataRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataRecordResponse::InternalSwap(HistoricalPriceDataRecordResponse* other) {
  using std::swap;
  swap(startdatetime_, other->startdatetime_);
  swap(openprice_, other->openprice_);
  swap(highprice_, other->highprice_);
  swap(requestid_, other->requestid_);
  swap(numtrades_, other->numtrades_);
  swap(lowprice_, other->lowprice_);
  swap(lastprice_, other->lastprice_);
  swap(volume_, other->volume_);
  swap(bidvolume_, other->bidvolume_);
  swap(askvolume_, other->askvolume_);
  swap(isfinalrecord_, other->isfinalrecord_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataRecordResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataTickRecordResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataTickRecordResponse::kRequestIDFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kDateTimeFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kAtBidOrAskFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kPriceFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kVolumeFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataTickRecordResponse::HistoricalPriceDataTickRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataTickRecordResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
}
HistoricalPriceDataTickRecordResponse::HistoricalPriceDataTickRecordResponse(const HistoricalPriceDataTickRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
}

void HistoricalPriceDataTickRecordResponse::SharedCtor() {
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataTickRecordResponse::~HistoricalPriceDataTickRecordResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
  SharedDtor();
}

void HistoricalPriceDataTickRecordResponse::SharedDtor() {
}

void HistoricalPriceDataTickRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataTickRecordResponse& HistoricalPriceDataTickRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataTickRecordResponse.base);
  return *internal_default_instance();
}


void HistoricalPriceDataTickRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataTickRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Volume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFinalRecord = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return false;
#undef DO_
}

void HistoricalPriceDataTickRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // double DateTime = 2;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->datetime(), output);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
  if (this->atbidorask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->atbidorask(), output);
  }

  // double Price = 4;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }

  // double Volume = 5;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume(), output);
  }

  // uint32 IsFinalRecord = 6;
  if (this->isfinalrecord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfinalrecord(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataTickRecordResponse)
}

::google::protobuf::uint8* HistoricalPriceDataTickRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // double DateTime = 2;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->datetime(), target);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
  if (this->atbidorask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->atbidorask(), target);
  }

  // double Price = 4;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }

  // double Volume = 5;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volume(), target);
  }

  // uint32 IsFinalRecord = 6;
  if (this->isfinalrecord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfinalrecord(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return target;
}

size_t HistoricalPriceDataTickRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double DateTime = 2;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
  if (this->atbidorask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
  }

  // double Price = 4;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double Volume = 5;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // uint32 IsFinalRecord = 6;
  if (this->isfinalrecord() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfinalrecord());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataTickRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataTickRecordResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataTickRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataTickRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataTickRecordResponse)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataTickRecordResponse::MergeFrom(const HistoricalPriceDataTickRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.atbidorask() != 0) {
    set_atbidorask(from.atbidorask());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.isfinalrecord() != 0) {
    set_isfinalrecord(from.isfinalrecord());
  }
}

void HistoricalPriceDataTickRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataTickRecordResponse::CopyFrom(const HistoricalPriceDataTickRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataTickRecordResponse::IsInitialized() const {
  return true;
}

void HistoricalPriceDataTickRecordResponse::Swap(HistoricalPriceDataTickRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataTickRecordResponse::InternalSwap(HistoricalPriceDataTickRecordResponse* other) {
  using std::swap;
  swap(datetime_, other->datetime_);
  swap(requestid_, other->requestid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(isfinalrecord_, other->isfinalrecord_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataTickRecordResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataRecordResponse_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataRecordResponse_Int::kRequestIDFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kOpenPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kHighPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kLowPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kLastPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kNumTradesFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kBidVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kAskVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataRecordResponse_Int::HistoricalPriceDataRecordResponse_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataRecordResponse_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}
HistoricalPriceDataRecordResponse_Int::HistoricalPriceDataRecordResponse_Int(const HistoricalPriceDataRecordResponse_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startdatetime_, &from.startdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}

void HistoricalPriceDataRecordResponse_Int::SharedCtor() {
  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataRecordResponse_Int::~HistoricalPriceDataRecordResponse_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  SharedDtor();
}

void HistoricalPriceDataRecordResponse_Int::SharedDtor() {
}

void HistoricalPriceDataRecordResponse_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataRecordResponse_Int& HistoricalPriceDataRecordResponse_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataRecordResponse_Int.base);
  return *internal_default_instance();
}


void HistoricalPriceDataRecordResponse_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataRecordResponse_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 StartDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 OpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 HighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NumTrades = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BidVolume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AskVolume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFinalRecord = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return false;
#undef DO_
}

void HistoricalPriceDataRecordResponse_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // sfixed64 StartDateTime = 2;
  if (this->startdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->startdatetime(), output);
  }

  // int32 OpenPrice = 3;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->openprice(), output);
  }

  // int32 HighPrice = 4;
  if (this->highprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->highprice(), output);
  }

  // int32 LowPrice = 5;
  if (this->lowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lowprice(), output);
  }

  // int32 LastPrice = 6;
  if (this->lastprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastprice(), output);
  }

  // int32 Volume = 7;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->volume(), output);
  }

  // uint32 NumTrades = 8;
  if (this->numtrades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numtrades(), output);
  }

  // int32 BidVolume = 9;
  if (this->bidvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidvolume(), output);
  }

  // int32 AskVolume = 10;
  if (this->askvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->askvolume(), output);
  }

  // uint32 IsFinalRecord = 11;
  if (this->isfinalrecord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isfinalrecord(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}

::google::protobuf::uint8* HistoricalPriceDataRecordResponse_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // sfixed64 StartDateTime = 2;
  if (this->startdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->startdatetime(), target);
  }

  // int32 OpenPrice = 3;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->openprice(), target);
  }

  // int32 HighPrice = 4;
  if (this->highprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->highprice(), target);
  }

  // int32 LowPrice = 5;
  if (this->lowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lowprice(), target);
  }

  // int32 LastPrice = 6;
  if (this->lastprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastprice(), target);
  }

  // int32 Volume = 7;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->volume(), target);
  }

  // uint32 NumTrades = 8;
  if (this->numtrades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numtrades(), target);
  }

  // int32 BidVolume = 9;
  if (this->bidvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidvolume(), target);
  }

  // int32 AskVolume = 10;
  if (this->askvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->askvolume(), target);
  }

  // uint32 IsFinalRecord = 11;
  if (this->isfinalrecord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isfinalrecord(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return target;
}

size_t HistoricalPriceDataRecordResponse_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed64 StartDateTime = 2;
  if (this->startdatetime() != 0) {
    total_size += 1 + 8;
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 OpenPrice = 3;
  if (this->openprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->openprice());
  }

  // int32 HighPrice = 4;
  if (this->highprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->highprice());
  }

  // int32 LowPrice = 5;
  if (this->lowprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lowprice());
  }

  // int32 LastPrice = 6;
  if (this->lastprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastprice());
  }

  // int32 Volume = 7;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // uint32 NumTrades = 8;
  if (this->numtrades() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numtrades());
  }

  // int32 BidVolume = 9;
  if (this->bidvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bidvolume());
  }

  // int32 AskVolume = 10;
  if (this->askvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->askvolume());
  }

  // uint32 IsFinalRecord = 11;
  if (this->isfinalrecord() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfinalrecord());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataRecordResponse_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataRecordResponse_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataRecordResponse_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataRecordResponse_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataRecordResponse_Int)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRecordResponse_Int::MergeFrom(const HistoricalPriceDataRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startdatetime() != 0) {
    set_startdatetime(from.startdatetime());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.highprice() != 0) {
    set_highprice(from.highprice());
  }
  if (from.lowprice() != 0) {
    set_lowprice(from.lowprice());
  }
  if (from.lastprice() != 0) {
    set_lastprice(from.lastprice());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.numtrades() != 0) {
    set_numtrades(from.numtrades());
  }
  if (from.bidvolume() != 0) {
    set_bidvolume(from.bidvolume());
  }
  if (from.askvolume() != 0) {
    set_askvolume(from.askvolume());
  }
  if (from.isfinalrecord() != 0) {
    set_isfinalrecord(from.isfinalrecord());
  }
}

void HistoricalPriceDataRecordResponse_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRecordResponse_Int::CopyFrom(const HistoricalPriceDataRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRecordResponse_Int::IsInitialized() const {
  return true;
}

void HistoricalPriceDataRecordResponse_Int::Swap(HistoricalPriceDataRecordResponse_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataRecordResponse_Int::InternalSwap(HistoricalPriceDataRecordResponse_Int* other) {
  using std::swap;
  swap(startdatetime_, other->startdatetime_);
  swap(requestid_, other->requestid_);
  swap(openprice_, other->openprice_);
  swap(highprice_, other->highprice_);
  swap(lowprice_, other->lowprice_);
  swap(lastprice_, other->lastprice_);
  swap(volume_, other->volume_);
  swap(numtrades_, other->numtrades_);
  swap(bidvolume_, other->bidvolume_);
  swap(askvolume_, other->askvolume_);
  swap(isfinalrecord_, other->isfinalrecord_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataRecordResponse_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataTickRecordResponse_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataTickRecordResponse_Int::kRequestIDFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kDateTimeFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kPriceFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kVolumeFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kAtBidOrAskFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataTickRecordResponse_Int::HistoricalPriceDataTickRecordResponse_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataTickRecordResponse_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}
HistoricalPriceDataTickRecordResponse_Int::HistoricalPriceDataTickRecordResponse_Int(const HistoricalPriceDataTickRecordResponse_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}

void HistoricalPriceDataTickRecordResponse_Int::SharedCtor() {
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataTickRecordResponse_Int::~HistoricalPriceDataTickRecordResponse_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  SharedDtor();
}

void HistoricalPriceDataTickRecordResponse_Int::SharedDtor() {
}

void HistoricalPriceDataTickRecordResponse_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse_Int::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataTickRecordResponse_Int& HistoricalPriceDataTickRecordResponse_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataTickRecordResponse_Int.base);
  return *internal_default_instance();
}


void HistoricalPriceDataTickRecordResponse_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataTickRecordResponse_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IsFinalRecord = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return false;
#undef DO_
}

void HistoricalPriceDataTickRecordResponse_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // double DateTime = 2;
  if (this->datetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->datetime(), output);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (this->atbidorask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->atbidorask(), output);
  }

  // uint32 IsFinalRecord = 6;
  if (this->isfinalrecord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfinalrecord(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}

::google::protobuf::uint8* HistoricalPriceDataTickRecordResponse_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // double DateTime = 2;
  if (this->datetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->datetime(), target);
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (this->atbidorask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->atbidorask(), target);
  }

  // uint32 IsFinalRecord = 6;
  if (this->isfinalrecord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfinalrecord(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return target;
}

size_t HistoricalPriceDataTickRecordResponse_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double DateTime = 2;
  if (this->datetime() != 0) {
    total_size += 1 + 8;
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  // int32 Price = 3;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 Volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (this->atbidorask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
  }

  // uint32 IsFinalRecord = 6;
  if (this->isfinalrecord() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isfinalrecord());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataTickRecordResponse_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataTickRecordResponse_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataTickRecordResponse_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataTickRecordResponse_Int::MergeFrom(const HistoricalPriceDataTickRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime() != 0) {
    set_datetime(from.datetime());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.atbidorask() != 0) {
    set_atbidorask(from.atbidorask());
  }
  if (from.isfinalrecord() != 0) {
    set_isfinalrecord(from.isfinalrecord());
  }
}

void HistoricalPriceDataTickRecordResponse_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataTickRecordResponse_Int::CopyFrom(const HistoricalPriceDataTickRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataTickRecordResponse_Int::IsInitialized() const {
  return true;
}

void HistoricalPriceDataTickRecordResponse_Int::Swap(HistoricalPriceDataTickRecordResponse_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataTickRecordResponse_Int::InternalSwap(HistoricalPriceDataTickRecordResponse_Int* other) {
  using std::swap;
  swap(datetime_, other->datetime_);
  swap(requestid_, other->requestid_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(atbidorask_, other->atbidorask_);
  swap(isfinalrecord_, other->isfinalrecord_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataTickRecordResponse_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataResponseTrailer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataResponseTrailer::kRequestIDFieldNumber;
const int HistoricalPriceDataResponseTrailer::kFinalRecordLastDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataResponseTrailer::HistoricalPriceDataResponseTrailer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataResponseTrailer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataResponseTrailer)
}
HistoricalPriceDataResponseTrailer::HistoricalPriceDataResponseTrailer(const HistoricalPriceDataResponseTrailer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&finalrecordlastdatetime_, &from.finalrecordlastdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&finalrecordlastdatetime_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataResponseTrailer)
}

void HistoricalPriceDataResponseTrailer::SharedCtor() {
  ::memset(&finalrecordlastdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&finalrecordlastdatetime_)) + sizeof(requestid_));
}

HistoricalPriceDataResponseTrailer::~HistoricalPriceDataResponseTrailer() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataResponseTrailer)
  SharedDtor();
}

void HistoricalPriceDataResponseTrailer::SharedDtor() {
}

void HistoricalPriceDataResponseTrailer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseTrailer::descriptor() {
  ::protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataResponseTrailer& HistoricalPriceDataResponseTrailer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eGPBV3_2eproto::scc_info_HistoricalPriceDataResponseTrailer.base);
  return *internal_default_instance();
}


void HistoricalPriceDataResponseTrailer::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&finalrecordlastdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&finalrecordlastdatetime_)) + sizeof(requestid_));
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataResponseTrailer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double FinalRecordLastDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &finalrecordlastdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataResponseTrailer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataResponseTrailer)
  return false;
#undef DO_
}

void HistoricalPriceDataResponseTrailer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // double FinalRecordLastDateTime = 2;
  if (this->finalrecordlastdatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->finalrecordlastdatetime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataResponseTrailer)
}

::google::protobuf::uint8* HistoricalPriceDataResponseTrailer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // double FinalRecordLastDateTime = 2;
  if (this->finalrecordlastdatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->finalrecordlastdatetime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataResponseTrailer)
  return target;
}

size_t HistoricalPriceDataResponseTrailer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double FinalRecordLastDateTime = 2;
  if (this->finalrecordlastdatetime() != 0) {
    total_size += 1 + 8;
  }

  // int32 RequestID = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataResponseTrailer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataResponseTrailer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataResponseTrailer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataResponseTrailer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataResponseTrailer)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataResponseTrailer::MergeFrom(const HistoricalPriceDataResponseTrailer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.finalrecordlastdatetime() != 0) {
    set_finalrecordlastdatetime(from.finalrecordlastdatetime());
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
}

void HistoricalPriceDataResponseTrailer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataResponseTrailer::CopyFrom(const HistoricalPriceDataResponseTrailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataResponseTrailer::IsInitialized() const {
  return true;
}

void HistoricalPriceDataResponseTrailer::Swap(HistoricalPriceDataResponseTrailer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataResponseTrailer::InternalSwap(HistoricalPriceDataResponseTrailer* other) {
  using std::swap;
  swap(finalrecordlastdatetime_, other->finalrecordlastdatetime_);
  swap(requestid_, other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataResponseTrailer::GetMetadata() const {
  protobuf_DTCProtocol_2eGPBV3_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eGPBV3_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DTC_PB
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::EncodingRequest* Arena::CreateMaybeMessage< ::DTC_PB::EncodingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::EncodingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::EncodingResponse* Arena::CreateMaybeMessage< ::DTC_PB::EncodingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::EncodingResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::LogonRequest* Arena::CreateMaybeMessage< ::DTC_PB::LogonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::LogonRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::LogonResponse* Arena::CreateMaybeMessage< ::DTC_PB::LogonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::LogonResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::Logoff* Arena::CreateMaybeMessage< ::DTC_PB::Logoff >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::Logoff >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::Heartbeat* Arena::CreateMaybeMessage< ::DTC_PB::Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::Heartbeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataFeedStatus* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataFeedStatus >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataFeedStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataFeedSymbolStatus* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataFeedSymbolStatus >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataFeedSymbolStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataRequest* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthRequest* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataReject* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataSnapshot* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataSnapshot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataSnapshot_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataSnapshot_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataSnapshot_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::DepthEntry* Arena::CreateMaybeMessage< ::DTC_PB::DepthEntry >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::DepthEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthFullUpdate20* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthFullUpdate20 >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthFullUpdate20 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthFullUpdate10* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthFullUpdate10 >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthFullUpdate10 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthSnapshotLevel* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthSnapshotLevel >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthSnapshotLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthSnapshotLevel_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthSnapshotLevel_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthSnapshotLevel_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthUpdateLevel* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthUpdateLevel >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthUpdateLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthUpdateLevel_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthUpdateLevel_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthUpdateLevel_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthUpdateLevelCompact* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthUpdateLevelCompact >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthUpdateLevelCompact >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionSettlement* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionSettlement >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionSettlement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionSettlement_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionSettlement_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionSettlement_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionOpen* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionOpen >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionOpen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionOpen_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionOpen_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionOpen_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionNumTrades* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionNumTrades >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionNumTrades >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTradingSessionDate* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTradingSessionDate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTradingSessionDate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthReject* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTrade* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTrade >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTrade_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTrade_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTrade_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateBidAsk* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateBidAsk >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateBidAsk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateBidAsk_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateBidAsk_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateBidAsk_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateBidAskCompact* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateBidAskCompact >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateBidAskCompact >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTradeCompact* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTradeCompact >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTradeCompact >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionVolume* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionVolume >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionVolume >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateOpenInterest* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateOpenInterest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateOpenInterest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionHigh* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionHigh >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionHigh >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionHigh_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionHigh_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionHigh_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionLow* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionLow >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionLow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionLow_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionLow_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionLow_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateLastTradeSnapshot* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateLastTradeSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateLastTradeSnapshot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewSingleOrder* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewSingleOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewSingleOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewSingleOrderInt* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewSingleOrderInt >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewSingleOrderInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CancelReplaceOrder* Arena::CreateMaybeMessage< ::DTC_PB::CancelReplaceOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CancelReplaceOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CancelReplaceOrderInt* Arena::CreateMaybeMessage< ::DTC_PB::CancelReplaceOrderInt >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CancelReplaceOrderInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CancelOrder* Arena::CreateMaybeMessage< ::DTC_PB::CancelOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CancelOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewOCOOrder* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewOCOOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewOCOOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewOCOOrderInt* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewOCOOrderInt >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewOCOOrderInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::OpenOrdersRequest* Arena::CreateMaybeMessage< ::DTC_PB::OpenOrdersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::OpenOrdersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalOrderFillsRequest* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalOrderFillsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalOrderFillsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalOrderFillsReject* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalOrderFillsReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalOrderFillsReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CurrentPositionsRequest* Arena::CreateMaybeMessage< ::DTC_PB::CurrentPositionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CurrentPositionsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CurrentPositionsReject* Arena::CreateMaybeMessage< ::DTC_PB::CurrentPositionsReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CurrentPositionsReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::OrderUpdate* Arena::CreateMaybeMessage< ::DTC_PB::OrderUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::OrderUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::OpenOrdersReject* Arena::CreateMaybeMessage< ::DTC_PB::OpenOrdersReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::OpenOrdersReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalOrderFillResponse* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalOrderFillResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalOrderFillResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::PositionUpdate* Arena::CreateMaybeMessage< ::DTC_PB::PositionUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::PositionUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::TradeAccountsRequest* Arena::CreateMaybeMessage< ::DTC_PB::TradeAccountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::TradeAccountsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::TradeAccountResponse* Arena::CreateMaybeMessage< ::DTC_PB::TradeAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::TradeAccountResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::ExchangeListRequest* Arena::CreateMaybeMessage< ::DTC_PB::ExchangeListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::ExchangeListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::ExchangeListResponse* Arena::CreateMaybeMessage< ::DTC_PB::ExchangeListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::ExchangeListResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SymbolsForExchangeRequest* Arena::CreateMaybeMessage< ::DTC_PB::SymbolsForExchangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SymbolsForExchangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::UnderlyingSymbolsForExchangeRequest* Arena::CreateMaybeMessage< ::DTC_PB::UnderlyingSymbolsForExchangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::UnderlyingSymbolsForExchangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SymbolsForUnderlyingRequest* Arena::CreateMaybeMessage< ::DTC_PB::SymbolsForUnderlyingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SymbolsForUnderlyingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SymbolSearchRequest* Arena::CreateMaybeMessage< ::DTC_PB::SymbolSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SymbolSearchRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SecurityDefinitionForSymbolRequest* Arena::CreateMaybeMessage< ::DTC_PB::SecurityDefinitionForSymbolRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SecurityDefinitionForSymbolRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SecurityDefinitionResponse* Arena::CreateMaybeMessage< ::DTC_PB::SecurityDefinitionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SecurityDefinitionResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SecurityDefinitionReject* Arena::CreateMaybeMessage< ::DTC_PB::SecurityDefinitionReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SecurityDefinitionReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::AccountBalanceRequest* Arena::CreateMaybeMessage< ::DTC_PB::AccountBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::AccountBalanceRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::AccountBalanceReject* Arena::CreateMaybeMessage< ::DTC_PB::AccountBalanceReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::AccountBalanceReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::AccountBalanceUpdate* Arena::CreateMaybeMessage< ::DTC_PB::AccountBalanceUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::AccountBalanceUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::UserMessage* Arena::CreateMaybeMessage< ::DTC_PB::UserMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::UserMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::GeneralLogMessage* Arena::CreateMaybeMessage< ::DTC_PB::GeneralLogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::GeneralLogMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataRequest* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataResponseHeader* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataResponseHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataReject* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataRecordResponse* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataRecordResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataTickRecordResponse* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataTickRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataTickRecordResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataRecordResponse_Int* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataRecordResponse_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataRecordResponse_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataResponseTrailer* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataResponseTrailer >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataResponseTrailer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
