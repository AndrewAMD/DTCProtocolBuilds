// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DTCProtocol.proto

#include "DTCProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_DTCProtocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DTCProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DepthEntry;
}  // namespace protobuf_DTCProtocol_2eproto
namespace DTC_PB {
class EncodingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncodingRequest>
      _instance;
} _EncodingRequest_default_instance_;
class EncodingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EncodingResponse>
      _instance;
} _EncodingResponse_default_instance_;
class LogonRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogonRequest>
      _instance;
} _LogonRequest_default_instance_;
class LogonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogonResponse>
      _instance;
} _LogonResponse_default_instance_;
class LogoffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Logoff>
      _instance;
} _Logoff_default_instance_;
class HeartbeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat>
      _instance;
} _Heartbeat_default_instance_;
class MarketDataFeedStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataFeedStatus>
      _instance;
} _MarketDataFeedStatus_default_instance_;
class MarketDataFeedSymbolStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataFeedSymbolStatus>
      _instance;
} _MarketDataFeedSymbolStatus_default_instance_;
class TradingSymbolStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradingSymbolStatus>
      _instance;
} _TradingSymbolStatus_default_instance_;
class MarketDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataRequest>
      _instance;
} _MarketDataRequest_default_instance_;
class MarketDepthRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthRequest>
      _instance;
} _MarketDepthRequest_default_instance_;
class MarketDataRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataReject>
      _instance;
} _MarketDataReject_default_instance_;
class MarketDataSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataSnapshot>
      _instance;
} _MarketDataSnapshot_default_instance_;
class MarketDataSnapshot_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataSnapshot_Int>
      _instance;
} _MarketDataSnapshot_Int_default_instance_;
class DepthEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepthEntry>
      _instance;
} _DepthEntry_default_instance_;
class MarketDepthFullUpdate20DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthFullUpdate20>
      _instance;
} _MarketDepthFullUpdate20_default_instance_;
class MarketDepthFullUpdate10DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthFullUpdate10>
      _instance;
} _MarketDepthFullUpdate10_default_instance_;
class MarketDepthSnapshotLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthSnapshotLevel>
      _instance;
} _MarketDepthSnapshotLevel_default_instance_;
class MarketDepthSnapshotLevel_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthSnapshotLevel_Int>
      _instance;
} _MarketDepthSnapshotLevel_Int_default_instance_;
class MarketDepthUpdateLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdateLevel>
      _instance;
} _MarketDepthUpdateLevel_default_instance_;
class MarketDepthUpdateLevel_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdateLevel_Int>
      _instance;
} _MarketDepthUpdateLevel_Int_default_instance_;
class MarketDepthUpdateLevelCompactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdateLevelCompact>
      _instance;
} _MarketDepthUpdateLevelCompact_default_instance_;
class MarketDepthUpdateLevelCompact2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthUpdateLevelCompact2>
      _instance;
} _MarketDepthUpdateLevelCompact2_default_instance_;
class MarketDataUpdateSessionSettlementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionSettlement>
      _instance;
} _MarketDataUpdateSessionSettlement_default_instance_;
class MarketDataUpdateSessionSettlement_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionSettlement_Int>
      _instance;
} _MarketDataUpdateSessionSettlement_Int_default_instance_;
class MarketDataUpdateSessionOpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionOpen>
      _instance;
} _MarketDataUpdateSessionOpen_default_instance_;
class MarketDataUpdateSessionOpen_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionOpen_Int>
      _instance;
} _MarketDataUpdateSessionOpen_Int_default_instance_;
class MarketDataUpdateSessionNumTradesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionNumTrades>
      _instance;
} _MarketDataUpdateSessionNumTrades_default_instance_;
class MarketDataUpdateTradingSessionDateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTradingSessionDate>
      _instance;
} _MarketDataUpdateTradingSessionDate_default_instance_;
class MarketDepthRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDepthReject>
      _instance;
} _MarketDepthReject_default_instance_;
class MarketDataUpdateTradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTrade>
      _instance;
} _MarketDataUpdateTrade_default_instance_;
class MarketDataUpdateTrade_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTrade_Int>
      _instance;
} _MarketDataUpdateTrade_Int_default_instance_;
class MarketDataUpdateTradeWithUnbundledIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTradeWithUnbundledIndicator>
      _instance;
} _MarketDataUpdateTradeWithUnbundledIndicator_default_instance_;
class MarketDataUpdateBidAskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateBidAsk>
      _instance;
} _MarketDataUpdateBidAsk_default_instance_;
class MarketDataUpdateBidAsk_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateBidAsk_Int>
      _instance;
} _MarketDataUpdateBidAsk_Int_default_instance_;
class MarketDataUpdateBidAskCompactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateBidAskCompact>
      _instance;
} _MarketDataUpdateBidAskCompact_default_instance_;
class MarketDataUpdateTradeCompactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateTradeCompact>
      _instance;
} _MarketDataUpdateTradeCompact_default_instance_;
class MarketDataUpdateSessionVolumeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionVolume>
      _instance;
} _MarketDataUpdateSessionVolume_default_instance_;
class MarketDataUpdateOpenInterestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateOpenInterest>
      _instance;
} _MarketDataUpdateOpenInterest_default_instance_;
class MarketDataUpdateSessionHighDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionHigh>
      _instance;
} _MarketDataUpdateSessionHigh_default_instance_;
class MarketDataUpdateSessionHigh_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionHigh_Int>
      _instance;
} _MarketDataUpdateSessionHigh_Int_default_instance_;
class MarketDataUpdateSessionLowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionLow>
      _instance;
} _MarketDataUpdateSessionLow_default_instance_;
class MarketDataUpdateSessionLow_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateSessionLow_Int>
      _instance;
} _MarketDataUpdateSessionLow_Int_default_instance_;
class MarketDataUpdateLastTradeSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketDataUpdateLastTradeSnapshot>
      _instance;
} _MarketDataUpdateLastTradeSnapshot_default_instance_;
class SubmitNewSingleOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewSingleOrder>
      _instance;
} _SubmitNewSingleOrder_default_instance_;
class SubmitNewSingleOrderIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewSingleOrderInt>
      _instance;
} _SubmitNewSingleOrderInt_default_instance_;
class CancelReplaceOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelReplaceOrder>
      _instance;
} _CancelReplaceOrder_default_instance_;
class CancelReplaceOrderIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelReplaceOrderInt>
      _instance;
} _CancelReplaceOrderInt_default_instance_;
class CancelOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelOrder>
      _instance;
} _CancelOrder_default_instance_;
class SubmitNewOCOOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewOCOOrder>
      _instance;
} _SubmitNewOCOOrder_default_instance_;
class SubmitNewOCOOrderIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmitNewOCOOrderInt>
      _instance;
} _SubmitNewOCOOrderInt_default_instance_;
class OpenOrdersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenOrdersRequest>
      _instance;
} _OpenOrdersRequest_default_instance_;
class HistoricalOrderFillsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalOrderFillsRequest>
      _instance;
} _HistoricalOrderFillsRequest_default_instance_;
class HistoricalOrderFillsRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalOrderFillsReject>
      _instance;
} _HistoricalOrderFillsReject_default_instance_;
class CurrentPositionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentPositionsRequest>
      _instance;
} _CurrentPositionsRequest_default_instance_;
class CurrentPositionsRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentPositionsReject>
      _instance;
} _CurrentPositionsReject_default_instance_;
class OrderUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderUpdate>
      _instance;
} _OrderUpdate_default_instance_;
class OpenOrdersRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenOrdersReject>
      _instance;
} _OpenOrdersReject_default_instance_;
class HistoricalOrderFillResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalOrderFillResponse>
      _instance;
} _HistoricalOrderFillResponse_default_instance_;
class PositionUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionUpdate>
      _instance;
} _PositionUpdate_default_instance_;
class TradeAccountsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeAccountsRequest>
      _instance;
} _TradeAccountsRequest_default_instance_;
class TradeAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeAccountResponse>
      _instance;
} _TradeAccountResponse_default_instance_;
class ExchangeListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeListRequest>
      _instance;
} _ExchangeListRequest_default_instance_;
class ExchangeListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeListResponse>
      _instance;
} _ExchangeListResponse_default_instance_;
class SymbolsForExchangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolsForExchangeRequest>
      _instance;
} _SymbolsForExchangeRequest_default_instance_;
class UnderlyingSymbolsForExchangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnderlyingSymbolsForExchangeRequest>
      _instance;
} _UnderlyingSymbolsForExchangeRequest_default_instance_;
class SymbolsForUnderlyingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolsForUnderlyingRequest>
      _instance;
} _SymbolsForUnderlyingRequest_default_instance_;
class SymbolSearchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolSearchRequest>
      _instance;
} _SymbolSearchRequest_default_instance_;
class SecurityDefinitionForSymbolRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityDefinitionForSymbolRequest>
      _instance;
} _SecurityDefinitionForSymbolRequest_default_instance_;
class SecurityDefinitionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityDefinitionResponse>
      _instance;
} _SecurityDefinitionResponse_default_instance_;
class SecurityDefinitionRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SecurityDefinitionReject>
      _instance;
} _SecurityDefinitionReject_default_instance_;
class AccountBalanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountBalanceRequest>
      _instance;
} _AccountBalanceRequest_default_instance_;
class AccountBalanceRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountBalanceReject>
      _instance;
} _AccountBalanceReject_default_instance_;
class AccountBalanceUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountBalanceUpdate>
      _instance;
} _AccountBalanceUpdate_default_instance_;
class HistoricalAccountBalancesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalAccountBalancesRequest>
      _instance;
} _HistoricalAccountBalancesRequest_default_instance_;
class HistoricalAccountBalancesRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalAccountBalancesReject>
      _instance;
} _HistoricalAccountBalancesReject_default_instance_;
class HistoricalAccountBalanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalAccountBalanceResponse>
      _instance;
} _HistoricalAccountBalanceResponse_default_instance_;
class UserMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserMessage>
      _instance;
} _UserMessage_default_instance_;
class GeneralLogMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeneralLogMessage>
      _instance;
} _GeneralLogMessage_default_instance_;
class JournalEntryAddDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JournalEntryAdd>
      _instance;
} _JournalEntryAdd_default_instance_;
class JournalEntriesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JournalEntriesRequest>
      _instance;
} _JournalEntriesRequest_default_instance_;
class JournalEntriesRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JournalEntriesReject>
      _instance;
} _JournalEntriesReject_default_instance_;
class JournalEntryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JournalEntryResponse>
      _instance;
} _JournalEntryResponse_default_instance_;
class AlertMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlertMessage>
      _instance;
} _AlertMessage_default_instance_;
class HistoricalPriceDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataRequest>
      _instance;
} _HistoricalPriceDataRequest_default_instance_;
class HistoricalPriceDataResponseHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataResponseHeader>
      _instance;
} _HistoricalPriceDataResponseHeader_default_instance_;
class HistoricalPriceDataRejectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataReject>
      _instance;
} _HistoricalPriceDataReject_default_instance_;
class HistoricalPriceDataRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataRecordResponse>
      _instance;
} _HistoricalPriceDataRecordResponse_default_instance_;
class HistoricalPriceDataTickRecordResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataTickRecordResponse>
      _instance;
} _HistoricalPriceDataTickRecordResponse_default_instance_;
class HistoricalPriceDataRecordResponse_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataRecordResponse_Int>
      _instance;
} _HistoricalPriceDataRecordResponse_Int_default_instance_;
class HistoricalPriceDataTickRecordResponse_IntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataTickRecordResponse_Int>
      _instance;
} _HistoricalPriceDataTickRecordResponse_Int_default_instance_;
class HistoricalPriceDataResponseTrailerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HistoricalPriceDataResponseTrailer>
      _instance;
} _HistoricalPriceDataResponseTrailer_default_instance_;
}  // namespace DTC_PB
namespace protobuf_DTCProtocol_2eproto {
static void InitDefaultsEncodingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_EncodingRequest_default_instance_;
    new (ptr) ::DTC_PB::EncodingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::EncodingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncodingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncodingRequest}, {}};

static void InitDefaultsEncodingResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_EncodingResponse_default_instance_;
    new (ptr) ::DTC_PB::EncodingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::EncodingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EncodingResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncodingResponse}, {}};

static void InitDefaultsLogonRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_LogonRequest_default_instance_;
    new (ptr) ::DTC_PB::LogonRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::LogonRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogonRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogonRequest}, {}};

static void InitDefaultsLogonResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_LogonResponse_default_instance_;
    new (ptr) ::DTC_PB::LogonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::LogonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogonResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogonResponse}, {}};

static void InitDefaultsLogoff() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_Logoff_default_instance_;
    new (ptr) ::DTC_PB::Logoff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::Logoff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Logoff =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogoff}, {}};

static void InitDefaultsHeartbeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_Heartbeat_default_instance_;
    new (ptr) ::DTC_PB::Heartbeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::Heartbeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Heartbeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartbeat}, {}};

static void InitDefaultsMarketDataFeedStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataFeedStatus_default_instance_;
    new (ptr) ::DTC_PB::MarketDataFeedStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataFeedStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataFeedStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataFeedStatus}, {}};

static void InitDefaultsMarketDataFeedSymbolStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataFeedSymbolStatus_default_instance_;
    new (ptr) ::DTC_PB::MarketDataFeedSymbolStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataFeedSymbolStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataFeedSymbolStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataFeedSymbolStatus}, {}};

static void InitDefaultsTradingSymbolStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_TradingSymbolStatus_default_instance_;
    new (ptr) ::DTC_PB::TradingSymbolStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::TradingSymbolStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradingSymbolStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradingSymbolStatus}, {}};

static void InitDefaultsMarketDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataRequest_default_instance_;
    new (ptr) ::DTC_PB::MarketDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataRequest}, {}};

static void InitDefaultsMarketDepthRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthRequest_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthRequest}, {}};

static void InitDefaultsMarketDataReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataReject_default_instance_;
    new (ptr) ::DTC_PB::MarketDataReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataReject}, {}};

static void InitDefaultsMarketDataSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataSnapshot_default_instance_;
    new (ptr) ::DTC_PB::MarketDataSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataSnapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataSnapshot}, {}};

static void InitDefaultsMarketDataSnapshot_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataSnapshot_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataSnapshot_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataSnapshot_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataSnapshot_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataSnapshot_Int}, {}};

static void InitDefaultsDepthEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_DepthEntry_default_instance_;
    new (ptr) ::DTC_PB::DepthEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::DepthEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DepthEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDepthEntry}, {}};

static void InitDefaultsMarketDepthFullUpdate20() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthFullUpdate20_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthFullUpdate20();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthFullUpdate20::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketDepthFullUpdate20 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketDepthFullUpdate20}, {
      &protobuf_DTCProtocol_2eproto::scc_info_DepthEntry.base,}};

static void InitDefaultsMarketDepthFullUpdate10() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthFullUpdate10_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthFullUpdate10();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthFullUpdate10::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketDepthFullUpdate10 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketDepthFullUpdate10}, {
      &protobuf_DTCProtocol_2eproto::scc_info_DepthEntry.base,}};

static void InitDefaultsMarketDepthSnapshotLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthSnapshotLevel_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthSnapshotLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthSnapshotLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthSnapshotLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthSnapshotLevel}, {}};

static void InitDefaultsMarketDepthSnapshotLevel_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthSnapshotLevel_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthSnapshotLevel_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthSnapshotLevel_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthSnapshotLevel_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthSnapshotLevel_Int}, {}};

static void InitDefaultsMarketDepthUpdateLevel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthUpdateLevel_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthUpdateLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthUpdateLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthUpdateLevel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthUpdateLevel}, {}};

static void InitDefaultsMarketDepthUpdateLevel_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthUpdateLevel_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthUpdateLevel_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthUpdateLevel_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthUpdateLevel_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthUpdateLevel_Int}, {}};

static void InitDefaultsMarketDepthUpdateLevelCompact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthUpdateLevelCompact_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthUpdateLevelCompact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthUpdateLevelCompact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthUpdateLevelCompact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthUpdateLevelCompact}, {}};

static void InitDefaultsMarketDepthUpdateLevelCompact2() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthUpdateLevelCompact2_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthUpdateLevelCompact2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthUpdateLevelCompact2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthUpdateLevelCompact2 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthUpdateLevelCompact2}, {}};

static void InitDefaultsMarketDataUpdateSessionSettlement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionSettlement_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionSettlement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionSettlement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionSettlement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionSettlement}, {}};

static void InitDefaultsMarketDataUpdateSessionSettlement_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionSettlement_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionSettlement_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionSettlement_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionSettlement_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionSettlement_Int}, {}};

static void InitDefaultsMarketDataUpdateSessionOpen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionOpen_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionOpen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionOpen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionOpen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionOpen}, {}};

static void InitDefaultsMarketDataUpdateSessionOpen_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionOpen_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionOpen_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionOpen_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionOpen_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionOpen_Int}, {}};

static void InitDefaultsMarketDataUpdateSessionNumTrades() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionNumTrades_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionNumTrades();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionNumTrades::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionNumTrades =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionNumTrades}, {}};

static void InitDefaultsMarketDataUpdateTradingSessionDate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTradingSessionDate_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTradingSessionDate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTradingSessionDate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTradingSessionDate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTradingSessionDate}, {}};

static void InitDefaultsMarketDepthReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDepthReject_default_instance_;
    new (ptr) ::DTC_PB::MarketDepthReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDepthReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDepthReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDepthReject}, {}};

static void InitDefaultsMarketDataUpdateTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTrade_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTrade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTrade}, {}};

static void InitDefaultsMarketDataUpdateTrade_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTrade_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTrade_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTrade_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTrade_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTrade_Int}, {}};

static void InitDefaultsMarketDataUpdateTradeWithUnbundledIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTradeWithUnbundledIndicator_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTradeWithUnbundledIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTradeWithUnbundledIndicator}, {}};

static void InitDefaultsMarketDataUpdateBidAsk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateBidAsk_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateBidAsk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateBidAsk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateBidAsk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateBidAsk}, {}};

static void InitDefaultsMarketDataUpdateBidAsk_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateBidAsk_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateBidAsk_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateBidAsk_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateBidAsk_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateBidAsk_Int}, {}};

static void InitDefaultsMarketDataUpdateBidAskCompact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateBidAskCompact_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateBidAskCompact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateBidAskCompact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateBidAskCompact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateBidAskCompact}, {}};

static void InitDefaultsMarketDataUpdateTradeCompact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateTradeCompact_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateTradeCompact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateTradeCompact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateTradeCompact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateTradeCompact}, {}};

static void InitDefaultsMarketDataUpdateSessionVolume() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionVolume_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionVolume();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionVolume::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionVolume =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionVolume}, {}};

static void InitDefaultsMarketDataUpdateOpenInterest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateOpenInterest_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateOpenInterest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateOpenInterest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateOpenInterest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateOpenInterest}, {}};

static void InitDefaultsMarketDataUpdateSessionHigh() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionHigh_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionHigh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionHigh::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionHigh =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionHigh}, {}};

static void InitDefaultsMarketDataUpdateSessionHigh_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionHigh_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionHigh_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionHigh_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionHigh_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionHigh_Int}, {}};

static void InitDefaultsMarketDataUpdateSessionLow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionLow_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionLow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionLow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionLow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionLow}, {}};

static void InitDefaultsMarketDataUpdateSessionLow_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateSessionLow_Int_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateSessionLow_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateSessionLow_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateSessionLow_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateSessionLow_Int}, {}};

static void InitDefaultsMarketDataUpdateLastTradeSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_MarketDataUpdateLastTradeSnapshot_default_instance_;
    new (ptr) ::DTC_PB::MarketDataUpdateLastTradeSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::MarketDataUpdateLastTradeSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketDataUpdateLastTradeSnapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketDataUpdateLastTradeSnapshot}, {}};

static void InitDefaultsSubmitNewSingleOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewSingleOrder_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewSingleOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewSingleOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewSingleOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewSingleOrder}, {}};

static void InitDefaultsSubmitNewSingleOrderInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewSingleOrderInt_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewSingleOrderInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewSingleOrderInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewSingleOrderInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewSingleOrderInt}, {}};

static void InitDefaultsCancelReplaceOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CancelReplaceOrder_default_instance_;
    new (ptr) ::DTC_PB::CancelReplaceOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CancelReplaceOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelReplaceOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelReplaceOrder}, {}};

static void InitDefaultsCancelReplaceOrderInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CancelReplaceOrderInt_default_instance_;
    new (ptr) ::DTC_PB::CancelReplaceOrderInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CancelReplaceOrderInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelReplaceOrderInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelReplaceOrderInt}, {}};

static void InitDefaultsCancelOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CancelOrder_default_instance_;
    new (ptr) ::DTC_PB::CancelOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CancelOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelOrder}, {}};

static void InitDefaultsSubmitNewOCOOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewOCOOrder_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewOCOOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewOCOOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewOCOOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewOCOOrder}, {}};

static void InitDefaultsSubmitNewOCOOrderInt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SubmitNewOCOOrderInt_default_instance_;
    new (ptr) ::DTC_PB::SubmitNewOCOOrderInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SubmitNewOCOOrderInt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmitNewOCOOrderInt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmitNewOCOOrderInt}, {}};

static void InitDefaultsOpenOrdersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_OpenOrdersRequest_default_instance_;
    new (ptr) ::DTC_PB::OpenOrdersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::OpenOrdersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenOrdersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenOrdersRequest}, {}};

static void InitDefaultsHistoricalOrderFillsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalOrderFillsRequest_default_instance_;
    new (ptr) ::DTC_PB::HistoricalOrderFillsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalOrderFillsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalOrderFillsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalOrderFillsRequest}, {}};

static void InitDefaultsHistoricalOrderFillsReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalOrderFillsReject_default_instance_;
    new (ptr) ::DTC_PB::HistoricalOrderFillsReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalOrderFillsReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalOrderFillsReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalOrderFillsReject}, {}};

static void InitDefaultsCurrentPositionsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CurrentPositionsRequest_default_instance_;
    new (ptr) ::DTC_PB::CurrentPositionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CurrentPositionsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurrentPositionsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrentPositionsRequest}, {}};

static void InitDefaultsCurrentPositionsReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_CurrentPositionsReject_default_instance_;
    new (ptr) ::DTC_PB::CurrentPositionsReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::CurrentPositionsReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurrentPositionsReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrentPositionsReject}, {}};

static void InitDefaultsOrderUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_OrderUpdate_default_instance_;
    new (ptr) ::DTC_PB::OrderUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::OrderUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderUpdate}, {}};

static void InitDefaultsOpenOrdersReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_OpenOrdersReject_default_instance_;
    new (ptr) ::DTC_PB::OpenOrdersReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::OpenOrdersReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenOrdersReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenOrdersReject}, {}};

static void InitDefaultsHistoricalOrderFillResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalOrderFillResponse_default_instance_;
    new (ptr) ::DTC_PB::HistoricalOrderFillResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalOrderFillResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalOrderFillResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalOrderFillResponse}, {}};

static void InitDefaultsPositionUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_PositionUpdate_default_instance_;
    new (ptr) ::DTC_PB::PositionUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::PositionUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionUpdate}, {}};

static void InitDefaultsTradeAccountsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_TradeAccountsRequest_default_instance_;
    new (ptr) ::DTC_PB::TradeAccountsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::TradeAccountsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeAccountsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeAccountsRequest}, {}};

static void InitDefaultsTradeAccountResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_TradeAccountResponse_default_instance_;
    new (ptr) ::DTC_PB::TradeAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::TradeAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeAccountResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeAccountResponse}, {}};

static void InitDefaultsExchangeListRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_ExchangeListRequest_default_instance_;
    new (ptr) ::DTC_PB::ExchangeListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::ExchangeListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeListRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExchangeListRequest}, {}};

static void InitDefaultsExchangeListResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_ExchangeListResponse_default_instance_;
    new (ptr) ::DTC_PB::ExchangeListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::ExchangeListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeListResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExchangeListResponse}, {}};

static void InitDefaultsSymbolsForExchangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SymbolsForExchangeRequest_default_instance_;
    new (ptr) ::DTC_PB::SymbolsForExchangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SymbolsForExchangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SymbolsForExchangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSymbolsForExchangeRequest}, {}};

static void InitDefaultsUnderlyingSymbolsForExchangeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_UnderlyingSymbolsForExchangeRequest_default_instance_;
    new (ptr) ::DTC_PB::UnderlyingSymbolsForExchangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::UnderlyingSymbolsForExchangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingSymbolsForExchangeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnderlyingSymbolsForExchangeRequest}, {}};

static void InitDefaultsSymbolsForUnderlyingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SymbolsForUnderlyingRequest_default_instance_;
    new (ptr) ::DTC_PB::SymbolsForUnderlyingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SymbolsForUnderlyingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SymbolsForUnderlyingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSymbolsForUnderlyingRequest}, {}};

static void InitDefaultsSymbolSearchRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SymbolSearchRequest_default_instance_;
    new (ptr) ::DTC_PB::SymbolSearchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SymbolSearchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SymbolSearchRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSymbolSearchRequest}, {}};

static void InitDefaultsSecurityDefinitionForSymbolRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SecurityDefinitionForSymbolRequest_default_instance_;
    new (ptr) ::DTC_PB::SecurityDefinitionForSymbolRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SecurityDefinitionForSymbolRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityDefinitionForSymbolRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityDefinitionForSymbolRequest}, {}};

static void InitDefaultsSecurityDefinitionResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SecurityDefinitionResponse_default_instance_;
    new (ptr) ::DTC_PB::SecurityDefinitionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SecurityDefinitionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityDefinitionResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityDefinitionResponse}, {}};

static void InitDefaultsSecurityDefinitionReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_SecurityDefinitionReject_default_instance_;
    new (ptr) ::DTC_PB::SecurityDefinitionReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::SecurityDefinitionReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SecurityDefinitionReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSecurityDefinitionReject}, {}};

static void InitDefaultsAccountBalanceRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_AccountBalanceRequest_default_instance_;
    new (ptr) ::DTC_PB::AccountBalanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::AccountBalanceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountBalanceRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountBalanceRequest}, {}};

static void InitDefaultsAccountBalanceReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_AccountBalanceReject_default_instance_;
    new (ptr) ::DTC_PB::AccountBalanceReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::AccountBalanceReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountBalanceReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountBalanceReject}, {}};

static void InitDefaultsAccountBalanceUpdate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_AccountBalanceUpdate_default_instance_;
    new (ptr) ::DTC_PB::AccountBalanceUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::AccountBalanceUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccountBalanceUpdate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccountBalanceUpdate}, {}};

static void InitDefaultsHistoricalAccountBalancesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalAccountBalancesRequest_default_instance_;
    new (ptr) ::DTC_PB::HistoricalAccountBalancesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalAccountBalancesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalAccountBalancesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalAccountBalancesRequest}, {}};

static void InitDefaultsHistoricalAccountBalancesReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalAccountBalancesReject_default_instance_;
    new (ptr) ::DTC_PB::HistoricalAccountBalancesReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalAccountBalancesReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalAccountBalancesReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalAccountBalancesReject}, {}};

static void InitDefaultsHistoricalAccountBalanceResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalAccountBalanceResponse_default_instance_;
    new (ptr) ::DTC_PB::HistoricalAccountBalanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalAccountBalanceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalAccountBalanceResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalAccountBalanceResponse}, {}};

static void InitDefaultsUserMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_UserMessage_default_instance_;
    new (ptr) ::DTC_PB::UserMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::UserMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserMessage}, {}};

static void InitDefaultsGeneralLogMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_GeneralLogMessage_default_instance_;
    new (ptr) ::DTC_PB::GeneralLogMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::GeneralLogMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GeneralLogMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeneralLogMessage}, {}};

static void InitDefaultsJournalEntryAdd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_JournalEntryAdd_default_instance_;
    new (ptr) ::DTC_PB::JournalEntryAdd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::JournalEntryAdd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JournalEntryAdd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJournalEntryAdd}, {}};

static void InitDefaultsJournalEntriesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_JournalEntriesRequest_default_instance_;
    new (ptr) ::DTC_PB::JournalEntriesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::JournalEntriesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JournalEntriesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJournalEntriesRequest}, {}};

static void InitDefaultsJournalEntriesReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_JournalEntriesReject_default_instance_;
    new (ptr) ::DTC_PB::JournalEntriesReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::JournalEntriesReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JournalEntriesReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJournalEntriesReject}, {}};

static void InitDefaultsJournalEntryResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_JournalEntryResponse_default_instance_;
    new (ptr) ::DTC_PB::JournalEntryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::JournalEntryResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JournalEntryResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJournalEntryResponse}, {}};

static void InitDefaultsAlertMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_AlertMessage_default_instance_;
    new (ptr) ::DTC_PB::AlertMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::AlertMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlertMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlertMessage}, {}};

static void InitDefaultsHistoricalPriceDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataRequest_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataRequest}, {}};

static void InitDefaultsHistoricalPriceDataResponseHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataResponseHeader_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataResponseHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataResponseHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataResponseHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataResponseHeader}, {}};

static void InitDefaultsHistoricalPriceDataReject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataReject_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataReject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataReject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataReject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataReject}, {}};

static void InitDefaultsHistoricalPriceDataRecordResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataRecordResponse_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataRecordResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataRecordResponse}, {}};

static void InitDefaultsHistoricalPriceDataTickRecordResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataTickRecordResponse_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataTickRecordResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataTickRecordResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataTickRecordResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataTickRecordResponse}, {}};

static void InitDefaultsHistoricalPriceDataRecordResponse_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataRecordResponse_Int_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataRecordResponse_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataRecordResponse_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataRecordResponse_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataRecordResponse_Int}, {}};

static void InitDefaultsHistoricalPriceDataTickRecordResponse_Int() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataTickRecordResponse_Int_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataTickRecordResponse_Int =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataTickRecordResponse_Int}, {}};

static void InitDefaultsHistoricalPriceDataResponseTrailer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTC_PB::_HistoricalPriceDataResponseTrailer_default_instance_;
    new (ptr) ::DTC_PB::HistoricalPriceDataResponseTrailer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTC_PB::HistoricalPriceDataResponseTrailer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HistoricalPriceDataResponseTrailer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistoricalPriceDataResponseTrailer}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EncodingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EncodingResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogonRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogonResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Logoff.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Heartbeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataFeedStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataFeedSymbolStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradingSymbolStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataSnapshot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataSnapshot_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepthEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthFullUpdate20.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthFullUpdate10.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthSnapshotLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthSnapshotLevel_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdateLevel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdateLevel_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdateLevelCompact.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthUpdateLevelCompact2.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionSettlement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionSettlement_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionOpen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionOpen_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionNumTrades.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTradingSessionDate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDepthReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTrade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTrade_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTradeWithUnbundledIndicator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateBidAsk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateBidAsk_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateBidAskCompact.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateTradeCompact.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionVolume.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateOpenInterest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionHigh.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionHigh_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionLow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateSessionLow_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketDataUpdateLastTradeSnapshot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewSingleOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewSingleOrderInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelReplaceOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelReplaceOrderInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewOCOOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubmitNewOCOOrderInt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenOrdersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalOrderFillsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalOrderFillsReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentPositionsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentPositionsReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenOrdersReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalOrderFillResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeAccountsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeAccountResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExchangeListRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExchangeListResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SymbolsForExchangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnderlyingSymbolsForExchangeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SymbolsForUnderlyingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SymbolSearchRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityDefinitionForSymbolRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityDefinitionResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SecurityDefinitionReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountBalanceRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountBalanceReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountBalanceUpdate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalAccountBalancesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalAccountBalancesReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalAccountBalanceResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeneralLogMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JournalEntryAdd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JournalEntriesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JournalEntriesReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JournalEntryResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlertMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataResponseHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataReject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataRecordResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataTickRecordResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataRecordResponse_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataTickRecordResponse_Int.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HistoricalPriceDataResponseTrailer.base);
}

::google::protobuf::Metadata file_level_metadata[92];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[26];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingRequest, protocoltype_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::EncodingResponse, protocoltype_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, generaltextdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, integer_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, integer_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, heartbeatintervalinseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, trademode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, hardwareidentifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonRequest, clientname_),
  6,
  0,
  1,
  2,
  7,
  8,
  9,
  10,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, resulttext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, reconnectaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, integer_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, servername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, marketdepthupdatesbestbidandask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, tradingissupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, ocoorderssupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, ordercancelreplacesupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, symbolexchangedelimiter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, securitydefinitionssupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, historicalpricedatasupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, resubscribewhenmarketdatafeedavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, marketdepthissupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, onehistoricalpricedatarequestperconnection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, bracketorderssupported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, useintegerpriceordermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, usesmultiplepositionspersymbolandtradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::LogonResponse, marketdatasupported_),
  4,
  19,
  0,
  1,
  5,
  2,
  6,
  7,
  8,
  9,
  3,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Logoff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Logoff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Logoff, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Logoff, donotreconnect_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Heartbeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Heartbeat, numdroppedmessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::Heartbeat, currentdatetime_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedStatus, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedSymbolStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedSymbolStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedSymbolStatus, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataFeedSymbolStatus, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradingSymbolStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradingSymbolStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradingSymbolStatus, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradingSymbolStatus, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, requestaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataRequest, exchange_),
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, requestaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthRequest, numlevels_),
  4,
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataReject, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionsettlementprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionopenprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionhighprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionlowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionnumtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, openinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, lasttradeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, lasttradevolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, lasttradedatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, bidaskdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, sessionsettlementdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, tradingsessiondate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot, tradingstatus_),
  3,
  0,
  1,
  2,
  5,
  6,
  4,
  11,
  7,
  8,
  9,
  10,
  13,
  14,
  15,
  16,
  12,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionsettlementprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionopenprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionhighprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionlowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionnumtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, openinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, lasttradeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, lasttradevolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, lasttradedatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, bidaskdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, sessionsettlementdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, tradingsessiondate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataSnapshot_Int, tradingstatus_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::DepthEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::DepthEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::DepthEntry, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::DepthEntry, quantity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, biddepth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate20, askdepth_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, biddepth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthFullUpdate10, askdepth_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, isfirstmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, islastmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel, numorders_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, isfirstmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, islastmessageinbatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthSnapshotLevel_Int, numorders_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel, numorders_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevel_Int, numorders_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact, numorders_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, updatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, numorders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthUpdateLevelCompact2, datetime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement, datetime_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionSettlement_Int, datetime_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen, tradingsessiondate_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionOpen_Int, tradingsessiondate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, numtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionNumTrades, tradingsessiondate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradingSessionDate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradingSessionDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradingSessionDate, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradingSessionDate, date_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthReject, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDepthReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade, datetime_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTrade_Int, datetime_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, unbundledtradeindicator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator, datetime_),
  0,
  1,
  3,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk, datetime_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAsk_Int, datetime_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, bidquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, askquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateBidAskCompact, symbolid_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateTradeCompact, atbidorask_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionVolume, tradingsessiondate_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, openinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateOpenInterest, tradingsessiondate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh, tradingsessiondate_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionHigh_Int, tradingsessiondate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow, tradingsessiondate_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateSessionLow_Int, tradingsessiondate_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, symbolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, lasttradeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, lasttradevolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::MarketDataUpdateLastTradeSnapshot, lasttradedatetime_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, isparentorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrder, openorclose_),
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  11,
  10,
  12,
  13,
  4,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, divisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, isparentorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewSingleOrderInt, openorclose_),
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  13,
  14,
  4,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price1isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, price2isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrder, updateprice1offsettoparent_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, divisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price1isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, price2isset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelReplaceOrderInt, updateprice1offsettoparent_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelOrder, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CancelOrder, clientorderid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, clientorderid_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, ordertype_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, buysell_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price1_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price2_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, quantity_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, clientorderid_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, ordertype_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, buysell_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price1_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, price2_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, quantity_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, parenttriggerclientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, openorclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, partialfillhandling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, useoffsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, offsetfromparent1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrder, offsetfromparent2_),
  0,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  3,
  12,
  13,
  14,
  15,
  16,
  18,
  17,
  4,
  19,
  5,
  6,
  20,
  21,
  24,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, clientorderid_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, ordertype_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, buysell_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price1_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price2_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, quantity_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, clientorderid_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, ordertype_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, buysell_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price1_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, price2_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, quantity_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, isautomatedorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, parenttriggerclientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, divisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, openorclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SubmitNewOCOOrderInt, partialfillhandling_),
  0,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  3,
  12,
  13,
  14,
  15,
  16,
  18,
  17,
  4,
  19,
  5,
  6,
  20,
  21,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, requestallorders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersRequest, tradeaccount_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, numberofdays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsRequest, tradeaccount_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillsReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsRequest, tradeaccount_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::CurrentPositionsReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, totalnummessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, previousserverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, clientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, exchangeorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderupdatereason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, ordertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, price1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, price2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, timeinforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, goodtilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, filledquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, remainingquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, averagefillprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfillprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfilldatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfillquantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, lastfillexecutionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, infotext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, noorders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, parentserverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, ocolinkedorderserverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, openorclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, previousclientorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, freeformtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OrderUpdate, orderreceiveddatetime_),
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  16,
  17,
  18,
  20,
  19,
  22,
  21,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  6,
  7,
  8,
  31,
  9,
  10,
  32,
  11,
  12,
  33,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::OpenOrdersReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, serverorderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, buysell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, uniqueexecutionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, openclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, noorderfills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, infotext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, highpriceduringposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, lowpriceduringposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalOrderFillResponse, positionquantity_),
  6,
  7,
  8,
  0,
  1,
  2,
  9,
  10,
  11,
  12,
  3,
  4,
  13,
  14,
  5,
  15,
  16,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, averageprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, positionidentifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, nopositions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, unsolicited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::PositionUpdate, marginrequirement_),
  4,
  5,
  7,
  0,
  1,
  6,
  9,
  2,
  3,
  8,
  11,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountsRequest, requestid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::TradeAccountResponse, requestid_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListRequest, requestid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, isfinalmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::ExchangeListResponse, description_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, securitytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, requestaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForExchangeRequest, symbol_),
  2,
  0,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UnderlyingSymbolsForExchangeRequest, securitytype_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, underlyingsymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolsForUnderlyingRequest, securitytype_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, searchtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, securitytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SymbolSearchRequest, searchtype_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionForSymbolRequest, exchange_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, securitytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, minpriceincrement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, pricedisplayformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, currencyvalueperincrement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, isfinalmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, floattointpricemultiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, inttofloatpricedivisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, underlyingsymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, updatesbidaskonly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, strikeprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, putorcall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, shortinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, securityexpirationdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, buyrolloverinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, sellrolloverinterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, earningspershare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, sharesoutstanding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, inttofloatquantitydivisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, hasmarketdepthdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, displaypricemultiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, exchangesymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, initialmarginrequirement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, maintenancemarginrequirement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionResponse, currency_),
  6,
  0,
  1,
  7,
  2,
  8,
  27,
  9,
  10,
  11,
  12,
  3,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  4,
  25,
  26,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::SecurityDefinitionReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceRequest, tradeaccount_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, cashbalance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, balanceavailablefornewpositions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, accountcurrency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, securitiesvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, marginrequirement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, noaccountbalances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, unsolicited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, openpositionsprofitloss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, dailyprofitloss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AccountBalanceUpdate, infotext_),
  5,
  3,
  4,
  0,
  1,
  7,
  8,
  6,
  9,
  10,
  13,
  11,
  12,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesRequest, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesRequest, startdatetime_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalancesReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, cashbalance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, accountcurrency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, tradeaccount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, totalnumbermessages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, messagenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, noaccountbalances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, infotext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalAccountBalanceResponse, transactionid_),
  6,
  4,
  5,
  0,
  1,
  7,
  8,
  9,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UserMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UserMessage, usermessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::UserMessage, ispopupmessage_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::GeneralLogMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::GeneralLogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::GeneralLogMessage, messagetext_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryAdd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryAdd, journalentry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryAdd, datetime_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesRequest, startdatetime_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntriesReject, rejecttext_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryResponse, journalentry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryResponse, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::JournalEntryResponse, isfinalresponse_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AlertMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AlertMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AlertMessage, messagetext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::AlertMessage, tradeaccount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, recordinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, startdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, enddatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, maxdaystoreturn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, usezlibcompression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, requestdividendadjustedstockdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRequest, flag_1_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, recordinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, usezlibcompression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, norecordstoreturn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseHeader, inttofloatpricedivisor_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, rejecttext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, rejectreasoncode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataReject, retrytimeinseconds_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, startdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, highprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, lowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, lastprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, numtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, bidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, askvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse, isfinalrecord_),
  3,
  0,
  1,
  2,
  5,
  6,
  7,
  4,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse, isfinalrecord_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, startdatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, highprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, lowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, lastprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, numtrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, bidvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, askvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataRecordResponse_Int, isfinalrecord_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, datetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, atbidorask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int, isfinalrecord_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseTrailer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseTrailer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseTrailer, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DTC_PB::HistoricalPriceDataResponseTrailer, finalrecordlastdatetime_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::DTC_PB::EncodingRequest)},
  { 11, 19, sizeof(::DTC_PB::EncodingResponse)},
  { 22, 38, sizeof(::DTC_PB::LogonRequest)},
  { 49, 74, sizeof(::DTC_PB::LogonResponse)},
  { 94, 101, sizeof(::DTC_PB::Logoff)},
  { 103, 110, sizeof(::DTC_PB::Heartbeat)},
  { 112, 118, sizeof(::DTC_PB::MarketDataFeedStatus)},
  { 119, 126, sizeof(::DTC_PB::MarketDataFeedSymbolStatus)},
  { 128, 135, sizeof(::DTC_PB::TradingSymbolStatus)},
  { 137, 146, sizeof(::DTC_PB::MarketDataRequest)},
  { 150, 160, sizeof(::DTC_PB::MarketDepthRequest)},
  { 165, 172, sizeof(::DTC_PB::MarketDataReject)},
  { 174, 198, sizeof(::DTC_PB::MarketDataSnapshot)},
  { 217, 241, sizeof(::DTC_PB::MarketDataSnapshot_Int)},
  { 260, 267, sizeof(::DTC_PB::DepthEntry)},
  { 269, 277, sizeof(::DTC_PB::MarketDepthFullUpdate20)},
  { 280, 288, sizeof(::DTC_PB::MarketDepthFullUpdate10)},
  { 291, 305, sizeof(::DTC_PB::MarketDepthSnapshotLevel)},
  { 314, 328, sizeof(::DTC_PB::MarketDepthSnapshotLevel_Int)},
  { 337, 349, sizeof(::DTC_PB::MarketDepthUpdateLevel)},
  { 356, 368, sizeof(::DTC_PB::MarketDepthUpdateLevel_Int)},
  { 375, 387, sizeof(::DTC_PB::MarketDepthUpdateLevelCompact)},
  { 394, 406, sizeof(::DTC_PB::MarketDepthUpdateLevelCompact2)},
  { 413, 421, sizeof(::DTC_PB::MarketDataUpdateSessionSettlement)},
  { 424, 432, sizeof(::DTC_PB::MarketDataUpdateSessionSettlement_Int)},
  { 435, 443, sizeof(::DTC_PB::MarketDataUpdateSessionOpen)},
  { 446, 454, sizeof(::DTC_PB::MarketDataUpdateSessionOpen_Int)},
  { 457, 465, sizeof(::DTC_PB::MarketDataUpdateSessionNumTrades)},
  { 468, 475, sizeof(::DTC_PB::MarketDataUpdateTradingSessionDate)},
  { 477, 484, sizeof(::DTC_PB::MarketDepthReject)},
  { 486, 496, sizeof(::DTC_PB::MarketDataUpdateTrade)},
  { 501, 511, sizeof(::DTC_PB::MarketDataUpdateTrade_Int)},
  { 516, 527, sizeof(::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator)},
  { 533, 544, sizeof(::DTC_PB::MarketDataUpdateBidAsk)},
  { 550, 561, sizeof(::DTC_PB::MarketDataUpdateBidAsk_Int)},
  { 567, 578, sizeof(::DTC_PB::MarketDataUpdateBidAskCompact)},
  { 584, 594, sizeof(::DTC_PB::MarketDataUpdateTradeCompact)},
  { 599, 607, sizeof(::DTC_PB::MarketDataUpdateSessionVolume)},
  { 610, 618, sizeof(::DTC_PB::MarketDataUpdateOpenInterest)},
  { 621, 629, sizeof(::DTC_PB::MarketDataUpdateSessionHigh)},
  { 632, 640, sizeof(::DTC_PB::MarketDataUpdateSessionHigh_Int)},
  { 643, 651, sizeof(::DTC_PB::MarketDataUpdateSessionLow)},
  { 654, 662, sizeof(::DTC_PB::MarketDataUpdateSessionLow_Int)},
  { 665, 674, sizeof(::DTC_PB::MarketDataUpdateLastTradeSnapshot)},
  { 678, 698, sizeof(::DTC_PB::SubmitNewSingleOrder)},
  { 713, 734, sizeof(::DTC_PB::SubmitNewSingleOrderInt)},
  { 750, 765, sizeof(::DTC_PB::CancelReplaceOrder)},
  { 775, 791, sizeof(::DTC_PB::CancelReplaceOrderInt)},
  { 802, 809, sizeof(::DTC_PB::CancelOrder)},
  { 811, 841, sizeof(::DTC_PB::SubmitNewOCOOrder)},
  { 866, 894, sizeof(::DTC_PB::SubmitNewOCOOrderInt)},
  { 917, 926, sizeof(::DTC_PB::OpenOrdersRequest)},
  { 930, 939, sizeof(::DTC_PB::HistoricalOrderFillsRequest)},
  { 943, 950, sizeof(::DTC_PB::HistoricalOrderFillsReject)},
  { 952, 959, sizeof(::DTC_PB::CurrentPositionsRequest)},
  { 961, 968, sizeof(::DTC_PB::CurrentPositionsReject)},
  { 970, 1009, sizeof(::DTC_PB::OrderUpdate)},
  { 1043, 1050, sizeof(::DTC_PB::OpenOrdersReject)},
  { 1052, 1075, sizeof(::DTC_PB::HistoricalOrderFillResponse)},
  { 1093, 1110, sizeof(::DTC_PB::PositionUpdate)},
  { 1122, 1128, sizeof(::DTC_PB::TradeAccountsRequest)},
  { 1129, 1138, sizeof(::DTC_PB::TradeAccountResponse)},
  { 1142, 1148, sizeof(::DTC_PB::ExchangeListRequest)},
  { 1149, 1158, sizeof(::DTC_PB::ExchangeListResponse)},
  { 1162, 1172, sizeof(::DTC_PB::SymbolsForExchangeRequest)},
  { 1177, 1185, sizeof(::DTC_PB::UnderlyingSymbolsForExchangeRequest)},
  { 1188, 1197, sizeof(::DTC_PB::SymbolsForUnderlyingRequest)},
  { 1201, 1211, sizeof(::DTC_PB::SymbolSearchRequest)},
  { 1216, 1224, sizeof(::DTC_PB::SecurityDefinitionForSymbolRequest)},
  { 1227, 1260, sizeof(::DTC_PB::SecurityDefinitionResponse)},
  { 1288, 1295, sizeof(::DTC_PB::SecurityDefinitionReject)},
  { 1297, 1304, sizeof(::DTC_PB::AccountBalanceRequest)},
  { 1306, 1313, sizeof(::DTC_PB::AccountBalanceReject)},
  { 1315, 1334, sizeof(::DTC_PB::AccountBalanceUpdate)},
  { 1348, 1356, sizeof(::DTC_PB::HistoricalAccountBalancesRequest)},
  { 1359, 1366, sizeof(::DTC_PB::HistoricalAccountBalancesReject)},
  { 1368, 1383, sizeof(::DTC_PB::HistoricalAccountBalanceResponse)},
  { 1393, 1400, sizeof(::DTC_PB::UserMessage)},
  { 1402, 1408, sizeof(::DTC_PB::GeneralLogMessage)},
  { 1409, 1416, sizeof(::DTC_PB::JournalEntryAdd)},
  { 1418, 1425, sizeof(::DTC_PB::JournalEntriesRequest)},
  { 1427, 1434, sizeof(::DTC_PB::JournalEntriesReject)},
  { 1436, 1444, sizeof(::DTC_PB::JournalEntryResponse)},
  { 1447, 1454, sizeof(::DTC_PB::AlertMessage)},
  { 1456, 1471, sizeof(::DTC_PB::HistoricalPriceDataRequest)},
  { 1481, 1491, sizeof(::DTC_PB::HistoricalPriceDataResponseHeader)},
  { 1496, 1505, sizeof(::DTC_PB::HistoricalPriceDataReject)},
  { 1509, 1525, sizeof(::DTC_PB::HistoricalPriceDataRecordResponse)},
  { 1536, 1547, sizeof(::DTC_PB::HistoricalPriceDataTickRecordResponse)},
  { 1553, 1569, sizeof(::DTC_PB::HistoricalPriceDataRecordResponse_Int)},
  { 1580, 1591, sizeof(::DTC_PB::HistoricalPriceDataTickRecordResponse_Int)},
  { 1597, 1604, sizeof(::DTC_PB::HistoricalPriceDataResponseTrailer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_EncodingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_EncodingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_LogonRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_LogonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_Logoff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_Heartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataFeedStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataFeedSymbolStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_TradingSymbolStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataSnapshot_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_DepthEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthFullUpdate20_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthFullUpdate10_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthSnapshotLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthSnapshotLevel_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthUpdateLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthUpdateLevel_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthUpdateLevelCompact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthUpdateLevelCompact2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionSettlement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionSettlement_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionOpen_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionNumTrades_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTradingSessionDate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDepthReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTrade_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTradeWithUnbundledIndicator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateBidAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateBidAsk_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateBidAskCompact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateTradeCompact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateOpenInterest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionHigh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionHigh_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionLow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateSessionLow_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_MarketDataUpdateLastTradeSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewSingleOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewSingleOrderInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CancelReplaceOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CancelReplaceOrderInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CancelOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewOCOOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SubmitNewOCOOrderInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_OpenOrdersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalOrderFillsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalOrderFillsReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CurrentPositionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_CurrentPositionsReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_OrderUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_OpenOrdersReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalOrderFillResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_PositionUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_TradeAccountsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_TradeAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_ExchangeListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_ExchangeListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SymbolsForExchangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_UnderlyingSymbolsForExchangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SymbolsForUnderlyingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SymbolSearchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SecurityDefinitionForSymbolRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SecurityDefinitionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_SecurityDefinitionReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_AccountBalanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_AccountBalanceReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_AccountBalanceUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalAccountBalancesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalAccountBalancesReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalAccountBalanceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_UserMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_GeneralLogMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_JournalEntryAdd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_JournalEntriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_JournalEntriesReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_JournalEntryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_AlertMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataReject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataTickRecordResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataRecordResponse_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataTickRecordResponse_Int_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DTC_PB::_HistoricalPriceDataResponseTrailer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "DTCProtocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 92);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021DTCProtocol.proto\022\006DTC_PB\"h\n\017EncodingR"
      "equest\022\027\n\017ProtocolVersion\030\001 \001(\005\022&\n\010Encod"
      "ing\030\002 \001(\0162\024.DTC_PB.EncodingEnum\022\024\n\014Proto"
      "colType\030\003 \001(\t\"i\n\020EncodingResponse\022\027\n\017Pro"
      "tocolVersion\030\001 \001(\005\022&\n\010Encoding\030\002 \001(\0162\024.D"
      "TC_PB.EncodingEnum\022\024\n\014ProtocolType\030\003 \001(\t"
      "\"\236\002\n\014LogonRequest\022\027\n\017ProtocolVersion\030\001 \001"
      "(\005\022\020\n\010Username\030\002 \001(\t\022\020\n\010Password\030\003 \001(\t\022\027"
      "\n\017GeneralTextData\030\004 \001(\t\022\021\n\tInteger_1\030\005 \001"
      "(\005\022\021\n\tInteger_2\030\006 \001(\005\022\"\n\032HeartbeatInterv"
      "alInSeconds\030\007 \001(\005\022(\n\tTradeMode\030\010 \001(\0162\025.D"
      "TC_PB.TradeModeEnum\022\024\n\014TradeAccount\030\t \001("
      "\t\022\032\n\022HardwareIdentifier\030\n \001(\t\022\022\n\nClientN"
      "ame\030\013 \001(\t\"\267\005\n\rLogonResponse\022\027\n\017ProtocolV"
      "ersion\030\001 \001(\005\022\'\n\006Result\030\002 \001(\0162\027.DTC_PB.Lo"
      "gonStatusEnum\022\022\n\nResultText\030\003 \001(\t\022\030\n\020Rec"
      "onnectAddress\030\004 \001(\t\022\021\n\tInteger_1\030\005 \001(\005\022\022"
      "\n\nServerName\030\006 \001(\t\022\'\n\037MarketDepthUpdates"
      "BestBidAndAsk\030\007 \001(\r\022\032\n\022TradingIsSupporte"
      "d\030\010 \001(\r\022\032\n\022OCOOrdersSupported\030\t \001(\r\022#\n\033O"
      "rderCancelReplaceSupported\030\n \001(\r\022\037\n\027Symb"
      "olExchangeDelimiter\030\013 \001(\t\022$\n\034SecurityDef"
      "initionsSupported\030\014 \001(\r\022$\n\034HistoricalPri"
      "ceDataSupported\030\r \001(\r\022.\n&ResubscribeWhen"
      "MarketDataFeedAvailable\030\016 \001(\r\022\036\n\026MarketD"
      "epthIsSupported\030\017 \001(\r\0222\n*OneHistoricalPr"
      "iceDataRequestPerConnection\030\020 \001(\r\022\036\n\026Bra"
      "cketOrdersSupported\030\021 \001(\r\022$\n\034UseIntegerP"
      "riceOrderMessages\030\022 \001(\r\0225\n-UsesMultipleP"
      "ositionsPerSymbolAndTradeAccount\030\023 \001(\r\022\033"
      "\n\023MarketDataSupported\030\024 \001(\r\"0\n\006Logoff\022\016\n"
      "\006Reason\030\001 \001(\t\022\026\n\016DoNotReconnect\030\002 \001(\r\"@\n"
      "\tHeartbeat\022\032\n\022NumDroppedMessages\030\001 \001(\r\022\027"
      "\n\017CurrentDateTime\030\002 \001(\020\"H\n\024MarketDataFee"
      "dStatus\0220\n\006Status\030\001 \001(\0162 .DTC_PB.MarketD"
      "ataFeedStatusEnum\"`\n\032MarketDataFeedSymbo"
      "lStatus\022\020\n\010SymbolID\030\001 \001(\r\0220\n\006Status\030\002 \001("
      "\0162 .DTC_PB.MarketDataFeedStatusEnum\"R\n\023T"
      "radingSymbolStatus\022\020\n\010SymbolID\030\001 \001(\r\022)\n\006"
      "Status\030\002 \001(\0162\031.DTC_PB.TradingStatusEnum\""
      "y\n\021MarketDataRequest\0220\n\rRequestAction\030\001 "
      "\001(\0162\031.DTC_PB.RequestActionEnum\022\020\n\010Symbol"
      "ID\030\002 \001(\r\022\016\n\006Symbol\030\003 \001(\t\022\020\n\010Exchange\030\004 \001"
      "(\t\"\215\001\n\022MarketDepthRequest\0220\n\rRequestActi"
      "on\030\001 \001(\0162\031.DTC_PB.RequestActionEnum\022\020\n\010S"
      "ymbolID\030\002 \001(\r\022\016\n\006Symbol\030\003 \001(\t\022\020\n\010Exchang"
      "e\030\004 \001(\t\022\021\n\tNumLevels\030\005 \001(\005\"8\n\020MarketData"
      "Reject\022\020\n\010SymbolID\030\001 \001(\r\022\022\n\nRejectText\030\002"
      " \001(\t\"\375\003\n\022MarketDataSnapshot\022\020\n\010SymbolID\030"
      "\001 \001(\r\022\036\n\026SessionSettlementPrice\030\002 \001(\001\022\030\n"
      "\020SessionOpenPrice\030\003 \001(\001\022\030\n\020SessionHighPr"
      "ice\030\004 \001(\001\022\027\n\017SessionLowPrice\030\005 \001(\001\022\025\n\rSe"
      "ssionVolume\030\006 \001(\001\022\030\n\020SessionNumTrades\030\007 "
      "\001(\r\022\024\n\014OpenInterest\030\010 \001(\r\022\020\n\010BidPrice\030\t "
      "\001(\001\022\020\n\010AskPrice\030\n \001(\001\022\023\n\013AskQuantity\030\013 \001"
      "(\001\022\023\n\013BidQuantity\030\014 \001(\001\022\026\n\016LastTradePric"
      "e\030\r \001(\001\022\027\n\017LastTradeVolume\030\016 \001(\001\022\031\n\021Last"
      "TradeDateTime\030\017 \001(\001\022\026\n\016BidAskDateTime\030\020 "
      "\001(\001\022!\n\031SessionSettlementDateTime\030\021 \001(\r\022\032"
      "\n\022TradingSessionDate\030\022 \001(\r\0220\n\rTradingSta"
      "tus\030\023 \001(\0162\031.DTC_PB.TradingStatusEnum\"\201\004\n"
      "\026MarketDataSnapshot_Int\022\020\n\010SymbolID\030\001 \001("
      "\r\022\036\n\026SessionSettlementPrice\030\002 \001(\005\022\030\n\020Ses"
      "sionOpenPrice\030\003 \001(\005\022\030\n\020SessionHighPrice\030"
      "\004 \001(\005\022\027\n\017SessionLowPrice\030\005 \001(\005\022\025\n\rSessio"
      "nVolume\030\006 \001(\005\022\030\n\020SessionNumTrades\030\007 \001(\r\022"
      "\024\n\014OpenInterest\030\010 \001(\r\022\020\n\010BidPrice\030\t \001(\005\022"
      "\020\n\010AskPrice\030\n \001(\005\022\023\n\013AskQuantity\030\013 \001(\005\022\023"
      "\n\013BidQuantity\030\014 \001(\005\022\026\n\016LastTradePrice\030\r "
      "\001(\005\022\027\n\017LastTradeVolume\030\016 \001(\005\022\031\n\021LastTrad"
      "eDateTime\030\017 \001(\001\022\026\n\016BidAskDateTime\030\020 \001(\001\022"
      "!\n\031SessionSettlementDateTime\030\021 \001(\r\022\032\n\022Tr"
      "adingSessionDate\030\022 \001(\r\0220\n\rTradingStatus\030"
      "\023 \001(\0162\031.DTC_PB.TradingStatusEnum\"-\n\nDept"
      "hEntry\022\r\n\005Price\030\001 \001(\001\022\020\n\010Quantity\030\014 \001(\002\""
      "w\n\027MarketDepthFullUpdate20\022\020\n\010SymbolID\030\001"
      " \001(\r\022$\n\010BidDepth\030\002 \003(\0132\022.DTC_PB.DepthEnt"
      "ry\022$\n\010AskDepth\030\003 \003(\0132\022.DTC_PB.DepthEntry"
      "\"w\n\027MarketDepthFullUpdate10\022\020\n\010SymbolID\030"
      "\001 \001(\r\022$\n\010BidDepth\030\002 \003(\0132\022.DTC_PB.DepthEn"
      "try\022$\n\010AskDepth\030\003 \003(\0132\022.DTC_PB.DepthEntr"
      "y\"\344\001\n\030MarketDepthSnapshotLevel\022\020\n\010Symbol"
      "ID\030\001 \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.AtBidOrA"
      "skEnum\022\r\n\005Price\030\003 \001(\001\022\020\n\010Quantity\030\004 \001(\001\022"
      "\r\n\005Level\030\005 \001(\r\022\035\n\025IsFirstMessageInBatch\030"
      "\006 \001(\r\022\034\n\024IsLastMessageInBatch\030\007 \001(\r\022\020\n\010D"
      "ateTime\030\010 \001(\001\022\021\n\tNumOrders\030\t \001(\r\"\350\001\n\034Mar"
      "ketDepthSnapshotLevel_Int\022\020\n\010SymbolID\030\001 "
      "\001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.AtBidOrAskEnu"
      "m\022\r\n\005Price\030\003 \001(\005\022\020\n\010Quantity\030\004 \001(\005\022\r\n\005Le"
      "vel\030\005 \001(\r\022\035\n\025IsFirstMessageInBatch\030\006 \001(\r"
      "\022\034\n\024IsLastMessageInBatch\030\007 \001(\r\022\020\n\010DateTi"
      "me\030\010 \001(\001\022\021\n\tNumOrders\030\t \001(\r\"\315\001\n\026MarketDe"
      "pthUpdateLevel\022\020\n\010SymbolID\030\001 \001(\r\022$\n\004Side"
      "\030\002 \001(\0162\026.DTC_PB.AtBidOrAskEnum\022\r\n\005Price\030"
      "\003 \001(\001\022\020\n\010Quantity\030\004 \001(\001\0225\n\nUpdateType\030\005 "
      "\001(\0162!.DTC_PB.MarketDepthUpdateTypeEnum\022\020"
      "\n\010DateTime\030\006 \001(\001\022\021\n\tNumOrders\030\007 \001(\r\"\321\001\n\032"
      "MarketDepthUpdateLevel_Int\022\020\n\010SymbolID\030\001"
      " \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_PB.AtBidOrAskEn"
      "um\022\r\n\005Price\030\003 \001(\005\022\020\n\010Quantity\030\004 \001(\005\0225\n\nU"
      "pdateType\030\005 \001(\0162!.DTC_PB.MarketDepthUpda"
      "teTypeEnum\022\020\n\010DateTime\030\006 \001(\001\022\021\n\tNumOrder"
      "s\030\007 \001(\r\"\324\001\n\035MarketDepthUpdateLevelCompac"
      "t\022\020\n\010SymbolID\030\001 \001(\r\022$\n\004Side\030\002 \001(\0162\026.DTC_"
      "PB.AtBidOrAskEnum\022\r\n\005Price\030\003 \001(\002\022\020\n\010Quan"
      "tity\030\004 \001(\002\0225\n\nUpdateType\030\005 \001(\0162!.DTC_PB."
      "MarketDepthUpdateTypeEnum\022\020\n\010DateTime\030\006 "
      "\001(\r\022\021\n\tNumOrders\030\007 \001(\r\"\232\001\n\036MarketDepthUp"
      "dateLevelCompact2\022\020\n\010SymbolID\030\001 \001(\r\022\014\n\004S"
      "ide\030\002 \001(\005\022\022\n\nUpdateType\030\003 \001(\005\022\021\n\tNumOrde"
      "rs\030\004 \001(\r\022\r\n\005Price\030\005 \001(\002\022\020\n\010Quantity\030\006 \001("
      "\002\022\020\n\010DateTime\030\007 \001(\r\"V\n!MarketDataUpdateS"
      "essionSettlement\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Pr"
      "ice\030\002 \001(\001\022\020\n\010DateTime\030\003 \001(\r\"Z\n%MarketDat"
      "aUpdateSessionSettlement_Int\022\020\n\010SymbolID"
      "\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\022\020\n\010DateTime\030\003 \001(\005\""
      "Z\n\033MarketDataUpdateSessionOpen\022\020\n\010Symbol"
      "ID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\001\022\032\n\022TradingSessio"
      "nDate\030\003 \001(\r\"^\n\037MarketDataUpdateSessionOp"
      "en_Int\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\005\022"
      "\032\n\022TradingSessionDate\030\003 \001(\r\"c\n MarketDat"
      "aUpdateSessionNumTrades\022\020\n\010SymbolID\030\001 \001("
      "\r\022\021\n\tNumTrades\030\002 \001(\005\022\032\n\022TradingSessionDa"
      "te\030\003 \001(\r\"D\n\"MarketDataUpdateTradingSessi"
      "onDate\022\020\n\010SymbolID\030\001 \001(\r\022\014\n\004Date\030\002 \001(\r\"9"
      "\n\021MarketDepthReject\022\020\n\010SymbolID\030\001 \001(\r\022\022\n"
      "\nRejectText\030\002 \001(\t\"\206\001\n\025MarketDataUpdateTr"
      "ade\022\020\n\010SymbolID\030\001 \001(\r\022*\n\nAtBidOrAsk\030\002 \001("
      "\0162\026.DTC_PB.AtBidOrAskEnum\022\r\n\005Price\030\003 \001(\001"
      "\022\016\n\006Volume\030\004 \001(\001\022\020\n\010DateTime\030\005 \001(\001\"\212\001\n\031M"
      "arketDataUpdateTrade_Int\022\020\n\010SymbolID\030\001 \001"
      "(\r\022*\n\nAtBidOrAsk\030\002 \001(\0162\026.DTC_PB.AtBidOrA"
      "skEnum\022\r\n\005Price\030\003 \001(\005\022\016\n\006Volume\030\004 \001(\005\022\020\n"
      "\010DateTime\030\005 \001(\001\"\343\001\n+MarketDataUpdateTrad"
      "eWithUnbundledIndicator\022\020\n\010SymbolID\030\001 \001("
      "\r\022+\n\nAtBidOrAsk\030\002 \001(\0162\027.DTC_PB.AtBidOrAs"
      "kEnum8\022D\n\027UnbundledTradeIndicator\030\003 \001(\0162"
      "#.DTC_PB.UnbundledTradeIndicatorEnum\022\r\n\005"
      "Price\030\004 \001(\001\022\016\n\006Volume\030\005 \001(\r\022\020\n\010DateTime\030"
      "\006 \001(\001\"\212\001\n\026MarketDataUpdateBidAsk\022\020\n\010Symb"
      "olID\030\001 \001(\r\022\020\n\010BidPrice\030\002 \001(\001\022\023\n\013BidQuant"
      "ity\030\003 \001(\002\022\020\n\010AskPrice\030\004 \001(\001\022\023\n\013AskQuanti"
      "ty\030\005 \001(\002\022\020\n\010DateTime\030\006 \001(\017\"\216\001\n\032MarketDat"
      "aUpdateBidAsk_Int\022\020\n\010SymbolID\030\001 \001(\r\022\020\n\010B"
      "idPrice\030\002 \001(\005\022\023\n\013BidQuantity\030\003 \001(\005\022\020\n\010As"
      "kPrice\030\004 \001(\005\022\023\n\013AskQuantity\030\005 \001(\005\022\020\n\010Dat"
      "eTime\030\006 \001(\017\"\221\001\n\035MarketDataUpdateBidAskCo"
      "mpact\022\020\n\010BidPrice\030\001 \001(\002\022\023\n\013BidQuantity\030\002"
      " \001(\002\022\020\n\010AskPrice\030\003 \001(\002\022\023\n\013AskQuantity\030\004 "
      "\001(\002\022\020\n\010DateTime\030\005 \001(\017\022\020\n\010SymbolID\030\006 \001(\r\""
      "\215\001\n\034MarketDataUpdateTradeCompact\022\r\n\005Pric"
      "e\030\001 \001(\002\022\016\n\006Volume\030\002 \001(\002\022\020\n\010DateTime\030\003 \001("
      "\017\022\020\n\010SymbolID\030\004 \001(\r\022*\n\nAtBidOrAsk\030\005 \001(\0162"
      "\026.DTC_PB.AtBidOrAskEnum\"]\n\035MarketDataUpd"
      "ateSessionVolume\022\020\n\010SymbolID\030\001 \001(\r\022\016\n\006Vo"
      "lume\030\002 \001(\001\022\032\n\022TradingSessionDate\030\003 \001(\r\"b"
      "\n\034MarketDataUpdateOpenInterest\022\020\n\010Symbol"
      "ID\030\001 \001(\r\022\024\n\014OpenInterest\030\002 \001(\r\022\032\n\022Tradin"
      "gSessionDate\030\003 \001(\r\"Z\n\033MarketDataUpdateSe"
      "ssionHigh\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001"
      "(\001\022\032\n\022TradingSessionDate\030\003 \001(\r\"^\n\037Market"
      "DataUpdateSessionHigh_Int\022\020\n\010SymbolID\030\001 "
      "\001(\r\022\r\n\005Price\030\002 \001(\005\022\032\n\022TradingSessionDate"
      "\030\003 \001(\r\"Y\n\032MarketDataUpdateSessionLow\022\020\n\010"
      "SymbolID\030\001 \001(\r\022\r\n\005Price\030\002 \001(\001\022\032\n\022Trading"
      "SessionDate\030\003 \001(\r\"]\n\036MarketDataUpdateSes"
      "sionLow_Int\022\020\n\010SymbolID\030\001 \001(\r\022\r\n\005Price\030\002"
      " \001(\005\022\032\n\022TradingSessionDate\030\003 \001(\r\"\201\001\n!Mar"
      "ketDataUpdateLastTradeSnapshot\022\020\n\010Symbol"
      "ID\030\001 \001(\r\022\026\n\016LastTradePrice\030\002 \001(\001\022\027\n\017Last"
      "TradeVolume\030\003 \001(\001\022\031\n\021LastTradeDateTime\030\004"
      " \001(\001\"\247\003\n\024SubmitNewSingleOrder\022\016\n\006Symbol\030"
      "\001 \001(\t\022\020\n\010Exchange\030\002 \001(\t\022\024\n\014TradeAccount\030"
      "\003 \001(\t\022\025\n\rClientOrderID\030\004 \001(\t\022(\n\tOrderTyp"
      "e\030\005 \001(\0162\025.DTC_PB.OrderTypeEnum\022$\n\007BuySel"
      "l\030\006 \001(\0162\023.DTC_PB.BuySellEnum\022\016\n\006Price1\030\007"
      " \001(\001\022\016\n\006Price2\030\010 \001(\001\022\020\n\010Quantity\030\t \001(\001\022,"
      "\n\013TimeInForce\030\n \001(\0162\027.DTC_PB.TimeInForce"
      "Enum\022\030\n\020GoodTillDateTime\030\013 \001(\020\022\030\n\020IsAuto"
      "matedOrder\030\014 \001(\r\022\025\n\rIsParentOrder\030\r \001(\r\022"
      "\024\n\014FreeFormText\030\016 \001(\t\022/\n\013OpenOrClose\030\017 \001"
      "(\0162\032.DTC_PB.OpenCloseTradeEnum\"\273\003\n\027Submi"
      "tNewSingleOrderInt\022\016\n\006Symbol\030\001 \001(\t\022\020\n\010Ex"
      "change\030\002 \001(\t\022\024\n\014TradeAccount\030\003 \001(\t\022\025\n\rCl"
      "ientOrderID\030\004 \001(\t\022(\n\tOrderType\030\005 \001(\0162\025.D"
      "TC_PB.OrderTypeEnum\022$\n\007BuySell\030\006 \001(\0162\023.D"
      "TC_PB.BuySellEnum\022\016\n\006Price1\030\007 \001(\003\022\016\n\006Pri"
      "ce2\030\010 \001(\003\022\017\n\007Divisor\030\t \001(\002\022\020\n\010Quantity\030\n"
      " \001(\003\022,\n\013TimeInForce\030\013 \001(\0162\027.DTC_PB.TimeI"
      "nForceEnum\022\030\n\020GoodTillDateTime\030\014 \001(\020\022\030\n\020"
      "IsAutomatedOrder\030\r \001(\r\022\025\n\rIsParentOrder\030"
      "\016 \001(\r\022\024\n\014FreeFormText\030\017 \001(\t\022/\n\013OpenOrClo"
      "se\030\020 \001(\0162\032.DTC_PB.OpenCloseTradeEnum\"\212\002\n"
      "\022CancelReplaceOrder\022\025\n\rServerOrderID\030\001 \001"
      "(\t\022\025\n\rClientOrderID\030\002 \001(\t\022\016\n\006Price1\030\003 \001("
      "\001\022\016\n\006Price2\030\004 \001(\001\022\020\n\010Quantity\030\005 \001(\001\022\023\n\013P"
      "rice1IsSet\030\006 \001(\r\022\023\n\013Price2IsSet\030\007 \001(\r\022,\n"
      "\013TimeInForce\030\t \001(\0162\027.DTC_PB.TimeInForceE"
      "num\022\030\n\020GoodTillDateTime\030\n \001(\004\022\"\n\032UpdateP"
      "rice1OffsetToParent\030\013 \001(\r\"\236\002\n\025CancelRepl"
      "aceOrderInt\022\025\n\rServerOrderID\030\001 \001(\t\022\025\n\rCl"
      "ientOrderID\030\002 \001(\t\022\016\n\006Price1\030\003 \001(\003\022\016\n\006Pri"
      "ce2\030\004 \001(\003\022\017\n\007Divisor\030\005 \001(\002\022\020\n\010Quantity\030\006"
      " \001(\003\022\023\n\013Price1IsSet\030\007 \001(\r\022\023\n\013Price2IsSet"
      "\030\010 \001(\r\022,\n\013TimeInForce\030\n \001(\0162\027.DTC_PB.Tim"
      "eInForceEnum\022\030\n\020GoodTillDateTime\030\013 \001(\004\022\""
      "\n\032UpdatePrice1OffsetToParent\030\014 \001(\r\";\n\013Ca"
      "ncelOrder\022\025\n\rServerOrderID\030\001 \001(\t\022\025\n\rClie"
      "ntOrderID\030\002 \001(\t\"\352\005\n\021SubmitNewOCOOrder\022\016\n"
      "\006Symbol\030\001 \001(\t\022\020\n\010Exchange\030\002 \001(\t\022\027\n\017Clien"
      "tOrderID_1\030\003 \001(\t\022*\n\013OrderType_1\030\004 \001(\0162\025."
      "DTC_PB.OrderTypeEnum\022&\n\tBuySell_1\030\005 \001(\0162"
      "\023.DTC_PB.BuySellEnum\022\020\n\010Price1_1\030\006 \001(\001\022\020"
      "\n\010Price2_1\030\007 \001(\001\022\022\n\nQuantity_1\030\010 \001(\001\022\027\n\017"
      "ClientOrderID_2\030\t \001(\t\022*\n\013OrderType_2\030\n \001"
      "(\0162\025.DTC_PB.OrderTypeEnum\022&\n\tBuySell_2\030\013"
      " \001(\0162\023.DTC_PB.BuySellEnum\022\020\n\010Price1_2\030\014 "
      "\001(\001\022\020\n\010Price2_2\030\r \001(\001\022\022\n\nQuantity_2\030\016 \001("
      "\001\022,\n\013TimeInForce\030\017 \001(\0162\027.DTC_PB.TimeInFo"
      "rceEnum\022\030\n\020GoodTillDateTime\030\020 \001(\020\022\024\n\014Tra"
      "deAccount\030\021 \001(\t\022\030\n\020IsAutomatedOrder\030\022 \001("
      "\r\022\"\n\032ParentTriggerClientOrderID\030\023 \001(\t\022\024\n"
      "\014FreeFormText\030\024 \001(\t\022/\n\013OpenOrClose\030\025 \001(\016"
      "2\032.DTC_PB.OpenCloseTradeEnum\022<\n\023PartialF"
      "illHandling\030\026 \001(\0162\037.DTC_PB.PartialFillHa"
      "ndlingEnum\022\022\n\nUseOffsets\030\027 \001(\r\022\031\n\021Offset"
      "FromParent1\030\030 \001(\001\022\031\n\021OffsetFromParent2\030\031"
      " \001(\001\"\264\005\n\024SubmitNewOCOOrderInt\022\016\n\006Symbol\030"
      "\001 \001(\t\022\020\n\010Exchange\030\002 \001(\t\022\027\n\017ClientOrderID"
      "_1\030\003 \001(\t\022*\n\013OrderType_1\030\004 \001(\0162\025.DTC_PB.O"
      "rderTypeEnum\022&\n\tBuySell_1\030\005 \001(\0162\023.DTC_PB"
      ".BuySellEnum\022\020\n\010Price1_1\030\006 \001(\003\022\020\n\010Price2"
      "_1\030\007 \001(\003\022\022\n\nQuantity_1\030\010 \001(\003\022\027\n\017ClientOr"
      "derID_2\030\t \001(\t\022*\n\013OrderType_2\030\n \001(\0162\025.DTC"
      "_PB.OrderTypeEnum\022&\n\tBuySell_2\030\013 \001(\0162\023.D"
      "TC_PB.BuySellEnum\022\020\n\010Price1_2\030\014 \001(\003\022\020\n\010P"
      "rice2_2\030\r \001(\003\022\022\n\nQuantity_2\030\016 \001(\003\022,\n\013Tim"
      "eInForce\030\017 \001(\0162\027.DTC_PB.TimeInForceEnum\022"
      "\030\n\020GoodTillDateTime\030\020 \001(\020\022\024\n\014TradeAccoun"
      "t\030\021 \001(\t\022\030\n\020IsAutomatedOrder\030\022 \001(\r\022\"\n\032Par"
      "entTriggerClientOrderID\030\023 \001(\t\022\024\n\014FreeFor"
      "mText\030\024 \001(\t\022\017\n\007Divisor\030\025 \001(\002\022/\n\013OpenOrCl"
      "ose\030\026 \001(\0162\032.DTC_PB.OpenCloseTradeEnum\022<\n"
      "\023PartialFillHandling\030\027 \001(\0162\037.DTC_PB.Part"
      "ialFillHandlingEnum\"m\n\021OpenOrdersRequest"
      "\022\021\n\tRequestID\030\001 \001(\005\022\030\n\020RequestAllOrders\030"
      "\002 \001(\005\022\025\n\rServerOrderID\030\003 \001(\t\022\024\n\014TradeAcc"
      "ount\030\004 \001(\t\"s\n\033HistoricalOrderFillsReques"
      "t\022\021\n\tRequestID\030\001 \001(\005\022\025\n\rServerOrderID\030\002 "
      "\001(\t\022\024\n\014NumberOfDays\030\003 \001(\005\022\024\n\014TradeAccoun"
      "t\030\004 \001(\t\"C\n\032HistoricalOrderFillsReject\022\021\n"
      "\tRequestID\030\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t\"B\n\027"
      "CurrentPositionsRequest\022\021\n\tRequestID\030\001 \001"
      "(\005\022\024\n\014TradeAccount\030\002 \001(\t\"\?\n\026CurrentPosit"
      "ionsReject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nRejectT"
      "ext\030\002 \001(\t\"\306\007\n\013OrderUpdate\022\021\n\tRequestID\030\001"
      " \001(\005\022\030\n\020TotalNumMessages\030\002 \001(\005\022\025\n\rMessag"
      "eNumber\030\003 \001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010Exchang"
      "e\030\005 \001(\t\022\035\n\025PreviousServerOrderID\030\006 \001(\t\022\025"
      "\n\rServerOrderID\030\007 \001(\t\022\025\n\rClientOrderID\030\010"
      " \001(\t\022\027\n\017ExchangeOrderID\030\t \001(\t\022,\n\013OrderSt"
      "atus\030\n \001(\0162\027.DTC_PB.OrderStatusEnum\0228\n\021O"
      "rderUpdateReason\030\013 \001(\0162\035.DTC_PB.OrderUpd"
      "ateReasonEnum\022(\n\tOrderType\030\014 \001(\0162\025.DTC_P"
      "B.OrderTypeEnum\022$\n\007BuySell\030\r \001(\0162\023.DTC_P"
      "B.BuySellEnum\022\016\n\006Price1\030\016 \001(\001\022\016\n\006Price2\030"
      "\017 \001(\001\022,\n\013TimeInForce\030\020 \001(\0162\027.DTC_PB.Time"
      "InForceEnum\022\030\n\020GoodTillDateTime\030\021 \001(\020\022\025\n"
      "\rOrderQuantity\030\022 \001(\001\022\026\n\016FilledQuantity\030\023"
      " \001(\001\022\031\n\021RemainingQuantity\030\024 \001(\001\022\030\n\020Avera"
      "geFillPrice\030\025 \001(\001\022\025\n\rLastFillPrice\030\026 \001(\001"
      "\022\030\n\020LastFillDateTime\030\027 \001(\020\022\030\n\020LastFillQu"
      "antity\030\030 \001(\001\022\033\n\023LastFillExecutionID\030\031 \001("
      "\t\022\024\n\014TradeAccount\030\032 \001(\t\022\020\n\010InfoText\030\033 \001("
      "\t\022\020\n\010NoOrders\030\034 \001(\r\022\033\n\023ParentServerOrder"
      "ID\030\035 \001(\t\022#\n\033OCOLinkedOrderServerOrderID\030"
      "\036 \001(\t\022/\n\013OpenOrClose\030\037 \001(\0162\032.DTC_PB.Open"
      "CloseTradeEnum\022\035\n\025PreviousClientOrderID\030"
      "  \001(\t\022\024\n\014FreeFormText\030! \001(\t\022\035\n\025OrderRece"
      "ivedDateTime\030\" \001(\020\"9\n\020OpenOrdersReject\022\021"
      "\n\tRequestID\030\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t\"\331\003"
      "\n\033HistoricalOrderFillResponse\022\021\n\tRequest"
      "ID\030\001 \001(\005\022\033\n\023TotalNumberMessages\030\002 \001(\005\022\025\n"
      "\rMessageNumber\030\003 \001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010"
      "Exchange\030\005 \001(\t\022\025\n\rServerOrderID\030\006 \001(\t\022$\n"
      "\007BuySell\030\007 \001(\0162\023.DTC_PB.BuySellEnum\022\r\n\005P"
      "rice\030\010 \001(\001\022\020\n\010DateTime\030\t \001(\020\022\020\n\010Quantity"
      "\030\n \001(\001\022\031\n\021UniqueExecutionID\030\013 \001(\t\022\024\n\014Tra"
      "deAccount\030\014 \001(\t\022-\n\tOpenClose\030\r \001(\0162\032.DTC"
      "_PB.OpenCloseTradeEnum\022\024\n\014NoOrderFills\030\016"
      " \001(\r\022\020\n\010InfoText\030\017 \001(\t\022\037\n\027HighPriceDurin"
      "gPosition\030\020 \001(\001\022\036\n\026LowPriceDuringPositio"
      "n\030\021 \001(\001\022\030\n\020PositionQuantity\030\022 \001(\001\"\230\002\n\016Po"
      "sitionUpdate\022\021\n\tRequestID\030\001 \001(\005\022\033\n\023Total"
      "NumberMessages\030\002 \001(\005\022\025\n\rMessageNumber\030\003 "
      "\001(\005\022\016\n\006Symbol\030\004 \001(\t\022\020\n\010Exchange\030\005 \001(\t\022\020\n"
      "\010Quantity\030\006 \001(\001\022\024\n\014AveragePrice\030\007 \001(\001\022\032\n"
      "\022PositionIdentifier\030\010 \001(\t\022\024\n\014TradeAccoun"
      "t\030\t \001(\t\022\023\n\013NoPositions\030\n \001(\r\022\023\n\013Unsolici"
      "ted\030\013 \001(\r\022\031\n\021MarginRequirement\030\014 \001(\001\")\n\024"
      "TradeAccountsRequest\022\021\n\tRequestID\030\001 \001(\005\""
      "s\n\024TradeAccountResponse\022\033\n\023TotalNumberMe"
      "ssages\030\001 \001(\005\022\025\n\rMessageNumber\030\002 \001(\005\022\024\n\014T"
      "radeAccount\030\003 \001(\t\022\021\n\tRequestID\030\004 \001(\005\"(\n\023"
      "ExchangeListRequest\022\021\n\tRequestID\030\001 \001(\005\"h"
      "\n\024ExchangeListResponse\022\021\n\tRequestID\030\001 \001("
      "\005\022\020\n\010Exchange\030\002 \001(\t\022\026\n\016IsFinalMessage\030\003 "
      "\001(\r\022\023\n\013Description\030\004 \001(\t\"\262\001\n\031SymbolsForE"
      "xchangeRequest\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010Exc"
      "hange\030\002 \001(\t\022.\n\014SecurityType\030\003 \001(\0162\030.DTC_"
      "PB.SecurityTypeEnum\0220\n\rRequestAction\030\004 \001"
      "(\0162\031.DTC_PB.RequestActionEnum\022\016\n\006Symbol\030"
      "\005 \001(\t\"z\n#UnderlyingSymbolsForExchangeReq"
      "uest\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010Exchange\030\002 \001("
      "\t\022.\n\014SecurityType\030\003 \001(\0162\030.DTC_PB.Securit"
      "yTypeEnum\"\214\001\n\033SymbolsForUnderlyingReques"
      "t\022\021\n\tRequestID\030\001 \001(\005\022\030\n\020UnderlyingSymbol"
      "\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022.\n\014SecurityType"
      "\030\004 \001(\0162\030.DTC_PB.SecurityTypeEnum\"\252\001\n\023Sym"
      "bolSearchRequest\022\021\n\tRequestID\030\001 \001(\005\022\022\n\nS"
      "earchText\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022.\n\014Sec"
      "urityType\030\004 \001(\0162\030.DTC_PB.SecurityTypeEnu"
      "m\022*\n\nSearchType\030\005 \001(\0162\026.DTC_PB.SearchTyp"
      "eEnum\"Y\n\"SecurityDefinitionForSymbolRequ"
      "est\022\021\n\tRequestID\030\001 \001(\005\022\016\n\006Symbol\030\002 \001(\t\022\020"
      "\n\010Exchange\030\003 \001(\t\"\325\006\n\032SecurityDefinitionR"
      "esponse\022\021\n\tRequestID\030\001 \001(\005\022\016\n\006Symbol\030\002 \001"
      "(\t\022\020\n\010Exchange\030\003 \001(\t\022.\n\014SecurityType\030\004 \001"
      "(\0162\030.DTC_PB.SecurityTypeEnum\022\023\n\013Descript"
      "ion\030\005 \001(\t\022\031\n\021MinPriceIncrement\030\006 \001(\002\022:\n\022"
      "PriceDisplayFormat\030\007 \001(\0162\036.DTC_PB.PriceD"
      "isplayFormatEnum\022!\n\031CurrencyValuePerIncr"
      "ement\030\010 \001(\002\022\026\n\016IsFinalMessage\030\t \001(\r\022!\n\031F"
      "loatToIntPriceMultiplier\030\n \001(\002\022\036\n\026IntToF"
      "loatPriceDivisor\030\013 \001(\002\022\030\n\020UnderlyingSymb"
      "ol\030\014 \001(\t\022\031\n\021UpdatesBidAskOnly\030\r \001(\r\022\023\n\013S"
      "trikePrice\030\016 \001(\002\022&\n\tPutOrCall\030\017 \001(\0162\023.DT"
      "C_PB.PutCallEnum\022\025\n\rShortInterest\030\020 \001(\r\022"
      "\036\n\026SecurityExpirationDate\030\021 \001(\017\022\033\n\023BuyRo"
      "lloverInterest\030\022 \001(\002\022\034\n\024SellRolloverInte"
      "rest\030\023 \001(\002\022\030\n\020EarningsPerShare\030\024 \001(\002\022\031\n\021"
      "SharesOutstanding\030\025 \001(\r\022!\n\031IntToFloatQua"
      "ntityDivisor\030\026 \001(\002\022\032\n\022HasMarketDepthData"
      "\030\027 \001(\r\022\036\n\026DisplayPriceMultiplier\030\030 \001(\002\022\026"
      "\n\016ExchangeSymbol\030\031 \001(\t\022 \n\030InitialMarginR"
      "equirement\030\032 \001(\002\022$\n\034MaintenanceMarginReq"
      "uirement\030\033 \001(\002\022\020\n\010Currency\030\034 \001(\t\"A\n\030Secu"
      "rityDefinitionReject\022\021\n\tRequestID\030\001 \001(\005\022"
      "\022\n\nRejectText\030\002 \001(\t\"@\n\025AccountBalanceReq"
      "uest\022\021\n\tRequestID\030\001 \001(\005\022\024\n\014TradeAccount\030"
      "\002 \001(\t\"=\n\024AccountBalanceReject\022\021\n\tRequest"
      "ID\030\001 \001(\005\022\022\n\nRejectText\030\002 \001(\t\"\372\002\n\024Account"
      "BalanceUpdate\022\021\n\tRequestID\030\001 \001(\005\022\023\n\013Cash"
      "Balance\030\002 \001(\001\022\'\n\037BalanceAvailableForNewP"
      "ositions\030\003 \001(\001\022\027\n\017AccountCurrency\030\004 \001(\t\022"
      "\024\n\014TradeAccount\030\005 \001(\t\022\027\n\017SecuritiesValue"
      "\030\006 \001(\001\022\031\n\021MarginRequirement\030\007 \001(\001\022\033\n\023Tot"
      "alNumberMessages\030\010 \001(\005\022\025\n\rMessageNumber\030"
      "\t \001(\005\022\031\n\021NoAccountBalances\030\n \001(\r\022\023\n\013Unso"
      "licited\030\013 \001(\r\022\037\n\027OpenPositionsProfitLoss"
      "\030\014 \001(\001\022\027\n\017DailyProfitLoss\030\r \001(\001\022\020\n\010InfoT"
      "ext\030\016 \001(\t\"b\n HistoricalAccountBalancesRe"
      "quest\022\021\n\tRequestID\030\001 \001(\005\022\024\n\014TradeAccount"
      "\030\002 \001(\t\022\025\n\rStartDateTime\030\003 \001(\020\"H\n\037Histori"
      "calAccountBalancesReject\022\021\n\tRequestID\030\001 "
      "\001(\005\022\022\n\nRejectText\030\002 \001(\t\"\203\002\n HistoricalAc"
      "countBalanceResponse\022\021\n\tRequestID\030\001 \001(\005\022"
      "\020\n\010DateTime\030\002 \001(\001\022\023\n\013CashBalance\030\003 \001(\001\022\027"
      "\n\017AccountCurrency\030\004 \001(\t\022\024\n\014TradeAccount\030"
      "\005 \001(\t\022\033\n\023TotalNumberMessages\030\006 \001(\005\022\025\n\rMe"
      "ssageNumber\030\007 \001(\005\022\031\n\021NoAccountBalances\030\010"
      " \001(\r\022\020\n\010InfoText\030\t \001(\t\022\025\n\rTransactionId\030"
      "\n \001(\t\":\n\013UserMessage\022\023\n\013UserMessage\030\001 \001("
      "\t\022\026\n\016IsPopupMessage\030\002 \001(\r\"(\n\021GeneralLogM"
      "essage\022\023\n\013MessageText\030\003 \001(\t\"9\n\017JournalEn"
      "tryAdd\022\024\n\014JournalEntry\030\001 \001(\t\022\020\n\010DateTime"
      "\030\002 \001(\020\"A\n\025JournalEntriesRequest\022\021\n\tReque"
      "stID\030\001 \001(\005\022\025\n\rStartDateTime\030\002 \001(\020\"=\n\024Jou"
      "rnalEntriesReject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\n"
      "RejectText\030\002 \001(\t\"W\n\024JournalEntryResponse"
      "\022\024\n\014JournalEntry\030\001 \001(\t\022\020\n\010DateTime\030\002 \001(\020"
      "\022\027\n\017IsFinalResponse\030\003 \001(\r\"9\n\014AlertMessag"
      "e\022\023\n\013MessageText\030\003 \001(\t\022\024\n\014TradeAccount\030\004"
      " \001(\t\"\250\002\n\032HistoricalPriceDataRequest\022\021\n\tR"
      "equestID\030\001 \001(\005\022\016\n\006Symbol\030\002 \001(\t\022\020\n\010Exchan"
      "ge\030\003 \001(\t\022:\n\016RecordInterval\030\004 \001(\0162\".DTC_P"
      "B.HistoricalDataIntervalEnum\022\025\n\rStartDat"
      "eTime\030\005 \001(\020\022\023\n\013EndDateTime\030\006 \001(\020\022\027\n\017MaxD"
      "aysToReturn\030\007 \001(\r\022\032\n\022UseZLibCompression\030"
      "\010 \001(\r\022(\n RequestDividendAdjustedStockDat"
      "a\030\t \001(\r\022\016\n\006Flag_1\030\n \001(\r\"\311\001\n!HistoricalPr"
      "iceDataResponseHeader\022\021\n\tRequestID\030\001 \001(\005"
      "\022:\n\016RecordInterval\030\002 \001(\0162\".DTC_PB.Histor"
      "icalDataIntervalEnum\022\032\n\022UseZLibCompressi"
      "on\030\003 \001(\r\022\031\n\021NoRecordsToReturn\030\004 \001(\r\022\036\n\026I"
      "ntToFloatPriceDivisor\030\005 \001(\002\"\251\001\n\031Historic"
      "alPriceDataReject\022\021\n\tRequestID\030\001 \001(\005\022\022\n\n"
      "RejectText\030\002 \001(\t\022I\n\020RejectReasonCode\030\003 \001"
      "(\0162/.DTC_PB.HistoricalPriceDataRejectRea"
      "sonCodeEnum\022\032\n\022RetryTimeInSeconds\030\004 \001(\r\""
      "\370\001\n!HistoricalPriceDataRecordResponse\022\021\n"
      "\tRequestID\030\001 \001(\005\022\025\n\rStartDateTime\030\002 \001(\020\022"
      "\021\n\tOpenPrice\030\003 \001(\001\022\021\n\tHighPrice\030\004 \001(\001\022\020\n"
      "\010LowPrice\030\005 \001(\001\022\021\n\tLastPrice\030\006 \001(\001\022\016\n\006Vo"
      "lume\030\007 \001(\001\022\021\n\tNumTrades\030\010 \001(\r\022\021\n\tBidVolu"
      "me\030\t \001(\001\022\021\n\tAskVolume\030\n \001(\001\022\025\n\rIsFinalRe"
      "cord\030\013 \001(\r\"\256\001\n%HistoricalPriceDataTickRe"
      "cordResponse\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010DateT"
      "ime\030\002 \001(\001\022*\n\nAtBidOrAsk\030\003 \001(\0162\026.DTC_PB.A"
      "tBidOrAskEnum\022\r\n\005Price\030\004 \001(\001\022\016\n\006Volume\030\005"
      " \001(\001\022\025\n\rIsFinalRecord\030\006 \001(\r\"\374\001\n%Historic"
      "alPriceDataRecordResponse_Int\022\021\n\tRequest"
      "ID\030\001 \001(\005\022\025\n\rStartDateTime\030\002 \001(\020\022\021\n\tOpenP"
      "rice\030\003 \001(\005\022\021\n\tHighPrice\030\004 \001(\005\022\020\n\010LowPric"
      "e\030\005 \001(\005\022\021\n\tLastPrice\030\006 \001(\005\022\016\n\006Volume\030\007 \001"
      "(\005\022\021\n\tNumTrades\030\010 \001(\r\022\021\n\tBidVolume\030\t \001(\005"
      "\022\021\n\tAskVolume\030\n \001(\005\022\025\n\rIsFinalRecord\030\013 \001"
      "(\r\"\262\001\n)HistoricalPriceDataTickRecordResp"
      "onse_Int\022\021\n\tRequestID\030\001 \001(\005\022\020\n\010DateTime\030"
      "\002 \001(\001\022\r\n\005Price\030\003 \001(\005\022\016\n\006Volume\030\004 \001(\005\022*\n\n"
      "AtBidOrAsk\030\005 \001(\0162\026.DTC_PB.AtBidOrAskEnum"
      "\022\025\n\rIsFinalRecord\030\006 \001(\r\"X\n\"HistoricalPri"
      "ceDataResponseTrailer\022\021\n\tRequestID\030\001 \001(\005"
      "\022\037\n\027FinalRecordLastDateTime\030\002 \001(\001*!\n\nDTC"
      "Version\022\023\n\017CURRENT_VERSION\020\010*\202\027\n\016DTCMess"
      "ageType\022\021\n\rLOGON_REQUEST\020\001\022\022\n\016LOGON_RESP"
      "ONSE\020\002\022\r\n\tHEARTBEAT\020\003\022\n\n\006LOGOFF\020\005\022\024\n\020ENC"
      "ODING_REQUEST\020\006\022\025\n\021ENCODING_RESPONSE\020\007\022\027"
      "\n\023MARKET_DATA_REQUEST\020e\022\026\n\022MARKET_DATA_R"
      "EJECT\020g\022\030\n\024MARKET_DATA_SNAPSHOT\020h\022\034\n\030MAR"
      "KET_DATA_SNAPSHOT_INT\020}\022\034\n\030MARKET_DATA_U"
      "PDATE_TRADE\020k\022$\n MARKET_DATA_UPDATE_TRAD"
      "E_COMPACT\020p\022 \n\034MARKET_DATA_UPDATE_TRADE_"
      "INT\020~\022+\n&MARKET_DATA_UPDATE_LAST_TRADE_S"
      "NAPSHOT\020\206\001\022\036\n\032MARKET_DATA_UPDATE_BID_ASK"
      "\020l\022&\n\"MARKET_DATA_UPDATE_BID_ASK_COMPACT"
      "\020u\022\"\n\036MARKET_DATA_UPDATE_BID_ASK_INT\020\177\022#"
      "\n\037MARKET_DATA_UPDATE_SESSION_OPEN\020x\022(\n#M"
      "ARKET_DATA_UPDATE_SESSION_OPEN_INT\020\200\001\022#\n"
      "\037MARKET_DATA_UPDATE_SESSION_HIGH\020r\022(\n#MA"
      "RKET_DATA_UPDATE_SESSION_HIGH_INT\020\201\001\022\"\n\036"
      "MARKET_DATA_UPDATE_SESSION_LOW\020s\022\'\n\"MARK"
      "ET_DATA_UPDATE_SESSION_LOW_INT\020\202\001\022%\n!MAR"
      "KET_DATA_UPDATE_SESSION_VOLUME\020q\022$\n MARK"
      "ET_DATA_UPDATE_OPEN_INTEREST\020|\022)\n%MARKET"
      "_DATA_UPDATE_SESSION_SETTLEMENT\020w\022.\n)MAR"
      "KET_DATA_UPDATE_SESSION_SETTLEMENT_INT\020\203"
      "\001\022*\n%MARKET_DATA_UPDATE_SESSION_NUM_TRAD"
      "ES\020\207\001\022,\n\'MARKET_DATA_UPDATE_TRADING_SESS"
      "ION_DATE\020\210\001\022\030\n\024MARKET_DEPTH_REQUEST\020f\022\027\n"
      "\023MARKET_DEPTH_REJECT\020y\022\037\n\033MARKET_DEPTH_S"
      "NAPSHOT_LEVEL\020z\022$\n\037MARKET_DEPTH_SNAPSHOT"
      "_LEVEL_INT\020\204\001\022\035\n\031MARKET_DEPTH_UPDATE_LEV"
      "EL\020j\022%\n!MARKET_DEPTH_UPDATE_LEVEL_COMPAC"
      "T\020v\022(\n#MARKET_DEPTH_UPDATE_LEVEL_COMPACT"
      "_2\020\213\001\022\"\n\035MARKET_DEPTH_UPDATE_LEVEL_INT\020\205"
      "\001\022\037\n\033MARKET_DEPTH_FULL_UPDATE_10\020{\022\037\n\033MA"
      "RKET_DEPTH_FULL_UPDATE_20\020i\022\033\n\027MARKET_DA"
      "TA_FEED_STATUS\020d\022\"\n\036MARKET_DATA_FEED_SYM"
      "BOL_STATUS\020t\022\032\n\025TRADING_SYMBOL_STATUS\020\212\001"
      "\022\034\n\027SUBMIT_NEW_SINGLE_ORDER\020\320\001\022 \n\033SUBMIT"
      "_NEW_SINGLE_ORDER_INT\020\316\001\022\031\n\024SUBMIT_NEW_O"
      "CO_ORDER\020\311\001\022\035\n\030SUBMIT_NEW_OCO_ORDER_INT\020"
      "\317\001\022\021\n\014CANCEL_ORDER\020\313\001\022\031\n\024CANCEL_REPLACE_"
      "ORDER\020\314\001\022\035\n\030CANCEL_REPLACE_ORDER_INT\020\315\001\022"
      "\030\n\023OPEN_ORDERS_REQUEST\020\254\002\022\027\n\022OPEN_ORDERS"
      "_REJECT\020\256\002\022\021\n\014ORDER_UPDATE\020\255\002\022#\n\036HISTORI"
      "CAL_ORDER_FILLS_REQUEST\020\257\002\022#\n\036HISTORICAL"
      "_ORDER_FILL_RESPONSE\020\260\002\022\"\n\035HISTORICAL_OR"
      "DER_FILLS_REJECT\020\264\002\022\036\n\031CURRENT_POSITIONS"
      "_REQUEST\020\261\002\022\035\n\030CURRENT_POSITIONS_REJECT\020"
      "\263\002\022\024\n\017POSITION_UPDATE\020\262\002\022\033\n\026TRADE_ACCOUN"
      "TS_REQUEST\020\220\003\022\033\n\026TRADE_ACCOUNT_RESPONSE\020"
      "\221\003\022\032\n\025EXCHANGE_LIST_REQUEST\020\364\003\022\033\n\026EXCHAN"
      "GE_LIST_RESPONSE\020\365\003\022!\n\034SYMBOLS_FOR_EXCHA"
      "NGE_REQUEST\020\366\003\022,\n\'UNDERLYING_SYMBOLS_FOR"
      "_EXCHANGE_REQUEST\020\367\003\022#\n\036SYMBOLS_FOR_UNDE"
      "RLYING_REQUEST\020\370\003\022+\n&SECURITY_DEFINITION"
      "_FOR_SYMBOL_REQUEST\020\372\003\022!\n\034SECURITY_DEFIN"
      "ITION_RESPONSE\020\373\003\022\032\n\025SYMBOL_SEARCH_REQUE"
      "ST\020\374\003\022\037\n\032SECURITY_DEFINITION_REJECT\020\375\003\022\034"
      "\n\027ACCOUNT_BALANCE_REQUEST\020\331\004\022\033\n\026ACCOUNT_"
      "BALANCE_REJECT\020\332\004\022\033\n\026ACCOUNT_BALANCE_UPD"
      "ATE\020\330\004\022(\n#HISTORICAL_ACCOUNT_BALANCES_RE"
      "QUEST\020\333\004\022\'\n\"HISTORICAL_ACCOUNT_BALANCES_"
      "REJECT\020\334\004\022(\n#HISTORICAL_ACCOUNT_BALANCE_"
      "RESPONSE\020\335\004\022\021\n\014USER_MESSAGE\020\274\005\022\030\n\023GENERA"
      "L_LOG_MESSAGE\020\275\005\022\022\n\rALERT_MESSAGE\020\276\005\022\026\n\021"
      "JOURNAL_ENTRY_ADD\020\277\005\022\034\n\027JOURNAL_ENTRIES_"
      "REQUEST\020\300\005\022\033\n\026JOURNAL_ENTRIES_REJECT\020\301\005\022"
      "\033\n\026JOURNAL_ENTRY_RESPONSE\020\302\005\022\"\n\035HISTORIC"
      "AL_PRICE_DATA_REQUEST\020\240\006\022*\n%HISTORICAL_P"
      "RICE_DATA_RESPONSE_HEADER\020\241\006\022!\n\034HISTORIC"
      "AL_PRICE_DATA_REJECT\020\242\006\022*\n%HISTORICAL_PR"
      "ICE_DATA_RECORD_RESPONSE\020\243\006\022/\n*HISTORICA"
      "L_PRICE_DATA_TICK_RECORD_RESPONSE\020\244\006\022.\n)"
      "HISTORICAL_PRICE_DATA_RECORD_RESPONSE_IN"
      "T\020\245\006\0223\n.HISTORICAL_PRICE_DATA_TICK_RECOR"
      "D_RESPONSE_INT\020\246\006*\220\001\n\014EncodingEnum\022\023\n\017BI"
      "NARY_ENCODING\020\000\022\'\n#BINARY_WITH_VARIABLE_"
      "LENGTH_STRINGS\020\001\022\021\n\rJSON_ENCODING\020\002\022\031\n\025J"
      "SON_COMPACT_ENCODING\020\003\022\024\n\020PROTOCOL_BUFFE"
      "RS\020\004*t\n\017LogonStatusEnum\022\021\n\rLOGON_SUCCESS"
      "\020\001\022\017\n\013LOGON_ERROR\020\002\022\034\n\030LOGON_ERROR_NO_RE"
      "CONNECT\020\003\022\037\n\033LOGON_RECONNECT_NEW_ADDRESS"
      "\020\004*F\n\024MessageSupportedEnum\022\027\n\023MESSAGE_UN"
      "SUPPORTED\020\000\022\025\n\021MESSAGE_SUPPORTED\020\001*i\n\rTr"
      "adeModeEnum\022\024\n\020TRADE_MODE_UNSET\020\000\022\023\n\017TRA"
      "DE_MODE_DEMO\020\001\022\030\n\024TRADE_MODE_SIMULATED\020\002"
      "\022\023\n\017TRADE_MODE_LIVE\020\003*A\n\021RequestActionEn"
      "um\022\r\n\tSUBSCRIBE\020\001\022\017\n\013UNSUBSCRIBE\020\002\022\014\n\010SN"
      "APSHOT\020\003*\206\001\n\033UnbundledTradeIndicatorEnum"
      "\022\030\n\024UNBUNDLED_TRADE_NONE\020\000\022&\n\"FIRST_SUB_"
      "TRADE_OF_UNBUNDLED_TRADE\020\001\022%\n!LAST_SUB_T"
      "RADE_OF_UNBUNDLED_TRADE\020\002*\336\002\n\017OrderStatu"
      "sEnum\022\034\n\030ORDER_STATUS_UNSPECIFIED\020\000\022\033\n\027O"
      "RDER_STATUS_ORDER_SENT\020\001\022\035\n\031ORDER_STATUS"
      "_PENDING_OPEN\020\002\022\036\n\032ORDER_STATUS_PENDING_"
      "CHILD\020\003\022\025\n\021ORDER_STATUS_OPEN\020\004\022\'\n#ORDER_"
      "STATUS_PENDING_CANCEL_REPLACE\020\005\022\037\n\033ORDER"
      "_STATUS_PENDING_CANCEL\020\006\022\027\n\023ORDER_STATUS"
      "_FILLED\020\007\022\031\n\025ORDER_STATUS_CANCELED\020\010\022\031\n\025"
      "ORDER_STATUS_REJECTED\020\t\022!\n\035ORDER_STATUS_"
      "PARTIALLY_FILLED\020\n*\305\002\n\025OrderUpdateReason"
      "Enum\022\035\n\031ORDER_UPDATE_REASON_UNSET\020\000\022 \n\034O"
      "PEN_ORDERS_REQUEST_RESPONSE\020\001\022\026\n\022NEW_ORD"
      "ER_ACCEPTED\020\002\022\030\n\024GENERAL_ORDER_UPDATE\020\003\022"
      "\020\n\014ORDER_FILLED\020\004\022\032\n\026ORDER_FILLED_PARTIA"
      "LLY\020\005\022\022\n\016ORDER_CANCELED\020\006\022!\n\035ORDER_CANCE"
      "L_REPLACE_COMPLETE\020\007\022\026\n\022NEW_ORDER_REJECT"
      "ED\020\010\022\031\n\025ORDER_CANCEL_REJECTED\020\t\022!\n\035ORDER"
      "_CANCEL_REPLACE_REJECTED\020\n*;\n\016AtBidOrAsk"
      "Enum\022\021\n\rBID_ASK_UNSET\020\000\022\n\n\006AT_BID\020\001\022\n\n\006A"
      "T_ASK\020\002*B\n\017AtBidOrAskEnum8\022\023\n\017BID_ASK_UN"
      "SET_8\020\000\022\014\n\010AT_BID_8\020\001\022\014\n\010AT_ASK_8\020\002*q\n\031M"
      "arketDepthUpdateTypeEnum\022\017\n\013DEPTH_UNSET\020"
      "\000\022$\n MARKET_DEPTH_INSERT_UPDATE_LEVEL\020\001\022"
      "\035\n\031MARKET_DEPTH_DELETE_LEVEL\020\002*\305\001\n\rOrder"
      "TypeEnum\022\024\n\020ORDER_TYPE_UNSET\020\000\022\025\n\021ORDER_"
      "TYPE_MARKET\020\001\022\024\n\020ORDER_TYPE_LIMIT\020\002\022\023\n\017O"
      "RDER_TYPE_STOP\020\003\022\031\n\025ORDER_TYPE_STOP_LIMI"
      "T\020\004\022 \n\034ORDER_TYPE_MARKET_IF_TOUCHED\020\005\022\037\n"
      "\033ORDER_TYPE_LIMIT_IF_TOUCHED\020\006*\256\001\n\017TimeI"
      "nForceEnum\022\r\n\tTIF_UNSET\020\000\022\013\n\007TIF_DAY\020\001\022\032"
      "\n\026TIF_GOOD_TILL_CANCELED\020\002\022\033\n\027TIF_GOOD_T"
      "ILL_DATE_TIME\020\003\022\033\n\027TIF_IMMEDIATE_OR_CANC"
      "EL\020\004\022\023\n\017TIF_ALL_OR_NONE\020\005\022\024\n\020TIF_FILL_OR"
      "_KILL\020\006*4\n\013BuySellEnum\022\022\n\016BUY_SELL_UNSET"
      "\020\000\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002*F\n\022OpenCloseTradeE"
      "num\022\017\n\013TRADE_UNSET\020\000\022\016\n\nTRADE_OPEN\020\001\022\017\n\013"
      "TRADE_CLOSE\020\002*\210\001\n\027PartialFillHandlingEnu"
      "m\022\026\n\022PARTIAL_FILL_UNSET\020\000\022)\n%PARTIAL_FIL"
      "L_HANDLING_REDUCE_QUANTITY\020\001\022*\n&PARTIAL_"
      "FILL_HANDLING_IMMEDIATE_CANCEL\020\002*\\\n\030Mark"
      "etDataFeedStatusEnum\022 \n\034MARKET_DATA_FEED"
      "_UNAVAILABLE\020\001\022\036\n\032MARKET_DATA_FEED_AVAIL"
      "ABLE\020\002*\330\006\n\026PriceDisplayFormatEnum\022\'\n\032PRI"
      "CE_DISPLAY_FORMAT_UNSET\020\377\377\377\377\377\377\377\377\377\001\022\"\n\036PR"
      "ICE_DISPLAY_FORMAT_DECIMAL_0\020\000\022\"\n\036PRICE_"
      "DISPLAY_FORMAT_DECIMAL_1\020\001\022\"\n\036PRICE_DISP"
      "LAY_FORMAT_DECIMAL_2\020\002\022\"\n\036PRICE_DISPLAY_"
      "FORMAT_DECIMAL_3\020\003\022\"\n\036PRICE_DISPLAY_FORM"
      "AT_DECIMAL_4\020\004\022\"\n\036PRICE_DISPLAY_FORMAT_D"
      "ECIMAL_5\020\005\022\"\n\036PRICE_DISPLAY_FORMAT_DECIM"
      "AL_6\020\006\022\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL_7"
      "\020\007\022\"\n\036PRICE_DISPLAY_FORMAT_DECIMAL_8\020\010\022\""
      "\n\036PRICE_DISPLAY_FORMAT_DECIMAL_9\020\t\022)\n$PR"
      "ICE_DISPLAY_FORMAT_DENOMINATOR_256\020\344\002\022)\n"
      "$PRICE_DISPLAY_FORMAT_DENOMINATOR_128\020\344\001"
      "\022(\n#PRICE_DISPLAY_FORMAT_DENOMINATOR_64\020"
      "\244\001\0221\n,PRICE_DISPLAY_FORMAT_DENOMINATOR_3"
      "2_QUARTERS\020\210\001\022/\n*PRICE_DISPLAY_FORMAT_DE"
      "NOMINATOR_32_HALVES\020\206\001\022(\n#PRICE_DISPLAY_"
      "FORMAT_DENOMINATOR_32\020\204\001\022\'\n#PRICE_DISPLA"
      "Y_FORMAT_DENOMINATOR_16\020t\022&\n\"PRICE_DISPL"
      "AY_FORMAT_DENOMINATOR_8\020l\022&\n\"PRICE_DISPL"
      "AY_FORMAT_DENOMINATOR_4\020h\022&\n\"PRICE_DISPL"
      "AY_FORMAT_DENOMINATOR_2\020f*\315\002\n\020SecurityTy"
      "peEnum\022\027\n\023SECURITY_TYPE_UNSET\020\000\022\030\n\024SECUR"
      "ITY_TYPE_FUTURE\020\001\022\027\n\023SECURITY_TYPE_STOCK"
      "\020\002\022\027\n\023SECURITY_TYPE_FOREX\020\003\022\027\n\023SECURITY_"
      "TYPE_INDEX\020\004\022\"\n\036SECURITY_TYPE_FUTURES_ST"
      "RATEGY\020\005\022 \n\034SECURITY_TYPE_FUTURES_OPTION"
      "\020\007\022\036\n\032SECURITY_TYPE_STOCK_OPTION\020\006\022\036\n\032SE"
      "CURITY_TYPE_INDEX_OPTION\020\010\022\026\n\022SECURITY_T"
      "YPE_BOND\020\t\022\035\n\031SECURITY_TYPE_MUTUAL_FUND\020"
      "\n*4\n\013PutCallEnum\022\014\n\010PC_UNSET\020\000\022\013\n\007PC_CAL"
      "L\020\001\022\n\n\006PC_PUT\020\002*b\n\016SearchTypeEnum\022\025\n\021SEA"
      "RCH_TYPE_UNSET\020\000\022\031\n\025SEARCH_TYPE_BY_SYMBO"
      "L\020\001\022\036\n\032SEARCH_TYPE_BY_DESCRIPTION\020\002*\204\002\n\032"
      "HistoricalDataIntervalEnum\022\021\n\rINTERVAL_T"
      "ICK\020\000\022\025\n\021INTERVAL_1_SECOND\020\001\022\026\n\022INTERVAL"
      "_2_SECONDS\020\002\022\026\n\022INTERVAL_4_SECONDS\020\004\022\026\n\022"
      "INTERVAL_5_SECONDS\020\005\022\027\n\023INTERVAL_10_SECO"
      "NDS\020\n\022\027\n\023INTERVAL_30_SECONDS\020\036\022\025\n\021INTERV"
      "AL_1_MINUTE\020<\022\024\n\016INTERVAL_1_DAY\020\200\243\005\022\025\n\017I"
      "NTERVAL_1_WEEK\020\200\365$*\347\001\n\'HistoricalPriceDa"
      "taRejectReasonCodeEnum\022\016\n\nHPDR_UNSET\020\000\022)"
      "\n%HPDR_UNABLE_TO_SERVE_DATA_RETRY_LATER\020"
      "\001\022*\n&HPDR_UNABLE_TO_SERVE_DATA_DO_NOT_RE"
      "TRY\020\002\0226\n2HPDR_DATA_REQUEST_OUTSIDE_BOUND"
      "S_OF_AVAILABLE_DATA\020\003\022\035\n\031HPDR_GENERAL_RE"
      "JECT_ERROR\020\004*\240\001\n\021TradingStatusEnum\022\032\n\026TR"
      "ADING_STATUS_UNKNOWN\020\000\022\033\n\027TRADING_STATUS"
      "_PRE_OPEN\020\001\022\027\n\023TRADING_STATUS_OPEN\020\002\022\030\n\024"
      "TRADING_STATUS_CLOSE\020\003\022\037\n\033TRADING_STATUS"
      "_TRADING_HALT\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 24295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DTCProtocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_DTCProtocol_2eproto
namespace DTC_PB {
const ::google::protobuf::EnumDescriptor* DTCVersion_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[0];
}
bool DTCVersion_IsValid(int value) {
  switch (value) {
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DTCMessageType_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[1];
}
bool DTCMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 138:
    case 139:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 400:
    case 401:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 506:
    case 507:
    case 508:
    case 509:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EncodingEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[2];
}
bool EncodingEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogonStatusEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[3];
}
bool LogonStatusEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageSupportedEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[4];
}
bool MessageSupportedEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeModeEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[5];
}
bool TradeModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestActionEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[6];
}
bool RequestActionEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnbundledTradeIndicatorEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[7];
}
bool UnbundledTradeIndicatorEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderStatusEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[8];
}
bool OrderStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderUpdateReasonEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[9];
}
bool OrderUpdateReasonEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AtBidOrAskEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[10];
}
bool AtBidOrAskEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AtBidOrAskEnum8_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[11];
}
bool AtBidOrAskEnum8_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketDepthUpdateTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[12];
}
bool MarketDepthUpdateTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[13];
}
bool OrderTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[14];
}
bool TimeInForceEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuySellEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[15];
}
bool BuySellEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OpenCloseTradeEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[16];
}
bool OpenCloseTradeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartialFillHandlingEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[17];
}
bool PartialFillHandlingEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketDataFeedStatusEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[18];
}
bool MarketDataFeedStatusEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceDisplayFormatEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[19];
}
bool PriceDisplayFormatEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 102:
    case 104:
    case 108:
    case 116:
    case 132:
    case 134:
    case 136:
    case 164:
    case 228:
    case 356:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[20];
}
bool SecurityTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PutCallEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[21];
}
bool PutCallEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SearchTypeEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[22];
}
bool SearchTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HistoricalDataIntervalEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[23];
}
bool HistoricalDataIntervalEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 10:
    case 30:
    case 60:
    case 86400:
    case 604800:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HistoricalPriceDataRejectReasonCodeEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[24];
}
bool HistoricalPriceDataRejectReasonCodeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingStatusEnum_descriptor() {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DTCProtocol_2eproto::file_level_enum_descriptors[25];
}
bool TradingStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EncodingRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncodingRequest::kProtocolVersionFieldNumber;
const int EncodingRequest::kEncodingFieldNumber;
const int EncodingRequest::kProtocolTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncodingRequest::EncodingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_EncodingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.EncodingRequest)
}
EncodingRequest::EncodingRequest(const EncodingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocoltype()) {
    protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.EncodingRequest)
}

void EncodingRequest::SharedCtor() {
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
}

EncodingRequest::~EncodingRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.EncodingRequest)
  SharedDtor();
}

void EncodingRequest::SharedDtor() {
  protocoltype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncodingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncodingRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncodingRequest& EncodingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_EncodingRequest.base);
  return *internal_default_instance();
}


void EncodingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.EncodingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    protocoltype_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&protocolversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoding_) -
        reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EncodingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.EncodingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_protocolversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.EncodingEnum Encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::EncodingEnum_IsValid(value)) {
            set_encoding(static_cast< ::DTC_PB::EncodingEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProtocolType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocoltype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.EncodingRequest.ProtocolType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.EncodingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.EncodingRequest)
  return false;
#undef DO_
}

void EncodingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.EncodingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // optional string ProtocolType = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.EncodingRequest.ProtocolType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->protocoltype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.EncodingRequest)
}

::google::protobuf::uint8* EncodingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.EncodingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // optional string ProtocolType = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.EncodingRequest.ProtocolType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocoltype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.EncodingRequest)
  return target;
}

size_t EncodingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.EncodingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ProtocolType = 3;
    if (has_protocoltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocoltype());
    }

    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional .DTC_PB.EncodingEnum Encoding = 2;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncodingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.EncodingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EncodingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncodingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.EncodingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.EncodingRequest)
    MergeFrom(*source);
  }
}

void EncodingRequest::MergeFrom(const EncodingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.EncodingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocoltype();
      protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
    }
    if (cached_has_bits & 0x00000002u) {
      protocolversion_ = from.protocolversion_;
    }
    if (cached_has_bits & 0x00000004u) {
      encoding_ = from.encoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncodingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.EncodingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodingRequest::CopyFrom(const EncodingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.EncodingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingRequest::IsInitialized() const {
  return true;
}

void EncodingRequest::Swap(EncodingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncodingRequest::InternalSwap(EncodingRequest* other) {
  using std::swap;
  protocoltype_.Swap(&other->protocoltype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(encoding_, other->encoding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncodingRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EncodingResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncodingResponse::kProtocolVersionFieldNumber;
const int EncodingResponse::kEncodingFieldNumber;
const int EncodingResponse::kProtocolTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncodingResponse::EncodingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_EncodingResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.EncodingResponse)
}
EncodingResponse::EncodingResponse(const EncodingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocoltype()) {
    protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.EncodingResponse)
}

void EncodingResponse::SharedCtor() {
  protocoltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
}

EncodingResponse::~EncodingResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.EncodingResponse)
  SharedDtor();
}

void EncodingResponse::SharedDtor() {
  protocoltype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncodingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EncodingResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncodingResponse& EncodingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_EncodingResponse.base);
  return *internal_default_instance();
}


void EncodingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.EncodingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    protocoltype_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&protocolversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoding_) -
        reinterpret_cast<char*>(&protocolversion_)) + sizeof(encoding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EncodingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.EncodingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_protocolversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.EncodingEnum Encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::EncodingEnum_IsValid(value)) {
            set_encoding(static_cast< ::DTC_PB::EncodingEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ProtocolType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocoltype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.EncodingResponse.ProtocolType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.EncodingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.EncodingResponse)
  return false;
#undef DO_
}

void EncodingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.EncodingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // optional string ProtocolType = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.EncodingResponse.ProtocolType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->protocoltype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.EncodingResponse)
}

::google::protobuf::uint8* EncodingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.EncodingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional .DTC_PB.EncodingEnum Encoding = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // optional string ProtocolType = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocoltype().data(), static_cast<int>(this->protocoltype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.EncodingResponse.ProtocolType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocoltype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.EncodingResponse)
  return target;
}

size_t EncodingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.EncodingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ProtocolType = 3;
    if (has_protocoltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocoltype());
    }

    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional .DTC_PB.EncodingEnum Encoding = 2;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncodingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.EncodingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EncodingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncodingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.EncodingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.EncodingResponse)
    MergeFrom(*source);
  }
}

void EncodingResponse::MergeFrom(const EncodingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.EncodingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocoltype();
      protocoltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocoltype_);
    }
    if (cached_has_bits & 0x00000002u) {
      protocolversion_ = from.protocolversion_;
    }
    if (cached_has_bits & 0x00000004u) {
      encoding_ = from.encoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncodingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.EncodingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodingResponse::CopyFrom(const EncodingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.EncodingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingResponse::IsInitialized() const {
  return true;
}

void EncodingResponse::Swap(EncodingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncodingResponse::InternalSwap(EncodingResponse* other) {
  using std::swap;
  protocoltype_.Swap(&other->protocoltype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(encoding_, other->encoding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EncodingResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogonRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogonRequest::kProtocolVersionFieldNumber;
const int LogonRequest::kUsernameFieldNumber;
const int LogonRequest::kPasswordFieldNumber;
const int LogonRequest::kGeneralTextDataFieldNumber;
const int LogonRequest::kInteger1FieldNumber;
const int LogonRequest::kInteger2FieldNumber;
const int LogonRequest::kHeartbeatIntervalInSecondsFieldNumber;
const int LogonRequest::kTradeModeFieldNumber;
const int LogonRequest::kTradeAccountFieldNumber;
const int LogonRequest::kHardwareIdentifierFieldNumber;
const int LogonRequest::kClientNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogonRequest::LogonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_LogonRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.LogonRequest)
}
LogonRequest::LogonRequest(const LogonRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  generaltextdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generaltextdata()) {
    generaltextdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generaltextdata_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  hardwareidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hardwareidentifier()) {
    hardwareidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardwareidentifier_);
  }
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientname()) {
    clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&trademode_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(trademode_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.LogonRequest)
}

void LogonRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generaltextdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trademode_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(trademode_));
}

LogonRequest::~LogonRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.LogonRequest)
  SharedDtor();
}

void LogonRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generaltextdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareidentifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogonRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogonRequest& LogonRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_LogonRequest.base);
  return *internal_default_instance();
}


void LogonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.LogonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      generaltextdata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      hardwareidentifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      clientname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&protocolversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&integer_1_) -
        reinterpret_cast<char*>(&protocolversion_)) + sizeof(integer_1_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&integer_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trademode_) -
        reinterpret_cast<char*>(&integer_2_)) + sizeof(trademode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.LogonRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_protocolversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonRequest.Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonRequest.Password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GeneralTextData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generaltextdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->generaltextdata().data(), static_cast<int>(this->generaltextdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonRequest.GeneralTextData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Integer_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_integer_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Integer_2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_integer_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 HeartbeatIntervalInSeconds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_heartbeatintervalinseconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeatintervalinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TradeModeEnum TradeMode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TradeModeEnum_IsValid(value)) {
            set_trademode(static_cast< ::DTC_PB::TradeModeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonRequest.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HardwareIdentifier = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardwareidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardwareidentifier().data(), static_cast<int>(this->hardwareidentifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonRequest.HardwareIdentifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientname().data(), static_cast<int>(this->clientname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonRequest.ClientName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.LogonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.LogonRequest)
  return false;
#undef DO_
}

void LogonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.LogonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional string Username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string Password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.Password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string GeneralTextData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generaltextdata().data(), static_cast<int>(this->generaltextdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.GeneralTextData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->generaltextdata(), output);
  }

  // optional int32 Integer_1 = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integer_1(), output);
  }

  // optional int32 Integer_2 = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->integer_2(), output);
  }

  // optional int32 HeartbeatIntervalInSeconds = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->heartbeatintervalinseconds(), output);
  }

  // optional .DTC_PB.TradeModeEnum TradeMode = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->trademode(), output);
  }

  // optional string TradeAccount = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradeaccount(), output);
  }

  // optional string HardwareIdentifier = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareidentifier().data(), static_cast<int>(this->hardwareidentifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.HardwareIdentifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->hardwareidentifier(), output);
  }

  // optional string ClientName = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.ClientName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->clientname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.LogonRequest)
}

::google::protobuf::uint8* LogonRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.LogonRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional string Username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.Password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string GeneralTextData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generaltextdata().data(), static_cast<int>(this->generaltextdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.GeneralTextData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->generaltextdata(), target);
  }

  // optional int32 Integer_1 = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integer_1(), target);
  }

  // optional int32 Integer_2 = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->integer_2(), target);
  }

  // optional int32 HeartbeatIntervalInSeconds = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->heartbeatintervalinseconds(), target);
  }

  // optional .DTC_PB.TradeModeEnum TradeMode = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->trademode(), target);
  }

  // optional string TradeAccount = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradeaccount(), target);
  }

  // optional string HardwareIdentifier = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareidentifier().data(), static_cast<int>(this->hardwareidentifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.HardwareIdentifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hardwareidentifier(), target);
  }

  // optional string ClientName = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientname().data(), static_cast<int>(this->clientname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonRequest.ClientName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->clientname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.LogonRequest)
  return target;
}

size_t LogonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.LogonRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string GeneralTextData = 4;
    if (has_generaltextdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generaltextdata());
    }

    // optional string TradeAccount = 9;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string HardwareIdentifier = 10;
    if (has_hardwareidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardwareidentifier());
    }

    // optional string ClientName = 11;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional int32 Integer_1 = 5;
    if (has_integer_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer_1());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 Integer_2 = 6;
    if (has_integer_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer_2());
    }

    // optional int32 HeartbeatIntervalInSeconds = 7;
    if (has_heartbeatintervalinseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeatintervalinseconds());
    }

    // optional .DTC_PB.TradeModeEnum TradeMode = 8;
    if (has_trademode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trademode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.LogonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogonRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogonRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.LogonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.LogonRequest)
    MergeFrom(*source);
  }
}

void LogonRequest::MergeFrom(const LogonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.LogonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_generaltextdata();
      generaltextdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generaltextdata_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_hardwareidentifier();
      hardwareidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardwareidentifier_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_clientname();
      clientname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientname_);
    }
    if (cached_has_bits & 0x00000040u) {
      protocolversion_ = from.protocolversion_;
    }
    if (cached_has_bits & 0x00000080u) {
      integer_1_ = from.integer_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      integer_2_ = from.integer_2_;
    }
    if (cached_has_bits & 0x00000200u) {
      heartbeatintervalinseconds_ = from.heartbeatintervalinseconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      trademode_ = from.trademode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.LogonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonRequest::CopyFrom(const LogonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.LogonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonRequest::IsInitialized() const {
  return true;
}

void LogonRequest::Swap(LogonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogonRequest::InternalSwap(LogonRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generaltextdata_.Swap(&other->generaltextdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hardwareidentifier_.Swap(&other->hardwareidentifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientname_.Swap(&other->clientname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(integer_1_, other->integer_1_);
  swap(integer_2_, other->integer_2_);
  swap(heartbeatintervalinseconds_, other->heartbeatintervalinseconds_);
  swap(trademode_, other->trademode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogonRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogonResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogonResponse::kProtocolVersionFieldNumber;
const int LogonResponse::kResultFieldNumber;
const int LogonResponse::kResultTextFieldNumber;
const int LogonResponse::kReconnectAddressFieldNumber;
const int LogonResponse::kInteger1FieldNumber;
const int LogonResponse::kServerNameFieldNumber;
const int LogonResponse::kMarketDepthUpdatesBestBidAndAskFieldNumber;
const int LogonResponse::kTradingIsSupportedFieldNumber;
const int LogonResponse::kOCOOrdersSupportedFieldNumber;
const int LogonResponse::kOrderCancelReplaceSupportedFieldNumber;
const int LogonResponse::kSymbolExchangeDelimiterFieldNumber;
const int LogonResponse::kSecurityDefinitionsSupportedFieldNumber;
const int LogonResponse::kHistoricalPriceDataSupportedFieldNumber;
const int LogonResponse::kResubscribeWhenMarketDataFeedAvailableFieldNumber;
const int LogonResponse::kMarketDepthIsSupportedFieldNumber;
const int LogonResponse::kOneHistoricalPriceDataRequestPerConnectionFieldNumber;
const int LogonResponse::kBracketOrdersSupportedFieldNumber;
const int LogonResponse::kUseIntegerPriceOrderMessagesFieldNumber;
const int LogonResponse::kUsesMultiplePositionsPerSymbolAndTradeAccountFieldNumber;
const int LogonResponse::kMarketDataSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogonResponse::LogonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_LogonResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.LogonResponse)
}
LogonResponse::LogonResponse(const LogonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resulttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resulttext()) {
    resulttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resulttext_);
  }
  reconnectaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reconnectaddress()) {
    reconnectaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reconnectaddress_);
  }
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_servername()) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  symbolexchangedelimiter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbolexchangedelimiter()) {
    symbolexchangedelimiter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbolexchangedelimiter_);
  }
  ::memcpy(&protocolversion_, &from.protocolversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&protocolversion_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.LogonResponse)
}

void LogonResponse::SharedCtor() {
  resulttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconnectaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolexchangedelimiter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketdatasupported_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(marketdatasupported_));
  result_ = 1;
}

LogonResponse::~LogonResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.LogonResponse)
  SharedDtor();
}

void LogonResponse::SharedDtor() {
  resulttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconnectaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolexchangedelimiter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogonResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogonResponse& LogonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_LogonResponse.base);
  return *internal_default_instance();
}


void LogonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.LogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      resulttext_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      reconnectaddress_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      servername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      symbolexchangedelimiter_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&protocolversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingissupported_) -
        reinterpret_cast<char*>(&protocolversion_)) + sizeof(tradingissupported_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&ocoorderssupported_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bracketorderssupported_) -
        reinterpret_cast<char*>(&ocoorderssupported_)) + sizeof(bracketorderssupported_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&useintegerpriceordermessages_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&marketdatasupported_) -
        reinterpret_cast<char*>(&useintegerpriceordermessages_)) + sizeof(marketdatasupported_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.LogonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ProtocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_protocolversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.LogonStatusEnum Result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::LogonStatusEnum_IsValid(value)) {
            set_result(static_cast< ::DTC_PB::LogonStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ResultText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resulttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resulttext().data(), static_cast<int>(this->resulttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonResponse.ResultText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ReconnectAddress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reconnectaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reconnectaddress().data(), static_cast<int>(this->reconnectaddress().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonResponse.ReconnectAddress");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Integer_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_integer_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ServerName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonResponse.ServerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_marketdepthupdatesbestbidandask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthupdatesbestbidandask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingIsSupported = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_tradingissupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingissupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OCOOrdersSupported = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ocoorderssupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ocoorderssupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OrderCancelReplaceSupported = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ordercancelreplacesupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordercancelreplacesupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SymbolExchangeDelimiter = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbolexchangedelimiter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbolexchangedelimiter().data(), static_cast<int>(this->symbolexchangedelimiter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.LogonResponse.SymbolExchangeDelimiter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SecurityDefinitionsSupported = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_securitydefinitionssupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &securitydefinitionssupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 HistoricalPriceDataSupported = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_historicalpricedatasupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historicalpricedatasupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_resubscribewhenmarketdatafeedavailable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resubscribewhenmarketdatafeedavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MarketDepthIsSupported = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_marketdepthissupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdepthissupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_onehistoricalpricedatarequestperconnection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onehistoricalpricedatarequestperconnection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BracketOrdersSupported = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_bracketorderssupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bracketorderssupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UseIntegerPriceOrderMessages = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_useintegerpriceordermessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useintegerpriceordermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_usesmultiplepositionspersymbolandtradeaccount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usesmultiplepositionspersymbolandtradeaccount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MarketDataSupported = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_marketdatasupported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marketdatasupported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.LogonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.LogonResponse)
  return false;
#undef DO_
}

void LogonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.LogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // optional .DTC_PB.LogonStatusEnum Result = 2;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string ResultText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulttext().data(), static_cast<int>(this->resulttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.ResultText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resulttext(), output);
  }

  // optional string ReconnectAddress = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reconnectaddress().data(), static_cast<int>(this->reconnectaddress().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.ReconnectAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reconnectaddress(), output);
  }

  // optional int32 Integer_1 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integer_1(), output);
  }

  // optional string ServerName = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.ServerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->servername(), output);
  }

  // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->marketdepthupdatesbestbidandask(), output);
  }

  // optional uint32 TradingIsSupported = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tradingissupported(), output);
  }

  // optional uint32 OCOOrdersSupported = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ocoorderssupported(), output);
  }

  // optional uint32 OrderCancelReplaceSupported = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ordercancelreplacesupported(), output);
  }

  // optional string SymbolExchangeDelimiter = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolexchangedelimiter().data(), static_cast<int>(this->symbolexchangedelimiter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.SymbolExchangeDelimiter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->symbolexchangedelimiter(), output);
  }

  // optional uint32 SecurityDefinitionsSupported = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->securitydefinitionssupported(), output);
  }

  // optional uint32 HistoricalPriceDataSupported = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->historicalpricedatasupported(), output);
  }

  // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->resubscribewhenmarketdatafeedavailable(), output);
  }

  // optional uint32 MarketDepthIsSupported = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->marketdepthissupported(), output);
  }

  // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->onehistoricalpricedatarequestperconnection(), output);
  }

  // optional uint32 BracketOrdersSupported = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bracketorderssupported(), output);
  }

  // optional uint32 UseIntegerPriceOrderMessages = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->useintegerpriceordermessages(), output);
  }

  // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->usesmultiplepositionspersymbolandtradeaccount(), output);
  }

  // optional uint32 MarketDataSupported = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->marketdatasupported(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.LogonResponse)
}

::google::protobuf::uint8* LogonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.LogonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ProtocolVersion = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // optional .DTC_PB.LogonStatusEnum Result = 2;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string ResultText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resulttext().data(), static_cast<int>(this->resulttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.ResultText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resulttext(), target);
  }

  // optional string ReconnectAddress = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reconnectaddress().data(), static_cast<int>(this->reconnectaddress().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.ReconnectAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reconnectaddress(), target);
  }

  // optional int32 Integer_1 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integer_1(), target);
  }

  // optional string ServerName = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.ServerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->servername(), target);
  }

  // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->marketdepthupdatesbestbidandask(), target);
  }

  // optional uint32 TradingIsSupported = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tradingissupported(), target);
  }

  // optional uint32 OCOOrdersSupported = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ocoorderssupported(), target);
  }

  // optional uint32 OrderCancelReplaceSupported = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ordercancelreplacesupported(), target);
  }

  // optional string SymbolExchangeDelimiter = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolexchangedelimiter().data(), static_cast<int>(this->symbolexchangedelimiter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.LogonResponse.SymbolExchangeDelimiter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->symbolexchangedelimiter(), target);
  }

  // optional uint32 SecurityDefinitionsSupported = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->securitydefinitionssupported(), target);
  }

  // optional uint32 HistoricalPriceDataSupported = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->historicalpricedatasupported(), target);
  }

  // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->resubscribewhenmarketdatafeedavailable(), target);
  }

  // optional uint32 MarketDepthIsSupported = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->marketdepthissupported(), target);
  }

  // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->onehistoricalpricedatarequestperconnection(), target);
  }

  // optional uint32 BracketOrdersSupported = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->bracketorderssupported(), target);
  }

  // optional uint32 UseIntegerPriceOrderMessages = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->useintegerpriceordermessages(), target);
  }

  // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->usesmultiplepositionspersymbolandtradeaccount(), target);
  }

  // optional uint32 MarketDataSupported = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->marketdatasupported(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.LogonResponse)
  return target;
}

size_t LogonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.LogonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ResultText = 3;
    if (has_resulttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resulttext());
    }

    // optional string ReconnectAddress = 4;
    if (has_reconnectaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reconnectaddress());
    }

    // optional string ServerName = 6;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional string SymbolExchangeDelimiter = 11;
    if (has_symbolexchangedelimiter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbolexchangedelimiter());
    }

    // optional int32 ProtocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolversion());
    }

    // optional int32 Integer_1 = 5;
    if (has_integer_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integer_1());
    }

    // optional uint32 MarketDepthUpdatesBestBidAndAsk = 7;
    if (has_marketdepthupdatesbestbidandask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marketdepthupdatesbestbidandask());
    }

    // optional uint32 TradingIsSupported = 8;
    if (has_tradingissupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingissupported());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 OCOOrdersSupported = 9;
    if (has_ocoorderssupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ocoorderssupported());
    }

    // optional uint32 OrderCancelReplaceSupported = 10;
    if (has_ordercancelreplacesupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordercancelreplacesupported());
    }

    // optional uint32 SecurityDefinitionsSupported = 12;
    if (has_securitydefinitionssupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->securitydefinitionssupported());
    }

    // optional uint32 HistoricalPriceDataSupported = 13;
    if (has_historicalpricedatasupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historicalpricedatasupported());
    }

    // optional uint32 ResubscribeWhenMarketDataFeedAvailable = 14;
    if (has_resubscribewhenmarketdatafeedavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resubscribewhenmarketdatafeedavailable());
    }

    // optional uint32 MarketDepthIsSupported = 15;
    if (has_marketdepthissupported()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marketdepthissupported());
    }

    // optional uint32 OneHistoricalPriceDataRequestPerConnection = 16;
    if (has_onehistoricalpricedatarequestperconnection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onehistoricalpricedatarequestperconnection());
    }

    // optional uint32 BracketOrdersSupported = 17;
    if (has_bracketorderssupported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bracketorderssupported());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 UseIntegerPriceOrderMessages = 18;
    if (has_useintegerpriceordermessages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useintegerpriceordermessages());
    }

    // optional uint32 UsesMultiplePositionsPerSymbolAndTradeAccount = 19;
    if (has_usesmultiplepositionspersymbolandtradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usesmultiplepositionspersymbolandtradeaccount());
    }

    // optional uint32 MarketDataSupported = 20;
    if (has_marketdatasupported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marketdatasupported());
    }

    // optional .DTC_PB.LogonStatusEnum Result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.LogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.LogonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.LogonResponse)
    MergeFrom(*source);
  }
}

void LogonResponse::MergeFrom(const LogonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.LogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_resulttext();
      resulttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resulttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_reconnectaddress();
      reconnectaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reconnectaddress_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_servername();
      servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_symbolexchangedelimiter();
      symbolexchangedelimiter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbolexchangedelimiter_);
    }
    if (cached_has_bits & 0x00000010u) {
      protocolversion_ = from.protocolversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      integer_1_ = from.integer_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      marketdepthupdatesbestbidandask_ = from.marketdepthupdatesbestbidandask_;
    }
    if (cached_has_bits & 0x00000080u) {
      tradingissupported_ = from.tradingissupported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ocoorderssupported_ = from.ocoorderssupported_;
    }
    if (cached_has_bits & 0x00000200u) {
      ordercancelreplacesupported_ = from.ordercancelreplacesupported_;
    }
    if (cached_has_bits & 0x00000400u) {
      securitydefinitionssupported_ = from.securitydefinitionssupported_;
    }
    if (cached_has_bits & 0x00000800u) {
      historicalpricedatasupported_ = from.historicalpricedatasupported_;
    }
    if (cached_has_bits & 0x00001000u) {
      resubscribewhenmarketdatafeedavailable_ = from.resubscribewhenmarketdatafeedavailable_;
    }
    if (cached_has_bits & 0x00002000u) {
      marketdepthissupported_ = from.marketdepthissupported_;
    }
    if (cached_has_bits & 0x00004000u) {
      onehistoricalpricedatarequestperconnection_ = from.onehistoricalpricedatarequestperconnection_;
    }
    if (cached_has_bits & 0x00008000u) {
      bracketorderssupported_ = from.bracketorderssupported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      useintegerpriceordermessages_ = from.useintegerpriceordermessages_;
    }
    if (cached_has_bits & 0x00020000u) {
      usesmultiplepositionspersymbolandtradeaccount_ = from.usesmultiplepositionspersymbolandtradeaccount_;
    }
    if (cached_has_bits & 0x00040000u) {
      marketdatasupported_ = from.marketdatasupported_;
    }
    if (cached_has_bits & 0x00080000u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.LogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogonResponse::CopyFrom(const LogonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.LogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogonResponse::IsInitialized() const {
  return true;
}

void LogonResponse::Swap(LogonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogonResponse::InternalSwap(LogonResponse* other) {
  using std::swap;
  resulttext_.Swap(&other->resulttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reconnectaddress_.Swap(&other->reconnectaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbolexchangedelimiter_.Swap(&other->symbolexchangedelimiter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocolversion_, other->protocolversion_);
  swap(integer_1_, other->integer_1_);
  swap(marketdepthupdatesbestbidandask_, other->marketdepthupdatesbestbidandask_);
  swap(tradingissupported_, other->tradingissupported_);
  swap(ocoorderssupported_, other->ocoorderssupported_);
  swap(ordercancelreplacesupported_, other->ordercancelreplacesupported_);
  swap(securitydefinitionssupported_, other->securitydefinitionssupported_);
  swap(historicalpricedatasupported_, other->historicalpricedatasupported_);
  swap(resubscribewhenmarketdatafeedavailable_, other->resubscribewhenmarketdatafeedavailable_);
  swap(marketdepthissupported_, other->marketdepthissupported_);
  swap(onehistoricalpricedatarequestperconnection_, other->onehistoricalpricedatarequestperconnection_);
  swap(bracketorderssupported_, other->bracketorderssupported_);
  swap(useintegerpriceordermessages_, other->useintegerpriceordermessages_);
  swap(usesmultiplepositionspersymbolandtradeaccount_, other->usesmultiplepositionspersymbolandtradeaccount_);
  swap(marketdatasupported_, other->marketdatasupported_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogonResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Logoff::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logoff::kReasonFieldNumber;
const int Logoff::kDoNotReconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logoff::Logoff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_Logoff.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.Logoff)
}
Logoff::Logoff(const Logoff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  donotreconnect_ = from.donotreconnect_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.Logoff)
}

void Logoff::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  donotreconnect_ = 0u;
}

Logoff::~Logoff() {
  // @@protoc_insertion_point(destructor:DTC_PB.Logoff)
  SharedDtor();
}

void Logoff::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Logoff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Logoff::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Logoff& Logoff::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_Logoff.base);
  return *internal_default_instance();
}


void Logoff::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.Logoff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  donotreconnect_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Logoff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.Logoff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.Logoff.Reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DoNotReconnect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_donotreconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donotreconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.Logoff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.Logoff)
  return false;
#undef DO_
}

void Logoff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.Logoff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.Logoff.Reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  // optional uint32 DoNotReconnect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->donotreconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.Logoff)
}

::google::protobuf::uint8* Logoff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.Logoff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.Logoff.Reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  // optional uint32 DoNotReconnect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->donotreconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.Logoff)
  return target;
}

size_t Logoff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.Logoff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional uint32 DoNotReconnect = 2;
    if (has_donotreconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donotreconnect());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logoff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.Logoff)
  GOOGLE_DCHECK_NE(&from, this);
  const Logoff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logoff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.Logoff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.Logoff)
    MergeFrom(*source);
  }
}

void Logoff::MergeFrom(const Logoff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.Logoff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      donotreconnect_ = from.donotreconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Logoff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.Logoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logoff::CopyFrom(const Logoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.Logoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logoff::IsInitialized() const {
  return true;
}

void Logoff::Swap(Logoff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logoff::InternalSwap(Logoff* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(donotreconnect_, other->donotreconnect_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Logoff::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Heartbeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kNumDroppedMessagesFieldNumber;
const int Heartbeat::kCurrentDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_Heartbeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentdatetime_, &from.currentdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&numdroppedmessages_) -
    reinterpret_cast<char*>(&currentdatetime_)) + sizeof(numdroppedmessages_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.Heartbeat)
}

void Heartbeat::SharedCtor() {
  ::memset(&currentdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numdroppedmessages_) -
      reinterpret_cast<char*>(&currentdatetime_)) + sizeof(numdroppedmessages_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:DTC_PB.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
}

void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Heartbeat& Heartbeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_Heartbeat.base);
  return *internal_default_instance();
}


void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&currentdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numdroppedmessages_) -
        reinterpret_cast<char*>(&currentdatetime_)) + sizeof(numdroppedmessages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.Heartbeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NumDroppedMessages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_numdroppedmessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numdroppedmessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 CurrentDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_currentdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &currentdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 NumDroppedMessages = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numdroppedmessages(), output);
  }

  // optional sfixed64 CurrentDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->currentdatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 NumDroppedMessages = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numdroppedmessages(), target);
  }

  // optional sfixed64 CurrentDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->currentdatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.Heartbeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sfixed64 CurrentDateTime = 2;
    if (has_currentdatetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 NumDroppedMessages = 1;
    if (has_numdroppedmessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numdroppedmessages());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      currentdatetime_ = from.currentdatetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      numdroppedmessages_ = from.numdroppedmessages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  swap(currentdatetime_, other->currentdatetime_);
  swap(numdroppedmessages_, other->numdroppedmessages_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataFeedStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataFeedStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataFeedStatus::MarketDataFeedStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataFeedStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataFeedStatus)
}
MarketDataFeedStatus::MarketDataFeedStatus(const MarketDataFeedStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataFeedStatus)
}

void MarketDataFeedStatus::SharedCtor() {
  status_ = 1;
}

MarketDataFeedStatus::~MarketDataFeedStatus() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataFeedStatus)
  SharedDtor();
}

void MarketDataFeedStatus::SharedDtor() {
}

void MarketDataFeedStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataFeedStatus::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataFeedStatus& MarketDataFeedStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataFeedStatus.base);
  return *internal_default_instance();
}


void MarketDataFeedStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataFeedStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataFeedStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataFeedStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDataFeedStatusEnum_IsValid(value)) {
            set_status(static_cast< ::DTC_PB::MarketDataFeedStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataFeedStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataFeedStatus)
  return false;
#undef DO_
}

void MarketDataFeedStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataFeedStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataFeedStatus)
}

::google::protobuf::uint8* MarketDataFeedStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataFeedStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataFeedStatus)
  return target;
}

size_t MarketDataFeedStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataFeedStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataFeedStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataFeedStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataFeedStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataFeedStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataFeedStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataFeedStatus)
    MergeFrom(*source);
  }
}

void MarketDataFeedStatus::MergeFrom(const MarketDataFeedStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataFeedStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void MarketDataFeedStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataFeedStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataFeedStatus::CopyFrom(const MarketDataFeedStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataFeedStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataFeedStatus::IsInitialized() const {
  return true;
}

void MarketDataFeedStatus::Swap(MarketDataFeedStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataFeedStatus::InternalSwap(MarketDataFeedStatus* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataFeedStatus::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataFeedSymbolStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataFeedSymbolStatus::kSymbolIDFieldNumber;
const int MarketDataFeedSymbolStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataFeedSymbolStatus::MarketDataFeedSymbolStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataFeedSymbolStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataFeedSymbolStatus)
}
MarketDataFeedSymbolStatus::MarketDataFeedSymbolStatus(const MarketDataFeedSymbolStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataFeedSymbolStatus)
}

void MarketDataFeedSymbolStatus::SharedCtor() {
  symbolid_ = 0u;
  status_ = 1;
}

MarketDataFeedSymbolStatus::~MarketDataFeedSymbolStatus() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataFeedSymbolStatus)
  SharedDtor();
}

void MarketDataFeedSymbolStatus::SharedDtor() {
}

void MarketDataFeedSymbolStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataFeedSymbolStatus::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataFeedSymbolStatus& MarketDataFeedSymbolStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataFeedSymbolStatus.base);
  return *internal_default_instance();
}


void MarketDataFeedSymbolStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataFeedSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    symbolid_ = 0u;
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataFeedSymbolStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataFeedSymbolStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDataFeedStatusEnum_IsValid(value)) {
            set_status(static_cast< ::DTC_PB::MarketDataFeedStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataFeedSymbolStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataFeedSymbolStatus)
  return false;
#undef DO_
}

void MarketDataFeedSymbolStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataFeedSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataFeedSymbolStatus)
}

::google::protobuf::uint8* MarketDataFeedSymbolStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataFeedSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataFeedSymbolStatus)
  return target;
}

size_t MarketDataFeedSymbolStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataFeedSymbolStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.MarketDataFeedStatusEnum Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataFeedSymbolStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataFeedSymbolStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataFeedSymbolStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataFeedSymbolStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataFeedSymbolStatus)
    MergeFrom(*source);
  }
}

void MarketDataFeedSymbolStatus::MergeFrom(const MarketDataFeedSymbolStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataFeedSymbolStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataFeedSymbolStatus::CopyFrom(const MarketDataFeedSymbolStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataFeedSymbolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataFeedSymbolStatus::IsInitialized() const {
  return true;
}

void MarketDataFeedSymbolStatus::Swap(MarketDataFeedSymbolStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataFeedSymbolStatus::InternalSwap(MarketDataFeedSymbolStatus* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataFeedSymbolStatus::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradingSymbolStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradingSymbolStatus::kSymbolIDFieldNumber;
const int TradingSymbolStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradingSymbolStatus::TradingSymbolStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_TradingSymbolStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.TradingSymbolStatus)
}
TradingSymbolStatus::TradingSymbolStatus(const TradingSymbolStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.TradingSymbolStatus)
}

void TradingSymbolStatus::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(status_));
}

TradingSymbolStatus::~TradingSymbolStatus() {
  // @@protoc_insertion_point(destructor:DTC_PB.TradingSymbolStatus)
  SharedDtor();
}

void TradingSymbolStatus::SharedDtor() {
}

void TradingSymbolStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradingSymbolStatus::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradingSymbolStatus& TradingSymbolStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_TradingSymbolStatus.base);
  return *internal_default_instance();
}


void TradingSymbolStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.TradingSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradingSymbolStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.TradingSymbolStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TradingStatusEnum Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TradingStatusEnum_IsValid(value)) {
            set_status(static_cast< ::DTC_PB::TradingStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.TradingSymbolStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.TradingSymbolStatus)
  return false;
#undef DO_
}

void TradingSymbolStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.TradingSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.TradingStatusEnum Status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.TradingSymbolStatus)
}

::google::protobuf::uint8* TradingSymbolStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.TradingSymbolStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.TradingStatusEnum Status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.TradingSymbolStatus)
  return target;
}

size_t TradingSymbolStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.TradingSymbolStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.TradingStatusEnum Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingSymbolStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.TradingSymbolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingSymbolStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradingSymbolStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.TradingSymbolStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.TradingSymbolStatus)
    MergeFrom(*source);
  }
}

void TradingSymbolStatus::MergeFrom(const TradingSymbolStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.TradingSymbolStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradingSymbolStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.TradingSymbolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingSymbolStatus::CopyFrom(const TradingSymbolStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.TradingSymbolStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSymbolStatus::IsInitialized() const {
  return true;
}

void TradingSymbolStatus::Swap(TradingSymbolStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradingSymbolStatus::InternalSwap(TradingSymbolStatus* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradingSymbolStatus::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataRequest::kRequestActionFieldNumber;
const int MarketDataRequest::kSymbolIDFieldNumber;
const int MarketDataRequest::kSymbolFieldNumber;
const int MarketDataRequest::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataRequest::MarketDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataRequest)
}
MarketDataRequest::MarketDataRequest(const MarketDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestaction_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(requestaction_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataRequest)
}

void MarketDataRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolid_ = 0u;
  requestaction_ = 1;
}

MarketDataRequest::~MarketDataRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataRequest)
  SharedDtor();
}

void MarketDataRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataRequest& MarketDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataRequest.base);
  return *internal_default_instance();
}


void MarketDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    symbolid_ = 0u;
    requestaction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DTC_PB.RequestActionEnum RequestAction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::RequestActionEnum_IsValid(value)) {
            set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SymbolID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.MarketDataRequest.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.MarketDataRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataRequest)
  return false;
#undef DO_
}

void MarketDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requestaction(), output);
  }

  // optional uint32 SymbolID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->symbolid(), output);
  }

  // optional string Symbol = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDataRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // optional string Exchange = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDataRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataRequest)
}

::google::protobuf::uint8* MarketDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requestaction(), target);
  }

  // optional uint32 SymbolID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->symbolid(), target);
  }

  // optional string Symbol = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDataRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // optional string Exchange = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDataRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataRequest)
  return target;
}

size_t MarketDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string Symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 4;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional uint32 SymbolID = 2;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.RequestActionEnum RequestAction = 1;
    if (has_requestaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataRequest)
    MergeFrom(*source);
  }
}

void MarketDataRequest::MergeFrom(const MarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      requestaction_ = from.requestaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataRequest::CopyFrom(const MarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataRequest::IsInitialized() const {
  return true;
}

void MarketDataRequest::Swap(MarketDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataRequest::InternalSwap(MarketDataRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(requestaction_, other->requestaction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthRequest::kRequestActionFieldNumber;
const int MarketDepthRequest::kSymbolIDFieldNumber;
const int MarketDepthRequest::kSymbolFieldNumber;
const int MarketDepthRequest::kExchangeFieldNumber;
const int MarketDepthRequest::kNumLevelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthRequest::MarketDepthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthRequest)
}
MarketDepthRequest::MarketDepthRequest(const MarketDepthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestaction_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(requestaction_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthRequest)
}

void MarketDepthRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numlevels_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numlevels_));
  requestaction_ = 1;
}

MarketDepthRequest::~MarketDepthRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthRequest)
  SharedDtor();
}

void MarketDepthRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthRequest& MarketDepthRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthRequest.base);
  return *internal_default_instance();
}


void MarketDepthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numlevels_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(numlevels_));
    requestaction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DTC_PB.RequestActionEnum RequestAction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::RequestActionEnum_IsValid(value)) {
            set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SymbolID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.MarketDepthRequest.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.MarketDepthRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NumLevels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_numlevels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlevels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthRequest)
  return false;
#undef DO_
}

void MarketDepthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requestaction(), output);
  }

  // optional uint32 SymbolID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->symbolid(), output);
  }

  // optional string Symbol = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // optional string Exchange = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchange(), output);
  }

  // optional int32 NumLevels = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numlevels(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthRequest)
}

::google::protobuf::uint8* MarketDepthRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DTC_PB.RequestActionEnum RequestAction = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requestaction(), target);
  }

  // optional uint32 SymbolID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->symbolid(), target);
  }

  // optional string Symbol = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // optional string Exchange = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDepthRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchange(), target);
  }

  // optional int32 NumLevels = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numlevels(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthRequest)
  return target;
}

size_t MarketDepthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string Symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 4;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional uint32 SymbolID = 2;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 NumLevels = 5;
    if (has_numlevels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlevels());
    }

    // optional .DTC_PB.RequestActionEnum RequestAction = 1;
    if (has_requestaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthRequest)
    MergeFrom(*source);
  }
}

void MarketDepthRequest::MergeFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      numlevels_ = from.numlevels_;
    }
    if (cached_has_bits & 0x00000010u) {
      requestaction_ = from.requestaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDepthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthRequest::CopyFrom(const MarketDepthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthRequest::IsInitialized() const {
  return true;
}

void MarketDepthRequest::Swap(MarketDepthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthRequest::InternalSwap(MarketDepthRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(numlevels_, other->numlevels_);
  swap(requestaction_, other->requestaction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataReject::kSymbolIDFieldNumber;
const int MarketDataReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataReject::MarketDataReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataReject)
}
MarketDataReject::MarketDataReject(const MarketDataReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataReject)
}

void MarketDataReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolid_ = 0u;
}

MarketDataReject::~MarketDataReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataReject)
  SharedDtor();
}

void MarketDataReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDataReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataReject& MarketDataReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataReject.base);
  return *internal_default_instance();
}


void MarketDataReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  symbolid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.MarketDataReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataReject)
  return false;
#undef DO_
}

void MarketDataReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDataReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataReject)
}

::google::protobuf::uint8* MarketDataReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDataReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataReject)
  return target;
}

size_t MarketDataReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataReject)
    MergeFrom(*source);
  }
}

void MarketDataReject::MergeFrom(const MarketDataReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataReject::CopyFrom(const MarketDataReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataReject::IsInitialized() const {
  return true;
}

void MarketDataReject::Swap(MarketDataReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataReject::InternalSwap(MarketDataReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataSnapshot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSnapshot::kSymbolIDFieldNumber;
const int MarketDataSnapshot::kSessionSettlementPriceFieldNumber;
const int MarketDataSnapshot::kSessionOpenPriceFieldNumber;
const int MarketDataSnapshot::kSessionHighPriceFieldNumber;
const int MarketDataSnapshot::kSessionLowPriceFieldNumber;
const int MarketDataSnapshot::kSessionVolumeFieldNumber;
const int MarketDataSnapshot::kSessionNumTradesFieldNumber;
const int MarketDataSnapshot::kOpenInterestFieldNumber;
const int MarketDataSnapshot::kBidPriceFieldNumber;
const int MarketDataSnapshot::kAskPriceFieldNumber;
const int MarketDataSnapshot::kAskQuantityFieldNumber;
const int MarketDataSnapshot::kBidQuantityFieldNumber;
const int MarketDataSnapshot::kLastTradePriceFieldNumber;
const int MarketDataSnapshot::kLastTradeVolumeFieldNumber;
const int MarketDataSnapshot::kLastTradeDateTimeFieldNumber;
const int MarketDataSnapshot::kBidAskDateTimeFieldNumber;
const int MarketDataSnapshot::kSessionSettlementDateTimeFieldNumber;
const int MarketDataSnapshot::kTradingSessionDateFieldNumber;
const int MarketDataSnapshot::kTradingStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSnapshot::MarketDataSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataSnapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataSnapshot)
}
MarketDataSnapshot::MarketDataSnapshot(const MarketDataSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionsettlementprice_, &from.sessionsettlementprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingstatus_) -
    reinterpret_cast<char*>(&sessionsettlementprice_)) + sizeof(tradingstatus_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataSnapshot)
}

void MarketDataSnapshot::SharedCtor() {
  ::memset(&sessionsettlementprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingstatus_) -
      reinterpret_cast<char*>(&sessionsettlementprice_)) + sizeof(tradingstatus_));
}

MarketDataSnapshot::~MarketDataSnapshot() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataSnapshot)
  SharedDtor();
}

void MarketDataSnapshot::SharedDtor() {
}

void MarketDataSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataSnapshot::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataSnapshot& MarketDataSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataSnapshot.base);
  return *internal_default_instance();
}


void MarketDataSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&sessionsettlementprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bidprice_) -
        reinterpret_cast<char*>(&sessionsettlementprice_)) + sizeof(bidprice_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&askprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lasttradedatetime_) -
        reinterpret_cast<char*>(&askprice_)) + sizeof(lasttradedatetime_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&bidaskdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingstatus_) -
        reinterpret_cast<char*>(&bidaskdatetime_)) + sizeof(tradingstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double SessionSettlementPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_sessionsettlementprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionsettlementprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double SessionOpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_sessionopenprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionopenprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double SessionHighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_sessionhighprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionhighprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double SessionLowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_sessionlowprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionlowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double SessionVolume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_sessionvolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sessionvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionNumTrades = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sessionnumtrades();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionnumtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OpenInterest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_openinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BidPrice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_bidprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double AskPrice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_askprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double AskQuantity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_askquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BidQuantity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_bidquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastTradePrice = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_lasttradeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastTradeVolume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_lasttradevolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastTradeDateTime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_lasttradedatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BidAskDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_bidaskdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidaskdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionSettlementDateTime = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_sessionsettlementdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionsettlementdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TradingStatusEnum_IsValid(value)) {
            set_tradingstatus(static_cast< ::DTC_PB::TradingStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataSnapshot)
  return false;
#undef DO_
}

void MarketDataSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double SessionSettlementPrice = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sessionsettlementprice(), output);
  }

  // optional double SessionOpenPrice = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sessionopenprice(), output);
  }

  // optional double SessionHighPrice = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sessionhighprice(), output);
  }

  // optional double SessionLowPrice = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sessionlowprice(), output);
  }

  // optional double SessionVolume = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sessionvolume(), output);
  }

  // optional uint32 SessionNumTrades = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionnumtrades(), output);
  }

  // optional uint32 OpenInterest = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->openinterest(), output);
  }

  // optional double BidPrice = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidprice(), output);
  }

  // optional double AskPrice = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askprice(), output);
  }

  // optional double AskQuantity = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->askquantity(), output);
  }

  // optional double BidQuantity = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->bidquantity(), output);
  }

  // optional double LastTradePrice = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lasttradeprice(), output);
  }

  // optional double LastTradeVolume = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->lasttradevolume(), output);
  }

  // optional double LastTradeDateTime = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lasttradedatetime(), output);
  }

  // optional double BidAskDateTime = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidaskdatetime(), output);
  }

  // optional uint32 SessionSettlementDateTime = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sessionsettlementdatetime(), output);
  }

  // optional uint32 TradingSessionDate = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tradingsessiondate(), output);
  }

  // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->tradingstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataSnapshot)
}

::google::protobuf::uint8* MarketDataSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double SessionSettlementPrice = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sessionsettlementprice(), target);
  }

  // optional double SessionOpenPrice = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sessionopenprice(), target);
  }

  // optional double SessionHighPrice = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sessionhighprice(), target);
  }

  // optional double SessionLowPrice = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sessionlowprice(), target);
  }

  // optional double SessionVolume = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sessionvolume(), target);
  }

  // optional uint32 SessionNumTrades = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionnumtrades(), target);
  }

  // optional uint32 OpenInterest = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->openinterest(), target);
  }

  // optional double BidPrice = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidprice(), target);
  }

  // optional double AskPrice = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askprice(), target);
  }

  // optional double AskQuantity = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->askquantity(), target);
  }

  // optional double BidQuantity = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->bidquantity(), target);
  }

  // optional double LastTradePrice = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lasttradeprice(), target);
  }

  // optional double LastTradeVolume = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->lasttradevolume(), target);
  }

  // optional double LastTradeDateTime = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lasttradedatetime(), target);
  }

  // optional double BidAskDateTime = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidaskdatetime(), target);
  }

  // optional uint32 SessionSettlementDateTime = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sessionsettlementdatetime(), target);
  }

  // optional uint32 TradingSessionDate = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tradingsessiondate(), target);
  }

  // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->tradingstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataSnapshot)
  return target;
}

size_t MarketDataSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double SessionSettlementPrice = 2;
    if (has_sessionsettlementprice()) {
      total_size += 1 + 8;
    }

    // optional double SessionOpenPrice = 3;
    if (has_sessionopenprice()) {
      total_size += 1 + 8;
    }

    // optional double SessionHighPrice = 4;
    if (has_sessionhighprice()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 SessionNumTrades = 7;
    if (has_sessionnumtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionnumtrades());
    }

    // optional double SessionLowPrice = 5;
    if (has_sessionlowprice()) {
      total_size += 1 + 8;
    }

    // optional double SessionVolume = 6;
    if (has_sessionvolume()) {
      total_size += 1 + 8;
    }

    // optional double BidPrice = 9;
    if (has_bidprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double AskPrice = 10;
    if (has_askprice()) {
      total_size += 1 + 8;
    }

    // optional double AskQuantity = 11;
    if (has_askquantity()) {
      total_size += 1 + 8;
    }

    // optional double BidQuantity = 12;
    if (has_bidquantity()) {
      total_size += 1 + 8;
    }

    // optional uint32 OpenInterest = 8;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openinterest());
    }

    // optional uint32 SessionSettlementDateTime = 17;
    if (has_sessionsettlementdatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionsettlementdatetime());
    }

    // optional double LastTradePrice = 13;
    if (has_lasttradeprice()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeVolume = 14;
    if (has_lasttradevolume()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeDateTime = 15;
    if (has_lasttradedatetime()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional double BidAskDateTime = 16;
    if (has_bidaskdatetime()) {
      total_size += 2 + 8;
    }

    // optional uint32 TradingSessionDate = 18;
    if (has_tradingsessiondate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

    // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
    if (has_tradingstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tradingstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataSnapshot)
    MergeFrom(*source);
  }
}

void MarketDataSnapshot::MergeFrom(const MarketDataSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sessionsettlementprice_ = from.sessionsettlementprice_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessionopenprice_ = from.sessionopenprice_;
    }
    if (cached_has_bits & 0x00000004u) {
      sessionhighprice_ = from.sessionhighprice_;
    }
    if (cached_has_bits & 0x00000008u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000010u) {
      sessionnumtrades_ = from.sessionnumtrades_;
    }
    if (cached_has_bits & 0x00000020u) {
      sessionlowprice_ = from.sessionlowprice_;
    }
    if (cached_has_bits & 0x00000040u) {
      sessionvolume_ = from.sessionvolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      bidprice_ = from.bidprice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      askprice_ = from.askprice_;
    }
    if (cached_has_bits & 0x00000200u) {
      askquantity_ = from.askquantity_;
    }
    if (cached_has_bits & 0x00000400u) {
      bidquantity_ = from.bidquantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      openinterest_ = from.openinterest_;
    }
    if (cached_has_bits & 0x00001000u) {
      sessionsettlementdatetime_ = from.sessionsettlementdatetime_;
    }
    if (cached_has_bits & 0x00002000u) {
      lasttradeprice_ = from.lasttradeprice_;
    }
    if (cached_has_bits & 0x00004000u) {
      lasttradevolume_ = from.lasttradevolume_;
    }
    if (cached_has_bits & 0x00008000u) {
      lasttradedatetime_ = from.lasttradedatetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      bidaskdatetime_ = from.bidaskdatetime_;
    }
    if (cached_has_bits & 0x00020000u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    if (cached_has_bits & 0x00040000u) {
      tradingstatus_ = from.tradingstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSnapshot::CopyFrom(const MarketDataSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSnapshot::IsInitialized() const {
  return true;
}

void MarketDataSnapshot::Swap(MarketDataSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSnapshot::InternalSwap(MarketDataSnapshot* other) {
  using std::swap;
  swap(sessionsettlementprice_, other->sessionsettlementprice_);
  swap(sessionopenprice_, other->sessionopenprice_);
  swap(sessionhighprice_, other->sessionhighprice_);
  swap(symbolid_, other->symbolid_);
  swap(sessionnumtrades_, other->sessionnumtrades_);
  swap(sessionlowprice_, other->sessionlowprice_);
  swap(sessionvolume_, other->sessionvolume_);
  swap(bidprice_, other->bidprice_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(bidquantity_, other->bidquantity_);
  swap(openinterest_, other->openinterest_);
  swap(sessionsettlementdatetime_, other->sessionsettlementdatetime_);
  swap(lasttradeprice_, other->lasttradeprice_);
  swap(lasttradevolume_, other->lasttradevolume_);
  swap(lasttradedatetime_, other->lasttradedatetime_);
  swap(bidaskdatetime_, other->bidaskdatetime_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(tradingstatus_, other->tradingstatus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataSnapshot::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataSnapshot_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSnapshot_Int::kSymbolIDFieldNumber;
const int MarketDataSnapshot_Int::kSessionSettlementPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionOpenPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionHighPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionLowPriceFieldNumber;
const int MarketDataSnapshot_Int::kSessionVolumeFieldNumber;
const int MarketDataSnapshot_Int::kSessionNumTradesFieldNumber;
const int MarketDataSnapshot_Int::kOpenInterestFieldNumber;
const int MarketDataSnapshot_Int::kBidPriceFieldNumber;
const int MarketDataSnapshot_Int::kAskPriceFieldNumber;
const int MarketDataSnapshot_Int::kAskQuantityFieldNumber;
const int MarketDataSnapshot_Int::kBidQuantityFieldNumber;
const int MarketDataSnapshot_Int::kLastTradePriceFieldNumber;
const int MarketDataSnapshot_Int::kLastTradeVolumeFieldNumber;
const int MarketDataSnapshot_Int::kLastTradeDateTimeFieldNumber;
const int MarketDataSnapshot_Int::kBidAskDateTimeFieldNumber;
const int MarketDataSnapshot_Int::kSessionSettlementDateTimeFieldNumber;
const int MarketDataSnapshot_Int::kTradingSessionDateFieldNumber;
const int MarketDataSnapshot_Int::kTradingStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSnapshot_Int::MarketDataSnapshot_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataSnapshot_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataSnapshot_Int)
}
MarketDataSnapshot_Int::MarketDataSnapshot_Int(const MarketDataSnapshot_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingstatus_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingstatus_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataSnapshot_Int)
}

void MarketDataSnapshot_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingstatus_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingstatus_));
}

MarketDataSnapshot_Int::~MarketDataSnapshot_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataSnapshot_Int)
  SharedDtor();
}

void MarketDataSnapshot_Int::SharedDtor() {
}

void MarketDataSnapshot_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataSnapshot_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataSnapshot_Int& MarketDataSnapshot_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataSnapshot_Int.base);
  return *internal_default_instance();
}


void MarketDataSnapshot_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataSnapshot_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&openinterest_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(openinterest_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&bidprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bidaskdatetime_) -
        reinterpret_cast<char*>(&bidprice_)) + sizeof(bidaskdatetime_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&sessionsettlementdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingstatus_) -
        reinterpret_cast<char*>(&sessionsettlementdatetime_)) + sizeof(tradingstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataSnapshot_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataSnapshot_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SessionSettlementPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sessionsettlementprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionsettlementprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SessionOpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sessionopenprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionopenprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SessionHighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sessionhighprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionhighprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SessionLowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sessionlowprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionlowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SessionVolume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sessionvolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionNumTrades = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sessionnumtrades();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionnumtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OpenInterest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_openinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 BidPrice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_bidprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AskPrice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_askprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AskQuantity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_askquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 BidQuantity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_bidquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LastTradePrice = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_lasttradeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttradeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LastTradeVolume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_lasttradevolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttradevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastTradeDateTime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_lasttradedatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BidAskDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_bidaskdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidaskdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SessionSettlementDateTime = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_sessionsettlementdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionsettlementdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TradingStatusEnum_IsValid(value)) {
            set_tradingstatus(static_cast< ::DTC_PB::TradingStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataSnapshot_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataSnapshot_Int)
  return false;
#undef DO_
}

void MarketDataSnapshot_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataSnapshot_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 SessionSettlementPrice = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionsettlementprice(), output);
  }

  // optional int32 SessionOpenPrice = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionopenprice(), output);
  }

  // optional int32 SessionHighPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionhighprice(), output);
  }

  // optional int32 SessionLowPrice = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sessionlowprice(), output);
  }

  // optional int32 SessionVolume = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sessionvolume(), output);
  }

  // optional uint32 SessionNumTrades = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sessionnumtrades(), output);
  }

  // optional uint32 OpenInterest = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->openinterest(), output);
  }

  // optional int32 BidPrice = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidprice(), output);
  }

  // optional int32 AskPrice = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->askprice(), output);
  }

  // optional int32 AskQuantity = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->askquantity(), output);
  }

  // optional int32 BidQuantity = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bidquantity(), output);
  }

  // optional int32 LastTradePrice = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lasttradeprice(), output);
  }

  // optional int32 LastTradeVolume = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lasttradevolume(), output);
  }

  // optional double LastTradeDateTime = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lasttradedatetime(), output);
  }

  // optional double BidAskDateTime = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bidaskdatetime(), output);
  }

  // optional uint32 SessionSettlementDateTime = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sessionsettlementdatetime(), output);
  }

  // optional uint32 TradingSessionDate = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tradingsessiondate(), output);
  }

  // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->tradingstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataSnapshot_Int)
}

::google::protobuf::uint8* MarketDataSnapshot_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataSnapshot_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 SessionSettlementPrice = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sessionsettlementprice(), target);
  }

  // optional int32 SessionOpenPrice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sessionopenprice(), target);
  }

  // optional int32 SessionHighPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionhighprice(), target);
  }

  // optional int32 SessionLowPrice = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sessionlowprice(), target);
  }

  // optional int32 SessionVolume = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sessionvolume(), target);
  }

  // optional uint32 SessionNumTrades = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sessionnumtrades(), target);
  }

  // optional uint32 OpenInterest = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->openinterest(), target);
  }

  // optional int32 BidPrice = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidprice(), target);
  }

  // optional int32 AskPrice = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->askprice(), target);
  }

  // optional int32 AskQuantity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->askquantity(), target);
  }

  // optional int32 BidQuantity = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bidquantity(), target);
  }

  // optional int32 LastTradePrice = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lasttradeprice(), target);
  }

  // optional int32 LastTradeVolume = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lasttradevolume(), target);
  }

  // optional double LastTradeDateTime = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lasttradedatetime(), target);
  }

  // optional double BidAskDateTime = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bidaskdatetime(), target);
  }

  // optional uint32 SessionSettlementDateTime = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sessionsettlementdatetime(), target);
  }

  // optional uint32 TradingSessionDate = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tradingsessiondate(), target);
  }

  // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->tradingstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataSnapshot_Int)
  return target;
}

size_t MarketDataSnapshot_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataSnapshot_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 SessionSettlementPrice = 2;
    if (has_sessionsettlementprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionsettlementprice());
    }

    // optional int32 SessionOpenPrice = 3;
    if (has_sessionopenprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionopenprice());
    }

    // optional int32 SessionHighPrice = 4;
    if (has_sessionhighprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionhighprice());
    }

    // optional int32 SessionLowPrice = 5;
    if (has_sessionlowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionlowprice());
    }

    // optional int32 SessionVolume = 6;
    if (has_sessionvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionvolume());
    }

    // optional uint32 SessionNumTrades = 7;
    if (has_sessionnumtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionnumtrades());
    }

    // optional uint32 OpenInterest = 8;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openinterest());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 BidPrice = 9;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidprice());
    }

    // optional int32 AskPrice = 10;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askprice());
    }

    // optional int32 AskQuantity = 11;
    if (has_askquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askquantity());
    }

    // optional int32 BidQuantity = 12;
    if (has_bidquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidquantity());
    }

    // optional int32 LastTradePrice = 13;
    if (has_lasttradeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttradeprice());
    }

    // optional int32 LastTradeVolume = 14;
    if (has_lasttradevolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttradevolume());
    }

    // optional double LastTradeDateTime = 15;
    if (has_lasttradedatetime()) {
      total_size += 1 + 8;
    }

    // optional double BidAskDateTime = 16;
    if (has_bidaskdatetime()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 SessionSettlementDateTime = 17;
    if (has_sessionsettlementdatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionsettlementdatetime());
    }

    // optional uint32 TradingSessionDate = 18;
    if (has_tradingsessiondate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

    // optional .DTC_PB.TradingStatusEnum TradingStatus = 19;
    if (has_tradingstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tradingstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataSnapshot_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataSnapshot_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataSnapshot_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataSnapshot_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataSnapshot_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataSnapshot_Int)
    MergeFrom(*source);
  }
}

void MarketDataSnapshot_Int::MergeFrom(const MarketDataSnapshot_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataSnapshot_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sessionsettlementprice_ = from.sessionsettlementprice_;
    }
    if (cached_has_bits & 0x00000004u) {
      sessionopenprice_ = from.sessionopenprice_;
    }
    if (cached_has_bits & 0x00000008u) {
      sessionhighprice_ = from.sessionhighprice_;
    }
    if (cached_has_bits & 0x00000010u) {
      sessionlowprice_ = from.sessionlowprice_;
    }
    if (cached_has_bits & 0x00000020u) {
      sessionvolume_ = from.sessionvolume_;
    }
    if (cached_has_bits & 0x00000040u) {
      sessionnumtrades_ = from.sessionnumtrades_;
    }
    if (cached_has_bits & 0x00000080u) {
      openinterest_ = from.openinterest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bidprice_ = from.bidprice_;
    }
    if (cached_has_bits & 0x00000200u) {
      askprice_ = from.askprice_;
    }
    if (cached_has_bits & 0x00000400u) {
      askquantity_ = from.askquantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      bidquantity_ = from.bidquantity_;
    }
    if (cached_has_bits & 0x00001000u) {
      lasttradeprice_ = from.lasttradeprice_;
    }
    if (cached_has_bits & 0x00002000u) {
      lasttradevolume_ = from.lasttradevolume_;
    }
    if (cached_has_bits & 0x00004000u) {
      lasttradedatetime_ = from.lasttradedatetime_;
    }
    if (cached_has_bits & 0x00008000u) {
      bidaskdatetime_ = from.bidaskdatetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      sessionsettlementdatetime_ = from.sessionsettlementdatetime_;
    }
    if (cached_has_bits & 0x00020000u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    if (cached_has_bits & 0x00040000u) {
      tradingstatus_ = from.tradingstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataSnapshot_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataSnapshot_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSnapshot_Int::CopyFrom(const MarketDataSnapshot_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataSnapshot_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataSnapshot_Int::IsInitialized() const {
  return true;
}

void MarketDataSnapshot_Int::Swap(MarketDataSnapshot_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSnapshot_Int::InternalSwap(MarketDataSnapshot_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(sessionsettlementprice_, other->sessionsettlementprice_);
  swap(sessionopenprice_, other->sessionopenprice_);
  swap(sessionhighprice_, other->sessionhighprice_);
  swap(sessionlowprice_, other->sessionlowprice_);
  swap(sessionvolume_, other->sessionvolume_);
  swap(sessionnumtrades_, other->sessionnumtrades_);
  swap(openinterest_, other->openinterest_);
  swap(bidprice_, other->bidprice_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(bidquantity_, other->bidquantity_);
  swap(lasttradeprice_, other->lasttradeprice_);
  swap(lasttradevolume_, other->lasttradevolume_);
  swap(lasttradedatetime_, other->lasttradedatetime_);
  swap(bidaskdatetime_, other->bidaskdatetime_);
  swap(sessionsettlementdatetime_, other->sessionsettlementdatetime_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(tradingstatus_, other->tradingstatus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataSnapshot_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DepthEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthEntry::kPriceFieldNumber;
const int DepthEntry::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthEntry::DepthEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_DepthEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.DepthEntry)
}
DepthEntry::DepthEntry(const DepthEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.DepthEntry)
}

void DepthEntry::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
}

DepthEntry::~DepthEntry() {
  // @@protoc_insertion_point(destructor:DTC_PB.DepthEntry)
  SharedDtor();
}

void DepthEntry::SharedDtor() {
}

void DepthEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DepthEntry::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthEntry& DepthEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_DepthEntry.base);
  return *internal_default_instance();
}


void DepthEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.DepthEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DepthEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.DepthEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Quantity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.DepthEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.DepthEntry)
  return false;
#undef DO_
}

void DepthEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.DepthEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double Price = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // optional float Quantity = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.DepthEntry)
}

::google::protobuf::uint8* DepthEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.DepthEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double Price = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // optional float Quantity = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.DepthEntry)
  return target;
}

size_t DepthEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.DepthEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double Price = 1;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional float Quantity = 12;
    if (has_quantity()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.DepthEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.DepthEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.DepthEntry)
    MergeFrom(*source);
  }
}

void DepthEntry::MergeFrom(const DepthEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.DepthEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DepthEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.DepthEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthEntry::CopyFrom(const DepthEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.DepthEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthEntry::IsInitialized() const {
  return true;
}

void DepthEntry::Swap(DepthEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthEntry::InternalSwap(DepthEntry* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DepthEntry::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthFullUpdate20::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthFullUpdate20::kSymbolIDFieldNumber;
const int MarketDepthFullUpdate20::kBidDepthFieldNumber;
const int MarketDepthFullUpdate20::kAskDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthFullUpdate20::MarketDepthFullUpdate20()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthFullUpdate20.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthFullUpdate20)
}
MarketDepthFullUpdate20::MarketDepthFullUpdate20(const MarketDepthFullUpdate20& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      biddepth_(from.biddepth_),
      askdepth_(from.askdepth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthFullUpdate20)
}

void MarketDepthFullUpdate20::SharedCtor() {
  symbolid_ = 0u;
}

MarketDepthFullUpdate20::~MarketDepthFullUpdate20() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthFullUpdate20)
  SharedDtor();
}

void MarketDepthFullUpdate20::SharedDtor() {
}

void MarketDepthFullUpdate20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthFullUpdate20::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthFullUpdate20& MarketDepthFullUpdate20::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthFullUpdate20.base);
  return *internal_default_instance();
}


void MarketDepthFullUpdate20::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthFullUpdate20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  biddepth_.Clear();
  askdepth_.Clear();
  symbolid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthFullUpdate20::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthFullUpdate20)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry BidDepth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_biddepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry AskDepth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_askdepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthFullUpdate20)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthFullUpdate20)
  return false;
#undef DO_
}

void MarketDepthFullUpdate20::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthFullUpdate20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->biddepth(static_cast<int>(i)),
      output);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->askdepth(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthFullUpdate20)
}

::google::protobuf::uint8* MarketDepthFullUpdate20::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthFullUpdate20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->biddepth(static_cast<int>(i)), deterministic, target);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->askdepth(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthFullUpdate20)
  return target;
}

size_t MarketDepthFullUpdate20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthFullUpdate20)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->biddepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->biddepth(static_cast<int>(i)));
    }
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->askdepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->askdepth(static_cast<int>(i)));
    }
  }

  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthFullUpdate20::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthFullUpdate20)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthFullUpdate20* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthFullUpdate20>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthFullUpdate20)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthFullUpdate20)
    MergeFrom(*source);
  }
}

void MarketDepthFullUpdate20::MergeFrom(const MarketDepthFullUpdate20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthFullUpdate20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  biddepth_.MergeFrom(from.biddepth_);
  askdepth_.MergeFrom(from.askdepth_);
  if (from.has_symbolid()) {
    set_symbolid(from.symbolid());
  }
}

void MarketDepthFullUpdate20::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthFullUpdate20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthFullUpdate20::CopyFrom(const MarketDepthFullUpdate20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthFullUpdate20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthFullUpdate20::IsInitialized() const {
  return true;
}

void MarketDepthFullUpdate20::Swap(MarketDepthFullUpdate20* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthFullUpdate20::InternalSwap(MarketDepthFullUpdate20* other) {
  using std::swap;
  CastToBase(&biddepth_)->InternalSwap(CastToBase(&other->biddepth_));
  CastToBase(&askdepth_)->InternalSwap(CastToBase(&other->askdepth_));
  swap(symbolid_, other->symbolid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthFullUpdate20::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthFullUpdate10::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthFullUpdate10::kSymbolIDFieldNumber;
const int MarketDepthFullUpdate10::kBidDepthFieldNumber;
const int MarketDepthFullUpdate10::kAskDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthFullUpdate10::MarketDepthFullUpdate10()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthFullUpdate10.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthFullUpdate10)
}
MarketDepthFullUpdate10::MarketDepthFullUpdate10(const MarketDepthFullUpdate10& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      biddepth_(from.biddepth_),
      askdepth_(from.askdepth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthFullUpdate10)
}

void MarketDepthFullUpdate10::SharedCtor() {
  symbolid_ = 0u;
}

MarketDepthFullUpdate10::~MarketDepthFullUpdate10() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthFullUpdate10)
  SharedDtor();
}

void MarketDepthFullUpdate10::SharedDtor() {
}

void MarketDepthFullUpdate10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthFullUpdate10::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthFullUpdate10& MarketDepthFullUpdate10::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthFullUpdate10.base);
  return *internal_default_instance();
}


void MarketDepthFullUpdate10::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthFullUpdate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  biddepth_.Clear();
  askdepth_.Clear();
  symbolid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthFullUpdate10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthFullUpdate10)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry BidDepth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_biddepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DTC_PB.DepthEntry AskDepth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_askdepth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthFullUpdate10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthFullUpdate10)
  return false;
#undef DO_
}

void MarketDepthFullUpdate10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthFullUpdate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->biddepth(static_cast<int>(i)),
      output);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->askdepth(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthFullUpdate10)
}

::google::protobuf::uint8* MarketDepthFullUpdate10::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthFullUpdate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->biddepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->biddepth(static_cast<int>(i)), deterministic, target);
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->askdepth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->askdepth(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthFullUpdate10)
  return target;
}

size_t MarketDepthFullUpdate10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthFullUpdate10)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .DTC_PB.DepthEntry BidDepth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->biddepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->biddepth(static_cast<int>(i)));
    }
  }

  // repeated .DTC_PB.DepthEntry AskDepth = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->askdepth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->askdepth(static_cast<int>(i)));
    }
  }

  // optional uint32 SymbolID = 1;
  if (has_symbolid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->symbolid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthFullUpdate10::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthFullUpdate10)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthFullUpdate10* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthFullUpdate10>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthFullUpdate10)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthFullUpdate10)
    MergeFrom(*source);
  }
}

void MarketDepthFullUpdate10::MergeFrom(const MarketDepthFullUpdate10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthFullUpdate10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  biddepth_.MergeFrom(from.biddepth_);
  askdepth_.MergeFrom(from.askdepth_);
  if (from.has_symbolid()) {
    set_symbolid(from.symbolid());
  }
}

void MarketDepthFullUpdate10::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthFullUpdate10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthFullUpdate10::CopyFrom(const MarketDepthFullUpdate10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthFullUpdate10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthFullUpdate10::IsInitialized() const {
  return true;
}

void MarketDepthFullUpdate10::Swap(MarketDepthFullUpdate10* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthFullUpdate10::InternalSwap(MarketDepthFullUpdate10* other) {
  using std::swap;
  CastToBase(&biddepth_)->InternalSwap(CastToBase(&other->biddepth_));
  CastToBase(&askdepth_)->InternalSwap(CastToBase(&other->askdepth_));
  swap(symbolid_, other->symbolid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthFullUpdate10::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthSnapshotLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthSnapshotLevel::kSymbolIDFieldNumber;
const int MarketDepthSnapshotLevel::kSideFieldNumber;
const int MarketDepthSnapshotLevel::kPriceFieldNumber;
const int MarketDepthSnapshotLevel::kQuantityFieldNumber;
const int MarketDepthSnapshotLevel::kLevelFieldNumber;
const int MarketDepthSnapshotLevel::kIsFirstMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel::kIsLastMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel::kDateTimeFieldNumber;
const int MarketDepthSnapshotLevel::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthSnapshotLevel::MarketDepthSnapshotLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthSnapshotLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthSnapshotLevel)
}
MarketDepthSnapshotLevel::MarketDepthSnapshotLevel(const MarketDepthSnapshotLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthSnapshotLevel)
}

void MarketDepthSnapshotLevel::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthSnapshotLevel::~MarketDepthSnapshotLevel() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthSnapshotLevel)
  SharedDtor();
}

void MarketDepthSnapshotLevel::SharedDtor() {
}

void MarketDepthSnapshotLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthSnapshotLevel& MarketDepthSnapshotLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthSnapshotLevel.base);
  return *internal_default_instance();
}


void MarketDepthSnapshotLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthSnapshotLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&islastmessageinbatch_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(islastmessageinbatch_));
  }
  numorders_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthSnapshotLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthSnapshotLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFirstMessageInBatch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_isfirstmessageinbatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsLastMessageInBatch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_islastmessageinbatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islastmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumOrders = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_numorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthSnapshotLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthSnapshotLevel)
  return false;
#undef DO_
}

void MarketDepthSnapshotLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthSnapshotLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional double Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional double Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quantity(), output);
  }

  // optional uint32 Level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfirstmessageinbatch(), output);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->islastmessageinbatch(), output);
  }

  // optional double DateTime = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->datetime(), output);
  }

  // optional uint32 NumOrders = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->numorders(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthSnapshotLevel)
}

::google::protobuf::uint8* MarketDepthSnapshotLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthSnapshotLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional double Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional double Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quantity(), target);
  }

  // optional uint32 Level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfirstmessageinbatch(), target);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->islastmessageinbatch(), target);
  }

  // optional double DateTime = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->datetime(), target);
  }

  // optional uint32 NumOrders = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->numorders(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthSnapshotLevel)
  return target;
}

size_t MarketDepthSnapshotLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthSnapshotLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double Price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 4;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 IsFirstMessageInBatch = 6;
    if (has_isfirstmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirstmessageinbatch());
    }

    // optional double DateTime = 8;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsLastMessageInBatch = 7;
    if (has_islastmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islastmessageinbatch());
    }

  }
  // optional uint32 NumOrders = 9;
  if (has_numorders()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSnapshotLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthSnapshotLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSnapshotLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthSnapshotLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthSnapshotLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthSnapshotLevel)
    MergeFrom(*source);
  }
}

void MarketDepthSnapshotLevel::MergeFrom(const MarketDepthSnapshotLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthSnapshotLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      isfirstmessageinbatch_ = from.isfirstmessageinbatch_;
    }
    if (cached_has_bits & 0x00000040u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000080u) {
      islastmessageinbatch_ = from.islastmessageinbatch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_numorders(from.numorders());
  }
}

void MarketDepthSnapshotLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthSnapshotLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSnapshotLevel::CopyFrom(const MarketDepthSnapshotLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthSnapshotLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSnapshotLevel::IsInitialized() const {
  return true;
}

void MarketDepthSnapshotLevel::Swap(MarketDepthSnapshotLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthSnapshotLevel::InternalSwap(MarketDepthSnapshotLevel* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
  swap(isfirstmessageinbatch_, other->isfirstmessageinbatch_);
  swap(datetime_, other->datetime_);
  swap(islastmessageinbatch_, other->islastmessageinbatch_);
  swap(numorders_, other->numorders_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthSnapshotLevel::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthSnapshotLevel_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthSnapshotLevel_Int::kSymbolIDFieldNumber;
const int MarketDepthSnapshotLevel_Int::kSideFieldNumber;
const int MarketDepthSnapshotLevel_Int::kPriceFieldNumber;
const int MarketDepthSnapshotLevel_Int::kQuantityFieldNumber;
const int MarketDepthSnapshotLevel_Int::kLevelFieldNumber;
const int MarketDepthSnapshotLevel_Int::kIsFirstMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel_Int::kIsLastMessageInBatchFieldNumber;
const int MarketDepthSnapshotLevel_Int::kDateTimeFieldNumber;
const int MarketDepthSnapshotLevel_Int::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthSnapshotLevel_Int::MarketDepthSnapshotLevel_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthSnapshotLevel_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthSnapshotLevel_Int)
}
MarketDepthSnapshotLevel_Int::MarketDepthSnapshotLevel_Int(const MarketDepthSnapshotLevel_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthSnapshotLevel_Int)
}

void MarketDepthSnapshotLevel_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthSnapshotLevel_Int::~MarketDepthSnapshotLevel_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthSnapshotLevel_Int)
  SharedDtor();
}

void MarketDepthSnapshotLevel_Int::SharedDtor() {
}

void MarketDepthSnapshotLevel_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthSnapshotLevel_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthSnapshotLevel_Int& MarketDepthSnapshotLevel_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthSnapshotLevel_Int.base);
  return *internal_default_instance();
}


void MarketDepthSnapshotLevel_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&islastmessageinbatch_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(islastmessageinbatch_));
  }
  numorders_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthSnapshotLevel_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFirstMessageInBatch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_isfirstmessageinbatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsLastMessageInBatch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_islastmessageinbatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islastmessageinbatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumOrders = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_numorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthSnapshotLevel_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthSnapshotLevel_Int)
  return false;
#undef DO_
}

void MarketDepthSnapshotLevel_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }

  // optional uint32 Level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfirstmessageinbatch(), output);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->islastmessageinbatch(), output);
  }

  // optional double DateTime = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->datetime(), output);
  }

  // optional uint32 NumOrders = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->numorders(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthSnapshotLevel_Int)
}

::google::protobuf::uint8* MarketDepthSnapshotLevel_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }

  // optional uint32 Level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 IsFirstMessageInBatch = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfirstmessageinbatch(), target);
  }

  // optional uint32 IsLastMessageInBatch = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->islastmessageinbatch(), target);
  }

  // optional double DateTime = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->datetime(), target);
  }

  // optional uint32 NumOrders = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->numorders(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthSnapshotLevel_Int)
  return target;
}

size_t MarketDepthSnapshotLevel_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 IsFirstMessageInBatch = 6;
    if (has_isfirstmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirstmessageinbatch());
    }

    // optional double DateTime = 8;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsLastMessageInBatch = 7;
    if (has_islastmessageinbatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islastmessageinbatch());
    }

  }
  // optional uint32 NumOrders = 9;
  if (has_numorders()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numorders());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthSnapshotLevel_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthSnapshotLevel_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthSnapshotLevel_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthSnapshotLevel_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthSnapshotLevel_Int)
    MergeFrom(*source);
  }
}

void MarketDepthSnapshotLevel_Int::MergeFrom(const MarketDepthSnapshotLevel_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      isfirstmessageinbatch_ = from.isfirstmessageinbatch_;
    }
    if (cached_has_bits & 0x00000040u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000080u) {
      islastmessageinbatch_ = from.islastmessageinbatch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_numorders(from.numorders());
  }
}

void MarketDepthSnapshotLevel_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthSnapshotLevel_Int::CopyFrom(const MarketDepthSnapshotLevel_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthSnapshotLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSnapshotLevel_Int::IsInitialized() const {
  return true;
}

void MarketDepthSnapshotLevel_Int::Swap(MarketDepthSnapshotLevel_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthSnapshotLevel_Int::InternalSwap(MarketDepthSnapshotLevel_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
  swap(isfirstmessageinbatch_, other->isfirstmessageinbatch_);
  swap(datetime_, other->datetime_);
  swap(islastmessageinbatch_, other->islastmessageinbatch_);
  swap(numorders_, other->numorders_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthSnapshotLevel_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdateLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdateLevel::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevel::kSideFieldNumber;
const int MarketDepthUpdateLevel::kPriceFieldNumber;
const int MarketDepthUpdateLevel::kQuantityFieldNumber;
const int MarketDepthUpdateLevel::kUpdateTypeFieldNumber;
const int MarketDepthUpdateLevel::kDateTimeFieldNumber;
const int MarketDepthUpdateLevel::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdateLevel::MarketDepthUpdateLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevel)
}
MarketDepthUpdateLevel::MarketDepthUpdateLevel(const MarketDepthUpdateLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevel)
}

void MarketDepthUpdateLevel::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthUpdateLevel::~MarketDepthUpdateLevel() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevel)
  SharedDtor();
}

void MarketDepthUpdateLevel::SharedDtor() {
}

void MarketDepthUpdateLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthUpdateLevel& MarketDepthUpdateLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevel.base);
  return *internal_default_instance();
}


void MarketDepthUpdateLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthUpdateLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numorders_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthUpdateLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDepthUpdateTypeEnum_IsValid(value)) {
            set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumOrders = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_numorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevel)
  return false;
#undef DO_
}

void MarketDepthUpdateLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional double Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional double Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quantity(), output);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  // optional double DateTime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->datetime(), output);
  }

  // optional uint32 NumOrders = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numorders(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevel)
}

::google::protobuf::uint8* MarketDepthUpdateLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional double Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional double Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quantity(), target);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  // optional double DateTime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->datetime(), target);
  }

  // optional uint32 NumOrders = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numorders(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevel)
  return target;
}

size_t MarketDepthUpdateLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthUpdateLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double Price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 4;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional double DateTime = 6;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
    }

    // optional uint32 NumOrders = 7;
    if (has_numorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numorders());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdateLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthUpdateLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdateLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthUpdateLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthUpdateLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthUpdateLevel)
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevel::MergeFrom(const MarketDepthUpdateLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthUpdateLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      updatetype_ = from.updatetype_;
    }
    if (cached_has_bits & 0x00000040u) {
      numorders_ = from.numorders_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDepthUpdateLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthUpdateLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevel::CopyFrom(const MarketDepthUpdateLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthUpdateLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevel::IsInitialized() const {
  return true;
}

void MarketDepthUpdateLevel::Swap(MarketDepthUpdateLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdateLevel::InternalSwap(MarketDepthUpdateLevel* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(datetime_, other->datetime_);
  swap(updatetype_, other->updatetype_);
  swap(numorders_, other->numorders_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthUpdateLevel::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdateLevel_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdateLevel_Int::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevel_Int::kSideFieldNumber;
const int MarketDepthUpdateLevel_Int::kPriceFieldNumber;
const int MarketDepthUpdateLevel_Int::kQuantityFieldNumber;
const int MarketDepthUpdateLevel_Int::kUpdateTypeFieldNumber;
const int MarketDepthUpdateLevel_Int::kDateTimeFieldNumber;
const int MarketDepthUpdateLevel_Int::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdateLevel_Int::MarketDepthUpdateLevel_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevel_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevel_Int)
}
MarketDepthUpdateLevel_Int::MarketDepthUpdateLevel_Int(const MarketDepthUpdateLevel_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevel_Int)
}

void MarketDepthUpdateLevel_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthUpdateLevel_Int::~MarketDepthUpdateLevel_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevel_Int)
  SharedDtor();
}

void MarketDepthUpdateLevel_Int::SharedDtor() {
}

void MarketDepthUpdateLevel_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevel_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthUpdateLevel_Int& MarketDepthUpdateLevel_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevel_Int.base);
  return *internal_default_instance();
}


void MarketDepthUpdateLevel_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthUpdateLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numorders_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthUpdateLevel_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevel_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDepthUpdateTypeEnum_IsValid(value)) {
            set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumOrders = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_numorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevel_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevel_Int)
  return false;
#undef DO_
}

void MarketDepthUpdateLevel_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantity(), output);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  // optional double DateTime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->datetime(), output);
  }

  // optional uint32 NumOrders = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numorders(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevel_Int)
}

::google::protobuf::uint8* MarketDepthUpdateLevel_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevel_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantity(), target);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  // optional double DateTime = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->datetime(), target);
  }

  // optional uint32 NumOrders = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numorders(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevel_Int)
  return target;
}

size_t MarketDepthUpdateLevel_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthUpdateLevel_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

    // optional double DateTime = 6;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
    }

    // optional uint32 NumOrders = 7;
    if (has_numorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numorders());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdateLevel_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdateLevel_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthUpdateLevel_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthUpdateLevel_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthUpdateLevel_Int)
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevel_Int::MergeFrom(const MarketDepthUpdateLevel_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      updatetype_ = from.updatetype_;
    }
    if (cached_has_bits & 0x00000040u) {
      numorders_ = from.numorders_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDepthUpdateLevel_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevel_Int::CopyFrom(const MarketDepthUpdateLevel_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthUpdateLevel_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevel_Int::IsInitialized() const {
  return true;
}

void MarketDepthUpdateLevel_Int::Swap(MarketDepthUpdateLevel_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdateLevel_Int::InternalSwap(MarketDepthUpdateLevel_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(datetime_, other->datetime_);
  swap(updatetype_, other->updatetype_);
  swap(numorders_, other->numorders_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthUpdateLevel_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdateLevelCompact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdateLevelCompact::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevelCompact::kSideFieldNumber;
const int MarketDepthUpdateLevelCompact::kPriceFieldNumber;
const int MarketDepthUpdateLevelCompact::kQuantityFieldNumber;
const int MarketDepthUpdateLevelCompact::kUpdateTypeFieldNumber;
const int MarketDepthUpdateLevelCompact::kDateTimeFieldNumber;
const int MarketDepthUpdateLevelCompact::kNumOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdateLevelCompact::MarketDepthUpdateLevelCompact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevelCompact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevelCompact)
}
MarketDepthUpdateLevelCompact::MarketDepthUpdateLevelCompact(const MarketDepthUpdateLevelCompact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numorders_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevelCompact)
}

void MarketDepthUpdateLevelCompact::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numorders_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
}

MarketDepthUpdateLevelCompact::~MarketDepthUpdateLevelCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevelCompact)
  SharedDtor();
}

void MarketDepthUpdateLevelCompact::SharedDtor() {
}

void MarketDepthUpdateLevelCompact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevelCompact::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthUpdateLevelCompact& MarketDepthUpdateLevelCompact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevelCompact.base);
  return *internal_default_instance();
}


void MarketDepthUpdateLevelCompact::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthUpdateLevelCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numorders_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(numorders_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthUpdateLevelCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevelCompact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_side(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::MarketDepthUpdateTypeEnum_IsValid(value)) {
            set_updatetype(static_cast< ::DTC_PB::MarketDepthUpdateTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumOrders = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_numorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevelCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevelCompact)
  return false;
#undef DO_
}

void MarketDepthUpdateLevelCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevelCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }

  // optional float Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // optional float Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->quantity(), output);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->updatetype(), output);
  }

  // optional uint32 DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->datetime(), output);
  }

  // optional uint32 NumOrders = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numorders(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevelCompact)
}

::google::protobuf::uint8* MarketDepthUpdateLevelCompact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevelCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum Side = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }

  // optional float Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // optional float Quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->quantity(), target);
  }

  // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->updatetype(), target);
  }

  // optional uint32 DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->datetime(), target);
  }

  // optional uint32 NumOrders = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numorders(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevelCompact)
  return target;
}

size_t MarketDepthUpdateLevelCompact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthUpdateLevelCompact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional float Price = 3;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional float Quantity = 4;
    if (has_quantity()) {
      total_size += 1 + 4;
    }

    // optional .DTC_PB.MarketDepthUpdateTypeEnum UpdateType = 5;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->updatetype());
    }

    // optional uint32 DateTime = 6;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datetime());
    }

    // optional uint32 NumOrders = 7;
    if (has_numorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numorders());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdateLevelCompact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdateLevelCompact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthUpdateLevelCompact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthUpdateLevelCompact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthUpdateLevelCompact)
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevelCompact::MergeFrom(const MarketDepthUpdateLevelCompact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      updatetype_ = from.updatetype_;
    }
    if (cached_has_bits & 0x00000020u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000040u) {
      numorders_ = from.numorders_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDepthUpdateLevelCompact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevelCompact::CopyFrom(const MarketDepthUpdateLevelCompact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthUpdateLevelCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevelCompact::IsInitialized() const {
  return true;
}

void MarketDepthUpdateLevelCompact::Swap(MarketDepthUpdateLevelCompact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdateLevelCompact::InternalSwap(MarketDepthUpdateLevelCompact* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(updatetype_, other->updatetype_);
  swap(datetime_, other->datetime_);
  swap(numorders_, other->numorders_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthUpdateLevelCompact::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthUpdateLevelCompact2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthUpdateLevelCompact2::kSymbolIDFieldNumber;
const int MarketDepthUpdateLevelCompact2::kSideFieldNumber;
const int MarketDepthUpdateLevelCompact2::kUpdateTypeFieldNumber;
const int MarketDepthUpdateLevelCompact2::kNumOrdersFieldNumber;
const int MarketDepthUpdateLevelCompact2::kPriceFieldNumber;
const int MarketDepthUpdateLevelCompact2::kQuantityFieldNumber;
const int MarketDepthUpdateLevelCompact2::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthUpdateLevelCompact2::MarketDepthUpdateLevelCompact2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevelCompact2.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthUpdateLevelCompact2)
}
MarketDepthUpdateLevelCompact2::MarketDepthUpdateLevelCompact2(const MarketDepthUpdateLevelCompact2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthUpdateLevelCompact2)
}

void MarketDepthUpdateLevelCompact2::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDepthUpdateLevelCompact2::~MarketDepthUpdateLevelCompact2() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthUpdateLevelCompact2)
  SharedDtor();
}

void MarketDepthUpdateLevelCompact2::SharedDtor() {
}

void MarketDepthUpdateLevelCompact2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthUpdateLevelCompact2::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthUpdateLevelCompact2& MarketDepthUpdateLevelCompact2::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthUpdateLevelCompact2.base);
  return *internal_default_instance();
}


void MarketDepthUpdateLevelCompact2::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthUpdateLevelCompact2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Side = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 UpdateType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_updatetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumOrders = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_numorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Quantity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DateTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthUpdateLevelCompact2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthUpdateLevelCompact2)
  return false;
#undef DO_
}

void MarketDepthUpdateLevelCompact2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Side = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->side(), output);
  }

  // optional int32 UpdateType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->updatetype(), output);
  }

  // optional uint32 NumOrders = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numorders(), output);
  }

  // optional float Price = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->price(), output);
  }

  // optional float Quantity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->quantity(), output);
  }

  // optional uint32 DateTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthUpdateLevelCompact2)
}

::google::protobuf::uint8* MarketDepthUpdateLevelCompact2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Side = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->side(), target);
  }

  // optional int32 UpdateType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->updatetype(), target);
  }

  // optional uint32 NumOrders = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numorders(), target);
  }

  // optional float Price = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->price(), target);
  }

  // optional float Quantity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->quantity(), target);
  }

  // optional uint32 DateTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthUpdateLevelCompact2)
  return target;
}

size_t MarketDepthUpdateLevelCompact2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->side());
    }

    // optional int32 UpdateType = 3;
    if (has_updatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatetype());
    }

    // optional uint32 NumOrders = 4;
    if (has_numorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numorders());
    }

    // optional float Price = 5;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional float Quantity = 6;
    if (has_quantity()) {
      total_size += 1 + 4;
    }

    // optional uint32 DateTime = 7;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datetime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthUpdateLevelCompact2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthUpdateLevelCompact2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthUpdateLevelCompact2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthUpdateLevelCompact2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthUpdateLevelCompact2)
    MergeFrom(*source);
  }
}

void MarketDepthUpdateLevelCompact2::MergeFrom(const MarketDepthUpdateLevelCompact2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000004u) {
      updatetype_ = from.updatetype_;
    }
    if (cached_has_bits & 0x00000008u) {
      numorders_ = from.numorders_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000040u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDepthUpdateLevelCompact2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthUpdateLevelCompact2::CopyFrom(const MarketDepthUpdateLevelCompact2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthUpdateLevelCompact2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthUpdateLevelCompact2::IsInitialized() const {
  return true;
}

void MarketDepthUpdateLevelCompact2::Swap(MarketDepthUpdateLevelCompact2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthUpdateLevelCompact2::InternalSwap(MarketDepthUpdateLevelCompact2* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(side_, other->side_);
  swap(updatetype_, other->updatetype_);
  swap(numorders_, other->numorders_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthUpdateLevelCompact2::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionSettlement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionSettlement::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionSettlement::kPriceFieldNumber;
const int MarketDataUpdateSessionSettlement::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionSettlement::MarketDataUpdateSessionSettlement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionSettlement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionSettlement)
}
MarketDataUpdateSessionSettlement::MarketDataUpdateSessionSettlement(const MarketDataUpdateSessionSettlement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&price_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionSettlement)
}

void MarketDataUpdateSessionSettlement::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&price_)) + sizeof(datetime_));
}

MarketDataUpdateSessionSettlement::~MarketDataUpdateSessionSettlement() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionSettlement)
  SharedDtor();
}

void MarketDataUpdateSessionSettlement::SharedDtor() {
}

void MarketDataUpdateSessionSettlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionSettlement& MarketDataUpdateSessionSettlement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionSettlement.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&price_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionSettlement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionSettlement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 DateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionSettlement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionSettlement)
  return false;
#undef DO_
}

void MarketDataUpdateSessionSettlement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // optional uint32 DateTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionSettlement)
}

::google::protobuf::uint8* MarketDataUpdateSessionSettlement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionSettlement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // optional uint32 DateTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionSettlement)
  return target;
}

size_t MarketDataUpdateSessionSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionSettlement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 DateTime = 3;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datetime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionSettlement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionSettlement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionSettlement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionSettlement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionSettlement)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionSettlement::MergeFrom(const MarketDataUpdateSessionSettlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionSettlement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionSettlement::CopyFrom(const MarketDataUpdateSessionSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionSettlement::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionSettlement::Swap(MarketDataUpdateSessionSettlement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionSettlement::InternalSwap(MarketDataUpdateSessionSettlement* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionSettlement::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionSettlement_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionSettlement_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionSettlement_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionSettlement_Int::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionSettlement_Int::MarketDataUpdateSessionSettlement_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionSettlement_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}
MarketDataUpdateSessionSettlement_Int::MarketDataUpdateSessionSettlement_Int(const MarketDataUpdateSessionSettlement_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}

void MarketDataUpdateSessionSettlement_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateSessionSettlement_Int::~MarketDataUpdateSessionSettlement_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  SharedDtor();
}

void MarketDataUpdateSessionSettlement_Int::SharedDtor() {
}

void MarketDataUpdateSessionSettlement_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionSettlement_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionSettlement_Int& MarketDataUpdateSessionSettlement_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionSettlement_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionSettlement_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionSettlement_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 DateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionSettlement_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional int32 DateTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionSettlement_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionSettlement_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional int32 DateTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  return target;
}

size_t MarketDataUpdateSessionSettlement_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 DateTime = 3;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datetime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionSettlement_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionSettlement_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionSettlement_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionSettlement_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionSettlement_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionSettlement_Int::MergeFrom(const MarketDataUpdateSessionSettlement_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionSettlement_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionSettlement_Int::CopyFrom(const MarketDataUpdateSessionSettlement_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionSettlement_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionSettlement_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionSettlement_Int::Swap(MarketDataUpdateSessionSettlement_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionSettlement_Int::InternalSwap(MarketDataUpdateSessionSettlement_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionSettlement_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionOpen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionOpen::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionOpen::kPriceFieldNumber;
const int MarketDataUpdateSessionOpen::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionOpen::MarketDataUpdateSessionOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionOpen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionOpen)
}
MarketDataUpdateSessionOpen::MarketDataUpdateSessionOpen(const MarketDataUpdateSessionOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionOpen)
}

void MarketDataUpdateSessionOpen::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionOpen::~MarketDataUpdateSessionOpen() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionOpen)
  SharedDtor();
}

void MarketDataUpdateSessionOpen::SharedDtor() {
}

void MarketDataUpdateSessionOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionOpen& MarketDataUpdateSessionOpen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionOpen.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionOpen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionOpen)
  return false;
#undef DO_
}

void MarketDataUpdateSessionOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionOpen)
}

::google::protobuf::uint8* MarketDataUpdateSessionOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionOpen)
  return target;
}

size_t MarketDataUpdateSessionOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionOpen)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionOpen::MergeFrom(const MarketDataUpdateSessionOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionOpen::CopyFrom(const MarketDataUpdateSessionOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionOpen::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionOpen::Swap(MarketDataUpdateSessionOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionOpen::InternalSwap(MarketDataUpdateSessionOpen* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionOpen::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionOpen_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionOpen_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionOpen_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionOpen_Int::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionOpen_Int::MarketDataUpdateSessionOpen_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionOpen_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
}
MarketDataUpdateSessionOpen_Int::MarketDataUpdateSessionOpen_Int(const MarketDataUpdateSessionOpen_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
}

void MarketDataUpdateSessionOpen_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionOpen_Int::~MarketDataUpdateSessionOpen_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionOpen_Int)
  SharedDtor();
}

void MarketDataUpdateSessionOpen_Int::SharedDtor() {
}

void MarketDataUpdateSessionOpen_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionOpen_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionOpen_Int& MarketDataUpdateSessionOpen_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionOpen_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionOpen_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionOpen_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionOpen_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionOpen_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionOpen_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionOpen_Int)
  return target;
}

size_t MarketDataUpdateSessionOpen_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionOpen_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionOpen_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionOpen_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionOpen_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionOpen_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionOpen_Int::MergeFrom(const MarketDataUpdateSessionOpen_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionOpen_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionOpen_Int::CopyFrom(const MarketDataUpdateSessionOpen_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionOpen_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionOpen_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionOpen_Int::Swap(MarketDataUpdateSessionOpen_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionOpen_Int::InternalSwap(MarketDataUpdateSessionOpen_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionOpen_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionNumTrades::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionNumTrades::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionNumTrades::kNumTradesFieldNumber;
const int MarketDataUpdateSessionNumTrades::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionNumTrades::MarketDataUpdateSessionNumTrades()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionNumTrades.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionNumTrades)
}
MarketDataUpdateSessionNumTrades::MarketDataUpdateSessionNumTrades(const MarketDataUpdateSessionNumTrades& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionNumTrades)
}

void MarketDataUpdateSessionNumTrades::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionNumTrades::~MarketDataUpdateSessionNumTrades() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionNumTrades)
  SharedDtor();
}

void MarketDataUpdateSessionNumTrades::SharedDtor() {
}

void MarketDataUpdateSessionNumTrades::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionNumTrades::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionNumTrades& MarketDataUpdateSessionNumTrades::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionNumTrades.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionNumTrades::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionNumTrades::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NumTrades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_numtrades();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionNumTrades)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionNumTrades)
  return false;
#undef DO_
}

void MarketDataUpdateSessionNumTrades::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 NumTrades = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numtrades(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionNumTrades)
}

::google::protobuf::uint8* MarketDataUpdateSessionNumTrades::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 NumTrades = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numtrades(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionNumTrades)
  return target;
}

size_t MarketDataUpdateSessionNumTrades::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 NumTrades = 2;
    if (has_numtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtrades());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionNumTrades::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionNumTrades* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionNumTrades>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionNumTrades)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionNumTrades)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionNumTrades::MergeFrom(const MarketDataUpdateSessionNumTrades& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      numtrades_ = from.numtrades_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionNumTrades::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionNumTrades::CopyFrom(const MarketDataUpdateSessionNumTrades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionNumTrades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionNumTrades::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionNumTrades::Swap(MarketDataUpdateSessionNumTrades* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionNumTrades::InternalSwap(MarketDataUpdateSessionNumTrades* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(numtrades_, other->numtrades_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionNumTrades::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTradingSessionDate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTradingSessionDate::kSymbolIDFieldNumber;
const int MarketDataUpdateTradingSessionDate::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTradingSessionDate::MarketDataUpdateTradingSessionDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTradingSessionDate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTradingSessionDate)
}
MarketDataUpdateTradingSessionDate::MarketDataUpdateTradingSessionDate(const MarketDataUpdateTradingSessionDate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTradingSessionDate)
}

void MarketDataUpdateTradingSessionDate::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(date_));
}

MarketDataUpdateTradingSessionDate::~MarketDataUpdateTradingSessionDate() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTradingSessionDate)
  SharedDtor();
}

void MarketDataUpdateTradingSessionDate::SharedDtor() {
}

void MarketDataUpdateTradingSessionDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTradingSessionDate::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTradingSessionDate& MarketDataUpdateTradingSessionDate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTradingSessionDate.base);
  return *internal_default_instance();
}


void MarketDataUpdateTradingSessionDate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTradingSessionDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTradingSessionDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTradingSessionDate)
  return false;
#undef DO_
}

void MarketDataUpdateTradingSessionDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional uint32 Date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTradingSessionDate)
}

::google::protobuf::uint8* MarketDataUpdateTradingSessionDate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional uint32 Date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTradingSessionDate)
  return target;
}

size_t MarketDataUpdateTradingSessionDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 Date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTradingSessionDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTradingSessionDate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTradingSessionDate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTradingSessionDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTradingSessionDate)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTradingSessionDate::MergeFrom(const MarketDataUpdateTradingSessionDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      date_ = from.date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateTradingSessionDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTradingSessionDate::CopyFrom(const MarketDataUpdateTradingSessionDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTradingSessionDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTradingSessionDate::IsInitialized() const {
  return true;
}

void MarketDataUpdateTradingSessionDate::Swap(MarketDataUpdateTradingSessionDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTradingSessionDate::InternalSwap(MarketDataUpdateTradingSessionDate* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(date_, other->date_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTradingSessionDate::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDepthReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDepthReject::kSymbolIDFieldNumber;
const int MarketDepthReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDepthReject::MarketDepthReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDepthReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDepthReject)
}
MarketDepthReject::MarketDepthReject(const MarketDepthReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  symbolid_ = from.symbolid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDepthReject)
}

void MarketDepthReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbolid_ = 0u;
}

MarketDepthReject::~MarketDepthReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDepthReject)
  SharedDtor();
}

void MarketDepthReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketDepthReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDepthReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDepthReject& MarketDepthReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDepthReject.base);
  return *internal_default_instance();
}


void MarketDepthReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDepthReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  symbolid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDepthReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDepthReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.MarketDepthReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDepthReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDepthReject)
  return false;
#undef DO_
}

void MarketDepthReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDepthReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDepthReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDepthReject)
}

::google::protobuf::uint8* MarketDepthReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDepthReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.MarketDepthReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDepthReject)
  return target;
}

size_t MarketDepthReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDepthReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDepthReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDepthReject)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDepthReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDepthReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDepthReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDepthReject)
    MergeFrom(*source);
  }
}

void MarketDepthReject::MergeFrom(const MarketDepthReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDepthReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDepthReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDepthReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDepthReject::CopyFrom(const MarketDepthReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDepthReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthReject::IsInitialized() const {
  return true;
}

void MarketDepthReject::Swap(MarketDepthReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDepthReject::InternalSwap(MarketDepthReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDepthReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTrade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTrade::kSymbolIDFieldNumber;
const int MarketDataUpdateTrade::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTrade::kPriceFieldNumber;
const int MarketDataUpdateTrade::kVolumeFieldNumber;
const int MarketDataUpdateTrade::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTrade::MarketDataUpdateTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTrade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTrade)
}
MarketDataUpdateTrade::MarketDataUpdateTrade(const MarketDataUpdateTrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTrade)
}

void MarketDataUpdateTrade::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateTrade::~MarketDataUpdateTrade() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTrade)
  SharedDtor();
}

void MarketDataUpdateTrade::SharedDtor() {
}

void MarketDataUpdateTrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTrade::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTrade& MarketDataUpdateTrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTrade.base);
  return *internal_default_instance();
}


void MarketDataUpdateTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTrade)
  return false;
#undef DO_
}

void MarketDataUpdateTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // optional double Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional double Volume = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  // optional double DateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTrade)
}

::google::protobuf::uint8* MarketDataUpdateTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // optional double Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional double Volume = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  // optional double DateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTrade)
  return target;
}

size_t MarketDataUpdateTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional double Price = 3;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Volume = 4;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional double DateTime = 5;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTrade)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTrade)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTrade::MergeFrom(const MarketDataUpdateTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      atbidorask_ = from.atbidorask_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTrade::CopyFrom(const MarketDataUpdateTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTrade::IsInitialized() const {
  return true;
}

void MarketDataUpdateTrade::Swap(MarketDataUpdateTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTrade::InternalSwap(MarketDataUpdateTrade* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTrade::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTrade_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTrade_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateTrade_Int::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTrade_Int::kPriceFieldNumber;
const int MarketDataUpdateTrade_Int::kVolumeFieldNumber;
const int MarketDataUpdateTrade_Int::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTrade_Int::MarketDataUpdateTrade_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTrade_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTrade_Int)
}
MarketDataUpdateTrade_Int::MarketDataUpdateTrade_Int(const MarketDataUpdateTrade_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTrade_Int)
}

void MarketDataUpdateTrade_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateTrade_Int::~MarketDataUpdateTrade_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTrade_Int)
  SharedDtor();
}

void MarketDataUpdateTrade_Int::SharedDtor() {
}

void MarketDataUpdateTrade_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTrade_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTrade_Int& MarketDataUpdateTrade_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTrade_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateTrade_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTrade_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTrade_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTrade_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTrade_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTrade_Int)
  return false;
#undef DO_
}

void MarketDataUpdateTrade_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTrade_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Volume = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional double DateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTrade_Int)
}

::google::protobuf::uint8* MarketDataUpdateTrade_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTrade_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Volume = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional double DateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTrade_Int)
  return target;
}

size_t MarketDataUpdateTrade_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTrade_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 2;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional double DateTime = 5;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTrade_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTrade_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTrade_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTrade_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTrade_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTrade_Int::MergeFrom(const MarketDataUpdateTrade_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      atbidorask_ = from.atbidorask_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateTrade_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTrade_Int::CopyFrom(const MarketDataUpdateTrade_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTrade_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTrade_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateTrade_Int::Swap(MarketDataUpdateTrade_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTrade_Int::InternalSwap(MarketDataUpdateTrade_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTrade_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTradeWithUnbundledIndicator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTradeWithUnbundledIndicator::kSymbolIDFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kAtBidOrAskFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kUnbundledTradeIndicatorFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kPriceFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kVolumeFieldNumber;
const int MarketDataUpdateTradeWithUnbundledIndicator::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTradeWithUnbundledIndicator::MarketDataUpdateTradeWithUnbundledIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTradeWithUnbundledIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
}
MarketDataUpdateTradeWithUnbundledIndicator::MarketDataUpdateTradeWithUnbundledIndicator(const MarketDataUpdateTradeWithUnbundledIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
}

void MarketDataUpdateTradeWithUnbundledIndicator::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateTradeWithUnbundledIndicator::~MarketDataUpdateTradeWithUnbundledIndicator() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  SharedDtor();
}

void MarketDataUpdateTradeWithUnbundledIndicator::SharedDtor() {
}

void MarketDataUpdateTradeWithUnbundledIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTradeWithUnbundledIndicator::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTradeWithUnbundledIndicator& MarketDataUpdateTradeWithUnbundledIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTradeWithUnbundledIndicator.base);
  return *internal_default_instance();
}


void MarketDataUpdateTradeWithUnbundledIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTradeWithUnbundledIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum8_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum8 >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::UnbundledTradeIndicatorEnum_IsValid(value)) {
            set_unbundledtradeindicator(static_cast< ::DTC_PB::UnbundledTradeIndicatorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Volume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  return false;
#undef DO_
}

void MarketDataUpdateTradeWithUnbundledIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->atbidorask(), output);
  }

  // optional .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->unbundledtradeindicator(), output);
  }

  // optional double Price = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }

  // optional uint32 Volume = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->volume(), output);
  }

  // optional double DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
}

::google::protobuf::uint8* MarketDataUpdateTradeWithUnbundledIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->atbidorask(), target);
  }

  // optional .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->unbundledtradeindicator(), target);
  }

  // optional double Price = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }

  // optional uint32 Volume = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->volume(), target);
  }

  // optional double DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  return target;
}

size_t MarketDataUpdateTradeWithUnbundledIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum8 AtBidOrAsk = 2;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional double Price = 4;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator = 3;
    if (has_unbundledtradeindicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unbundledtradeindicator());
    }

    // optional uint32 Volume = 5;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume());
    }

    // optional double DateTime = 6;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTradeWithUnbundledIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTradeWithUnbundledIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTradeWithUnbundledIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTradeWithUnbundledIndicator::MergeFrom(const MarketDataUpdateTradeWithUnbundledIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      atbidorask_ = from.atbidorask_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      unbundledtradeindicator_ = from.unbundledtradeindicator_;
    }
    if (cached_has_bits & 0x00000010u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000020u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateTradeWithUnbundledIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTradeWithUnbundledIndicator::CopyFrom(const MarketDataUpdateTradeWithUnbundledIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTradeWithUnbundledIndicator::IsInitialized() const {
  return true;
}

void MarketDataUpdateTradeWithUnbundledIndicator::Swap(MarketDataUpdateTradeWithUnbundledIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTradeWithUnbundledIndicator::InternalSwap(MarketDataUpdateTradeWithUnbundledIndicator* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(unbundledtradeindicator_, other->unbundledtradeindicator_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTradeWithUnbundledIndicator::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateBidAsk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateBidAsk::kSymbolIDFieldNumber;
const int MarketDataUpdateBidAsk::kBidPriceFieldNumber;
const int MarketDataUpdateBidAsk::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAsk::kAskPriceFieldNumber;
const int MarketDataUpdateBidAsk::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAsk::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateBidAsk::MarketDataUpdateBidAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateBidAsk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAsk)
}
MarketDataUpdateBidAsk::MarketDataUpdateBidAsk(const MarketDataUpdateBidAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bidprice_, &from.bidprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&bidprice_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAsk)
}

void MarketDataUpdateBidAsk::SharedCtor() {
  ::memset(&bidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&bidprice_)) + sizeof(datetime_));
}

MarketDataUpdateBidAsk::~MarketDataUpdateBidAsk() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAsk)
  SharedDtor();
}

void MarketDataUpdateBidAsk::SharedDtor() {
}

void MarketDataUpdateBidAsk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateBidAsk& MarketDataUpdateBidAsk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateBidAsk.base);
  return *internal_default_instance();
}


void MarketDataUpdateBidAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateBidAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&bidprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&bidprice_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateBidAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAsk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BidPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_bidprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float BidQuantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_bidquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double AskPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_askprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float AskQuantity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_askquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAsk)
  return false;
#undef DO_
}

void MarketDataUpdateBidAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double BidPrice = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bidprice(), output);
  }

  // optional float BidQuantity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bidquantity(), output);
  }

  // optional double AskPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->askprice(), output);
  }

  // optional float AskQuantity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->askquantity(), output);
  }

  // optional sfixed32 DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAsk)
}

::google::protobuf::uint8* MarketDataUpdateBidAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double BidPrice = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bidprice(), target);
  }

  // optional float BidQuantity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bidquantity(), target);
  }

  // optional double AskPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->askprice(), target);
  }

  // optional float AskQuantity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->askquantity(), target);
  }

  // optional sfixed32 DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAsk)
  return target;
}

size_t MarketDataUpdateBidAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateBidAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double BidPrice = 2;
    if (has_bidprice()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional float BidQuantity = 3;
    if (has_bidquantity()) {
      total_size += 1 + 4;
    }

    // optional double AskPrice = 4;
    if (has_askprice()) {
      total_size += 1 + 8;
    }

    // optional float AskQuantity = 5;
    if (has_askquantity()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 DateTime = 6;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateBidAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateBidAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateBidAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateBidAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateBidAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateBidAsk)
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAsk::MergeFrom(const MarketDataUpdateBidAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateBidAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      bidprice_ = from.bidprice_;
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      bidquantity_ = from.bidquantity_;
    }
    if (cached_has_bits & 0x00000008u) {
      askprice_ = from.askprice_;
    }
    if (cached_has_bits & 0x00000010u) {
      askquantity_ = from.askquantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateBidAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateBidAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAsk::CopyFrom(const MarketDataUpdateBidAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateBidAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAsk::IsInitialized() const {
  return true;
}

void MarketDataUpdateBidAsk::Swap(MarketDataUpdateBidAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateBidAsk::InternalSwap(MarketDataUpdateBidAsk* other) {
  using std::swap;
  swap(bidprice_, other->bidprice_);
  swap(symbolid_, other->symbolid_);
  swap(bidquantity_, other->bidquantity_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateBidAsk::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateBidAsk_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateBidAsk_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateBidAsk_Int::kBidPriceFieldNumber;
const int MarketDataUpdateBidAsk_Int::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAsk_Int::kAskPriceFieldNumber;
const int MarketDataUpdateBidAsk_Int::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAsk_Int::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateBidAsk_Int::MarketDataUpdateBidAsk_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateBidAsk_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAsk_Int)
}
MarketDataUpdateBidAsk_Int::MarketDataUpdateBidAsk_Int(const MarketDataUpdateBidAsk_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datetime_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAsk_Int)
}

void MarketDataUpdateBidAsk_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datetime_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
}

MarketDataUpdateBidAsk_Int::~MarketDataUpdateBidAsk_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAsk_Int)
  SharedDtor();
}

void MarketDataUpdateBidAsk_Int::SharedDtor() {
}

void MarketDataUpdateBidAsk_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAsk_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateBidAsk_Int& MarketDataUpdateBidAsk_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateBidAsk_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateBidAsk_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datetime_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(datetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateBidAsk_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 BidPrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bidprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 BidQuantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bidquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AskPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_askprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AskQuantity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_askquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 DateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAsk_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAsk_Int)
  return false;
#undef DO_
}

void MarketDataUpdateBidAsk_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 BidPrice = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bidprice(), output);
  }

  // optional int32 BidQuantity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bidquantity(), output);
  }

  // optional int32 AskPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->askprice(), output);
  }

  // optional int32 AskQuantity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->askquantity(), output);
  }

  // optional sfixed32 DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAsk_Int)
}

::google::protobuf::uint8* MarketDataUpdateBidAsk_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 BidPrice = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bidprice(), target);
  }

  // optional int32 BidQuantity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bidquantity(), target);
  }

  // optional int32 AskPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->askprice(), target);
  }

  // optional int32 AskQuantity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->askquantity(), target);
  }

  // optional sfixed32 DateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAsk_Int)
  return target;
}

size_t MarketDataUpdateBidAsk_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 BidPrice = 2;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidprice());
    }

    // optional int32 BidQuantity = 3;
    if (has_bidquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidquantity());
    }

    // optional int32 AskPrice = 4;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askprice());
    }

    // optional int32 AskQuantity = 5;
    if (has_askquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askquantity());
    }

    // optional sfixed32 DateTime = 6;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateBidAsk_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateBidAsk_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateBidAsk_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateBidAsk_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateBidAsk_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAsk_Int::MergeFrom(const MarketDataUpdateBidAsk_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      bidprice_ = from.bidprice_;
    }
    if (cached_has_bits & 0x00000004u) {
      bidquantity_ = from.bidquantity_;
    }
    if (cached_has_bits & 0x00000008u) {
      askprice_ = from.askprice_;
    }
    if (cached_has_bits & 0x00000010u) {
      askquantity_ = from.askquantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateBidAsk_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAsk_Int::CopyFrom(const MarketDataUpdateBidAsk_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateBidAsk_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAsk_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateBidAsk_Int::Swap(MarketDataUpdateBidAsk_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateBidAsk_Int::InternalSwap(MarketDataUpdateBidAsk_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(bidprice_, other->bidprice_);
  swap(bidquantity_, other->bidquantity_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateBidAsk_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateBidAskCompact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateBidAskCompact::kBidPriceFieldNumber;
const int MarketDataUpdateBidAskCompact::kBidQuantityFieldNumber;
const int MarketDataUpdateBidAskCompact::kAskPriceFieldNumber;
const int MarketDataUpdateBidAskCompact::kAskQuantityFieldNumber;
const int MarketDataUpdateBidAskCompact::kDateTimeFieldNumber;
const int MarketDataUpdateBidAskCompact::kSymbolIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateBidAskCompact::MarketDataUpdateBidAskCompact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateBidAskCompact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateBidAskCompact)
}
MarketDataUpdateBidAskCompact::MarketDataUpdateBidAskCompact(const MarketDataUpdateBidAskCompact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bidprice_, &from.bidprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&symbolid_) -
    reinterpret_cast<char*>(&bidprice_)) + sizeof(symbolid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateBidAskCompact)
}

void MarketDataUpdateBidAskCompact::SharedCtor() {
  ::memset(&bidprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&bidprice_)) + sizeof(symbolid_));
}

MarketDataUpdateBidAskCompact::~MarketDataUpdateBidAskCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateBidAskCompact)
  SharedDtor();
}

void MarketDataUpdateBidAskCompact::SharedDtor() {
}

void MarketDataUpdateBidAskCompact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateBidAskCompact::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateBidAskCompact& MarketDataUpdateBidAskCompact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateBidAskCompact.base);
  return *internal_default_instance();
}


void MarketDataUpdateBidAskCompact::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateBidAskCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&bidprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&symbolid_) -
        reinterpret_cast<char*>(&bidprice_)) + sizeof(symbolid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateBidAskCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateBidAskCompact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float BidPrice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_bidprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float BidQuantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_bidquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float AskPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_askprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float AskQuantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_askquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 DateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SymbolID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateBidAskCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateBidAskCompact)
  return false;
#undef DO_
}

void MarketDataUpdateBidAskCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateBidAskCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float BidPrice = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bidprice(), output);
  }

  // optional float BidQuantity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bidquantity(), output);
  }

  // optional float AskPrice = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->askprice(), output);
  }

  // optional float AskQuantity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->askquantity(), output);
  }

  // optional sfixed32 DateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->datetime(), output);
  }

  // optional uint32 SymbolID = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->symbolid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateBidAskCompact)
}

::google::protobuf::uint8* MarketDataUpdateBidAskCompact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateBidAskCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float BidPrice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bidprice(), target);
  }

  // optional float BidQuantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bidquantity(), target);
  }

  // optional float AskPrice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->askprice(), target);
  }

  // optional float AskQuantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->askquantity(), target);
  }

  // optional sfixed32 DateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->datetime(), target);
  }

  // optional uint32 SymbolID = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->symbolid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateBidAskCompact)
  return target;
}

size_t MarketDataUpdateBidAskCompact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateBidAskCompact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional float BidPrice = 1;
    if (has_bidprice()) {
      total_size += 1 + 4;
    }

    // optional float BidQuantity = 2;
    if (has_bidquantity()) {
      total_size += 1 + 4;
    }

    // optional float AskPrice = 3;
    if (has_askprice()) {
      total_size += 1 + 4;
    }

    // optional float AskQuantity = 4;
    if (has_askquantity()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 DateTime = 5;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

    // optional uint32 SymbolID = 6;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateBidAskCompact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateBidAskCompact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateBidAskCompact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateBidAskCompact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateBidAskCompact)
    MergeFrom(*source);
  }
}

void MarketDataUpdateBidAskCompact::MergeFrom(const MarketDataUpdateBidAskCompact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      bidprice_ = from.bidprice_;
    }
    if (cached_has_bits & 0x00000002u) {
      bidquantity_ = from.bidquantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      askprice_ = from.askprice_;
    }
    if (cached_has_bits & 0x00000008u) {
      askquantity_ = from.askquantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      symbolid_ = from.symbolid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateBidAskCompact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateBidAskCompact::CopyFrom(const MarketDataUpdateBidAskCompact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateBidAskCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateBidAskCompact::IsInitialized() const {
  return true;
}

void MarketDataUpdateBidAskCompact::Swap(MarketDataUpdateBidAskCompact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateBidAskCompact::InternalSwap(MarketDataUpdateBidAskCompact* other) {
  using std::swap;
  swap(bidprice_, other->bidprice_);
  swap(bidquantity_, other->bidquantity_);
  swap(askprice_, other->askprice_);
  swap(askquantity_, other->askquantity_);
  swap(datetime_, other->datetime_);
  swap(symbolid_, other->symbolid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateBidAskCompact::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateTradeCompact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateTradeCompact::kPriceFieldNumber;
const int MarketDataUpdateTradeCompact::kVolumeFieldNumber;
const int MarketDataUpdateTradeCompact::kDateTimeFieldNumber;
const int MarketDataUpdateTradeCompact::kSymbolIDFieldNumber;
const int MarketDataUpdateTradeCompact::kAtBidOrAskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateTradeCompact::MarketDataUpdateTradeCompact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTradeCompact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateTradeCompact)
}
MarketDataUpdateTradeCompact::MarketDataUpdateTradeCompact(const MarketDataUpdateTradeCompact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&atbidorask_) -
    reinterpret_cast<char*>(&price_)) + sizeof(atbidorask_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateTradeCompact)
}

void MarketDataUpdateTradeCompact::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atbidorask_) -
      reinterpret_cast<char*>(&price_)) + sizeof(atbidorask_));
}

MarketDataUpdateTradeCompact::~MarketDataUpdateTradeCompact() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateTradeCompact)
  SharedDtor();
}

void MarketDataUpdateTradeCompact::SharedDtor() {
}

void MarketDataUpdateTradeCompact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateTradeCompact::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateTradeCompact& MarketDataUpdateTradeCompact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateTradeCompact.base);
  return *internal_default_instance();
}


void MarketDataUpdateTradeCompact::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateTradeCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atbidorask_) -
        reinterpret_cast<char*>(&price_)) + sizeof(atbidorask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateTradeCompact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateTradeCompact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Volume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 DateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SymbolID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateTradeCompact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateTradeCompact)
  return false;
#undef DO_
}

void MarketDataUpdateTradeCompact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateTradeCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float Price = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->price(), output);
  }

  // optional float Volume = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->volume(), output);
  }

  // optional sfixed32 DateTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->datetime(), output);
  }

  // optional uint32 SymbolID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->symbolid(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->atbidorask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateTradeCompact)
}

::google::protobuf::uint8* MarketDataUpdateTradeCompact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateTradeCompact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float Price = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->price(), target);
  }

  // optional float Volume = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->volume(), target);
  }

  // optional sfixed32 DateTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->datetime(), target);
  }

  // optional uint32 SymbolID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->symbolid(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->atbidorask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateTradeCompact)
  return target;
}

size_t MarketDataUpdateTradeCompact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateTradeCompact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional float Price = 1;
    if (has_price()) {
      total_size += 1 + 4;
    }

    // optional float Volume = 2;
    if (has_volume()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 DateTime = 3;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

    // optional uint32 SymbolID = 4;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateTradeCompact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateTradeCompact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateTradeCompact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateTradeCompact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateTradeCompact)
    MergeFrom(*source);
  }
}

void MarketDataUpdateTradeCompact::MergeFrom(const MarketDataUpdateTradeCompact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000004u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000008u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000010u) {
      atbidorask_ = from.atbidorask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateTradeCompact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateTradeCompact::CopyFrom(const MarketDataUpdateTradeCompact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateTradeCompact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateTradeCompact::IsInitialized() const {
  return true;
}

void MarketDataUpdateTradeCompact::Swap(MarketDataUpdateTradeCompact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateTradeCompact::InternalSwap(MarketDataUpdateTradeCompact* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(datetime_, other->datetime_);
  swap(symbolid_, other->symbolid_);
  swap(atbidorask_, other->atbidorask_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateTradeCompact::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionVolume::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionVolume::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionVolume::kVolumeFieldNumber;
const int MarketDataUpdateSessionVolume::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionVolume::MarketDataUpdateSessionVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionVolume.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionVolume)
}
MarketDataUpdateSessionVolume::MarketDataUpdateSessionVolume(const MarketDataUpdateSessionVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionVolume)
}

void MarketDataUpdateSessionVolume::SharedCtor() {
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionVolume::~MarketDataUpdateSessionVolume() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionVolume)
  SharedDtor();
}

void MarketDataUpdateSessionVolume::SharedDtor() {
}

void MarketDataUpdateSessionVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionVolume::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionVolume& MarketDataUpdateSessionVolume::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionVolume.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionVolume)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Volume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionVolume)
  return false;
#undef DO_
}

void MarketDataUpdateSessionVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Volume = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->volume(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionVolume)
}

::google::protobuf::uint8* MarketDataUpdateSessionVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Volume = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->volume(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionVolume)
  return target;
}

size_t MarketDataUpdateSessionVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionVolume)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double Volume = 2;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionVolume)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionVolume::MergeFrom(const MarketDataUpdateSessionVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionVolume::CopyFrom(const MarketDataUpdateSessionVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionVolume::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionVolume::Swap(MarketDataUpdateSessionVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionVolume::InternalSwap(MarketDataUpdateSessionVolume* other) {
  using std::swap;
  swap(volume_, other->volume_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionVolume::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateOpenInterest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateOpenInterest::kSymbolIDFieldNumber;
const int MarketDataUpdateOpenInterest::kOpenInterestFieldNumber;
const int MarketDataUpdateOpenInterest::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateOpenInterest::MarketDataUpdateOpenInterest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateOpenInterest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateOpenInterest)
}
MarketDataUpdateOpenInterest::MarketDataUpdateOpenInterest(const MarketDataUpdateOpenInterest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateOpenInterest)
}

void MarketDataUpdateOpenInterest::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateOpenInterest::~MarketDataUpdateOpenInterest() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateOpenInterest)
  SharedDtor();
}

void MarketDataUpdateOpenInterest::SharedDtor() {
}

void MarketDataUpdateOpenInterest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateOpenInterest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateOpenInterest& MarketDataUpdateOpenInterest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateOpenInterest.base);
  return *internal_default_instance();
}


void MarketDataUpdateOpenInterest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateOpenInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateOpenInterest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateOpenInterest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 OpenInterest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_openinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateOpenInterest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateOpenInterest)
  return false;
#undef DO_
}

void MarketDataUpdateOpenInterest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateOpenInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional uint32 OpenInterest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->openinterest(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateOpenInterest)
}

::google::protobuf::uint8* MarketDataUpdateOpenInterest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateOpenInterest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional uint32 OpenInterest = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->openinterest(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateOpenInterest)
  return target;
}

size_t MarketDataUpdateOpenInterest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateOpenInterest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 OpenInterest = 2;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openinterest());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateOpenInterest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateOpenInterest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateOpenInterest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateOpenInterest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateOpenInterest)
    MergeFrom(*source);
  }
}

void MarketDataUpdateOpenInterest::MergeFrom(const MarketDataUpdateOpenInterest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      openinterest_ = from.openinterest_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateOpenInterest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateOpenInterest::CopyFrom(const MarketDataUpdateOpenInterest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateOpenInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateOpenInterest::IsInitialized() const {
  return true;
}

void MarketDataUpdateOpenInterest::Swap(MarketDataUpdateOpenInterest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateOpenInterest::InternalSwap(MarketDataUpdateOpenInterest* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(openinterest_, other->openinterest_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateOpenInterest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionHigh::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionHigh::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionHigh::kPriceFieldNumber;
const int MarketDataUpdateSessionHigh::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionHigh::MarketDataUpdateSessionHigh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionHigh.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionHigh)
}
MarketDataUpdateSessionHigh::MarketDataUpdateSessionHigh(const MarketDataUpdateSessionHigh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionHigh)
}

void MarketDataUpdateSessionHigh::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionHigh::~MarketDataUpdateSessionHigh() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionHigh)
  SharedDtor();
}

void MarketDataUpdateSessionHigh::SharedDtor() {
}

void MarketDataUpdateSessionHigh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionHigh& MarketDataUpdateSessionHigh::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionHigh.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionHigh::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionHigh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionHigh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionHigh)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionHigh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionHigh)
  return false;
#undef DO_
}

void MarketDataUpdateSessionHigh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionHigh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionHigh)
}

::google::protobuf::uint8* MarketDataUpdateSessionHigh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionHigh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionHigh)
  return target;
}

size_t MarketDataUpdateSessionHigh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionHigh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionHigh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionHigh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionHigh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionHigh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionHigh)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionHigh::MergeFrom(const MarketDataUpdateSessionHigh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionHigh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionHigh::CopyFrom(const MarketDataUpdateSessionHigh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionHigh::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionHigh::Swap(MarketDataUpdateSessionHigh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionHigh::InternalSwap(MarketDataUpdateSessionHigh* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionHigh::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionHigh_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionHigh_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionHigh_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionHigh_Int::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionHigh_Int::MarketDataUpdateSessionHigh_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionHigh_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
}
MarketDataUpdateSessionHigh_Int::MarketDataUpdateSessionHigh_Int(const MarketDataUpdateSessionHigh_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
}

void MarketDataUpdateSessionHigh_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionHigh_Int::~MarketDataUpdateSessionHigh_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionHigh_Int)
  SharedDtor();
}

void MarketDataUpdateSessionHigh_Int::SharedDtor() {
}

void MarketDataUpdateSessionHigh_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionHigh_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionHigh_Int& MarketDataUpdateSessionHigh_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionHigh_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionHigh_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionHigh_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionHigh_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionHigh_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionHigh_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionHigh_Int)
  return target;
}

size_t MarketDataUpdateSessionHigh_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionHigh_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionHigh_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionHigh_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionHigh_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionHigh_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionHigh_Int::MergeFrom(const MarketDataUpdateSessionHigh_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionHigh_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionHigh_Int::CopyFrom(const MarketDataUpdateSessionHigh_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionHigh_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionHigh_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionHigh_Int::Swap(MarketDataUpdateSessionHigh_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionHigh_Int::InternalSwap(MarketDataUpdateSessionHigh_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionHigh_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionLow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionLow::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionLow::kPriceFieldNumber;
const int MarketDataUpdateSessionLow::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionLow::MarketDataUpdateSessionLow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionLow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionLow)
}
MarketDataUpdateSessionLow::MarketDataUpdateSessionLow(const MarketDataUpdateSessionLow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionLow)
}

void MarketDataUpdateSessionLow::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionLow::~MarketDataUpdateSessionLow() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionLow)
  SharedDtor();
}

void MarketDataUpdateSessionLow::SharedDtor() {
}

void MarketDataUpdateSessionLow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionLow& MarketDataUpdateSessionLow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionLow.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionLow::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionLow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&price_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionLow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionLow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionLow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionLow)
  return false;
#undef DO_
}

void MarketDataUpdateSessionLow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionLow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionLow)
}

::google::protobuf::uint8* MarketDataUpdateSessionLow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionLow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double Price = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionLow)
  return target;
}

size_t MarketDataUpdateSessionLow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionLow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double Price = 2;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionLow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionLow)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionLow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionLow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionLow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionLow)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionLow::MergeFrom(const MarketDataUpdateSessionLow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionLow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000002u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionLow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionLow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionLow::CopyFrom(const MarketDataUpdateSessionLow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionLow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionLow::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionLow::Swap(MarketDataUpdateSessionLow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionLow::InternalSwap(MarketDataUpdateSessionLow* other) {
  using std::swap;
  swap(price_, other->price_);
  swap(symbolid_, other->symbolid_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionLow::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateSessionLow_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateSessionLow_Int::kSymbolIDFieldNumber;
const int MarketDataUpdateSessionLow_Int::kPriceFieldNumber;
const int MarketDataUpdateSessionLow_Int::kTradingSessionDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateSessionLow_Int::MarketDataUpdateSessionLow_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionLow_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateSessionLow_Int)
}
MarketDataUpdateSessionLow_Int::MarketDataUpdateSessionLow_Int(const MarketDataUpdateSessionLow_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradingsessiondate_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateSessionLow_Int)
}

void MarketDataUpdateSessionLow_Int::SharedCtor() {
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tradingsessiondate_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
}

MarketDataUpdateSessionLow_Int::~MarketDataUpdateSessionLow_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateSessionLow_Int)
  SharedDtor();
}

void MarketDataUpdateSessionLow_Int::SharedDtor() {
}

void MarketDataUpdateSessionLow_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateSessionLow_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateSessionLow_Int& MarketDataUpdateSessionLow_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateSessionLow_Int.base);
  return *internal_default_instance();
}


void MarketDataUpdateSessionLow_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tradingsessiondate_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(tradingsessiondate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateSessionLow_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TradingSessionDate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tradingsessiondate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingsessiondate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateSessionLow_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateSessionLow_Int)
  return false;
#undef DO_
}

void MarketDataUpdateSessionLow_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradingsessiondate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateSessionLow_Int)
}

::google::protobuf::uint8* MarketDataUpdateSessionLow_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional int32 Price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional uint32 TradingSessionDate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradingsessiondate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateSessionLow_Int)
  return target;
}

size_t MarketDataUpdateSessionLow_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

    // optional int32 Price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional uint32 TradingSessionDate = 3;
    if (has_tradingsessiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingsessiondate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateSessionLow_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateSessionLow_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateSessionLow_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateSessionLow_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateSessionLow_Int)
    MergeFrom(*source);
  }
}

void MarketDataUpdateSessionLow_Int::MergeFrom(const MarketDataUpdateSessionLow_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      tradingsessiondate_ = from.tradingsessiondate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateSessionLow_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateSessionLow_Int::CopyFrom(const MarketDataUpdateSessionLow_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateSessionLow_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateSessionLow_Int::IsInitialized() const {
  return true;
}

void MarketDataUpdateSessionLow_Int::Swap(MarketDataUpdateSessionLow_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateSessionLow_Int::InternalSwap(MarketDataUpdateSessionLow_Int* other) {
  using std::swap;
  swap(symbolid_, other->symbolid_);
  swap(price_, other->price_);
  swap(tradingsessiondate_, other->tradingsessiondate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateSessionLow_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketDataUpdateLastTradeSnapshot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataUpdateLastTradeSnapshot::kSymbolIDFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradePriceFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradeVolumeFieldNumber;
const int MarketDataUpdateLastTradeSnapshot::kLastTradeDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataUpdateLastTradeSnapshot::MarketDataUpdateLastTradeSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateLastTradeSnapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}
MarketDataUpdateLastTradeSnapshot::MarketDataUpdateLastTradeSnapshot(const MarketDataUpdateLastTradeSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lasttradeprice_, &from.lasttradeprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&symbolid_) -
    reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(symbolid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}

void MarketDataUpdateLastTradeSnapshot::SharedCtor() {
  ::memset(&lasttradeprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) -
      reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(symbolid_));
}

MarketDataUpdateLastTradeSnapshot::~MarketDataUpdateLastTradeSnapshot() {
  // @@protoc_insertion_point(destructor:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  SharedDtor();
}

void MarketDataUpdateLastTradeSnapshot::SharedDtor() {
}

void MarketDataUpdateLastTradeSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketDataUpdateLastTradeSnapshot::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketDataUpdateLastTradeSnapshot& MarketDataUpdateLastTradeSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_MarketDataUpdateLastTradeSnapshot.base);
  return *internal_default_instance();
}


void MarketDataUpdateLastTradeSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&lasttradeprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&symbolid_) -
        reinterpret_cast<char*>(&lasttradeprice_)) + sizeof(symbolid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MarketDataUpdateLastTradeSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SymbolID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_symbolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastTradePrice = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lasttradeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastTradeVolume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lasttradevolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradevolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastTradeDateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_lasttradedatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasttradedatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return false;
#undef DO_
}

void MarketDataUpdateLastTradeSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->symbolid(), output);
  }

  // optional double LastTradePrice = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lasttradeprice(), output);
  }

  // optional double LastTradeVolume = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lasttradevolume(), output);
  }

  // optional double LastTradeDateTime = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lasttradedatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.MarketDataUpdateLastTradeSnapshot)
}

::google::protobuf::uint8* MarketDataUpdateLastTradeSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 SymbolID = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->symbolid(), target);
  }

  // optional double LastTradePrice = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lasttradeprice(), target);
  }

  // optional double LastTradeVolume = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lasttradevolume(), target);
  }

  // optional double LastTradeDateTime = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lasttradedatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  return target;
}

size_t MarketDataUpdateLastTradeSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double LastTradePrice = 2;
    if (has_lasttradeprice()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeVolume = 3;
    if (has_lasttradevolume()) {
      total_size += 1 + 8;
    }

    // optional double LastTradeDateTime = 4;
    if (has_lasttradedatetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 SymbolID = 1;
    if (has_symbolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->symbolid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataUpdateLastTradeSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataUpdateLastTradeSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataUpdateLastTradeSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.MarketDataUpdateLastTradeSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.MarketDataUpdateLastTradeSnapshot)
    MergeFrom(*source);
  }
}

void MarketDataUpdateLastTradeSnapshot::MergeFrom(const MarketDataUpdateLastTradeSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      lasttradeprice_ = from.lasttradeprice_;
    }
    if (cached_has_bits & 0x00000002u) {
      lasttradevolume_ = from.lasttradevolume_;
    }
    if (cached_has_bits & 0x00000004u) {
      lasttradedatetime_ = from.lasttradedatetime_;
    }
    if (cached_has_bits & 0x00000008u) {
      symbolid_ = from.symbolid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketDataUpdateLastTradeSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataUpdateLastTradeSnapshot::CopyFrom(const MarketDataUpdateLastTradeSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.MarketDataUpdateLastTradeSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataUpdateLastTradeSnapshot::IsInitialized() const {
  return true;
}

void MarketDataUpdateLastTradeSnapshot::Swap(MarketDataUpdateLastTradeSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataUpdateLastTradeSnapshot::InternalSwap(MarketDataUpdateLastTradeSnapshot* other) {
  using std::swap;
  swap(lasttradeprice_, other->lasttradeprice_);
  swap(lasttradevolume_, other->lasttradevolume_);
  swap(lasttradedatetime_, other->lasttradedatetime_);
  swap(symbolid_, other->symbolid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketDataUpdateLastTradeSnapshot::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewSingleOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewSingleOrder::kSymbolFieldNumber;
const int SubmitNewSingleOrder::kExchangeFieldNumber;
const int SubmitNewSingleOrder::kTradeAccountFieldNumber;
const int SubmitNewSingleOrder::kClientOrderIDFieldNumber;
const int SubmitNewSingleOrder::kOrderTypeFieldNumber;
const int SubmitNewSingleOrder::kBuySellFieldNumber;
const int SubmitNewSingleOrder::kPrice1FieldNumber;
const int SubmitNewSingleOrder::kPrice2FieldNumber;
const int SubmitNewSingleOrder::kQuantityFieldNumber;
const int SubmitNewSingleOrder::kTimeInForceFieldNumber;
const int SubmitNewSingleOrder::kGoodTillDateTimeFieldNumber;
const int SubmitNewSingleOrder::kIsAutomatedOrderFieldNumber;
const int SubmitNewSingleOrder::kIsParentOrderFieldNumber;
const int SubmitNewSingleOrder::kFreeFormTextFieldNumber;
const int SubmitNewSingleOrder::kOpenOrCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewSingleOrder::SubmitNewSingleOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SubmitNewSingleOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewSingleOrder)
}
SubmitNewSingleOrder::SubmitNewSingleOrder(const SubmitNewSingleOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid()) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_freeformtext()) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_, &from.ordertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&openorclose_) -
    reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewSingleOrder)
}

void SubmitNewSingleOrder::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openorclose_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
}

SubmitNewSingleOrder::~SubmitNewSingleOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewSingleOrder)
  SharedDtor();
}

void SubmitNewSingleOrder::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewSingleOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewSingleOrder::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewSingleOrder& SubmitNewSingleOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SubmitNewSingleOrder.base);
  return *internal_default_instance();
}


void SubmitNewSingleOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewSingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      clientorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      freeformtext_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&ordertype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price1_) -
        reinterpret_cast<char*>(&ordertype_)) + sizeof(price1_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&price2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&openorclose_) -
        reinterpret_cast<char*>(&price2_)) + sizeof(openorclose_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubmitNewSingleOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewSingleOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrder.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrder.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrder.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrder.ClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_price1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_price2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 GoodTillDateTime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_goodtilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsAutomatedOrder = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_isautomatedorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsParentOrder = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_isparentorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isparentorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FreeFormText = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrder.FreeFormText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewSingleOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewSingleOrder)
  return false;
#undef DO_
}

void SubmitNewSingleOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewSingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string TradeAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // optional string ClientOrderID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientorderid(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ordertype(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->buysell(), output);
  }

  // optional double Price1 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price1(), output);
  }

  // optional double Price2 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price2(), output);
  }

  // optional double Quantity = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->quantity(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->goodtilldatetime(), output);
  }

  // optional uint32 IsAutomatedOrder = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->isautomatedorder(), output);
  }

  // optional uint32 IsParentOrder = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->isparentorder(), output);
  }

  // optional string FreeFormText = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->freeformtext(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->openorclose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewSingleOrder)
}

::google::protobuf::uint8* SubmitNewSingleOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewSingleOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string TradeAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // optional string ClientOrderID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientorderid(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ordertype(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->buysell(), target);
  }

  // optional double Price1 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price1(), target);
  }

  // optional double Price2 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price2(), target);
  }

  // optional double Quantity = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->quantity(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->goodtilldatetime(), target);
  }

  // optional uint32 IsAutomatedOrder = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->isautomatedorder(), target);
  }

  // optional uint32 IsParentOrder = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->isparentorder(), target);
  }

  // optional string FreeFormText = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrder.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->freeformtext(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->openorclose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewSingleOrder)
  return target;
}

size_t SubmitNewSingleOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewSingleOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string TradeAccount = 3;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string ClientOrderID = 4;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional string FreeFormText = 14;
    if (has_freeformtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType = 5;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional .DTC_PB.BuySellEnum BuySell = 6;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional double Price1 = 7;
    if (has_price1()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double Price2 = 8;
    if (has_price2()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 9;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 GoodTillDateTime = 11;
    if (has_goodtilldatetime()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional uint32 IsAutomatedOrder = 12;
    if (has_isautomatedorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional uint32 IsParentOrder = 13;
    if (has_isparentorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isparentorder());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 15;
    if (has_openorclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewSingleOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewSingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewSingleOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewSingleOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewSingleOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewSingleOrder)
    MergeFrom(*source);
  }
}

void SubmitNewSingleOrder::MergeFrom(const SubmitNewSingleOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewSingleOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_clientorderid();
      clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_freeformtext();
      freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
    }
    if (cached_has_bits & 0x00000020u) {
      ordertype_ = from.ordertype_;
    }
    if (cached_has_bits & 0x00000040u) {
      buysell_ = from.buysell_;
    }
    if (cached_has_bits & 0x00000080u) {
      price1_ = from.price1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      price2_ = from.price2_;
    }
    if (cached_has_bits & 0x00000200u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000400u) {
      goodtilldatetime_ = from.goodtilldatetime_;
    }
    if (cached_has_bits & 0x00000800u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00001000u) {
      isautomatedorder_ = from.isautomatedorder_;
    }
    if (cached_has_bits & 0x00002000u) {
      isparentorder_ = from.isparentorder_;
    }
    if (cached_has_bits & 0x00004000u) {
      openorclose_ = from.openorclose_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubmitNewSingleOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewSingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewSingleOrder::CopyFrom(const SubmitNewSingleOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewSingleOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewSingleOrder::IsInitialized() const {
  return true;
}

void SubmitNewSingleOrder::Swap(SubmitNewSingleOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewSingleOrder::InternalSwap(SubmitNewSingleOrder* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_, other->ordertype_);
  swap(buysell_, other->buysell_);
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(isparentorder_, other->isparentorder_);
  swap(openorclose_, other->openorclose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewSingleOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewSingleOrderInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewSingleOrderInt::kSymbolFieldNumber;
const int SubmitNewSingleOrderInt::kExchangeFieldNumber;
const int SubmitNewSingleOrderInt::kTradeAccountFieldNumber;
const int SubmitNewSingleOrderInt::kClientOrderIDFieldNumber;
const int SubmitNewSingleOrderInt::kOrderTypeFieldNumber;
const int SubmitNewSingleOrderInt::kBuySellFieldNumber;
const int SubmitNewSingleOrderInt::kPrice1FieldNumber;
const int SubmitNewSingleOrderInt::kPrice2FieldNumber;
const int SubmitNewSingleOrderInt::kDivisorFieldNumber;
const int SubmitNewSingleOrderInt::kQuantityFieldNumber;
const int SubmitNewSingleOrderInt::kTimeInForceFieldNumber;
const int SubmitNewSingleOrderInt::kGoodTillDateTimeFieldNumber;
const int SubmitNewSingleOrderInt::kIsAutomatedOrderFieldNumber;
const int SubmitNewSingleOrderInt::kIsParentOrderFieldNumber;
const int SubmitNewSingleOrderInt::kFreeFormTextFieldNumber;
const int SubmitNewSingleOrderInt::kOpenOrCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewSingleOrderInt::SubmitNewSingleOrderInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SubmitNewSingleOrderInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewSingleOrderInt)
}
SubmitNewSingleOrderInt::SubmitNewSingleOrderInt(const SubmitNewSingleOrderInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid()) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_freeformtext()) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_, &from.ordertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&openorclose_) -
    reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewSingleOrderInt)
}

void SubmitNewSingleOrderInt::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openorclose_) -
      reinterpret_cast<char*>(&ordertype_)) + sizeof(openorclose_));
}

SubmitNewSingleOrderInt::~SubmitNewSingleOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewSingleOrderInt)
  SharedDtor();
}

void SubmitNewSingleOrderInt::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewSingleOrderInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewSingleOrderInt::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewSingleOrderInt& SubmitNewSingleOrderInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SubmitNewSingleOrderInt.base);
  return *internal_default_instance();
}


void SubmitNewSingleOrderInt::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewSingleOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      clientorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      freeformtext_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&ordertype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price1_) -
        reinterpret_cast<char*>(&ordertype_)) + sizeof(price1_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&price2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&openorclose_) -
        reinterpret_cast<char*>(&price2_)) + sizeof(openorclose_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubmitNewSingleOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewSingleOrderInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.ClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_price1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_price2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Divisor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_divisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Quantity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 GoodTillDateTime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_goodtilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsAutomatedOrder = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_isautomatedorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsParentOrder = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_isparentorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isparentorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FreeFormText = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewSingleOrderInt.FreeFormText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewSingleOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewSingleOrderInt)
  return false;
#undef DO_
}

void SubmitNewSingleOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewSingleOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string TradeAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // optional string ClientOrderID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clientorderid(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ordertype(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->buysell(), output);
  }

  // optional int64 Price1 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->price1(), output);
  }

  // optional int64 Price2 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->price2(), output);
  }

  // optional float Divisor = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->divisor(), output);
  }

  // optional int64 Quantity = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->quantity(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->goodtilldatetime(), output);
  }

  // optional uint32 IsAutomatedOrder = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->isautomatedorder(), output);
  }

  // optional uint32 IsParentOrder = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->isparentorder(), output);
  }

  // optional string FreeFormText = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->freeformtext(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->openorclose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewSingleOrderInt)
}

::google::protobuf::uint8* SubmitNewSingleOrderInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewSingleOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string TradeAccount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // optional string ClientOrderID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clientorderid(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ordertype(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->buysell(), target);
  }

  // optional int64 Price1 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->price1(), target);
  }

  // optional int64 Price2 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->price2(), target);
  }

  // optional float Divisor = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->divisor(), target);
  }

  // optional int64 Quantity = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->quantity(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->goodtilldatetime(), target);
  }

  // optional uint32 IsAutomatedOrder = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->isautomatedorder(), target);
  }

  // optional uint32 IsParentOrder = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->isparentorder(), target);
  }

  // optional string FreeFormText = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewSingleOrderInt.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->freeformtext(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->openorclose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewSingleOrderInt)
  return target;
}

size_t SubmitNewSingleOrderInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewSingleOrderInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string TradeAccount = 3;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string ClientOrderID = 4;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional string FreeFormText = 15;
    if (has_freeformtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType = 5;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional .DTC_PB.BuySellEnum BuySell = 6;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional int64 Price1 = 7;
    if (has_price1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int64 Price2 = 8;
    if (has_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2());
    }

    // optional int64 Quantity = 10;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity());
    }

    // optional float Divisor = 9;
    if (has_divisor()) {
      total_size += 1 + 4;
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 11;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional sfixed64 GoodTillDateTime = 12;
    if (has_goodtilldatetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsAutomatedOrder = 13;
    if (has_isautomatedorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional uint32 IsParentOrder = 14;
    if (has_isparentorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isparentorder());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 16;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewSingleOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewSingleOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewSingleOrderInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewSingleOrderInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewSingleOrderInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewSingleOrderInt)
    MergeFrom(*source);
  }
}

void SubmitNewSingleOrderInt::MergeFrom(const SubmitNewSingleOrderInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewSingleOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_clientorderid();
      clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_freeformtext();
      freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
    }
    if (cached_has_bits & 0x00000020u) {
      ordertype_ = from.ordertype_;
    }
    if (cached_has_bits & 0x00000040u) {
      buysell_ = from.buysell_;
    }
    if (cached_has_bits & 0x00000080u) {
      price1_ = from.price1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      price2_ = from.price2_;
    }
    if (cached_has_bits & 0x00000200u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000400u) {
      divisor_ = from.divisor_;
    }
    if (cached_has_bits & 0x00000800u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00001000u) {
      goodtilldatetime_ = from.goodtilldatetime_;
    }
    if (cached_has_bits & 0x00002000u) {
      isautomatedorder_ = from.isautomatedorder_;
    }
    if (cached_has_bits & 0x00004000u) {
      isparentorder_ = from.isparentorder_;
    }
    if (cached_has_bits & 0x00008000u) {
      openorclose_ = from.openorclose_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubmitNewSingleOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewSingleOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewSingleOrderInt::CopyFrom(const SubmitNewSingleOrderInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewSingleOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewSingleOrderInt::IsInitialized() const {
  return true;
}

void SubmitNewSingleOrderInt::Swap(SubmitNewSingleOrderInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewSingleOrderInt::InternalSwap(SubmitNewSingleOrderInt* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_, other->ordertype_);
  swap(buysell_, other->buysell_);
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(divisor_, other->divisor_);
  swap(timeinforce_, other->timeinforce_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(isparentorder_, other->isparentorder_);
  swap(openorclose_, other->openorclose_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewSingleOrderInt::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CancelReplaceOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelReplaceOrder::kServerOrderIDFieldNumber;
const int CancelReplaceOrder::kClientOrderIDFieldNumber;
const int CancelReplaceOrder::kPrice1FieldNumber;
const int CancelReplaceOrder::kPrice2FieldNumber;
const int CancelReplaceOrder::kQuantityFieldNumber;
const int CancelReplaceOrder::kPrice1IsSetFieldNumber;
const int CancelReplaceOrder::kPrice2IsSetFieldNumber;
const int CancelReplaceOrder::kTimeInForceFieldNumber;
const int CancelReplaceOrder::kGoodTillDateTimeFieldNumber;
const int CancelReplaceOrder::kUpdatePrice1OffsetToParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelReplaceOrder::CancelReplaceOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_CancelReplaceOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelReplaceOrder)
}
CancelReplaceOrder::CancelReplaceOrder(const CancelReplaceOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverorderid()) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid()) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  ::memcpy(&price1_, &from.price1_,
    static_cast<size_t>(reinterpret_cast<char*>(&updateprice1offsettoparent_) -
    reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelReplaceOrder)
}

void CancelReplaceOrder::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateprice1offsettoparent_) -
      reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
}

CancelReplaceOrder::~CancelReplaceOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelReplaceOrder)
  SharedDtor();
}

void CancelReplaceOrder::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelReplaceOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CancelReplaceOrder::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelReplaceOrder& CancelReplaceOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_CancelReplaceOrder.base);
  return *internal_default_instance();
}


void CancelReplaceOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CancelReplaceOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientorderid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&price1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goodtilldatetime_) -
        reinterpret_cast<char*>(&price1_)) + sizeof(goodtilldatetime_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&timeinforce_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&updateprice1offsettoparent_) -
        reinterpret_cast<char*>(&timeinforce_)) + sizeof(updateprice1offsettoparent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CancelReplaceOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelReplaceOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CancelReplaceOrder.ServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CancelReplaceOrder.ClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_price1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_price2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Price1IsSet = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_price1isset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price1isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Price2IsSet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_price2isset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 GoodTillDateTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_goodtilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UpdatePrice1OffsetToParent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_updateprice1offsettoparent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateprice1offsettoparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelReplaceOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelReplaceOrder)
  return false;
#undef DO_
}

void CancelReplaceOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelReplaceOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ServerOrderID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  // optional double Price1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price1(), output);
  }

  // optional double Price2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price2(), output);
  }

  // optional double Quantity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->quantity(), output);
  }

  // optional uint32 Price1IsSet = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price1isset(), output);
  }

  // optional uint32 Price2IsSet = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price2isset(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->timeinforce(), output);
  }

  // optional uint64 GoodTillDateTime = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->goodtilldatetime(), output);
  }

  // optional uint32 UpdatePrice1OffsetToParent = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->updateprice1offsettoparent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelReplaceOrder)
}

::google::protobuf::uint8* CancelReplaceOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelReplaceOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ServerOrderID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrder.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  // optional double Price1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price1(), target);
  }

  // optional double Price2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price2(), target);
  }

  // optional double Quantity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->quantity(), target);
  }

  // optional uint32 Price1IsSet = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->price1isset(), target);
  }

  // optional uint32 Price2IsSet = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price2isset(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->timeinforce(), target);
  }

  // optional uint64 GoodTillDateTime = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->goodtilldatetime(), target);
  }

  // optional uint32 UpdatePrice1OffsetToParent = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->updateprice1offsettoparent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelReplaceOrder)
  return target;
}

size_t CancelReplaceOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CancelReplaceOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ServerOrderID = 1;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 2;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional double Price1 = 3;
    if (has_price1()) {
      total_size += 1 + 8;
    }

    // optional double Price2 = 4;
    if (has_price2()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 5;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional uint32 Price1IsSet = 6;
    if (has_price1isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price1isset());
    }

    // optional uint32 Price2IsSet = 7;
    if (has_price2isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price2isset());
    }

    // optional uint64 GoodTillDateTime = 10;
    if (has_goodtilldatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goodtilldatetime());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .DTC_PB.TimeInForceEnum TimeInForce = 9;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional uint32 UpdatePrice1OffsetToParent = 11;
    if (has_updateprice1offsettoparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateprice1offsettoparent());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelReplaceOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CancelReplaceOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelReplaceOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelReplaceOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CancelReplaceOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CancelReplaceOrder)
    MergeFrom(*source);
  }
}

void CancelReplaceOrder::MergeFrom(const CancelReplaceOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CancelReplaceOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverorderid();
      serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_clientorderid();
      clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
    }
    if (cached_has_bits & 0x00000004u) {
      price1_ = from.price1_;
    }
    if (cached_has_bits & 0x00000008u) {
      price2_ = from.price2_;
    }
    if (cached_has_bits & 0x00000010u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      price1isset_ = from.price1isset_;
    }
    if (cached_has_bits & 0x00000040u) {
      price2isset_ = from.price2isset_;
    }
    if (cached_has_bits & 0x00000080u) {
      goodtilldatetime_ = from.goodtilldatetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00000200u) {
      updateprice1offsettoparent_ = from.updateprice1offsettoparent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CancelReplaceOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CancelReplaceOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelReplaceOrder::CopyFrom(const CancelReplaceOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CancelReplaceOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelReplaceOrder::IsInitialized() const {
  return true;
}

void CancelReplaceOrder::Swap(CancelReplaceOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelReplaceOrder::InternalSwap(CancelReplaceOrder* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(price1isset_, other->price1isset_);
  swap(price2isset_, other->price2isset_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(updateprice1offsettoparent_, other->updateprice1offsettoparent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelReplaceOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CancelReplaceOrderInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelReplaceOrderInt::kServerOrderIDFieldNumber;
const int CancelReplaceOrderInt::kClientOrderIDFieldNumber;
const int CancelReplaceOrderInt::kPrice1FieldNumber;
const int CancelReplaceOrderInt::kPrice2FieldNumber;
const int CancelReplaceOrderInt::kDivisorFieldNumber;
const int CancelReplaceOrderInt::kQuantityFieldNumber;
const int CancelReplaceOrderInt::kPrice1IsSetFieldNumber;
const int CancelReplaceOrderInt::kPrice2IsSetFieldNumber;
const int CancelReplaceOrderInt::kTimeInForceFieldNumber;
const int CancelReplaceOrderInt::kGoodTillDateTimeFieldNumber;
const int CancelReplaceOrderInt::kUpdatePrice1OffsetToParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelReplaceOrderInt::CancelReplaceOrderInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_CancelReplaceOrderInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelReplaceOrderInt)
}
CancelReplaceOrderInt::CancelReplaceOrderInt(const CancelReplaceOrderInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverorderid()) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid()) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  ::memcpy(&price1_, &from.price1_,
    static_cast<size_t>(reinterpret_cast<char*>(&updateprice1offsettoparent_) -
    reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelReplaceOrderInt)
}

void CancelReplaceOrderInt::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateprice1offsettoparent_) -
      reinterpret_cast<char*>(&price1_)) + sizeof(updateprice1offsettoparent_));
}

CancelReplaceOrderInt::~CancelReplaceOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelReplaceOrderInt)
  SharedDtor();
}

void CancelReplaceOrderInt::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelReplaceOrderInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CancelReplaceOrderInt::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelReplaceOrderInt& CancelReplaceOrderInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_CancelReplaceOrderInt.base);
  return *internal_default_instance();
}


void CancelReplaceOrderInt::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CancelReplaceOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientorderid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&price1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price2isset_) -
        reinterpret_cast<char*>(&price1_)) + sizeof(price2isset_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&timeinforce_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&updateprice1offsettoparent_) -
        reinterpret_cast<char*>(&timeinforce_)) + sizeof(updateprice1offsettoparent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CancelReplaceOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelReplaceOrderInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CancelReplaceOrderInt.ServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CancelReplaceOrderInt.ClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_price2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Divisor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_divisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Quantity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Price1IsSet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_price1isset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price1isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Price2IsSet = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_price2isset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price2isset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 GoodTillDateTime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_goodtilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UpdatePrice1OffsetToParent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_updateprice1offsettoparent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updateprice1offsettoparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelReplaceOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelReplaceOrderInt)
  return false;
#undef DO_
}

void CancelReplaceOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelReplaceOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ServerOrderID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  // optional int64 Price1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->price1(), output);
  }

  // optional int64 Price2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->price2(), output);
  }

  // optional float Divisor = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->divisor(), output);
  }

  // optional int64 Quantity = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->quantity(), output);
  }

  // optional uint32 Price1IsSet = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price1isset(), output);
  }

  // optional uint32 Price2IsSet = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->price2isset(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->timeinforce(), output);
  }

  // optional uint64 GoodTillDateTime = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->goodtilldatetime(), output);
  }

  // optional uint32 UpdatePrice1OffsetToParent = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->updateprice1offsettoparent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelReplaceOrderInt)
}

::google::protobuf::uint8* CancelReplaceOrderInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelReplaceOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ServerOrderID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelReplaceOrderInt.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  // optional int64 Price1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->price1(), target);
  }

  // optional int64 Price2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->price2(), target);
  }

  // optional float Divisor = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->divisor(), target);
  }

  // optional int64 Quantity = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->quantity(), target);
  }

  // optional uint32 Price1IsSet = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price1isset(), target);
  }

  // optional uint32 Price2IsSet = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->price2isset(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->timeinforce(), target);
  }

  // optional uint64 GoodTillDateTime = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->goodtilldatetime(), target);
  }

  // optional uint32 UpdatePrice1OffsetToParent = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->updateprice1offsettoparent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelReplaceOrderInt)
  return target;
}

size_t CancelReplaceOrderInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CancelReplaceOrderInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ServerOrderID = 1;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 2;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional int64 Price1 = 3;
    if (has_price1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1());
    }

    // optional int64 Price2 = 4;
    if (has_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2());
    }

    // optional int64 Quantity = 6;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity());
    }

    // optional float Divisor = 5;
    if (has_divisor()) {
      total_size += 1 + 4;
    }

    // optional uint32 Price1IsSet = 7;
    if (has_price1isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price1isset());
    }

    // optional uint32 Price2IsSet = 8;
    if (has_price2isset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price2isset());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .DTC_PB.TimeInForceEnum TimeInForce = 10;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional uint64 GoodTillDateTime = 11;
    if (has_goodtilldatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goodtilldatetime());
    }

    // optional uint32 UpdatePrice1OffsetToParent = 12;
    if (has_updateprice1offsettoparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updateprice1offsettoparent());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelReplaceOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CancelReplaceOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelReplaceOrderInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelReplaceOrderInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CancelReplaceOrderInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CancelReplaceOrderInt)
    MergeFrom(*source);
  }
}

void CancelReplaceOrderInt::MergeFrom(const CancelReplaceOrderInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CancelReplaceOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverorderid();
      serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_clientorderid();
      clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
    }
    if (cached_has_bits & 0x00000004u) {
      price1_ = from.price1_;
    }
    if (cached_has_bits & 0x00000008u) {
      price2_ = from.price2_;
    }
    if (cached_has_bits & 0x00000010u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      divisor_ = from.divisor_;
    }
    if (cached_has_bits & 0x00000040u) {
      price1isset_ = from.price1isset_;
    }
    if (cached_has_bits & 0x00000080u) {
      price2isset_ = from.price2isset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00000200u) {
      goodtilldatetime_ = from.goodtilldatetime_;
    }
    if (cached_has_bits & 0x00000400u) {
      updateprice1offsettoparent_ = from.updateprice1offsettoparent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CancelReplaceOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CancelReplaceOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelReplaceOrderInt::CopyFrom(const CancelReplaceOrderInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CancelReplaceOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelReplaceOrderInt::IsInitialized() const {
  return true;
}

void CancelReplaceOrderInt::Swap(CancelReplaceOrderInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelReplaceOrderInt::InternalSwap(CancelReplaceOrderInt* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price1_, other->price1_);
  swap(price2_, other->price2_);
  swap(quantity_, other->quantity_);
  swap(divisor_, other->divisor_);
  swap(price1isset_, other->price1isset_);
  swap(price2isset_, other->price2isset_);
  swap(timeinforce_, other->timeinforce_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(updateprice1offsettoparent_, other->updateprice1offsettoparent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelReplaceOrderInt::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CancelOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelOrder::kServerOrderIDFieldNumber;
const int CancelOrder::kClientOrderIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelOrder::CancelOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_CancelOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CancelOrder)
}
CancelOrder::CancelOrder(const CancelOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverorderid()) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid()) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CancelOrder)
}

void CancelOrder::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CancelOrder::~CancelOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.CancelOrder)
  SharedDtor();
}

void CancelOrder::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CancelOrder::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelOrder& CancelOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_CancelOrder.base);
  return *internal_default_instance();
}


void CancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      clientorderid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CancelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CancelOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerOrderID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CancelOrder.ServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CancelOrder.ClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CancelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CancelOrder)
  return false;
#undef DO_
}

void CancelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ServerOrderID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelOrder.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelOrder.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientorderid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CancelOrder)
}

::google::protobuf::uint8* CancelOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ServerOrderID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelOrder.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CancelOrder.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientorderid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CancelOrder)
  return target;
}

size_t CancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CancelOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ServerOrderID = 1;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 2;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CancelOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CancelOrder)
    MergeFrom(*source);
  }
}

void CancelOrder::MergeFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverorderid();
      serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_clientorderid();
      clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
    }
  }
}

void CancelOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrder::CopyFrom(const CancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrder::IsInitialized() const {
  return true;
}

void CancelOrder::Swap(CancelOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelOrder::InternalSwap(CancelOrder* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewOCOOrder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewOCOOrder::kSymbolFieldNumber;
const int SubmitNewOCOOrder::kExchangeFieldNumber;
const int SubmitNewOCOOrder::kClientOrderID1FieldNumber;
const int SubmitNewOCOOrder::kOrderType1FieldNumber;
const int SubmitNewOCOOrder::kBuySell1FieldNumber;
const int SubmitNewOCOOrder::kPrice11FieldNumber;
const int SubmitNewOCOOrder::kPrice21FieldNumber;
const int SubmitNewOCOOrder::kQuantity1FieldNumber;
const int SubmitNewOCOOrder::kClientOrderID2FieldNumber;
const int SubmitNewOCOOrder::kOrderType2FieldNumber;
const int SubmitNewOCOOrder::kBuySell2FieldNumber;
const int SubmitNewOCOOrder::kPrice12FieldNumber;
const int SubmitNewOCOOrder::kPrice22FieldNumber;
const int SubmitNewOCOOrder::kQuantity2FieldNumber;
const int SubmitNewOCOOrder::kTimeInForceFieldNumber;
const int SubmitNewOCOOrder::kGoodTillDateTimeFieldNumber;
const int SubmitNewOCOOrder::kTradeAccountFieldNumber;
const int SubmitNewOCOOrder::kIsAutomatedOrderFieldNumber;
const int SubmitNewOCOOrder::kParentTriggerClientOrderIDFieldNumber;
const int SubmitNewOCOOrder::kFreeFormTextFieldNumber;
const int SubmitNewOCOOrder::kOpenOrCloseFieldNumber;
const int SubmitNewOCOOrder::kPartialFillHandlingFieldNumber;
const int SubmitNewOCOOrder::kUseOffsetsFieldNumber;
const int SubmitNewOCOOrder::kOffsetFromParent1FieldNumber;
const int SubmitNewOCOOrder::kOffsetFromParent2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewOCOOrder::SubmitNewOCOOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SubmitNewOCOOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewOCOOrder)
}
SubmitNewOCOOrder::SubmitNewOCOOrder(const SubmitNewOCOOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid_1()) {
    clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
  }
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid_2()) {
    clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parenttriggerclientorderid()) {
    parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_freeformtext()) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_1_, &from.ordertype_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&useoffsets_) -
    reinterpret_cast<char*>(&ordertype_1_)) + sizeof(useoffsets_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewOCOOrder)
}

void SubmitNewOCOOrder::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&useoffsets_) -
      reinterpret_cast<char*>(&ordertype_1_)) + sizeof(useoffsets_));
}

SubmitNewOCOOrder::~SubmitNewOCOOrder() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewOCOOrder)
  SharedDtor();
}

void SubmitNewOCOOrder::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewOCOOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewOCOOrder::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewOCOOrder& SubmitNewOCOOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SubmitNewOCOOrder.base);
  return *internal_default_instance();
}


void SubmitNewOCOOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewOCOOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      clientorderid_1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      clientorderid_2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      parenttriggerclientorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      freeformtext_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ordertype_1_ = 0;
  if (cached_has_bits & 65280u) {
    ::memset(&buysell_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price2_2_) -
        reinterpret_cast<char*>(&buysell_1_)) + sizeof(price2_2_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&quantity_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offsetfromparent2_) -
        reinterpret_cast<char*>(&quantity_2_)) + sizeof(offsetfromparent2_));
  }
  useoffsets_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubmitNewOCOOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewOCOOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrder.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrder.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrder.ClientOrderID_1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_1(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_1(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price1_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_price1_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price2_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_price2_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_quantity_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID_2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrder.ClientOrderID_2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_2(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_2(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price1_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_price1_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price2_2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_price2_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity_2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_quantity_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 GoodTillDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_goodtilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrder.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsAutomatedOrder = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_isautomatedorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ParentTriggerClientOrderID = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parenttriggerclientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrder.ParentTriggerClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FreeFormText = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrder.FreeFormText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::PartialFillHandlingEnum_IsValid(value)) {
            set_partialfillhandling(static_cast< ::DTC_PB::PartialFillHandlingEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UseOffsets = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_useoffsets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useoffsets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double OffsetFromParent1 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_offsetfromparent1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offsetfromparent1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double OffsetFromParent2 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_offsetfromparent2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offsetfromparent2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewOCOOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewOCOOrder)
  return false;
#undef DO_
}

void SubmitNewOCOOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewOCOOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string ClientOrderID_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientorderid_1(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ordertype_1(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->buysell_1(), output);
  }

  // optional double Price1_1 = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price1_1(), output);
  }

  // optional double Price2_1 = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price2_1(), output);
  }

  // optional double Quantity_1 = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->quantity_1(), output);
  }

  // optional string ClientOrderID_2 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientorderid_2(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ordertype_2(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->buysell_2(), output);
  }

  // optional double Price1_2 = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->price1_2(), output);
  }

  // optional double Price2_2 = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->price2_2(), output);
  }

  // optional double Quantity_2 = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->quantity_2(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->goodtilldatetime(), output);
  }

  // optional string TradeAccount = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->tradeaccount(), output);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->isautomatedorder(), output);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ParentTriggerClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->parenttriggerclientorderid(), output);
  }

  // optional string FreeFormText = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->freeformtext(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->openorclose(), output);
  }

  // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->partialfillhandling(), output);
  }

  // optional uint32 UseOffsets = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->useoffsets(), output);
  }

  // optional double OffsetFromParent1 = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->offsetfromparent1(), output);
  }

  // optional double OffsetFromParent2 = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->offsetfromparent2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewOCOOrder)
}

::google::protobuf::uint8* SubmitNewOCOOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewOCOOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string ClientOrderID_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientorderid_1(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ordertype_1(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->buysell_1(), target);
  }

  // optional double Price1_1 = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price1_1(), target);
  }

  // optional double Price2_1 = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price2_1(), target);
  }

  // optional double Quantity_1 = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->quantity_1(), target);
  }

  // optional string ClientOrderID_2 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ClientOrderID_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientorderid_2(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ordertype_2(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->buysell_2(), target);
  }

  // optional double Price1_2 = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->price1_2(), target);
  }

  // optional double Price2_2 = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->price2_2(), target);
  }

  // optional double Quantity_2 = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->quantity_2(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->goodtilldatetime(), target);
  }

  // optional string TradeAccount = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradeaccount(), target);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->isautomatedorder(), target);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.ParentTriggerClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->parenttriggerclientorderid(), target);
  }

  // optional string FreeFormText = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrder.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->freeformtext(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->openorclose(), target);
  }

  // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->partialfillhandling(), target);
  }

  // optional uint32 UseOffsets = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->useoffsets(), target);
  }

  // optional double OffsetFromParent1 = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->offsetfromparent1(), target);
  }

  // optional double OffsetFromParent2 = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->offsetfromparent2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewOCOOrder)
  return target;
}

size_t SubmitNewOCOOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewOCOOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string ClientOrderID_1 = 3;
    if (has_clientorderid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_1());
    }

    // optional string ClientOrderID_2 = 9;
    if (has_clientorderid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_2());
    }

    // optional string TradeAccount = 17;
    if (has_tradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string ParentTriggerClientOrderID = 19;
    if (has_parenttriggerclientorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parenttriggerclientorderid());
    }

    // optional string FreeFormText = 20;
    if (has_freeformtext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
    if (has_ordertype_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_1());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
    if (has_buysell_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_1());
    }

    // optional double Price1_1 = 6;
    if (has_price1_1()) {
      total_size += 1 + 8;
    }

    // optional double Price2_1 = 7;
    if (has_price2_1()) {
      total_size += 1 + 8;
    }

    // optional double Quantity_1 = 8;
    if (has_quantity_1()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
    if (has_ordertype_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_2());
    }

    // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
    if (has_buysell_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_2());
    }

    // optional double Price1_2 = 12;
    if (has_price1_2()) {
      total_size += 1 + 8;
    }

    // optional double Price2_2 = 13;
    if (has_price2_2()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double Quantity_2 = 14;
    if (has_quantity_2()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 GoodTillDateTime = 16;
    if (has_goodtilldatetime()) {
      total_size += 2 + 8;
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional uint32 IsAutomatedOrder = 18;
    if (has_isautomatedorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 21;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

    // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 22;
    if (has_partialfillhandling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partialfillhandling());
    }

    // optional double OffsetFromParent1 = 24;
    if (has_offsetfromparent1()) {
      total_size += 2 + 8;
    }

    // optional double OffsetFromParent2 = 25;
    if (has_offsetfromparent2()) {
      total_size += 2 + 8;
    }

  }
  // optional uint32 UseOffsets = 23;
  if (has_useoffsets()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->useoffsets());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewOCOOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewOCOOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewOCOOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewOCOOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewOCOOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewOCOOrder)
    MergeFrom(*source);
  }
}

void SubmitNewOCOOrder::MergeFrom(const SubmitNewOCOOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewOCOOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_clientorderid_1();
      clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_clientorderid_2();
      clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_parenttriggerclientorderid();
      parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_freeformtext();
      freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
    }
    if (cached_has_bits & 0x00000080u) {
      ordertype_1_ = from.ordertype_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      buysell_1_ = from.buysell_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      price1_1_ = from.price1_1_;
    }
    if (cached_has_bits & 0x00000400u) {
      price2_1_ = from.price2_1_;
    }
    if (cached_has_bits & 0x00000800u) {
      quantity_1_ = from.quantity_1_;
    }
    if (cached_has_bits & 0x00001000u) {
      ordertype_2_ = from.ordertype_2_;
    }
    if (cached_has_bits & 0x00002000u) {
      buysell_2_ = from.buysell_2_;
    }
    if (cached_has_bits & 0x00004000u) {
      price1_2_ = from.price1_2_;
    }
    if (cached_has_bits & 0x00008000u) {
      price2_2_ = from.price2_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      quantity_2_ = from.quantity_2_;
    }
    if (cached_has_bits & 0x00020000u) {
      goodtilldatetime_ = from.goodtilldatetime_;
    }
    if (cached_has_bits & 0x00040000u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00080000u) {
      isautomatedorder_ = from.isautomatedorder_;
    }
    if (cached_has_bits & 0x00100000u) {
      openorclose_ = from.openorclose_;
    }
    if (cached_has_bits & 0x00200000u) {
      partialfillhandling_ = from.partialfillhandling_;
    }
    if (cached_has_bits & 0x00400000u) {
      offsetfromparent1_ = from.offsetfromparent1_;
    }
    if (cached_has_bits & 0x00800000u) {
      offsetfromparent2_ = from.offsetfromparent2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_useoffsets(from.useoffsets());
  }
}

void SubmitNewOCOOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewOCOOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewOCOOrder::CopyFrom(const SubmitNewOCOOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewOCOOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewOCOOrder::IsInitialized() const {
  return true;
}

void SubmitNewOCOOrder::Swap(SubmitNewOCOOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewOCOOrder::InternalSwap(SubmitNewOCOOrder* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_1_.Swap(&other->clientorderid_1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_2_.Swap(&other->clientorderid_2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parenttriggerclientorderid_.Swap(&other->parenttriggerclientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_1_, other->ordertype_1_);
  swap(buysell_1_, other->buysell_1_);
  swap(price1_1_, other->price1_1_);
  swap(price2_1_, other->price2_1_);
  swap(quantity_1_, other->quantity_1_);
  swap(ordertype_2_, other->ordertype_2_);
  swap(buysell_2_, other->buysell_2_);
  swap(price1_2_, other->price1_2_);
  swap(price2_2_, other->price2_2_);
  swap(quantity_2_, other->quantity_2_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(openorclose_, other->openorclose_);
  swap(partialfillhandling_, other->partialfillhandling_);
  swap(offsetfromparent1_, other->offsetfromparent1_);
  swap(offsetfromparent2_, other->offsetfromparent2_);
  swap(useoffsets_, other->useoffsets_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewOCOOrder::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubmitNewOCOOrderInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmitNewOCOOrderInt::kSymbolFieldNumber;
const int SubmitNewOCOOrderInt::kExchangeFieldNumber;
const int SubmitNewOCOOrderInt::kClientOrderID1FieldNumber;
const int SubmitNewOCOOrderInt::kOrderType1FieldNumber;
const int SubmitNewOCOOrderInt::kBuySell1FieldNumber;
const int SubmitNewOCOOrderInt::kPrice11FieldNumber;
const int SubmitNewOCOOrderInt::kPrice21FieldNumber;
const int SubmitNewOCOOrderInt::kQuantity1FieldNumber;
const int SubmitNewOCOOrderInt::kClientOrderID2FieldNumber;
const int SubmitNewOCOOrderInt::kOrderType2FieldNumber;
const int SubmitNewOCOOrderInt::kBuySell2FieldNumber;
const int SubmitNewOCOOrderInt::kPrice12FieldNumber;
const int SubmitNewOCOOrderInt::kPrice22FieldNumber;
const int SubmitNewOCOOrderInt::kQuantity2FieldNumber;
const int SubmitNewOCOOrderInt::kTimeInForceFieldNumber;
const int SubmitNewOCOOrderInt::kGoodTillDateTimeFieldNumber;
const int SubmitNewOCOOrderInt::kTradeAccountFieldNumber;
const int SubmitNewOCOOrderInt::kIsAutomatedOrderFieldNumber;
const int SubmitNewOCOOrderInt::kParentTriggerClientOrderIDFieldNumber;
const int SubmitNewOCOOrderInt::kFreeFormTextFieldNumber;
const int SubmitNewOCOOrderInt::kDivisorFieldNumber;
const int SubmitNewOCOOrderInt::kOpenOrCloseFieldNumber;
const int SubmitNewOCOOrderInt::kPartialFillHandlingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmitNewOCOOrderInt::SubmitNewOCOOrderInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SubmitNewOCOOrderInt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SubmitNewOCOOrderInt)
}
SubmitNewOCOOrderInt::SubmitNewOCOOrderInt(const SubmitNewOCOOrderInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid_1()) {
    clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
  }
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid_2()) {
    clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parenttriggerclientorderid()) {
    parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_freeformtext()) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&ordertype_1_, &from.ordertype_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&partialfillhandling_) -
    reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SubmitNewOCOOrderInt)
}

void SubmitNewOCOOrderInt::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ordertype_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partialfillhandling_) -
      reinterpret_cast<char*>(&ordertype_1_)) + sizeof(partialfillhandling_));
}

SubmitNewOCOOrderInt::~SubmitNewOCOOrderInt() {
  // @@protoc_insertion_point(destructor:DTC_PB.SubmitNewOCOOrderInt)
  SharedDtor();
}

void SubmitNewOCOOrderInt::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parenttriggerclientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmitNewOCOOrderInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubmitNewOCOOrderInt::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmitNewOCOOrderInt& SubmitNewOCOOrderInt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SubmitNewOCOOrderInt.base);
  return *internal_default_instance();
}


void SubmitNewOCOOrderInt::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SubmitNewOCOOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      clientorderid_1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      clientorderid_2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      parenttriggerclientorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      freeformtext_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ordertype_1_ = 0;
  if (cached_has_bits & 65280u) {
    ::memset(&buysell_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price2_2_) -
        reinterpret_cast<char*>(&buysell_1_)) + sizeof(price2_2_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&quantity_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partialfillhandling_) -
        reinterpret_cast<char*>(&quantity_2_)) + sizeof(partialfillhandling_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubmitNewOCOOrderInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SubmitNewOCOOrderInt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_1(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_1(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price1_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_price1_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price2_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_price2_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Quantity_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_quantity_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID_2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype_2(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell_2(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price1_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_price1_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price1_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Price2_2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_price2_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price2_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 Quantity_2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_quantity_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 GoodTillDateTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_goodtilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsAutomatedOrder = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_isautomatedorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isautomatedorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ParentTriggerClientOrderID = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parenttriggerclientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.ParentTriggerClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FreeFormText = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SubmitNewOCOOrderInt.FreeFormText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Divisor = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_divisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &divisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::PartialFillHandlingEnum_IsValid(value)) {
            set_partialfillhandling(static_cast< ::DTC_PB::PartialFillHandlingEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SubmitNewOCOOrderInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SubmitNewOCOOrderInt)
  return false;
#undef DO_
}

void SubmitNewOCOOrderInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SubmitNewOCOOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string ClientOrderID_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientorderid_1(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ordertype_1(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->buysell_1(), output);
  }

  // optional int64 Price1_1 = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->price1_1(), output);
  }

  // optional int64 Price2_1 = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->price2_1(), output);
  }

  // optional int64 Quantity_1 = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->quantity_1(), output);
  }

  // optional string ClientOrderID_2 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientorderid_2(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ordertype_2(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->buysell_2(), output);
  }

  // optional int64 Price1_2 = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->price1_2(), output);
  }

  // optional int64 Price2_2 = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->price2_2(), output);
  }

  // optional int64 Quantity_2 = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->quantity_2(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->goodtilldatetime(), output);
  }

  // optional string TradeAccount = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->tradeaccount(), output);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->isautomatedorder(), output);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ParentTriggerClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->parenttriggerclientorderid(), output);
  }

  // optional string FreeFormText = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->freeformtext(), output);
  }

  // optional float Divisor = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->divisor(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->openorclose(), output);
  }

  // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->partialfillhandling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SubmitNewOCOOrderInt)
}

::google::protobuf::uint8* SubmitNewOCOOrderInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SubmitNewOCOOrderInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string ClientOrderID_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_1().data(), static_cast<int>(this->clientorderid_1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientorderid_1(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ordertype_1(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->buysell_1(), target);
  }

  // optional int64 Price1_1 = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->price1_1(), target);
  }

  // optional int64 Price2_1 = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->price2_1(), target);
  }

  // optional int64 Quantity_1 = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->quantity_1(), target);
  }

  // optional string ClientOrderID_2 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid_2().data(), static_cast<int>(this->clientorderid_2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ClientOrderID_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientorderid_2(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ordertype_2(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->buysell_2(), target);
  }

  // optional int64 Price1_2 = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->price1_2(), target);
  }

  // optional int64 Price2_2 = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->price2_2(), target);
  }

  // optional int64 Quantity_2 = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->quantity_2(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->goodtilldatetime(), target);
  }

  // optional string TradeAccount = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradeaccount(), target);
  }

  // optional uint32 IsAutomatedOrder = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->isautomatedorder(), target);
  }

  // optional string ParentTriggerClientOrderID = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parenttriggerclientorderid().data(), static_cast<int>(this->parenttriggerclientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.ParentTriggerClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->parenttriggerclientorderid(), target);
  }

  // optional string FreeFormText = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SubmitNewOCOOrderInt.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->freeformtext(), target);
  }

  // optional float Divisor = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->divisor(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->openorclose(), target);
  }

  // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->partialfillhandling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SubmitNewOCOOrderInt)
  return target;
}

size_t SubmitNewOCOOrderInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SubmitNewOCOOrderInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string ClientOrderID_1 = 3;
    if (has_clientorderid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_1());
    }

    // optional string ClientOrderID_2 = 9;
    if (has_clientorderid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid_2());
    }

    // optional string TradeAccount = 17;
    if (has_tradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string ParentTriggerClientOrderID = 19;
    if (has_parenttriggerclientorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parenttriggerclientorderid());
    }

    // optional string FreeFormText = 20;
    if (has_freeformtext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_1 = 4;
    if (has_ordertype_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_1());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .DTC_PB.BuySellEnum BuySell_1 = 5;
    if (has_buysell_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_1());
    }

    // optional int64 Price1_1 = 6;
    if (has_price1_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1_1());
    }

    // optional int64 Price2_1 = 7;
    if (has_price2_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2_1());
    }

    // optional int64 Quantity_1 = 8;
    if (has_quantity_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity_1());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType_2 = 10;
    if (has_ordertype_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype_2());
    }

    // optional .DTC_PB.BuySellEnum BuySell_2 = 11;
    if (has_buysell_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell_2());
    }

    // optional int64 Price1_2 = 12;
    if (has_price1_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price1_2());
    }

    // optional int64 Price2_2 = 13;
    if (has_price2_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price2_2());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional int64 Quantity_2 = 14;
    if (has_quantity_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity_2());
    }

    // optional sfixed64 GoodTillDateTime = 16;
    if (has_goodtilldatetime()) {
      total_size += 2 + 8;
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 15;
    if (has_timeinforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional uint32 IsAutomatedOrder = 18;
    if (has_isautomatedorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isautomatedorder());
    }

    // optional float Divisor = 21;
    if (has_divisor()) {
      total_size += 2 + 4;
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 22;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

    // optional .DTC_PB.PartialFillHandlingEnum PartialFillHandling = 23;
    if (has_partialfillhandling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partialfillhandling());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmitNewOCOOrderInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SubmitNewOCOOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmitNewOCOOrderInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmitNewOCOOrderInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SubmitNewOCOOrderInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SubmitNewOCOOrderInt)
    MergeFrom(*source);
  }
}

void SubmitNewOCOOrderInt::MergeFrom(const SubmitNewOCOOrderInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SubmitNewOCOOrderInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_clientorderid_1();
      clientorderid_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_1_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_clientorderid_2();
      clientorderid_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_2_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_parenttriggerclientorderid();
      parenttriggerclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parenttriggerclientorderid_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_freeformtext();
      freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
    }
    if (cached_has_bits & 0x00000080u) {
      ordertype_1_ = from.ordertype_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      buysell_1_ = from.buysell_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      price1_1_ = from.price1_1_;
    }
    if (cached_has_bits & 0x00000400u) {
      price2_1_ = from.price2_1_;
    }
    if (cached_has_bits & 0x00000800u) {
      quantity_1_ = from.quantity_1_;
    }
    if (cached_has_bits & 0x00001000u) {
      ordertype_2_ = from.ordertype_2_;
    }
    if (cached_has_bits & 0x00002000u) {
      buysell_2_ = from.buysell_2_;
    }
    if (cached_has_bits & 0x00004000u) {
      price1_2_ = from.price1_2_;
    }
    if (cached_has_bits & 0x00008000u) {
      price2_2_ = from.price2_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      quantity_2_ = from.quantity_2_;
    }
    if (cached_has_bits & 0x00020000u) {
      goodtilldatetime_ = from.goodtilldatetime_;
    }
    if (cached_has_bits & 0x00040000u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00080000u) {
      isautomatedorder_ = from.isautomatedorder_;
    }
    if (cached_has_bits & 0x00100000u) {
      divisor_ = from.divisor_;
    }
    if (cached_has_bits & 0x00200000u) {
      openorclose_ = from.openorclose_;
    }
    if (cached_has_bits & 0x00400000u) {
      partialfillhandling_ = from.partialfillhandling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubmitNewOCOOrderInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SubmitNewOCOOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitNewOCOOrderInt::CopyFrom(const SubmitNewOCOOrderInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SubmitNewOCOOrderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitNewOCOOrderInt::IsInitialized() const {
  return true;
}

void SubmitNewOCOOrderInt::Swap(SubmitNewOCOOrderInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmitNewOCOOrderInt::InternalSwap(SubmitNewOCOOrderInt* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_1_.Swap(&other->clientorderid_1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_2_.Swap(&other->clientorderid_2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parenttriggerclientorderid_.Swap(&other->parenttriggerclientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordertype_1_, other->ordertype_1_);
  swap(buysell_1_, other->buysell_1_);
  swap(price1_1_, other->price1_1_);
  swap(price2_1_, other->price2_1_);
  swap(quantity_1_, other->quantity_1_);
  swap(ordertype_2_, other->ordertype_2_);
  swap(buysell_2_, other->buysell_2_);
  swap(price1_2_, other->price1_2_);
  swap(price2_2_, other->price2_2_);
  swap(quantity_2_, other->quantity_2_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(timeinforce_, other->timeinforce_);
  swap(isautomatedorder_, other->isautomatedorder_);
  swap(divisor_, other->divisor_);
  swap(openorclose_, other->openorclose_);
  swap(partialfillhandling_, other->partialfillhandling_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubmitNewOCOOrderInt::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenOrdersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenOrdersRequest::kRequestIDFieldNumber;
const int OpenOrdersRequest::kRequestAllOrdersFieldNumber;
const int OpenOrdersRequest::kServerOrderIDFieldNumber;
const int OpenOrdersRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenOrdersRequest::OpenOrdersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_OpenOrdersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OpenOrdersRequest)
}
OpenOrdersRequest::OpenOrdersRequest(const OpenOrdersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverorderid()) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestallorders_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(requestallorders_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OpenOrdersRequest)
}

void OpenOrdersRequest::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestallorders_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(requestallorders_));
}

OpenOrdersRequest::~OpenOrdersRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.OpenOrdersRequest)
  SharedDtor();
}

void OpenOrdersRequest::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenOrdersRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenOrdersRequest& OpenOrdersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_OpenOrdersRequest.base);
  return *internal_default_instance();
}


void OpenOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.OpenOrdersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestallorders_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(requestallorders_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenOrdersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OpenOrdersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 RequestAllOrders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_requestallorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestallorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ServerOrderID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OpenOrdersRequest.ServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OpenOrdersRequest.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OpenOrdersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OpenOrdersRequest)
  return false;
#undef DO_
}

void OpenOrdersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OpenOrdersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 RequestAllOrders = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->requestallorders(), output);
  }

  // optional string ServerOrderID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverorderid(), output);
  }

  // optional string TradeAccount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradeaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OpenOrdersRequest)
}

::google::protobuf::uint8* OpenOrdersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OpenOrdersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 RequestAllOrders = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requestallorders(), target);
  }

  // optional string ServerOrderID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverorderid(), target);
  }

  // optional string TradeAccount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OpenOrdersRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OpenOrdersRequest)
  return target;
}

size_t OpenOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.OpenOrdersRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ServerOrderID = 3;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string TradeAccount = 4;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 RequestAllOrders = 2;
    if (has_requestallorders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestallorders());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenOrdersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.OpenOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenOrdersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenOrdersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.OpenOrdersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.OpenOrdersRequest)
    MergeFrom(*source);
  }
}

void OpenOrdersRequest::MergeFrom(const OpenOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.OpenOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverorderid();
      serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      requestallorders_ = from.requestallorders_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenOrdersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.OpenOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrdersRequest::CopyFrom(const OpenOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.OpenOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrdersRequest::IsInitialized() const {
  return true;
}

void OpenOrdersRequest::Swap(OpenOrdersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenOrdersRequest::InternalSwap(OpenOrdersRequest* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(requestallorders_, other->requestallorders_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenOrdersRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalOrderFillsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalOrderFillsRequest::kRequestIDFieldNumber;
const int HistoricalOrderFillsRequest::kServerOrderIDFieldNumber;
const int HistoricalOrderFillsRequest::kNumberOfDaysFieldNumber;
const int HistoricalOrderFillsRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalOrderFillsRequest::HistoricalOrderFillsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalOrderFillsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillsRequest)
}
HistoricalOrderFillsRequest::HistoricalOrderFillsRequest(const HistoricalOrderFillsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverorderid()) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofdays_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(numberofdays_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillsRequest)
}

void HistoricalOrderFillsRequest::SharedCtor() {
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofdays_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(numberofdays_));
}

HistoricalOrderFillsRequest::~HistoricalOrderFillsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillsRequest)
  SharedDtor();
}

void HistoricalOrderFillsRequest::SharedDtor() {
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalOrderFillsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalOrderFillsRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalOrderFillsRequest& HistoricalOrderFillsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalOrderFillsRequest.base);
  return *internal_default_instance();
}


void HistoricalOrderFillsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalOrderFillsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      serverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numberofdays_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(numberofdays_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalOrderFillsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ServerOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillsRequest.ServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NumberOfDays = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_numberofdays();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofdays_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillsRequest.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillsRequest)
  return false;
#undef DO_
}

void HistoricalOrderFillsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string ServerOrderID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverorderid(), output);
  }

  // optional int32 NumberOfDays = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numberofdays(), output);
  }

  // optional string TradeAccount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradeaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillsRequest)
}

::google::protobuf::uint8* HistoricalOrderFillsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string ServerOrderID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverorderid(), target);
  }

  // optional int32 NumberOfDays = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numberofdays(), target);
  }

  // optional string TradeAccount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillsRequest)
  return target;
}

size_t HistoricalOrderFillsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalOrderFillsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ServerOrderID = 2;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string TradeAccount = 4;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 NumberOfDays = 3;
    if (has_numberofdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofdays());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalOrderFillsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalOrderFillsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalOrderFillsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalOrderFillsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalOrderFillsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalOrderFillsRequest)
    MergeFrom(*source);
  }
}

void HistoricalOrderFillsRequest::MergeFrom(const HistoricalOrderFillsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalOrderFillsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serverorderid();
      serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      numberofdays_ = from.numberofdays_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalOrderFillsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalOrderFillsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillsRequest::CopyFrom(const HistoricalOrderFillsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalOrderFillsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillsRequest::IsInitialized() const {
  return true;
}

void HistoricalOrderFillsRequest::Swap(HistoricalOrderFillsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalOrderFillsRequest::InternalSwap(HistoricalOrderFillsRequest* other) {
  using std::swap;
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(numberofdays_, other->numberofdays_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalOrderFillsRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalOrderFillsReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalOrderFillsReject::kRequestIDFieldNumber;
const int HistoricalOrderFillsReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalOrderFillsReject::HistoricalOrderFillsReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalOrderFillsReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillsReject)
}
HistoricalOrderFillsReject::HistoricalOrderFillsReject(const HistoricalOrderFillsReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillsReject)
}

void HistoricalOrderFillsReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

HistoricalOrderFillsReject::~HistoricalOrderFillsReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillsReject)
  SharedDtor();
}

void HistoricalOrderFillsReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalOrderFillsReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalOrderFillsReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalOrderFillsReject& HistoricalOrderFillsReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalOrderFillsReject.base);
  return *internal_default_instance();
}


void HistoricalOrderFillsReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalOrderFillsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalOrderFillsReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillsReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillsReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillsReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillsReject)
  return false;
#undef DO_
}

void HistoricalOrderFillsReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillsReject)
}

::google::protobuf::uint8* HistoricalOrderFillsReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillsReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillsReject)
  return target;
}

size_t HistoricalOrderFillsReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalOrderFillsReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalOrderFillsReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalOrderFillsReject)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalOrderFillsReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalOrderFillsReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalOrderFillsReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalOrderFillsReject)
    MergeFrom(*source);
  }
}

void HistoricalOrderFillsReject::MergeFrom(const HistoricalOrderFillsReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalOrderFillsReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalOrderFillsReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalOrderFillsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillsReject::CopyFrom(const HistoricalOrderFillsReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalOrderFillsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillsReject::IsInitialized() const {
  return true;
}

void HistoricalOrderFillsReject::Swap(HistoricalOrderFillsReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalOrderFillsReject::InternalSwap(HistoricalOrderFillsReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalOrderFillsReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrentPositionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentPositionsRequest::kRequestIDFieldNumber;
const int CurrentPositionsRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentPositionsRequest::CurrentPositionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_CurrentPositionsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CurrentPositionsRequest)
}
CurrentPositionsRequest::CurrentPositionsRequest(const CurrentPositionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CurrentPositionsRequest)
}

void CurrentPositionsRequest::SharedCtor() {
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

CurrentPositionsRequest::~CurrentPositionsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.CurrentPositionsRequest)
  SharedDtor();
}

void CurrentPositionsRequest::SharedDtor() {
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrentPositionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurrentPositionsRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrentPositionsRequest& CurrentPositionsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_CurrentPositionsRequest.base);
  return *internal_default_instance();
}


void CurrentPositionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CurrentPositionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tradeaccount_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrentPositionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CurrentPositionsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CurrentPositionsRequest.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CurrentPositionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CurrentPositionsRequest)
  return false;
#undef DO_
}

void CurrentPositionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CurrentPositionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string TradeAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CurrentPositionsRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradeaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CurrentPositionsRequest)
}

::google::protobuf::uint8* CurrentPositionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CurrentPositionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string TradeAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CurrentPositionsRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradeaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CurrentPositionsRequest)
  return target;
}

size_t CurrentPositionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CurrentPositionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string TradeAccount = 2;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentPositionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CurrentPositionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentPositionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentPositionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CurrentPositionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CurrentPositionsRequest)
    MergeFrom(*source);
  }
}

void CurrentPositionsRequest::MergeFrom(const CurrentPositionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CurrentPositionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrentPositionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CurrentPositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPositionsRequest::CopyFrom(const CurrentPositionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CurrentPositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionsRequest::IsInitialized() const {
  return true;
}

void CurrentPositionsRequest::Swap(CurrentPositionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentPositionsRequest::InternalSwap(CurrentPositionsRequest* other) {
  using std::swap;
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurrentPositionsRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrentPositionsReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentPositionsReject::kRequestIDFieldNumber;
const int CurrentPositionsReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentPositionsReject::CurrentPositionsReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_CurrentPositionsReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.CurrentPositionsReject)
}
CurrentPositionsReject::CurrentPositionsReject(const CurrentPositionsReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.CurrentPositionsReject)
}

void CurrentPositionsReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

CurrentPositionsReject::~CurrentPositionsReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.CurrentPositionsReject)
  SharedDtor();
}

void CurrentPositionsReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrentPositionsReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurrentPositionsReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrentPositionsReject& CurrentPositionsReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_CurrentPositionsReject.base);
  return *internal_default_instance();
}


void CurrentPositionsReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.CurrentPositionsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrentPositionsReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.CurrentPositionsReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.CurrentPositionsReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.CurrentPositionsReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.CurrentPositionsReject)
  return false;
#undef DO_
}

void CurrentPositionsReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.CurrentPositionsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CurrentPositionsReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.CurrentPositionsReject)
}

::google::protobuf::uint8* CurrentPositionsReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.CurrentPositionsReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.CurrentPositionsReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.CurrentPositionsReject)
  return target;
}

size_t CurrentPositionsReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.CurrentPositionsReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentPositionsReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.CurrentPositionsReject)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentPositionsReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentPositionsReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.CurrentPositionsReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.CurrentPositionsReject)
    MergeFrom(*source);
  }
}

void CurrentPositionsReject::MergeFrom(const CurrentPositionsReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.CurrentPositionsReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrentPositionsReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.CurrentPositionsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPositionsReject::CopyFrom(const CurrentPositionsReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.CurrentPositionsReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPositionsReject::IsInitialized() const {
  return true;
}

void CurrentPositionsReject::Swap(CurrentPositionsReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentPositionsReject::InternalSwap(CurrentPositionsReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurrentPositionsReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderUpdate::kRequestIDFieldNumber;
const int OrderUpdate::kTotalNumMessagesFieldNumber;
const int OrderUpdate::kMessageNumberFieldNumber;
const int OrderUpdate::kSymbolFieldNumber;
const int OrderUpdate::kExchangeFieldNumber;
const int OrderUpdate::kPreviousServerOrderIDFieldNumber;
const int OrderUpdate::kServerOrderIDFieldNumber;
const int OrderUpdate::kClientOrderIDFieldNumber;
const int OrderUpdate::kExchangeOrderIDFieldNumber;
const int OrderUpdate::kOrderStatusFieldNumber;
const int OrderUpdate::kOrderUpdateReasonFieldNumber;
const int OrderUpdate::kOrderTypeFieldNumber;
const int OrderUpdate::kBuySellFieldNumber;
const int OrderUpdate::kPrice1FieldNumber;
const int OrderUpdate::kPrice2FieldNumber;
const int OrderUpdate::kTimeInForceFieldNumber;
const int OrderUpdate::kGoodTillDateTimeFieldNumber;
const int OrderUpdate::kOrderQuantityFieldNumber;
const int OrderUpdate::kFilledQuantityFieldNumber;
const int OrderUpdate::kRemainingQuantityFieldNumber;
const int OrderUpdate::kAverageFillPriceFieldNumber;
const int OrderUpdate::kLastFillPriceFieldNumber;
const int OrderUpdate::kLastFillDateTimeFieldNumber;
const int OrderUpdate::kLastFillQuantityFieldNumber;
const int OrderUpdate::kLastFillExecutionIDFieldNumber;
const int OrderUpdate::kTradeAccountFieldNumber;
const int OrderUpdate::kInfoTextFieldNumber;
const int OrderUpdate::kNoOrdersFieldNumber;
const int OrderUpdate::kParentServerOrderIDFieldNumber;
const int OrderUpdate::kOCOLinkedOrderServerOrderIDFieldNumber;
const int OrderUpdate::kOpenOrCloseFieldNumber;
const int OrderUpdate::kPreviousClientOrderIDFieldNumber;
const int OrderUpdate::kFreeFormTextFieldNumber;
const int OrderUpdate::kOrderReceivedDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderUpdate::OrderUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_OrderUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OrderUpdate)
}
OrderUpdate::OrderUpdate(const OrderUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  previousserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_previousserverorderid()) {
    previousserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousserverorderid_);
  }
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverorderid()) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid()) {
    clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  exchangeorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchangeorderid()) {
    exchangeorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeorderid_);
  }
  lastfillexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lastfillexecutionid()) {
    lastfillexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastfillexecutionid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_infotext()) {
    infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
  }
  parentserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parentserverorderid()) {
    parentserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentserverorderid_);
  }
  ocolinkedorderserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ocolinkedorderserverorderid()) {
    ocolinkedorderserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ocolinkedorderserverorderid_);
  }
  previousclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_previousclientorderid()) {
    previousclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousclientorderid_);
  }
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_freeformtext()) {
    freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&orderreceiveddatetime_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(orderreceiveddatetime_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OrderUpdate)
}

void OrderUpdate::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastfillexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ocolinkedorderserverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousclientorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderreceiveddatetime_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(orderreceiveddatetime_));
}

OrderUpdate::~OrderUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.OrderUpdate)
  SharedDtor();
}

void OrderUpdate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousserverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastfillexecutionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentserverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ocolinkedorderserverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousclientorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freeformtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderUpdate::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderUpdate& OrderUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_OrderUpdate.base);
  return *internal_default_instance();
}


void OrderUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.OrderUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      previousserverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      serverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      clientorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      exchangeorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      lastfillexecutionid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      infotext_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      parentserverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      ocolinkedorderserverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      previousclientorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      freeformtext_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&messagenumber_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(messagenumber_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&orderstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goodtilldatetime_) -
        reinterpret_cast<char*>(&orderstatus_)) + sizeof(goodtilldatetime_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&orderquantity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&noorders_) -
        reinterpret_cast<char*>(&orderquantity_)) + sizeof(noorders_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 3u) {
    ::memset(&openorclose_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orderreceiveddatetime_) -
        reinterpret_cast<char*>(&openorclose_)) + sizeof(orderreceiveddatetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OrderUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TotalNumMessages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_totalnummessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnummessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MessageNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_messagenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PreviousServerOrderID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previousserverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previousserverorderid().data(), static_cast<int>(this->previousserverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.PreviousServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ServerOrderID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.ServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ClientOrderID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.ClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExchangeOrderID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeorderid().data(), static_cast<int>(this->exchangeorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.ExchangeOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderStatusEnum_IsValid(value)) {
            set_orderstatus(static_cast< ::DTC_PB::OrderStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderUpdateReasonEnum_IsValid(value)) {
            set_orderupdatereason(static_cast< ::DTC_PB::OrderUpdateReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OrderTypeEnum OrderType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OrderTypeEnum_IsValid(value)) {
            set_ordertype(static_cast< ::DTC_PB::OrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price1 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_price1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price2 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_price2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::TimeInForceEnum_IsValid(value)) {
            set_timeinforce(static_cast< ::DTC_PB::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 GoodTillDateTime = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_goodtilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &goodtilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double OrderQuantity = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_orderquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orderquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double FilledQuantity = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_filledquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &filledquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double RemainingQuantity = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_remainingquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remainingquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double AverageFillPrice = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_averagefillprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averagefillprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastFillPrice = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_lastfillprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfillprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 LastFillDateTime = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_lastfilldatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &lastfilldatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastFillQuantity = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_lastfillquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfillquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LastFillExecutionID = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastfillexecutionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastfillexecutionid().data(), static_cast<int>(this->lastfillexecutionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.LastFillExecutionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string InfoText = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infotext().data(), static_cast<int>(this->infotext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.InfoText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NoOrders = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_noorders();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noorders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ParentServerOrderID = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentserverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parentserverorderid().data(), static_cast<int>(this->parentserverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.ParentServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OCOLinkedOrderServerOrderID = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ocolinkedorderserverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ocolinkedorderserverorderid().data(), static_cast<int>(this->ocolinkedorderserverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.OCOLinkedOrderServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openorclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PreviousClientOrderID = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previousclientorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previousclientorderid().data(), static_cast<int>(this->previousclientorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.PreviousClientOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FreeFormText = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freeformtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OrderUpdate.FreeFormText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 OrderReceivedDateTime = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {
          set_has_orderreceiveddatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &orderreceiveddatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OrderUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OrderUpdate)
  return false;
#undef DO_
}

void OrderUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OrderUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 TotalNumMessages = 2;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnummessages(), output);
  }

  // optional int32 MessageNumber = 3;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // optional string Symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string Exchange = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional string PreviousServerOrderID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousserverorderid().data(), static_cast<int>(this->previousserverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->previousserverorderid(), output);
  }

  // optional string ServerOrderID = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serverorderid(), output);
  }

  // optional string ClientOrderID = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->clientorderid(), output);
  }

  // optional string ExchangeOrderID = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeorderid().data(), static_cast<int>(this->exchangeorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ExchangeOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->exchangeorderid(), output);
  }

  // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->orderstatus(), output);
  }

  // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->orderupdatereason(), output);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->ordertype(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 13;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->buysell(), output);
  }

  // optional double Price1 = 14;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->price1(), output);
  }

  // optional double Price2 = 15;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->price2(), output);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->timeinforce(), output);
  }

  // optional sfixed64 GoodTillDateTime = 17;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(17, this->goodtilldatetime(), output);
  }

  // optional double OrderQuantity = 18;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->orderquantity(), output);
  }

  // optional double FilledQuantity = 19;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->filledquantity(), output);
  }

  // optional double RemainingQuantity = 20;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->remainingquantity(), output);
  }

  // optional double AverageFillPrice = 21;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->averagefillprice(), output);
  }

  // optional double LastFillPrice = 22;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->lastfillprice(), output);
  }

  // optional sfixed64 LastFillDateTime = 23;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(23, this->lastfilldatetime(), output);
  }

  // optional double LastFillQuantity = 24;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->lastfillquantity(), output);
  }

  // optional string LastFillExecutionID = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastfillexecutionid().data(), static_cast<int>(this->lastfillexecutionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.LastFillExecutionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->lastfillexecutionid(), output);
  }

  // optional string TradeAccount = 26;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->tradeaccount(), output);
  }

  // optional string InfoText = 27;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.InfoText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->infotext(), output);
  }

  // optional uint32 NoOrders = 28;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->noorders(), output);
  }

  // optional string ParentServerOrderID = 29;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentserverorderid().data(), static_cast<int>(this->parentserverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ParentServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->parentserverorderid(), output);
  }

  // optional string OCOLinkedOrderServerOrderID = 30;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ocolinkedorderserverorderid().data(), static_cast<int>(this->ocolinkedorderserverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.OCOLinkedOrderServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->ocolinkedorderserverorderid(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->openorclose(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string PreviousClientOrderID = 32;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousclientorderid().data(), static_cast<int>(this->previousclientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousClientOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->previousclientorderid(), output);
  }

  // optional string FreeFormText = 33;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.FreeFormText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->freeformtext(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional sfixed64 OrderReceivedDateTime = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(34, this->orderreceiveddatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OrderUpdate)
}

::google::protobuf::uint8* OrderUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OrderUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 TotalNumMessages = 2;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnummessages(), target);
  }

  // optional int32 MessageNumber = 3;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // optional string Symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string Exchange = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional string PreviousServerOrderID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousserverorderid().data(), static_cast<int>(this->previousserverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->previousserverorderid(), target);
  }

  // optional string ServerOrderID = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serverorderid(), target);
  }

  // optional string ClientOrderID = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->clientorderid(), target);
  }

  // optional string ExchangeOrderID = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeorderid().data(), static_cast<int>(this->exchangeorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ExchangeOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->exchangeorderid(), target);
  }

  // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->orderstatus(), target);
  }

  // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->orderupdatereason(), target);
  }

  // optional .DTC_PB.OrderTypeEnum OrderType = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->ordertype(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 13;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->buysell(), target);
  }

  // optional double Price1 = 14;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->price1(), target);
  }

  // optional double Price2 = 15;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->price2(), target);
  }

  // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->timeinforce(), target);
  }

  // optional sfixed64 GoodTillDateTime = 17;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(17, this->goodtilldatetime(), target);
  }

  // optional double OrderQuantity = 18;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->orderquantity(), target);
  }

  // optional double FilledQuantity = 19;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->filledquantity(), target);
  }

  // optional double RemainingQuantity = 20;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->remainingquantity(), target);
  }

  // optional double AverageFillPrice = 21;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->averagefillprice(), target);
  }

  // optional double LastFillPrice = 22;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->lastfillprice(), target);
  }

  // optional sfixed64 LastFillDateTime = 23;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(23, this->lastfilldatetime(), target);
  }

  // optional double LastFillQuantity = 24;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->lastfillquantity(), target);
  }

  // optional string LastFillExecutionID = 25;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastfillexecutionid().data(), static_cast<int>(this->lastfillexecutionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.LastFillExecutionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->lastfillexecutionid(), target);
  }

  // optional string TradeAccount = 26;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->tradeaccount(), target);
  }

  // optional string InfoText = 27;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.InfoText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->infotext(), target);
  }

  // optional uint32 NoOrders = 28;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->noorders(), target);
  }

  // optional string ParentServerOrderID = 29;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentserverorderid().data(), static_cast<int>(this->parentserverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.ParentServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->parentserverorderid(), target);
  }

  // optional string OCOLinkedOrderServerOrderID = 30;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ocolinkedorderserverorderid().data(), static_cast<int>(this->ocolinkedorderserverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.OCOLinkedOrderServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->ocolinkedorderserverorderid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->openorclose(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string PreviousClientOrderID = 32;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previousclientorderid().data(), static_cast<int>(this->previousclientorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.PreviousClientOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->previousclientorderid(), target);
  }

  // optional string FreeFormText = 33;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeformtext().data(), static_cast<int>(this->freeformtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OrderUpdate.FreeFormText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->freeformtext(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional sfixed64 OrderReceivedDateTime = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(34, this->orderreceiveddatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OrderUpdate)
  return target;
}

size_t OrderUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.OrderUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string PreviousServerOrderID = 6;
    if (has_previousserverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previousserverorderid());
    }

    // optional string ServerOrderID = 7;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string ClientOrderID = 8;
    if (has_clientorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientorderid());
    }

    // optional string ExchangeOrderID = 9;
    if (has_exchangeorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeorderid());
    }

    // optional string LastFillExecutionID = 25;
    if (has_lastfillexecutionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastfillexecutionid());
    }

    // optional string TradeAccount = 26;
    if (has_tradeaccount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string InfoText = 27;
    if (has_infotext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infotext());
    }

    // optional string ParentServerOrderID = 29;
    if (has_parentserverorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentserverorderid());
    }

    // optional string OCOLinkedOrderServerOrderID = 30;
    if (has_ocolinkedorderserverorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ocolinkedorderserverorderid());
    }

    // optional string PreviousClientOrderID = 32;
    if (has_previousclientorderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previousclientorderid());
    }

    // optional string FreeFormText = 33;
    if (has_freeformtext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->freeformtext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumMessages = 2;
    if (has_totalnummessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnummessages());
    }

    // optional int32 MessageNumber = 3;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .DTC_PB.OrderStatusEnum OrderStatus = 10;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderstatus());
    }

    // optional .DTC_PB.OrderUpdateReasonEnum OrderUpdateReason = 11;
    if (has_orderupdatereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orderupdatereason());
    }

    // optional .DTC_PB.OrderTypeEnum OrderType = 12;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional double Price1 = 14;
    if (has_price1()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.BuySellEnum BuySell = 13;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional .DTC_PB.TimeInForceEnum TimeInForce = 16;
    if (has_timeinforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional double Price2 = 15;
    if (has_price2()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 GoodTillDateTime = 17;
    if (has_goodtilldatetime()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double OrderQuantity = 18;
    if (has_orderquantity()) {
      total_size += 2 + 8;
    }

    // optional double FilledQuantity = 19;
    if (has_filledquantity()) {
      total_size += 2 + 8;
    }

    // optional double RemainingQuantity = 20;
    if (has_remainingquantity()) {
      total_size += 2 + 8;
    }

    // optional double AverageFillPrice = 21;
    if (has_averagefillprice()) {
      total_size += 2 + 8;
    }

    // optional double LastFillPrice = 22;
    if (has_lastfillprice()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 LastFillDateTime = 23;
    if (has_lastfilldatetime()) {
      total_size += 2 + 8;
    }

    // optional double LastFillQuantity = 24;
    if (has_lastfillquantity()) {
      total_size += 2 + 8;
    }

    // optional uint32 NoOrders = 28;
    if (has_noorders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noorders());
    }

  }
  if (_has_bits_[32 / 32] & 3u) {
    // optional .DTC_PB.OpenCloseTradeEnum OpenOrClose = 31;
    if (has_openorclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openorclose());
    }

    // optional sfixed64 OrderReceivedDateTime = 34;
    if (has_orderreceiveddatetime()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.OrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.OrderUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.OrderUpdate)
    MergeFrom(*source);
  }
}

void OrderUpdate::MergeFrom(const OrderUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.OrderUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_previousserverorderid();
      previousserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousserverorderid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_serverorderid();
      serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_clientorderid();
      clientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_exchangeorderid();
      exchangeorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangeorderid_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_lastfillexecutionid();
      lastfillexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastfillexecutionid_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_infotext();
      infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_parentserverorderid();
      parentserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parentserverorderid_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_ocolinkedorderserverorderid();
      ocolinkedorderserverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ocolinkedorderserverorderid_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_previousclientorderid();
      previousclientorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousclientorderid_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_freeformtext();
      freeformtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freeformtext_);
    }
    if (cached_has_bits & 0x00002000u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00004000u) {
      totalnummessages_ = from.totalnummessages_;
    }
    if (cached_has_bits & 0x00008000u) {
      messagenumber_ = from.messagenumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      orderstatus_ = from.orderstatus_;
    }
    if (cached_has_bits & 0x00020000u) {
      orderupdatereason_ = from.orderupdatereason_;
    }
    if (cached_has_bits & 0x00040000u) {
      ordertype_ = from.ordertype_;
    }
    if (cached_has_bits & 0x00080000u) {
      price1_ = from.price1_;
    }
    if (cached_has_bits & 0x00100000u) {
      buysell_ = from.buysell_;
    }
    if (cached_has_bits & 0x00200000u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00400000u) {
      price2_ = from.price2_;
    }
    if (cached_has_bits & 0x00800000u) {
      goodtilldatetime_ = from.goodtilldatetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      orderquantity_ = from.orderquantity_;
    }
    if (cached_has_bits & 0x02000000u) {
      filledquantity_ = from.filledquantity_;
    }
    if (cached_has_bits & 0x04000000u) {
      remainingquantity_ = from.remainingquantity_;
    }
    if (cached_has_bits & 0x08000000u) {
      averagefillprice_ = from.averagefillprice_;
    }
    if (cached_has_bits & 0x10000000u) {
      lastfillprice_ = from.lastfillprice_;
    }
    if (cached_has_bits & 0x20000000u) {
      lastfilldatetime_ = from.lastfilldatetime_;
    }
    if (cached_has_bits & 0x40000000u) {
      lastfillquantity_ = from.lastfillquantity_;
    }
    if (cached_has_bits & 0x80000000u) {
      noorders_ = from.noorders_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      openorclose_ = from.openorclose_;
    }
    if (cached_has_bits & 0x00000002u) {
      orderreceiveddatetime_ = from.orderreceiveddatetime_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void OrderUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.OrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderUpdate::CopyFrom(const OrderUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.OrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdate::IsInitialized() const {
  return true;
}

void OrderUpdate::Swap(OrderUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderUpdate::InternalSwap(OrderUpdate* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previousserverorderid_.Swap(&other->previousserverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientorderid_.Swap(&other->clientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchangeorderid_.Swap(&other->exchangeorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastfillexecutionid_.Swap(&other->lastfillexecutionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  infotext_.Swap(&other->infotext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parentserverorderid_.Swap(&other->parentserverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ocolinkedorderserverorderid_.Swap(&other->ocolinkedorderserverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previousclientorderid_.Swap(&other->previousclientorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freeformtext_.Swap(&other->freeformtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(totalnummessages_, other->totalnummessages_);
  swap(messagenumber_, other->messagenumber_);
  swap(orderstatus_, other->orderstatus_);
  swap(orderupdatereason_, other->orderupdatereason_);
  swap(ordertype_, other->ordertype_);
  swap(price1_, other->price1_);
  swap(buysell_, other->buysell_);
  swap(timeinforce_, other->timeinforce_);
  swap(price2_, other->price2_);
  swap(goodtilldatetime_, other->goodtilldatetime_);
  swap(orderquantity_, other->orderquantity_);
  swap(filledquantity_, other->filledquantity_);
  swap(remainingquantity_, other->remainingquantity_);
  swap(averagefillprice_, other->averagefillprice_);
  swap(lastfillprice_, other->lastfillprice_);
  swap(lastfilldatetime_, other->lastfilldatetime_);
  swap(lastfillquantity_, other->lastfillquantity_);
  swap(noorders_, other->noorders_);
  swap(openorclose_, other->openorclose_);
  swap(orderreceiveddatetime_, other->orderreceiveddatetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderUpdate::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenOrdersReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenOrdersReject::kRequestIDFieldNumber;
const int OpenOrdersReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenOrdersReject::OpenOrdersReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_OpenOrdersReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.OpenOrdersReject)
}
OpenOrdersReject::OpenOrdersReject(const OpenOrdersReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.OpenOrdersReject)
}

void OpenOrdersReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

OpenOrdersReject::~OpenOrdersReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.OpenOrdersReject)
  SharedDtor();
}

void OpenOrdersReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenOrdersReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenOrdersReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenOrdersReject& OpenOrdersReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_OpenOrdersReject.base);
  return *internal_default_instance();
}


void OpenOrdersReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.OpenOrdersReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenOrdersReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.OpenOrdersReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.OpenOrdersReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.OpenOrdersReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.OpenOrdersReject)
  return false;
#undef DO_
}

void OpenOrdersReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.OpenOrdersReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OpenOrdersReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.OpenOrdersReject)
}

::google::protobuf::uint8* OpenOrdersReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.OpenOrdersReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.OpenOrdersReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.OpenOrdersReject)
  return target;
}

size_t OpenOrdersReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.OpenOrdersReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenOrdersReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.OpenOrdersReject)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenOrdersReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenOrdersReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.OpenOrdersReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.OpenOrdersReject)
    MergeFrom(*source);
  }
}

void OpenOrdersReject::MergeFrom(const OpenOrdersReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.OpenOrdersReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenOrdersReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.OpenOrdersReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrdersReject::CopyFrom(const OpenOrdersReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.OpenOrdersReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrdersReject::IsInitialized() const {
  return true;
}

void OpenOrdersReject::Swap(OpenOrdersReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenOrdersReject::InternalSwap(OpenOrdersReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenOrdersReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalOrderFillResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalOrderFillResponse::kRequestIDFieldNumber;
const int HistoricalOrderFillResponse::kTotalNumberMessagesFieldNumber;
const int HistoricalOrderFillResponse::kMessageNumberFieldNumber;
const int HistoricalOrderFillResponse::kSymbolFieldNumber;
const int HistoricalOrderFillResponse::kExchangeFieldNumber;
const int HistoricalOrderFillResponse::kServerOrderIDFieldNumber;
const int HistoricalOrderFillResponse::kBuySellFieldNumber;
const int HistoricalOrderFillResponse::kPriceFieldNumber;
const int HistoricalOrderFillResponse::kDateTimeFieldNumber;
const int HistoricalOrderFillResponse::kQuantityFieldNumber;
const int HistoricalOrderFillResponse::kUniqueExecutionIDFieldNumber;
const int HistoricalOrderFillResponse::kTradeAccountFieldNumber;
const int HistoricalOrderFillResponse::kOpenCloseFieldNumber;
const int HistoricalOrderFillResponse::kNoOrderFillsFieldNumber;
const int HistoricalOrderFillResponse::kInfoTextFieldNumber;
const int HistoricalOrderFillResponse::kHighPriceDuringPositionFieldNumber;
const int HistoricalOrderFillResponse::kLowPriceDuringPositionFieldNumber;
const int HistoricalOrderFillResponse::kPositionQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalOrderFillResponse::HistoricalOrderFillResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalOrderFillResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalOrderFillResponse)
}
HistoricalOrderFillResponse::HistoricalOrderFillResponse(const HistoricalOrderFillResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverorderid()) {
    serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
  }
  uniqueexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uniqueexecutionid()) {
    uniqueexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uniqueexecutionid_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_infotext()) {
    infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&positionquantity_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(positionquantity_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalOrderFillResponse)
}

void HistoricalOrderFillResponse::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqueexecutionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionquantity_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(positionquantity_));
}

HistoricalOrderFillResponse::~HistoricalOrderFillResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalOrderFillResponse)
  SharedDtor();
}

void HistoricalOrderFillResponse::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverorderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uniqueexecutionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalOrderFillResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalOrderFillResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalOrderFillResponse& HistoricalOrderFillResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalOrderFillResponse.base);
  return *internal_default_instance();
}


void HistoricalOrderFillResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalOrderFillResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      serverorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      uniqueexecutionid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      infotext_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalnumbermessages_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(totalnumbermessages_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&messagenumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highpriceduringposition_) -
        reinterpret_cast<char*>(&messagenumber_)) + sizeof(highpriceduringposition_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&lowpriceduringposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&positionquantity_) -
        reinterpret_cast<char*>(&lowpriceduringposition_)) + sizeof(positionquantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalOrderFillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalOrderFillResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TotalNumberMessages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_totalnumbermessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MessageNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_messagenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ServerOrderID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.ServerOrderID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.BuySellEnum BuySell = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::BuySellEnum_IsValid(value)) {
            set_buysell(static_cast< ::DTC_PB::BuySellEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 DateTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UniqueExecutionID = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueexecutionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uniqueexecutionid().data(), static_cast<int>(this->uniqueexecutionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.UniqueExecutionID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::OpenCloseTradeEnum_IsValid(value)) {
            set_openclose(static_cast< ::DTC_PB::OpenCloseTradeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NoOrderFills = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_noorderfills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noorderfills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string InfoText = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infotext().data(), static_cast<int>(this->infotext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalOrderFillResponse.InfoText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double HighPriceDuringPosition = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_highpriceduringposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highpriceduringposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LowPriceDuringPosition = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_lowpriceduringposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowpriceduringposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double PositionQuantity = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_positionquantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionquantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalOrderFillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalOrderFillResponse)
  return false;
#undef DO_
}

void HistoricalOrderFillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalOrderFillResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 TotalNumberMessages = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // optional string Symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string Exchange = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional string ServerOrderID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.ServerOrderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serverorderid(), output);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->buysell(), output);
  }

  // optional double Price = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price(), output);
  }

  // optional sfixed64 DateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->datetime(), output);
  }

  // optional double Quantity = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->quantity(), output);
  }

  // optional string UniqueExecutionID = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uniqueexecutionid().data(), static_cast<int>(this->uniqueexecutionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.UniqueExecutionID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->uniqueexecutionid(), output);
  }

  // optional string TradeAccount = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->tradeaccount(), output);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->openclose(), output);
  }

  // optional uint32 NoOrderFills = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->noorderfills(), output);
  }

  // optional string InfoText = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.InfoText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->infotext(), output);
  }

  // optional double HighPriceDuringPosition = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->highpriceduringposition(), output);
  }

  // optional double LowPriceDuringPosition = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lowpriceduringposition(), output);
  }

  // optional double PositionQuantity = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->positionquantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalOrderFillResponse)
}

::google::protobuf::uint8* HistoricalOrderFillResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalOrderFillResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 TotalNumberMessages = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // optional string Symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string Exchange = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional string ServerOrderID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverorderid().data(), static_cast<int>(this->serverorderid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.ServerOrderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serverorderid(), target);
  }

  // optional .DTC_PB.BuySellEnum BuySell = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->buysell(), target);
  }

  // optional double Price = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price(), target);
  }

  // optional sfixed64 DateTime = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(9, this->datetime(), target);
  }

  // optional double Quantity = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->quantity(), target);
  }

  // optional string UniqueExecutionID = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uniqueexecutionid().data(), static_cast<int>(this->uniqueexecutionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.UniqueExecutionID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uniqueexecutionid(), target);
  }

  // optional string TradeAccount = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->tradeaccount(), target);
  }

  // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->openclose(), target);
  }

  // optional uint32 NoOrderFills = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->noorderfills(), target);
  }

  // optional string InfoText = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalOrderFillResponse.InfoText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->infotext(), target);
  }

  // optional double HighPriceDuringPosition = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->highpriceduringposition(), target);
  }

  // optional double LowPriceDuringPosition = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lowpriceduringposition(), target);
  }

  // optional double PositionQuantity = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->positionquantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalOrderFillResponse)
  return target;
}

size_t HistoricalOrderFillResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalOrderFillResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string ServerOrderID = 6;
    if (has_serverorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverorderid());
    }

    // optional string UniqueExecutionID = 11;
    if (has_uniqueexecutionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueexecutionid());
    }

    // optional string TradeAccount = 12;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string InfoText = 15;
    if (has_infotext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infotext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumberMessages = 2;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 MessageNumber = 3;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional .DTC_PB.BuySellEnum BuySell = 7;
    if (has_buysell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buysell());
    }

    // optional double Price = 8;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 DateTime = 9;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional double Quantity = 10;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional .DTC_PB.OpenCloseTradeEnum OpenClose = 13;
    if (has_openclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openclose());
    }

    // optional uint32 NoOrderFills = 14;
    if (has_noorderfills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noorderfills());
    }

    // optional double HighPriceDuringPosition = 16;
    if (has_highpriceduringposition()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double LowPriceDuringPosition = 17;
    if (has_lowpriceduringposition()) {
      total_size += 2 + 8;
    }

    // optional double PositionQuantity = 18;
    if (has_positionquantity()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalOrderFillResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalOrderFillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalOrderFillResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalOrderFillResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalOrderFillResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalOrderFillResponse)
    MergeFrom(*source);
  }
}

void HistoricalOrderFillResponse::MergeFrom(const HistoricalOrderFillResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalOrderFillResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_serverorderid();
      serverorderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverorderid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_uniqueexecutionid();
      uniqueexecutionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uniqueexecutionid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_infotext();
      infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
    }
    if (cached_has_bits & 0x00000040u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000080u) {
      totalnumbermessages_ = from.totalnumbermessages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      messagenumber_ = from.messagenumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      buysell_ = from.buysell_;
    }
    if (cached_has_bits & 0x00000400u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000800u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00001000u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00002000u) {
      openclose_ = from.openclose_;
    }
    if (cached_has_bits & 0x00004000u) {
      noorderfills_ = from.noorderfills_;
    }
    if (cached_has_bits & 0x00008000u) {
      highpriceduringposition_ = from.highpriceduringposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      lowpriceduringposition_ = from.lowpriceduringposition_;
    }
    if (cached_has_bits & 0x00020000u) {
      positionquantity_ = from.positionquantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalOrderFillResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalOrderFillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalOrderFillResponse::CopyFrom(const HistoricalOrderFillResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalOrderFillResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalOrderFillResponse::IsInitialized() const {
  return true;
}

void HistoricalOrderFillResponse::Swap(HistoricalOrderFillResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalOrderFillResponse::InternalSwap(HistoricalOrderFillResponse* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverorderid_.Swap(&other->serverorderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uniqueexecutionid_.Swap(&other->uniqueexecutionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  infotext_.Swap(&other->infotext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(messagenumber_, other->messagenumber_);
  swap(buysell_, other->buysell_);
  swap(price_, other->price_);
  swap(datetime_, other->datetime_);
  swap(quantity_, other->quantity_);
  swap(openclose_, other->openclose_);
  swap(noorderfills_, other->noorderfills_);
  swap(highpriceduringposition_, other->highpriceduringposition_);
  swap(lowpriceduringposition_, other->lowpriceduringposition_);
  swap(positionquantity_, other->positionquantity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalOrderFillResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionUpdate::kRequestIDFieldNumber;
const int PositionUpdate::kTotalNumberMessagesFieldNumber;
const int PositionUpdate::kMessageNumberFieldNumber;
const int PositionUpdate::kSymbolFieldNumber;
const int PositionUpdate::kExchangeFieldNumber;
const int PositionUpdate::kQuantityFieldNumber;
const int PositionUpdate::kAveragePriceFieldNumber;
const int PositionUpdate::kPositionIdentifierFieldNumber;
const int PositionUpdate::kTradeAccountFieldNumber;
const int PositionUpdate::kNoPositionsFieldNumber;
const int PositionUpdate::kUnsolicitedFieldNumber;
const int PositionUpdate::kMarginRequirementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionUpdate::PositionUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_PositionUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.PositionUpdate)
}
PositionUpdate::PositionUpdate(const PositionUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  positionidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_positionidentifier()) {
    positionidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionidentifier_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsolicited_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(unsolicited_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.PositionUpdate)
}

void PositionUpdate::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionidentifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsolicited_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(unsolicited_));
}

PositionUpdate::~PositionUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.PositionUpdate)
  SharedDtor();
}

void PositionUpdate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionidentifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PositionUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionUpdate::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionUpdate& PositionUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_PositionUpdate.base);
  return *internal_default_instance();
}


void PositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      positionidentifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&messagenumber_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(messagenumber_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&nopositions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unsolicited_) -
        reinterpret_cast<char*>(&nopositions_)) + sizeof(unsolicited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PositionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.PositionUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TotalNumberMessages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_totalnumbermessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MessageNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_messagenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.PositionUpdate.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.PositionUpdate.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Quantity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double AveragePrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_averageprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PositionIdentifier = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->positionidentifier().data(), static_cast<int>(this->positionidentifier().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.PositionUpdate.PositionIdentifier");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.PositionUpdate.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NoPositions = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_nopositions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nopositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Unsolicited = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_unsolicited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsolicited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double MarginRequirement = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_marginrequirement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrequirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.PositionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.PositionUpdate)
  return false;
#undef DO_
}

void PositionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional int32 TotalNumberMessages = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messagenumber(), output);
  }

  // optional string Symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string Exchange = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional double Quantity = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->quantity(), output);
  }

  // optional double AveragePrice = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->averageprice(), output);
  }

  // optional string PositionIdentifier = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->positionidentifier().data(), static_cast<int>(this->positionidentifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.PositionIdentifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->positionidentifier(), output);
  }

  // optional string TradeAccount = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradeaccount(), output);
  }

  // optional uint32 NoPositions = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->nopositions(), output);
  }

  // optional uint32 Unsolicited = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unsolicited(), output);
  }

  // optional double MarginRequirement = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->marginrequirement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.PositionUpdate)
}

::google::protobuf::uint8* PositionUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional int32 TotalNumberMessages = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messagenumber(), target);
  }

  // optional string Symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string Exchange = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional double Quantity = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->quantity(), target);
  }

  // optional double AveragePrice = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->averageprice(), target);
  }

  // optional string PositionIdentifier = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->positionidentifier().data(), static_cast<int>(this->positionidentifier().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.PositionIdentifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->positionidentifier(), target);
  }

  // optional string TradeAccount = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.PositionUpdate.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradeaccount(), target);
  }

  // optional uint32 NoPositions = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->nopositions(), target);
  }

  // optional uint32 Unsolicited = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unsolicited(), target);
  }

  // optional double MarginRequirement = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->marginrequirement(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.PositionUpdate)
  return target;
}

size_t PositionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.PositionUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 5;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string PositionIdentifier = 8;
    if (has_positionidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positionidentifier());
    }

    // optional string TradeAccount = 9;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumberMessages = 2;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

    // optional double Quantity = 6;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // optional int32 MessageNumber = 3;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 NoPositions = 10;
    if (has_nopositions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nopositions());
    }

    // optional double AveragePrice = 7;
    if (has_averageprice()) {
      total_size += 1 + 8;
    }

    // optional double MarginRequirement = 12;
    if (has_marginrequirement()) {
      total_size += 1 + 8;
    }

    // optional uint32 Unsolicited = 11;
    if (has_unsolicited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unsolicited());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.PositionUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.PositionUpdate)
    MergeFrom(*source);
  }
}

void PositionUpdate::MergeFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_positionidentifier();
      positionidentifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionidentifier_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000010u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000020u) {
      totalnumbermessages_ = from.totalnumbermessages_;
    }
    if (cached_has_bits & 0x00000040u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000080u) {
      messagenumber_ = from.messagenumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      nopositions_ = from.nopositions_;
    }
    if (cached_has_bits & 0x00000200u) {
      averageprice_ = from.averageprice_;
    }
    if (cached_has_bits & 0x00000400u) {
      marginrequirement_ = from.marginrequirement_;
    }
    if (cached_has_bits & 0x00000800u) {
      unsolicited_ = from.unsolicited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionUpdate::CopyFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionUpdate::IsInitialized() const {
  return true;
}

void PositionUpdate::Swap(PositionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionUpdate::InternalSwap(PositionUpdate* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  positionidentifier_.Swap(&other->positionidentifier_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(quantity_, other->quantity_);
  swap(messagenumber_, other->messagenumber_);
  swap(nopositions_, other->nopositions_);
  swap(averageprice_, other->averageprice_);
  swap(marginrequirement_, other->marginrequirement_);
  swap(unsolicited_, other->unsolicited_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionUpdate::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeAccountsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeAccountsRequest::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeAccountsRequest::TradeAccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_TradeAccountsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.TradeAccountsRequest)
}
TradeAccountsRequest::TradeAccountsRequest(const TradeAccountsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.TradeAccountsRequest)
}

void TradeAccountsRequest::SharedCtor() {
  requestid_ = 0;
}

TradeAccountsRequest::~TradeAccountsRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.TradeAccountsRequest)
  SharedDtor();
}

void TradeAccountsRequest::SharedDtor() {
}

void TradeAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeAccountsRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeAccountsRequest& TradeAccountsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_TradeAccountsRequest.base);
  return *internal_default_instance();
}


void TradeAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.TradeAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.TradeAccountsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.TradeAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.TradeAccountsRequest)
  return false;
#undef DO_
}

void TradeAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.TradeAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.TradeAccountsRequest)
}

::google::protobuf::uint8* TradeAccountsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.TradeAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.TradeAccountsRequest)
  return target;
}

size_t TradeAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.TradeAccountsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.TradeAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeAccountsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeAccountsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.TradeAccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.TradeAccountsRequest)
    MergeFrom(*source);
  }
}

void TradeAccountsRequest::MergeFrom(const TradeAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.TradeAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestid()) {
    set_requestid(from.requestid());
  }
}

void TradeAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.TradeAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountsRequest::CopyFrom(const TradeAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.TradeAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountsRequest::IsInitialized() const {
  return true;
}

void TradeAccountsRequest::Swap(TradeAccountsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeAccountsRequest::InternalSwap(TradeAccountsRequest* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeAccountsRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeAccountResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeAccountResponse::kTotalNumberMessagesFieldNumber;
const int TradeAccountResponse::kMessageNumberFieldNumber;
const int TradeAccountResponse::kTradeAccountFieldNumber;
const int TradeAccountResponse::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeAccountResponse::TradeAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_TradeAccountResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.TradeAccountResponse)
}
TradeAccountResponse::TradeAccountResponse(const TradeAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&totalnumbermessages_, &from.totalnumbermessages_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&totalnumbermessages_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.TradeAccountResponse)
}

void TradeAccountResponse::SharedCtor() {
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&totalnumbermessages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&totalnumbermessages_)) + sizeof(requestid_));
}

TradeAccountResponse::~TradeAccountResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.TradeAccountResponse)
  SharedDtor();
}

void TradeAccountResponse::SharedDtor() {
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeAccountResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeAccountResponse& TradeAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_TradeAccountResponse.base);
  return *internal_default_instance();
}


void TradeAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.TradeAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tradeaccount_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&totalnumbermessages_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&totalnumbermessages_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TradeAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.TradeAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TotalNumberMessages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_totalnumbermessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MessageNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_messagenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.TradeAccountResponse.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 RequestID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.TradeAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.TradeAccountResponse)
  return false;
#undef DO_
}

void TradeAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.TradeAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 TotalNumberMessages = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messagenumber(), output);
  }

  // optional string TradeAccount = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.TradeAccountResponse.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeaccount(), output);
  }

  // optional int32 RequestID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.TradeAccountResponse)
}

::google::protobuf::uint8* TradeAccountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.TradeAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 TotalNumberMessages = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messagenumber(), target);
  }

  // optional string TradeAccount = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.TradeAccountResponse.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeaccount(), target);
  }

  // optional int32 RequestID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.TradeAccountResponse)
  return target;
}

size_t TradeAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.TradeAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string TradeAccount = 3;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional int32 TotalNumberMessages = 1;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

    // optional int32 MessageNumber = 2;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional int32 RequestID = 4;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.TradeAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeAccountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeAccountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.TradeAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.TradeAccountResponse)
    MergeFrom(*source);
  }
}

void TradeAccountResponse::MergeFrom(const TradeAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.TradeAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      totalnumbermessages_ = from.totalnumbermessages_;
    }
    if (cached_has_bits & 0x00000004u) {
      messagenumber_ = from.messagenumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TradeAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.TradeAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeAccountResponse::CopyFrom(const TradeAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.TradeAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeAccountResponse::IsInitialized() const {
  return true;
}

void TradeAccountResponse::Swap(TradeAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeAccountResponse::InternalSwap(TradeAccountResponse* other) {
  using std::swap;
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(messagenumber_, other->messagenumber_);
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeAccountResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeListRequest::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeListRequest::ExchangeListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_ExchangeListRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.ExchangeListRequest)
}
ExchangeListRequest::ExchangeListRequest(const ExchangeListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.ExchangeListRequest)
}

void ExchangeListRequest::SharedCtor() {
  requestid_ = 0;
}

ExchangeListRequest::~ExchangeListRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.ExchangeListRequest)
  SharedDtor();
}

void ExchangeListRequest::SharedDtor() {
}

void ExchangeListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExchangeListRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeListRequest& ExchangeListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_ExchangeListRequest.base);
  return *internal_default_instance();
}


void ExchangeListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.ExchangeListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExchangeListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.ExchangeListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.ExchangeListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.ExchangeListRequest)
  return false;
#undef DO_
}

void ExchangeListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.ExchangeListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.ExchangeListRequest)
}

::google::protobuf::uint8* ExchangeListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.ExchangeListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.ExchangeListRequest)
  return target;
}

size_t ExchangeListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.ExchangeListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 RequestID = 1;
  if (has_requestid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->requestid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.ExchangeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.ExchangeListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.ExchangeListRequest)
    MergeFrom(*source);
  }
}

void ExchangeListRequest::MergeFrom(const ExchangeListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.ExchangeListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestid()) {
    set_requestid(from.requestid());
  }
}

void ExchangeListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.ExchangeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeListRequest::CopyFrom(const ExchangeListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.ExchangeListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeListRequest::IsInitialized() const {
  return true;
}

void ExchangeListRequest::Swap(ExchangeListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeListRequest::InternalSwap(ExchangeListRequest* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExchangeListRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeListResponse::kRequestIDFieldNumber;
const int ExchangeListResponse::kExchangeFieldNumber;
const int ExchangeListResponse::kIsFinalMessageFieldNumber;
const int ExchangeListResponse::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeListResponse::ExchangeListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_ExchangeListResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.ExchangeListResponse)
}
ExchangeListResponse::ExchangeListResponse(const ExchangeListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalmessage_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(isfinalmessage_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.ExchangeListResponse)
}

void ExchangeListResponse::SharedCtor() {
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalmessage_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(isfinalmessage_));
}

ExchangeListResponse::~ExchangeListResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.ExchangeListResponse)
  SharedDtor();
}

void ExchangeListResponse::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExchangeListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExchangeListResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeListResponse& ExchangeListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_ExchangeListResponse.base);
  return *internal_default_instance();
}


void ExchangeListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.ExchangeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isfinalmessage_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(isfinalmessage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExchangeListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.ExchangeListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.ExchangeListResponse.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFinalMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isfinalmessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalmessage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.ExchangeListResponse.Description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.ExchangeListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.ExchangeListResponse)
  return false;
#undef DO_
}

void ExchangeListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.ExchangeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional uint32 IsFinalMessage = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfinalmessage(), output);
  }

  // optional string Description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.ExchangeListResponse)
}

::google::protobuf::uint8* ExchangeListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.ExchangeListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional uint32 IsFinalMessage = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isfinalmessage(), target);
  }

  // optional string Description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.ExchangeListResponse.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.ExchangeListResponse)
  return target;
}

size_t ExchangeListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.ExchangeListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string Description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional uint32 IsFinalMessage = 3;
    if (has_isfinalmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalmessage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.ExchangeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.ExchangeListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.ExchangeListResponse)
    MergeFrom(*source);
  }
}

void ExchangeListResponse::MergeFrom(const ExchangeListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.ExchangeListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      isfinalmessage_ = from.isfinalmessage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExchangeListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.ExchangeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeListResponse::CopyFrom(const ExchangeListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.ExchangeListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeListResponse::IsInitialized() const {
  return true;
}

void ExchangeListResponse::Swap(ExchangeListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeListResponse::InternalSwap(ExchangeListResponse* other) {
  using std::swap;
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(isfinalmessage_, other->isfinalmessage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExchangeListResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolsForExchangeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolsForExchangeRequest::kRequestIDFieldNumber;
const int SymbolsForExchangeRequest::kExchangeFieldNumber;
const int SymbolsForExchangeRequest::kSecurityTypeFieldNumber;
const int SymbolsForExchangeRequest::kRequestActionFieldNumber;
const int SymbolsForExchangeRequest::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolsForExchangeRequest::SymbolsForExchangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SymbolsForExchangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolsForExchangeRequest)
}
SymbolsForExchangeRequest::SymbolsForExchangeRequest(const SymbolsForExchangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestaction_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(requestaction_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolsForExchangeRequest)
}

void SymbolsForExchangeRequest::SharedCtor() {
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  requestaction_ = 1;
}

SymbolsForExchangeRequest::~SymbolsForExchangeRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolsForExchangeRequest)
  SharedDtor();
}

void SymbolsForExchangeRequest::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolsForExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SymbolsForExchangeRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolsForExchangeRequest& SymbolsForExchangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SymbolsForExchangeRequest.base);
  return *internal_default_instance();
}


void SymbolsForExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&securitytype_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
    requestaction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolsForExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolsForExchangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SymbolsForExchangeRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.RequestActionEnum RequestAction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::RequestActionEnum_IsValid(value)) {
            set_requestaction(static_cast< ::DTC_PB::RequestActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SymbolsForExchangeRequest.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolsForExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolsForExchangeRequest)
  return false;
#undef DO_
}

void SymbolsForExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->securitytype(), output);
  }

  // optional .DTC_PB.RequestActionEnum RequestAction = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->requestaction(), output);
  }

  // optional string Symbol = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->symbol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolsForExchangeRequest)
}

::google::protobuf::uint8* SymbolsForExchangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->securitytype(), target);
  }

  // optional .DTC_PB.RequestActionEnum RequestAction = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->requestaction(), target);
  }

  // optional string Symbol = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForExchangeRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->symbol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolsForExchangeRequest)
  return target;
}

size_t SymbolsForExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SymbolsForExchangeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string Symbol = 5;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

    // optional .DTC_PB.RequestActionEnum RequestAction = 4;
    if (has_requestaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestaction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolsForExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolsForExchangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolsForExchangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SymbolsForExchangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SymbolsForExchangeRequest)
    MergeFrom(*source);
  }
}

void SymbolsForExchangeRequest::MergeFrom(const SymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      securitytype_ = from.securitytype_;
    }
    if (cached_has_bits & 0x00000010u) {
      requestaction_ = from.requestaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolsForExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolsForExchangeRequest::CopyFrom(const SymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolsForExchangeRequest::IsInitialized() const {
  return true;
}

void SymbolsForExchangeRequest::Swap(SymbolsForExchangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolsForExchangeRequest::InternalSwap(SymbolsForExchangeRequest* other) {
  using std::swap;
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(requestaction_, other->requestaction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SymbolsForExchangeRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnderlyingSymbolsForExchangeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnderlyingSymbolsForExchangeRequest::kRequestIDFieldNumber;
const int UnderlyingSymbolsForExchangeRequest::kExchangeFieldNumber;
const int UnderlyingSymbolsForExchangeRequest::kSecurityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnderlyingSymbolsForExchangeRequest::UnderlyingSymbolsForExchangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_UnderlyingSymbolsForExchangeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}
UnderlyingSymbolsForExchangeRequest::UnderlyingSymbolsForExchangeRequest(const UnderlyingSymbolsForExchangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&securitytype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}

void UnderlyingSymbolsForExchangeRequest::SharedCtor() {
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
}

UnderlyingSymbolsForExchangeRequest::~UnderlyingSymbolsForExchangeRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  SharedDtor();
}

void UnderlyingSymbolsForExchangeRequest::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnderlyingSymbolsForExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnderlyingSymbolsForExchangeRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnderlyingSymbolsForExchangeRequest& UnderlyingSymbolsForExchangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_UnderlyingSymbolsForExchangeRequest.base);
  return *internal_default_instance();
}


void UnderlyingSymbolsForExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    exchange_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&securitytype_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnderlyingSymbolsForExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.UnderlyingSymbolsForExchangeRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return false;
#undef DO_
}

void UnderlyingSymbolsForExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.UnderlyingSymbolsForExchangeRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->securitytype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.UnderlyingSymbolsForExchangeRequest)
}

::google::protobuf::uint8* UnderlyingSymbolsForExchangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Exchange = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.UnderlyingSymbolsForExchangeRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->securitytype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  return target;
}

size_t UnderlyingSymbolsForExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 3;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnderlyingSymbolsForExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnderlyingSymbolsForExchangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnderlyingSymbolsForExchangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.UnderlyingSymbolsForExchangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.UnderlyingSymbolsForExchangeRequest)
    MergeFrom(*source);
  }
}

void UnderlyingSymbolsForExchangeRequest::MergeFrom(const UnderlyingSymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      securitytype_ = from.securitytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnderlyingSymbolsForExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingSymbolsForExchangeRequest::CopyFrom(const UnderlyingSymbolsForExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.UnderlyingSymbolsForExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingSymbolsForExchangeRequest::IsInitialized() const {
  return true;
}

void UnderlyingSymbolsForExchangeRequest::Swap(UnderlyingSymbolsForExchangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnderlyingSymbolsForExchangeRequest::InternalSwap(UnderlyingSymbolsForExchangeRequest* other) {
  using std::swap;
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnderlyingSymbolsForExchangeRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolsForUnderlyingRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolsForUnderlyingRequest::kRequestIDFieldNumber;
const int SymbolsForUnderlyingRequest::kUnderlyingSymbolFieldNumber;
const int SymbolsForUnderlyingRequest::kExchangeFieldNumber;
const int SymbolsForUnderlyingRequest::kSecurityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolsForUnderlyingRequest::SymbolsForUnderlyingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SymbolsForUnderlyingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolsForUnderlyingRequest)
}
SymbolsForUnderlyingRequest::SymbolsForUnderlyingRequest(const SymbolsForUnderlyingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlyingsymbol()) {
    underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&securitytype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolsForUnderlyingRequest)
}

void SymbolsForUnderlyingRequest::SharedCtor() {
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&securitytype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
}

SymbolsForUnderlyingRequest::~SymbolsForUnderlyingRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolsForUnderlyingRequest)
  SharedDtor();
}

void SymbolsForUnderlyingRequest::SharedDtor() {
  underlyingsymbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolsForUnderlyingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SymbolsForUnderlyingRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolsForUnderlyingRequest& SymbolsForUnderlyingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SymbolsForUnderlyingRequest.base);
  return *internal_default_instance();
}


void SymbolsForUnderlyingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SymbolsForUnderlyingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      underlyingsymbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&securitytype_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolsForUnderlyingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolsForUnderlyingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UnderlyingSymbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SymbolsForUnderlyingRequest.UnderlyingSymbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SymbolsForUnderlyingRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolsForUnderlyingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolsForUnderlyingRequest)
  return false;
#undef DO_
}

void SymbolsForUnderlyingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolsForUnderlyingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string UnderlyingSymbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.UnderlyingSymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->underlyingsymbol(), output);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolsForUnderlyingRequest)
}

::google::protobuf::uint8* SymbolsForUnderlyingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolsForUnderlyingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string UnderlyingSymbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.UnderlyingSymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlyingsymbol(), target);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolsForUnderlyingRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolsForUnderlyingRequest)
  return target;
}

size_t SymbolsForUnderlyingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SymbolsForUnderlyingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UnderlyingSymbol = 2;
    if (has_underlyingsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlyingsymbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolsForUnderlyingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolsForUnderlyingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolsForUnderlyingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SymbolsForUnderlyingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SymbolsForUnderlyingRequest)
    MergeFrom(*source);
  }
}

void SymbolsForUnderlyingRequest::MergeFrom(const SymbolsForUnderlyingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_underlyingsymbol();
      underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      securitytype_ = from.securitytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolsForUnderlyingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolsForUnderlyingRequest::CopyFrom(const SymbolsForUnderlyingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SymbolsForUnderlyingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolsForUnderlyingRequest::IsInitialized() const {
  return true;
}

void SymbolsForUnderlyingRequest::Swap(SymbolsForUnderlyingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolsForUnderlyingRequest::InternalSwap(SymbolsForUnderlyingRequest* other) {
  using std::swap;
  underlyingsymbol_.Swap(&other->underlyingsymbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SymbolsForUnderlyingRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolSearchRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolSearchRequest::kRequestIDFieldNumber;
const int SymbolSearchRequest::kSearchTextFieldNumber;
const int SymbolSearchRequest::kExchangeFieldNumber;
const int SymbolSearchRequest::kSecurityTypeFieldNumber;
const int SymbolSearchRequest::kSearchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolSearchRequest::SymbolSearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SymbolSearchRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SymbolSearchRequest)
}
SymbolSearchRequest::SymbolSearchRequest(const SymbolSearchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  searchtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searchtext()) {
    searchtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchtext_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&searchtype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(searchtype_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SymbolSearchRequest)
}

void SymbolSearchRequest::SharedCtor() {
  searchtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&searchtype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(searchtype_));
}

SymbolSearchRequest::~SymbolSearchRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SymbolSearchRequest)
  SharedDtor();
}

void SymbolSearchRequest::SharedDtor() {
  searchtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymbolSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SymbolSearchRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolSearchRequest& SymbolSearchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SymbolSearchRequest.base);
  return *internal_default_instance();
}


void SymbolSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SymbolSearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      searchtext_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&searchtype_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(searchtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolSearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SymbolSearchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SearchText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchtext().data(), static_cast<int>(this->searchtext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SymbolSearchRequest.SearchText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SymbolSearchRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.SearchTypeEnum SearchType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SearchTypeEnum_IsValid(value)) {
            set_searchtype(static_cast< ::DTC_PB::SearchTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SymbolSearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SymbolSearchRequest)
  return false;
#undef DO_
}

void SymbolSearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SymbolSearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string SearchText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchtext().data(), static_cast<int>(this->searchtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.SearchText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->searchtext(), output);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  // optional .DTC_PB.SearchTypeEnum SearchType = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->searchtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SymbolSearchRequest)
}

::google::protobuf::uint8* SymbolSearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SymbolSearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string SearchText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchtext().data(), static_cast<int>(this->searchtext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.SearchText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->searchtext(), target);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SymbolSearchRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  // optional .DTC_PB.SearchTypeEnum SearchType = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->searchtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SymbolSearchRequest)
  return target;
}

size_t SymbolSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SymbolSearchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string SearchText = 2;
    if (has_searchtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchtext());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

    // optional .DTC_PB.SearchTypeEnum SearchType = 5;
    if (has_searchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->searchtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolSearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SymbolSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolSearchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolSearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SymbolSearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SymbolSearchRequest)
    MergeFrom(*source);
  }
}

void SymbolSearchRequest::MergeFrom(const SymbolSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SymbolSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_searchtext();
      searchtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchtext_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      securitytype_ = from.securitytype_;
    }
    if (cached_has_bits & 0x00000010u) {
      searchtype_ = from.searchtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SymbolSearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SymbolSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolSearchRequest::CopyFrom(const SymbolSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SymbolSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolSearchRequest::IsInitialized() const {
  return true;
}

void SymbolSearchRequest::Swap(SymbolSearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolSearchRequest::InternalSwap(SymbolSearchRequest* other) {
  using std::swap;
  searchtext_.Swap(&other->searchtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(searchtype_, other->searchtype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SymbolSearchRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityDefinitionForSymbolRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityDefinitionForSymbolRequest::kRequestIDFieldNumber;
const int SecurityDefinitionForSymbolRequest::kSymbolFieldNumber;
const int SecurityDefinitionForSymbolRequest::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityDefinitionForSymbolRequest::SecurityDefinitionForSymbolRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SecurityDefinitionForSymbolRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionForSymbolRequest)
}
SecurityDefinitionForSymbolRequest::SecurityDefinitionForSymbolRequest(const SecurityDefinitionForSymbolRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionForSymbolRequest)
}

void SecurityDefinitionForSymbolRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

SecurityDefinitionForSymbolRequest::~SecurityDefinitionForSymbolRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionForSymbolRequest)
  SharedDtor();
}

void SecurityDefinitionForSymbolRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityDefinitionForSymbolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityDefinitionForSymbolRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityDefinitionForSymbolRequest& SecurityDefinitionForSymbolRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SecurityDefinitionForSymbolRequest.base);
  return *internal_default_instance();
}


void SecurityDefinitionForSymbolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecurityDefinitionForSymbolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionForSymbolRequest.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionForSymbolRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionForSymbolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionForSymbolRequest)
  return false;
#undef DO_
}

void SecurityDefinitionForSymbolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionForSymbolRequest)
}

::google::protobuf::uint8* SecurityDefinitionForSymbolRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionForSymbolRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionForSymbolRequest)
  return target;
}

size_t SecurityDefinitionForSymbolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDefinitionForSymbolRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityDefinitionForSymbolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityDefinitionForSymbolRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SecurityDefinitionForSymbolRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SecurityDefinitionForSymbolRequest)
    MergeFrom(*source);
  }
}

void SecurityDefinitionForSymbolRequest::MergeFrom(const SecurityDefinitionForSymbolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecurityDefinitionForSymbolRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionForSymbolRequest::CopyFrom(const SecurityDefinitionForSymbolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SecurityDefinitionForSymbolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionForSymbolRequest::IsInitialized() const {
  return true;
}

void SecurityDefinitionForSymbolRequest::Swap(SecurityDefinitionForSymbolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityDefinitionForSymbolRequest::InternalSwap(SecurityDefinitionForSymbolRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityDefinitionForSymbolRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityDefinitionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityDefinitionResponse::kRequestIDFieldNumber;
const int SecurityDefinitionResponse::kSymbolFieldNumber;
const int SecurityDefinitionResponse::kExchangeFieldNumber;
const int SecurityDefinitionResponse::kSecurityTypeFieldNumber;
const int SecurityDefinitionResponse::kDescriptionFieldNumber;
const int SecurityDefinitionResponse::kMinPriceIncrementFieldNumber;
const int SecurityDefinitionResponse::kPriceDisplayFormatFieldNumber;
const int SecurityDefinitionResponse::kCurrencyValuePerIncrementFieldNumber;
const int SecurityDefinitionResponse::kIsFinalMessageFieldNumber;
const int SecurityDefinitionResponse::kFloatToIntPriceMultiplierFieldNumber;
const int SecurityDefinitionResponse::kIntToFloatPriceDivisorFieldNumber;
const int SecurityDefinitionResponse::kUnderlyingSymbolFieldNumber;
const int SecurityDefinitionResponse::kUpdatesBidAskOnlyFieldNumber;
const int SecurityDefinitionResponse::kStrikePriceFieldNumber;
const int SecurityDefinitionResponse::kPutOrCallFieldNumber;
const int SecurityDefinitionResponse::kShortInterestFieldNumber;
const int SecurityDefinitionResponse::kSecurityExpirationDateFieldNumber;
const int SecurityDefinitionResponse::kBuyRolloverInterestFieldNumber;
const int SecurityDefinitionResponse::kSellRolloverInterestFieldNumber;
const int SecurityDefinitionResponse::kEarningsPerShareFieldNumber;
const int SecurityDefinitionResponse::kSharesOutstandingFieldNumber;
const int SecurityDefinitionResponse::kIntToFloatQuantityDivisorFieldNumber;
const int SecurityDefinitionResponse::kHasMarketDepthDataFieldNumber;
const int SecurityDefinitionResponse::kDisplayPriceMultiplierFieldNumber;
const int SecurityDefinitionResponse::kExchangeSymbolFieldNumber;
const int SecurityDefinitionResponse::kInitialMarginRequirementFieldNumber;
const int SecurityDefinitionResponse::kMaintenanceMarginRequirementFieldNumber;
const int SecurityDefinitionResponse::kCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityDefinitionResponse::SecurityDefinitionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SecurityDefinitionResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionResponse)
}
SecurityDefinitionResponse::SecurityDefinitionResponse(const SecurityDefinitionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_underlyingsymbol()) {
    underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
  }
  exchangesymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchangesymbol()) {
    exchangesymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangesymbol_);
  }
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pricedisplayformat_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(pricedisplayformat_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionResponse)
}

void SecurityDefinitionResponse::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyingsymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maintenancemarginrequirement_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(maintenancemarginrequirement_));
  pricedisplayformat_ = -1;
}

SecurityDefinitionResponse::~SecurityDefinitionResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionResponse)
  SharedDtor();
}

void SecurityDefinitionResponse::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  underlyingsymbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangesymbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityDefinitionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityDefinitionResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityDefinitionResponse& SecurityDefinitionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SecurityDefinitionResponse.base);
  return *internal_default_instance();
}


void SecurityDefinitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SecurityDefinitionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      underlyingsymbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      exchangesymbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      currency_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&securitytype_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(securitytype_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&minpriceincrement_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&putorcall_) -
        reinterpret_cast<char*>(&minpriceincrement_)) + sizeof(putorcall_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&shortinterest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hasmarketdepthdata_) -
        reinterpret_cast<char*>(&shortinterest_)) + sizeof(hasmarketdepthdata_));
  }
  if (cached_has_bits & 251658240u) {
    ::memset(&displaypricemultiplier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maintenancemarginrequirement_) -
        reinterpret_cast<char*>(&displaypricemultiplier_)) + sizeof(maintenancemarginrequirement_));
    pricedisplayformat_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecurityDefinitionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionResponse.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionResponse.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::SecurityTypeEnum_IsValid(value)) {
            set_securitytype(static_cast< ::DTC_PB::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionResponse.Description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float MinPriceIncrement = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_minpriceincrement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minpriceincrement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::PriceDisplayFormatEnum_IsValid(value)) {
            set_pricedisplayformat(static_cast< ::DTC_PB::PriceDisplayFormatEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float CurrencyValuePerIncrement = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_currencyvalueperincrement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currencyvalueperincrement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFinalMessage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_isfinalmessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalmessage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float FloatToIntPriceMultiplier = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_floattointpricemultiplier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floattointpricemultiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float IntToFloatPriceDivisor = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_inttofloatpricedivisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatpricedivisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UnderlyingSymbol = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlyingsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionResponse.UnderlyingSymbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UpdatesBidAskOnly = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_updatesbidaskonly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatesbidaskonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float StrikePrice = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_strikeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strikeprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.PutCallEnum PutOrCall = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::PutCallEnum_IsValid(value)) {
            set_putorcall(static_cast< ::DTC_PB::PutCallEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ShortInterest = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_shortinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 SecurityExpirationDate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_securityexpirationdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &securityexpirationdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float BuyRolloverInterest = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_buyrolloverinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buyrolloverinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float SellRolloverInterest = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_sellrolloverinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sellrolloverinterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float EarningsPerShare = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_earningspershare();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &earningspershare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SharesOutstanding = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_sharesoutstanding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharesoutstanding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float IntToFloatQuantityDivisor = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_inttofloatquantitydivisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatquantitydivisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 HasMarketDepthData = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_hasmarketdepthdata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasmarketdepthdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float DisplayPriceMultiplier = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          set_has_displaypricemultiplier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &displaypricemultiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExchangeSymbol = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangesymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionResponse.ExchangeSymbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float InitialMarginRequirement = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          set_has_initialmarginrequirement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initialmarginrequirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float MaintenanceMarginRequirement = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_maintenancemarginrequirement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maintenancemarginrequirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Currency = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), static_cast<int>(this->currency().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionResponse.Currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionResponse)
  return false;
#undef DO_
}

void SecurityDefinitionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->securitytype(), output);
  }

  // optional string Description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional float MinPriceIncrement = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minpriceincrement(), output);
  }

  // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pricedisplayformat(), output);
  }

  // optional float CurrencyValuePerIncrement = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->currencyvalueperincrement(), output);
  }

  // optional uint32 IsFinalMessage = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isfinalmessage(), output);
  }

  // optional float FloatToIntPriceMultiplier = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->floattointpricemultiplier(), output);
  }

  // optional float IntToFloatPriceDivisor = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->inttofloatpricedivisor(), output);
  }

  // optional string UnderlyingSymbol = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.UnderlyingSymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->underlyingsymbol(), output);
  }

  // optional uint32 UpdatesBidAskOnly = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->updatesbidaskonly(), output);
  }

  // optional float StrikePrice = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->strikeprice(), output);
  }

  // optional .DTC_PB.PutCallEnum PutOrCall = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->putorcall(), output);
  }

  // optional uint32 ShortInterest = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->shortinterest(), output);
  }

  // optional sfixed32 SecurityExpirationDate = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(17, this->securityexpirationdate(), output);
  }

  // optional float BuyRolloverInterest = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->buyrolloverinterest(), output);
  }

  // optional float SellRolloverInterest = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->sellrolloverinterest(), output);
  }

  // optional float EarningsPerShare = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->earningspershare(), output);
  }

  // optional uint32 SharesOutstanding = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->sharesoutstanding(), output);
  }

  // optional float IntToFloatQuantityDivisor = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->inttofloatquantitydivisor(), output);
  }

  // optional uint32 HasMarketDepthData = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->hasmarketdepthdata(), output);
  }

  // optional float DisplayPriceMultiplier = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->displaypricemultiplier(), output);
  }

  // optional string ExchangeSymbol = 25;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.ExchangeSymbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->exchangesymbol(), output);
  }

  // optional float InitialMarginRequirement = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->initialmarginrequirement(), output);
  }

  // optional float MaintenanceMarginRequirement = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->maintenancemarginrequirement(), output);
  }

  // optional string Currency = 28;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionResponse)
}

::google::protobuf::uint8* SecurityDefinitionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->securitytype(), target);
  }

  // optional string Description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional float MinPriceIncrement = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minpriceincrement(), target);
  }

  // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pricedisplayformat(), target);
  }

  // optional float CurrencyValuePerIncrement = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->currencyvalueperincrement(), target);
  }

  // optional uint32 IsFinalMessage = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isfinalmessage(), target);
  }

  // optional float FloatToIntPriceMultiplier = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->floattointpricemultiplier(), target);
  }

  // optional float IntToFloatPriceDivisor = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->inttofloatpricedivisor(), target);
  }

  // optional string UnderlyingSymbol = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->underlyingsymbol().data(), static_cast<int>(this->underlyingsymbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.UnderlyingSymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->underlyingsymbol(), target);
  }

  // optional uint32 UpdatesBidAskOnly = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->updatesbidaskonly(), target);
  }

  // optional float StrikePrice = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->strikeprice(), target);
  }

  // optional .DTC_PB.PutCallEnum PutOrCall = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->putorcall(), target);
  }

  // optional uint32 ShortInterest = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->shortinterest(), target);
  }

  // optional sfixed32 SecurityExpirationDate = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(17, this->securityexpirationdate(), target);
  }

  // optional float BuyRolloverInterest = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->buyrolloverinterest(), target);
  }

  // optional float SellRolloverInterest = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->sellrolloverinterest(), target);
  }

  // optional float EarningsPerShare = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->earningspershare(), target);
  }

  // optional uint32 SharesOutstanding = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->sharesoutstanding(), target);
  }

  // optional float IntToFloatQuantityDivisor = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->inttofloatquantitydivisor(), target);
  }

  // optional uint32 HasMarketDepthData = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->hasmarketdepthdata(), target);
  }

  // optional float DisplayPriceMultiplier = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->displaypricemultiplier(), target);
  }

  // optional string ExchangeSymbol = 25;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangesymbol().data(), static_cast<int>(this->exchangesymbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.ExchangeSymbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->exchangesymbol(), target);
  }

  // optional float InitialMarginRequirement = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->initialmarginrequirement(), target);
  }

  // optional float MaintenanceMarginRequirement = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->maintenancemarginrequirement(), target);
  }

  // optional string Currency = 28;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionResponse.Currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionResponse)
  return target;
}

size_t SecurityDefinitionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SecurityDefinitionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional string Description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string UnderlyingSymbol = 12;
    if (has_underlyingsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlyingsymbol());
    }

    // optional string ExchangeSymbol = 25;
    if (has_exchangesymbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangesymbol());
    }

    // optional string Currency = 28;
    if (has_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.SecurityTypeEnum SecurityType = 4;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->securitytype());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float MinPriceIncrement = 6;
    if (has_minpriceincrement()) {
      total_size += 1 + 4;
    }

    // optional float CurrencyValuePerIncrement = 8;
    if (has_currencyvalueperincrement()) {
      total_size += 1 + 4;
    }

    // optional uint32 IsFinalMessage = 9;
    if (has_isfinalmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalmessage());
    }

    // optional float FloatToIntPriceMultiplier = 10;
    if (has_floattointpricemultiplier()) {
      total_size += 1 + 4;
    }

    // optional float IntToFloatPriceDivisor = 11;
    if (has_inttofloatpricedivisor()) {
      total_size += 1 + 4;
    }

    // optional uint32 UpdatesBidAskOnly = 13;
    if (has_updatesbidaskonly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatesbidaskonly());
    }

    // optional float StrikePrice = 14;
    if (has_strikeprice()) {
      total_size += 1 + 4;
    }

    // optional .DTC_PB.PutCallEnum PutOrCall = 15;
    if (has_putorcall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->putorcall());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 ShortInterest = 16;
    if (has_shortinterest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortinterest());
    }

    // optional sfixed32 SecurityExpirationDate = 17;
    if (has_securityexpirationdate()) {
      total_size += 2 + 4;
    }

    // optional float BuyRolloverInterest = 18;
    if (has_buyrolloverinterest()) {
      total_size += 2 + 4;
    }

    // optional float SellRolloverInterest = 19;
    if (has_sellrolloverinterest()) {
      total_size += 2 + 4;
    }

    // optional float EarningsPerShare = 20;
    if (has_earningspershare()) {
      total_size += 2 + 4;
    }

    // optional uint32 SharesOutstanding = 21;
    if (has_sharesoutstanding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharesoutstanding());
    }

    // optional float IntToFloatQuantityDivisor = 22;
    if (has_inttofloatquantitydivisor()) {
      total_size += 2 + 4;
    }

    // optional uint32 HasMarketDepthData = 23;
    if (has_hasmarketdepthdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasmarketdepthdata());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional float DisplayPriceMultiplier = 24;
    if (has_displaypricemultiplier()) {
      total_size += 2 + 4;
    }

    // optional float InitialMarginRequirement = 26;
    if (has_initialmarginrequirement()) {
      total_size += 2 + 4;
    }

    // optional float MaintenanceMarginRequirement = 27;
    if (has_maintenancemarginrequirement()) {
      total_size += 2 + 4;
    }

    // optional .DTC_PB.PriceDisplayFormatEnum PriceDisplayFormat = 7;
    if (has_pricedisplayformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricedisplayformat());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDefinitionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SecurityDefinitionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityDefinitionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityDefinitionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SecurityDefinitionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SecurityDefinitionResponse)
    MergeFrom(*source);
  }
}

void SecurityDefinitionResponse::MergeFrom(const SecurityDefinitionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SecurityDefinitionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_underlyingsymbol();
      underlyingsymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.underlyingsymbol_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_exchangesymbol();
      exchangesymbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchangesymbol_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (cached_has_bits & 0x00000040u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000080u) {
      securitytype_ = from.securitytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      minpriceincrement_ = from.minpriceincrement_;
    }
    if (cached_has_bits & 0x00000200u) {
      currencyvalueperincrement_ = from.currencyvalueperincrement_;
    }
    if (cached_has_bits & 0x00000400u) {
      isfinalmessage_ = from.isfinalmessage_;
    }
    if (cached_has_bits & 0x00000800u) {
      floattointpricemultiplier_ = from.floattointpricemultiplier_;
    }
    if (cached_has_bits & 0x00001000u) {
      inttofloatpricedivisor_ = from.inttofloatpricedivisor_;
    }
    if (cached_has_bits & 0x00002000u) {
      updatesbidaskonly_ = from.updatesbidaskonly_;
    }
    if (cached_has_bits & 0x00004000u) {
      strikeprice_ = from.strikeprice_;
    }
    if (cached_has_bits & 0x00008000u) {
      putorcall_ = from.putorcall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      shortinterest_ = from.shortinterest_;
    }
    if (cached_has_bits & 0x00020000u) {
      securityexpirationdate_ = from.securityexpirationdate_;
    }
    if (cached_has_bits & 0x00040000u) {
      buyrolloverinterest_ = from.buyrolloverinterest_;
    }
    if (cached_has_bits & 0x00080000u) {
      sellrolloverinterest_ = from.sellrolloverinterest_;
    }
    if (cached_has_bits & 0x00100000u) {
      earningspershare_ = from.earningspershare_;
    }
    if (cached_has_bits & 0x00200000u) {
      sharesoutstanding_ = from.sharesoutstanding_;
    }
    if (cached_has_bits & 0x00400000u) {
      inttofloatquantitydivisor_ = from.inttofloatquantitydivisor_;
    }
    if (cached_has_bits & 0x00800000u) {
      hasmarketdepthdata_ = from.hasmarketdepthdata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      displaypricemultiplier_ = from.displaypricemultiplier_;
    }
    if (cached_has_bits & 0x02000000u) {
      initialmarginrequirement_ = from.initialmarginrequirement_;
    }
    if (cached_has_bits & 0x04000000u) {
      maintenancemarginrequirement_ = from.maintenancemarginrequirement_;
    }
    if (cached_has_bits & 0x08000000u) {
      pricedisplayformat_ = from.pricedisplayformat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecurityDefinitionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SecurityDefinitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionResponse::CopyFrom(const SecurityDefinitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SecurityDefinitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionResponse::IsInitialized() const {
  return true;
}

void SecurityDefinitionResponse::Swap(SecurityDefinitionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityDefinitionResponse::InternalSwap(SecurityDefinitionResponse* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  underlyingsymbol_.Swap(&other->underlyingsymbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchangesymbol_.Swap(&other->exchangesymbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_.Swap(&other->currency_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(securitytype_, other->securitytype_);
  swap(minpriceincrement_, other->minpriceincrement_);
  swap(currencyvalueperincrement_, other->currencyvalueperincrement_);
  swap(isfinalmessage_, other->isfinalmessage_);
  swap(floattointpricemultiplier_, other->floattointpricemultiplier_);
  swap(inttofloatpricedivisor_, other->inttofloatpricedivisor_);
  swap(updatesbidaskonly_, other->updatesbidaskonly_);
  swap(strikeprice_, other->strikeprice_);
  swap(putorcall_, other->putorcall_);
  swap(shortinterest_, other->shortinterest_);
  swap(securityexpirationdate_, other->securityexpirationdate_);
  swap(buyrolloverinterest_, other->buyrolloverinterest_);
  swap(sellrolloverinterest_, other->sellrolloverinterest_);
  swap(earningspershare_, other->earningspershare_);
  swap(sharesoutstanding_, other->sharesoutstanding_);
  swap(inttofloatquantitydivisor_, other->inttofloatquantitydivisor_);
  swap(hasmarketdepthdata_, other->hasmarketdepthdata_);
  swap(displaypricemultiplier_, other->displaypricemultiplier_);
  swap(initialmarginrequirement_, other->initialmarginrequirement_);
  swap(maintenancemarginrequirement_, other->maintenancemarginrequirement_);
  swap(pricedisplayformat_, other->pricedisplayformat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityDefinitionResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SecurityDefinitionReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SecurityDefinitionReject::kRequestIDFieldNumber;
const int SecurityDefinitionReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SecurityDefinitionReject::SecurityDefinitionReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_SecurityDefinitionReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.SecurityDefinitionReject)
}
SecurityDefinitionReject::SecurityDefinitionReject(const SecurityDefinitionReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.SecurityDefinitionReject)
}

void SecurityDefinitionReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

SecurityDefinitionReject::~SecurityDefinitionReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.SecurityDefinitionReject)
  SharedDtor();
}

void SecurityDefinitionReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SecurityDefinitionReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SecurityDefinitionReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SecurityDefinitionReject& SecurityDefinitionReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_SecurityDefinitionReject.base);
  return *internal_default_instance();
}


void SecurityDefinitionReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.SecurityDefinitionReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SecurityDefinitionReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.SecurityDefinitionReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.SecurityDefinitionReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.SecurityDefinitionReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.SecurityDefinitionReject)
  return false;
#undef DO_
}

void SecurityDefinitionReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.SecurityDefinitionReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.SecurityDefinitionReject)
}

::google::protobuf::uint8* SecurityDefinitionReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.SecurityDefinitionReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.SecurityDefinitionReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.SecurityDefinitionReject)
  return target;
}

size_t SecurityDefinitionReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.SecurityDefinitionReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityDefinitionReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.SecurityDefinitionReject)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityDefinitionReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SecurityDefinitionReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.SecurityDefinitionReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.SecurityDefinitionReject)
    MergeFrom(*source);
  }
}

void SecurityDefinitionReject::MergeFrom(const SecurityDefinitionReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.SecurityDefinitionReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SecurityDefinitionReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.SecurityDefinitionReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionReject::CopyFrom(const SecurityDefinitionReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.SecurityDefinitionReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionReject::IsInitialized() const {
  return true;
}

void SecurityDefinitionReject::Swap(SecurityDefinitionReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SecurityDefinitionReject::InternalSwap(SecurityDefinitionReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SecurityDefinitionReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountBalanceRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountBalanceRequest::kRequestIDFieldNumber;
const int AccountBalanceRequest::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountBalanceRequest::AccountBalanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_AccountBalanceRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceRequest)
}
AccountBalanceRequest::AccountBalanceRequest(const AccountBalanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceRequest)
}

void AccountBalanceRequest::SharedCtor() {
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

AccountBalanceRequest::~AccountBalanceRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceRequest)
  SharedDtor();
}

void AccountBalanceRequest::SharedDtor() {
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountBalanceRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountBalanceRequest& AccountBalanceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_AccountBalanceRequest.base);
  return *internal_default_instance();
}


void AccountBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.AccountBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tradeaccount_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.AccountBalanceRequest.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceRequest)
  return false;
#undef DO_
}

void AccountBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string TradeAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradeaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceRequest)
}

::google::protobuf::uint8* AccountBalanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string TradeAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradeaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceRequest)
  return target;
}

size_t AccountBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.AccountBalanceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string TradeAccount = 2;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.AccountBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountBalanceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountBalanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.AccountBalanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.AccountBalanceRequest)
    MergeFrom(*source);
  }
}

void AccountBalanceRequest::MergeFrom(const AccountBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.AccountBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.AccountBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceRequest::CopyFrom(const AccountBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.AccountBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceRequest::IsInitialized() const {
  return true;
}

void AccountBalanceRequest::Swap(AccountBalanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountBalanceRequest::InternalSwap(AccountBalanceRequest* other) {
  using std::swap;
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountBalanceRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountBalanceReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountBalanceReject::kRequestIDFieldNumber;
const int AccountBalanceReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountBalanceReject::AccountBalanceReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_AccountBalanceReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceReject)
}
AccountBalanceReject::AccountBalanceReject(const AccountBalanceReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceReject)
}

void AccountBalanceReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

AccountBalanceReject::~AccountBalanceReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceReject)
  SharedDtor();
}

void AccountBalanceReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountBalanceReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountBalanceReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountBalanceReject& AccountBalanceReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_AccountBalanceReject.base);
  return *internal_default_instance();
}


void AccountBalanceReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.AccountBalanceReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountBalanceReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.AccountBalanceReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceReject)
  return false;
#undef DO_
}

void AccountBalanceReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceReject)
}

::google::protobuf::uint8* AccountBalanceReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceReject)
  return target;
}

size_t AccountBalanceReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.AccountBalanceReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountBalanceReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.AccountBalanceReject)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountBalanceReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountBalanceReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.AccountBalanceReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.AccountBalanceReject)
    MergeFrom(*source);
  }
}

void AccountBalanceReject::MergeFrom(const AccountBalanceReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.AccountBalanceReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountBalanceReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.AccountBalanceReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceReject::CopyFrom(const AccountBalanceReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.AccountBalanceReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceReject::IsInitialized() const {
  return true;
}

void AccountBalanceReject::Swap(AccountBalanceReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountBalanceReject::InternalSwap(AccountBalanceReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountBalanceReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccountBalanceUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountBalanceUpdate::kRequestIDFieldNumber;
const int AccountBalanceUpdate::kCashBalanceFieldNumber;
const int AccountBalanceUpdate::kBalanceAvailableForNewPositionsFieldNumber;
const int AccountBalanceUpdate::kAccountCurrencyFieldNumber;
const int AccountBalanceUpdate::kTradeAccountFieldNumber;
const int AccountBalanceUpdate::kSecuritiesValueFieldNumber;
const int AccountBalanceUpdate::kMarginRequirementFieldNumber;
const int AccountBalanceUpdate::kTotalNumberMessagesFieldNumber;
const int AccountBalanceUpdate::kMessageNumberFieldNumber;
const int AccountBalanceUpdate::kNoAccountBalancesFieldNumber;
const int AccountBalanceUpdate::kUnsolicitedFieldNumber;
const int AccountBalanceUpdate::kOpenPositionsProfitLossFieldNumber;
const int AccountBalanceUpdate::kDailyProfitLossFieldNumber;
const int AccountBalanceUpdate::kInfoTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountBalanceUpdate::AccountBalanceUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_AccountBalanceUpdate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AccountBalanceUpdate)
}
AccountBalanceUpdate::AccountBalanceUpdate(const AccountBalanceUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accountcurrency()) {
    accountcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountcurrency_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_infotext()) {
    infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
  }
  ::memcpy(&cashbalance_, &from.cashbalance_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsolicited_) -
    reinterpret_cast<char*>(&cashbalance_)) + sizeof(unsolicited_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AccountBalanceUpdate)
}

void AccountBalanceUpdate::SharedCtor() {
  accountcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cashbalance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsolicited_) -
      reinterpret_cast<char*>(&cashbalance_)) + sizeof(unsolicited_));
}

AccountBalanceUpdate::~AccountBalanceUpdate() {
  // @@protoc_insertion_point(destructor:DTC_PB.AccountBalanceUpdate)
  SharedDtor();
}

void AccountBalanceUpdate::SharedDtor() {
  accountcurrency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountBalanceUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccountBalanceUpdate::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountBalanceUpdate& AccountBalanceUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_AccountBalanceUpdate.base);
  return *internal_default_instance();
}


void AccountBalanceUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.AccountBalanceUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      accountcurrency_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      infotext_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&cashbalance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&securitiesvalue_) -
        reinterpret_cast<char*>(&cashbalance_)) + sizeof(securitiesvalue_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&marginrequirement_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unsolicited_) -
        reinterpret_cast<char*>(&marginrequirement_)) + sizeof(unsolicited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountBalanceUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AccountBalanceUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double CashBalance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_cashbalance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashbalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BalanceAvailableForNewPositions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_balanceavailablefornewpositions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balanceavailablefornewpositions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AccountCurrency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountcurrency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.AccountBalanceUpdate.AccountCurrency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.AccountBalanceUpdate.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double SecuritiesValue = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_securitiesvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &securitiesvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double MarginRequirement = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_marginrequirement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrequirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TotalNumberMessages = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_totalnumbermessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MessageNumber = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_messagenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NoAccountBalances = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_noaccountbalances();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noaccountbalances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Unsolicited = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_unsolicited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsolicited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double OpenPositionsProfitLoss = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_openpositionsprofitloss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openpositionsprofitloss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DailyProfitLoss = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_dailyprofitloss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dailyprofitloss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string InfoText = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infotext().data(), static_cast<int>(this->infotext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.AccountBalanceUpdate.InfoText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AccountBalanceUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AccountBalanceUpdate)
  return false;
#undef DO_
}

void AccountBalanceUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AccountBalanceUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double CashBalance = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cashbalance(), output);
  }

  // optional double BalanceAvailableForNewPositions = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->balanceavailablefornewpositions(), output);
  }

  // optional string AccountCurrency = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.AccountCurrency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accountcurrency(), output);
  }

  // optional string TradeAccount = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradeaccount(), output);
  }

  // optional double SecuritiesValue = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->securitiesvalue(), output);
  }

  // optional double MarginRequirement = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->marginrequirement(), output);
  }

  // optional int32 TotalNumberMessages = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->messagenumber(), output);
  }

  // optional uint32 NoAccountBalances = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->noaccountbalances(), output);
  }

  // optional uint32 Unsolicited = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unsolicited(), output);
  }

  // optional double OpenPositionsProfitLoss = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->openpositionsprofitloss(), output);
  }

  // optional double DailyProfitLoss = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->dailyprofitloss(), output);
  }

  // optional string InfoText = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.InfoText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->infotext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AccountBalanceUpdate)
}

::google::protobuf::uint8* AccountBalanceUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AccountBalanceUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double CashBalance = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cashbalance(), target);
  }

  // optional double BalanceAvailableForNewPositions = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->balanceavailablefornewpositions(), target);
  }

  // optional string AccountCurrency = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.AccountCurrency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountcurrency(), target);
  }

  // optional string TradeAccount = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tradeaccount(), target);
  }

  // optional double SecuritiesValue = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->securitiesvalue(), target);
  }

  // optional double MarginRequirement = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->marginrequirement(), target);
  }

  // optional int32 TotalNumberMessages = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->messagenumber(), target);
  }

  // optional uint32 NoAccountBalances = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->noaccountbalances(), target);
  }

  // optional uint32 Unsolicited = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unsolicited(), target);
  }

  // optional double OpenPositionsProfitLoss = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->openpositionsprofitloss(), target);
  }

  // optional double DailyProfitLoss = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->dailyprofitloss(), target);
  }

  // optional string InfoText = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AccountBalanceUpdate.InfoText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->infotext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AccountBalanceUpdate)
  return target;
}

size_t AccountBalanceUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.AccountBalanceUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string AccountCurrency = 4;
    if (has_accountcurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountcurrency());
    }

    // optional string TradeAccount = 5;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string InfoText = 14;
    if (has_infotext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infotext());
    }

    // optional double CashBalance = 2;
    if (has_cashbalance()) {
      total_size += 1 + 8;
    }

    // optional double BalanceAvailableForNewPositions = 3;
    if (has_balanceavailablefornewpositions()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumberMessages = 8;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

    // optional double SecuritiesValue = 6;
    if (has_securitiesvalue()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double MarginRequirement = 7;
    if (has_marginrequirement()) {
      total_size += 1 + 8;
    }

    // optional int32 MessageNumber = 9;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional uint32 NoAccountBalances = 10;
    if (has_noaccountbalances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noaccountbalances());
    }

    // optional double OpenPositionsProfitLoss = 12;
    if (has_openpositionsprofitloss()) {
      total_size += 1 + 8;
    }

    // optional double DailyProfitLoss = 13;
    if (has_dailyprofitloss()) {
      total_size += 1 + 8;
    }

    // optional uint32 Unsolicited = 11;
    if (has_unsolicited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unsolicited());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountBalanceUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.AccountBalanceUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountBalanceUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountBalanceUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.AccountBalanceUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.AccountBalanceUpdate)
    MergeFrom(*source);
  }
}

void AccountBalanceUpdate::MergeFrom(const AccountBalanceUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.AccountBalanceUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_accountcurrency();
      accountcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountcurrency_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_infotext();
      infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
    }
    if (cached_has_bits & 0x00000008u) {
      cashbalance_ = from.cashbalance_;
    }
    if (cached_has_bits & 0x00000010u) {
      balanceavailablefornewpositions_ = from.balanceavailablefornewpositions_;
    }
    if (cached_has_bits & 0x00000020u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000040u) {
      totalnumbermessages_ = from.totalnumbermessages_;
    }
    if (cached_has_bits & 0x00000080u) {
      securitiesvalue_ = from.securitiesvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      marginrequirement_ = from.marginrequirement_;
    }
    if (cached_has_bits & 0x00000200u) {
      messagenumber_ = from.messagenumber_;
    }
    if (cached_has_bits & 0x00000400u) {
      noaccountbalances_ = from.noaccountbalances_;
    }
    if (cached_has_bits & 0x00000800u) {
      openpositionsprofitloss_ = from.openpositionsprofitloss_;
    }
    if (cached_has_bits & 0x00001000u) {
      dailyprofitloss_ = from.dailyprofitloss_;
    }
    if (cached_has_bits & 0x00002000u) {
      unsolicited_ = from.unsolicited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountBalanceUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.AccountBalanceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBalanceUpdate::CopyFrom(const AccountBalanceUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.AccountBalanceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBalanceUpdate::IsInitialized() const {
  return true;
}

void AccountBalanceUpdate::Swap(AccountBalanceUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountBalanceUpdate::InternalSwap(AccountBalanceUpdate* other) {
  using std::swap;
  accountcurrency_.Swap(&other->accountcurrency_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  infotext_.Swap(&other->infotext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cashbalance_, other->cashbalance_);
  swap(balanceavailablefornewpositions_, other->balanceavailablefornewpositions_);
  swap(requestid_, other->requestid_);
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(securitiesvalue_, other->securitiesvalue_);
  swap(marginrequirement_, other->marginrequirement_);
  swap(messagenumber_, other->messagenumber_);
  swap(noaccountbalances_, other->noaccountbalances_);
  swap(openpositionsprofitloss_, other->openpositionsprofitloss_);
  swap(dailyprofitloss_, other->dailyprofitloss_);
  swap(unsolicited_, other->unsolicited_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccountBalanceUpdate::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalAccountBalancesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalAccountBalancesRequest::kRequestIDFieldNumber;
const int HistoricalAccountBalancesRequest::kTradeAccountFieldNumber;
const int HistoricalAccountBalancesRequest::kStartDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalAccountBalancesRequest::HistoricalAccountBalancesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalAccountBalancesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalAccountBalancesRequest)
}
HistoricalAccountBalancesRequest::HistoricalAccountBalancesRequest(const HistoricalAccountBalancesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  ::memcpy(&startdatetime_, &from.startdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&startdatetime_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalAccountBalancesRequest)
}

void HistoricalAccountBalancesRequest::SharedCtor() {
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(requestid_));
}

HistoricalAccountBalancesRequest::~HistoricalAccountBalancesRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalAccountBalancesRequest)
  SharedDtor();
}

void HistoricalAccountBalancesRequest::SharedDtor() {
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalAccountBalancesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalAccountBalancesRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalAccountBalancesRequest& HistoricalAccountBalancesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalAccountBalancesRequest.base);
  return *internal_default_instance();
}


void HistoricalAccountBalancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalAccountBalancesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tradeaccount_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&startdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&startdatetime_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalAccountBalancesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalAccountBalancesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalAccountBalancesRequest.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 StartDateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_startdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalAccountBalancesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalAccountBalancesRequest)
  return false;
#undef DO_
}

void HistoricalAccountBalancesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalAccountBalancesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string TradeAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalancesRequest.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tradeaccount(), output);
  }

  // optional sfixed64 StartDateTime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->startdatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalAccountBalancesRequest)
}

::google::protobuf::uint8* HistoricalAccountBalancesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalAccountBalancesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string TradeAccount = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalancesRequest.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tradeaccount(), target);
  }

  // optional sfixed64 StartDateTime = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->startdatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalAccountBalancesRequest)
  return target;
}

size_t HistoricalAccountBalancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalAccountBalancesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string TradeAccount = 2;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional sfixed64 StartDateTime = 3;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalAccountBalancesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalAccountBalancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalAccountBalancesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalAccountBalancesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalAccountBalancesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalAccountBalancesRequest)
    MergeFrom(*source);
  }
}

void HistoricalAccountBalancesRequest::MergeFrom(const HistoricalAccountBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalAccountBalancesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000002u) {
      startdatetime_ = from.startdatetime_;
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalAccountBalancesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalAccountBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalAccountBalancesRequest::CopyFrom(const HistoricalAccountBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalAccountBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalAccountBalancesRequest::IsInitialized() const {
  return true;
}

void HistoricalAccountBalancesRequest::Swap(HistoricalAccountBalancesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalAccountBalancesRequest::InternalSwap(HistoricalAccountBalancesRequest* other) {
  using std::swap;
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(startdatetime_, other->startdatetime_);
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalAccountBalancesRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalAccountBalancesReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalAccountBalancesReject::kRequestIDFieldNumber;
const int HistoricalAccountBalancesReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalAccountBalancesReject::HistoricalAccountBalancesReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalAccountBalancesReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalAccountBalancesReject)
}
HistoricalAccountBalancesReject::HistoricalAccountBalancesReject(const HistoricalAccountBalancesReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalAccountBalancesReject)
}

void HistoricalAccountBalancesReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

HistoricalAccountBalancesReject::~HistoricalAccountBalancesReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalAccountBalancesReject)
  SharedDtor();
}

void HistoricalAccountBalancesReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalAccountBalancesReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalAccountBalancesReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalAccountBalancesReject& HistoricalAccountBalancesReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalAccountBalancesReject.base);
  return *internal_default_instance();
}


void HistoricalAccountBalancesReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalAccountBalancesReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalAccountBalancesReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalAccountBalancesReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalAccountBalancesReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalAccountBalancesReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalAccountBalancesReject)
  return false;
#undef DO_
}

void HistoricalAccountBalancesReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalAccountBalancesReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalancesReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalAccountBalancesReject)
}

::google::protobuf::uint8* HistoricalAccountBalancesReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalAccountBalancesReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalancesReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalAccountBalancesReject)
  return target;
}

size_t HistoricalAccountBalancesReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalAccountBalancesReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalAccountBalancesReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalAccountBalancesReject)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalAccountBalancesReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalAccountBalancesReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalAccountBalancesReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalAccountBalancesReject)
    MergeFrom(*source);
  }
}

void HistoricalAccountBalancesReject::MergeFrom(const HistoricalAccountBalancesReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalAccountBalancesReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalAccountBalancesReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalAccountBalancesReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalAccountBalancesReject::CopyFrom(const HistoricalAccountBalancesReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalAccountBalancesReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalAccountBalancesReject::IsInitialized() const {
  return true;
}

void HistoricalAccountBalancesReject::Swap(HistoricalAccountBalancesReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalAccountBalancesReject::InternalSwap(HistoricalAccountBalancesReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalAccountBalancesReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalAccountBalanceResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalAccountBalanceResponse::kRequestIDFieldNumber;
const int HistoricalAccountBalanceResponse::kDateTimeFieldNumber;
const int HistoricalAccountBalanceResponse::kCashBalanceFieldNumber;
const int HistoricalAccountBalanceResponse::kAccountCurrencyFieldNumber;
const int HistoricalAccountBalanceResponse::kTradeAccountFieldNumber;
const int HistoricalAccountBalanceResponse::kTotalNumberMessagesFieldNumber;
const int HistoricalAccountBalanceResponse::kMessageNumberFieldNumber;
const int HistoricalAccountBalanceResponse::kNoAccountBalancesFieldNumber;
const int HistoricalAccountBalanceResponse::kInfoTextFieldNumber;
const int HistoricalAccountBalanceResponse::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalAccountBalanceResponse::HistoricalAccountBalanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalAccountBalanceResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalAccountBalanceResponse)
}
HistoricalAccountBalanceResponse::HistoricalAccountBalanceResponse(const HistoricalAccountBalanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accountcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accountcurrency()) {
    accountcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountcurrency_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_infotext()) {
    infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
  }
  transactionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transactionid()) {
    transactionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
  }
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&noaccountbalances_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(noaccountbalances_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalAccountBalanceResponse)
}

void HistoricalAccountBalanceResponse::SharedCtor() {
  accountcurrency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transactionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noaccountbalances_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(noaccountbalances_));
}

HistoricalAccountBalanceResponse::~HistoricalAccountBalanceResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalAccountBalanceResponse)
  SharedDtor();
}

void HistoricalAccountBalanceResponse::SharedDtor() {
  accountcurrency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  infotext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transactionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalAccountBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalAccountBalanceResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalAccountBalanceResponse& HistoricalAccountBalanceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalAccountBalanceResponse.base);
  return *internal_default_instance();
}


void HistoricalAccountBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalAccountBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      accountcurrency_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      infotext_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      transactionid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&datetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalnumbermessages_) -
        reinterpret_cast<char*>(&datetime_)) + sizeof(totalnumbermessages_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&messagenumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&noaccountbalances_) -
        reinterpret_cast<char*>(&messagenumber_)) + sizeof(noaccountbalances_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalAccountBalanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalAccountBalanceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double CashBalance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_cashbalance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashbalance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AccountCurrency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountcurrency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalAccountBalanceResponse.AccountCurrency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalAccountBalanceResponse.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TotalNumberMessages = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_totalnumbermessages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumbermessages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MessageNumber = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_messagenumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NoAccountBalances = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_noaccountbalances();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noaccountbalances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string InfoText = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infotext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infotext().data(), static_cast<int>(this->infotext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalAccountBalanceResponse.InfoText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TransactionId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transactionid().data(), static_cast<int>(this->transactionid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalAccountBalanceResponse.TransactionId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalAccountBalanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalAccountBalanceResponse)
  return false;
#undef DO_
}

void HistoricalAccountBalanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalAccountBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double DateTime = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->datetime(), output);
  }

  // optional double CashBalance = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cashbalance(), output);
  }

  // optional string AccountCurrency = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.AccountCurrency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accountcurrency(), output);
  }

  // optional string TradeAccount = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tradeaccount(), output);
  }

  // optional int32 TotalNumberMessages = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalnumbermessages(), output);
  }

  // optional int32 MessageNumber = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->messagenumber(), output);
  }

  // optional uint32 NoAccountBalances = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->noaccountbalances(), output);
  }

  // optional string InfoText = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.InfoText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->infotext(), output);
  }

  // optional string TransactionId = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transactionid().data(), static_cast<int>(this->transactionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.TransactionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->transactionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalAccountBalanceResponse)
}

::google::protobuf::uint8* HistoricalAccountBalanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalAccountBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double DateTime = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->datetime(), target);
  }

  // optional double CashBalance = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cashbalance(), target);
  }

  // optional string AccountCurrency = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountcurrency().data(), static_cast<int>(this->accountcurrency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.AccountCurrency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountcurrency(), target);
  }

  // optional string TradeAccount = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tradeaccount(), target);
  }

  // optional int32 TotalNumberMessages = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalnumbermessages(), target);
  }

  // optional int32 MessageNumber = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->messagenumber(), target);
  }

  // optional uint32 NoAccountBalances = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->noaccountbalances(), target);
  }

  // optional string InfoText = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infotext().data(), static_cast<int>(this->infotext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.InfoText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->infotext(), target);
  }

  // optional string TransactionId = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transactionid().data(), static_cast<int>(this->transactionid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalAccountBalanceResponse.TransactionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->transactionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalAccountBalanceResponse)
  return target;
}

size_t HistoricalAccountBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalAccountBalanceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string AccountCurrency = 4;
    if (has_accountcurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountcurrency());
    }

    // optional string TradeAccount = 5;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

    // optional string InfoText = 9;
    if (has_infotext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infotext());
    }

    // optional string TransactionId = 10;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }

    // optional double DateTime = 2;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional double CashBalance = 3;
    if (has_cashbalance()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 TotalNumberMessages = 6;
    if (has_totalnumbermessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumbermessages());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 MessageNumber = 7;
    if (has_messagenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagenumber());
    }

    // optional uint32 NoAccountBalances = 8;
    if (has_noaccountbalances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noaccountbalances());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalAccountBalanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalAccountBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalAccountBalanceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalAccountBalanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalAccountBalanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalAccountBalanceResponse)
    MergeFrom(*source);
  }
}

void HistoricalAccountBalanceResponse::MergeFrom(const HistoricalAccountBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalAccountBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_accountcurrency();
      accountcurrency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountcurrency_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_infotext();
      infotext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infotext_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_transactionid();
      transactionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
    }
    if (cached_has_bits & 0x00000010u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      cashbalance_ = from.cashbalance_;
    }
    if (cached_has_bits & 0x00000040u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000080u) {
      totalnumbermessages_ = from.totalnumbermessages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      messagenumber_ = from.messagenumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      noaccountbalances_ = from.noaccountbalances_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalAccountBalanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalAccountBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalAccountBalanceResponse::CopyFrom(const HistoricalAccountBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalAccountBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalAccountBalanceResponse::IsInitialized() const {
  return true;
}

void HistoricalAccountBalanceResponse::Swap(HistoricalAccountBalanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalAccountBalanceResponse::InternalSwap(HistoricalAccountBalanceResponse* other) {
  using std::swap;
  accountcurrency_.Swap(&other->accountcurrency_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  infotext_.Swap(&other->infotext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transactionid_.Swap(&other->transactionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(datetime_, other->datetime_);
  swap(cashbalance_, other->cashbalance_);
  swap(requestid_, other->requestid_);
  swap(totalnumbermessages_, other->totalnumbermessages_);
  swap(messagenumber_, other->messagenumber_);
  swap(noaccountbalances_, other->noaccountbalances_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalAccountBalanceResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMessage::kUserMessageFieldNumber;
const int UserMessage::kIsPopupMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMessage::UserMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_UserMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.UserMessage)
}
UserMessage::UserMessage(const UserMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_usermessage()) {
    usermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermessage_);
  }
  ispopupmessage_ = from.ispopupmessage_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.UserMessage)
}

void UserMessage::SharedCtor() {
  usermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ispopupmessage_ = 0u;
}

UserMessage::~UserMessage() {
  // @@protoc_insertion_point(destructor:DTC_PB.UserMessage)
  SharedDtor();
}

void UserMessage::SharedDtor() {
  usermessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserMessage::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMessage& UserMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_UserMessage.base);
  return *internal_default_instance();
}


void UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    usermessage_.ClearNonDefaultToEmptyNoArena();
  }
  ispopupmessage_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.UserMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserMessage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usermessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usermessage().data(), static_cast<int>(this->usermessage().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.UserMessage.UserMessage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsPopupMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ispopupmessage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispopupmessage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.UserMessage)
  return false;
#undef DO_
}

void UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserMessage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermessage().data(), static_cast<int>(this->usermessage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.UserMessage.UserMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usermessage(), output);
  }

  // optional uint32 IsPopupMessage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ispopupmessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.UserMessage)
}

::google::protobuf::uint8* UserMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserMessage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usermessage().data(), static_cast<int>(this->usermessage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.UserMessage.UserMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usermessage(), target);
  }

  // optional uint32 IsPopupMessage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ispopupmessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.UserMessage)
  return target;
}

size_t UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.UserMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserMessage = 1;
    if (has_usermessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usermessage());
    }

    // optional uint32 IsPopupMessage = 2;
    if (has_ispopupmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispopupmessage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.UserMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.UserMessage)
    MergeFrom(*source);
  }
}

void UserMessage::MergeFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_usermessage();
      usermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usermessage_);
    }
    if (cached_has_bits & 0x00000002u) {
      ispopupmessage_ = from.ispopupmessage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMessage::CopyFrom(const UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessage::IsInitialized() const {
  return true;
}

void UserMessage::Swap(UserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserMessage::InternalSwap(UserMessage* other) {
  using std::swap;
  usermessage_.Swap(&other->usermessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ispopupmessage_, other->ispopupmessage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserMessage::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeneralLogMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralLogMessage::kMessageTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralLogMessage::GeneralLogMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_GeneralLogMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.GeneralLogMessage)
}
GeneralLogMessage::GeneralLogMessage(const GeneralLogMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_messagetext()) {
    messagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetext_);
  }
  // @@protoc_insertion_point(copy_constructor:DTC_PB.GeneralLogMessage)
}

void GeneralLogMessage::SharedCtor() {
  messagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GeneralLogMessage::~GeneralLogMessage() {
  // @@protoc_insertion_point(destructor:DTC_PB.GeneralLogMessage)
  SharedDtor();
}

void GeneralLogMessage::SharedDtor() {
  messagetext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeneralLogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeneralLogMessage::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeneralLogMessage& GeneralLogMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_GeneralLogMessage.base);
  return *internal_default_instance();
}


void GeneralLogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.GeneralLogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    messagetext_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeneralLogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.GeneralLogMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MessageText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetext().data(), static_cast<int>(this->messagetext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.GeneralLogMessage.MessageText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.GeneralLogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.GeneralLogMessage)
  return false;
#undef DO_
}

void GeneralLogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.GeneralLogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MessageText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), static_cast<int>(this->messagetext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.GeneralLogMessage.MessageText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagetext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.GeneralLogMessage)
}

::google::protobuf::uint8* GeneralLogMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.GeneralLogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MessageText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), static_cast<int>(this->messagetext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.GeneralLogMessage.MessageText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagetext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.GeneralLogMessage)
  return target;
}

size_t GeneralLogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.GeneralLogMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string MessageText = 3;
  if (has_messagetext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralLogMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.GeneralLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralLogMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralLogMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.GeneralLogMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.GeneralLogMessage)
    MergeFrom(*source);
  }
}

void GeneralLogMessage::MergeFrom(const GeneralLogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.GeneralLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_messagetext()) {
    set_has_messagetext();
    messagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetext_);
  }
}

void GeneralLogMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.GeneralLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralLogMessage::CopyFrom(const GeneralLogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.GeneralLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralLogMessage::IsInitialized() const {
  return true;
}

void GeneralLogMessage::Swap(GeneralLogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralLogMessage::InternalSwap(GeneralLogMessage* other) {
  using std::swap;
  messagetext_.Swap(&other->messagetext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeneralLogMessage::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JournalEntryAdd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalEntryAdd::kJournalEntryFieldNumber;
const int JournalEntryAdd::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalEntryAdd::JournalEntryAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_JournalEntryAdd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.JournalEntryAdd)
}
JournalEntryAdd::JournalEntryAdd(const JournalEntryAdd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  journalentry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_journalentry()) {
    journalentry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.journalentry_);
  }
  datetime_ = from.datetime_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.JournalEntryAdd)
}

void JournalEntryAdd::SharedCtor() {
  journalentry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datetime_ = GOOGLE_LONGLONG(0);
}

JournalEntryAdd::~JournalEntryAdd() {
  // @@protoc_insertion_point(destructor:DTC_PB.JournalEntryAdd)
  SharedDtor();
}

void JournalEntryAdd::SharedDtor() {
  journalentry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JournalEntryAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JournalEntryAdd::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JournalEntryAdd& JournalEntryAdd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_JournalEntryAdd.base);
  return *internal_default_instance();
}


void JournalEntryAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.JournalEntryAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    journalentry_.ClearNonDefaultToEmptyNoArena();
  }
  datetime_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JournalEntryAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.JournalEntryAdd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string JournalEntry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_journalentry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->journalentry().data(), static_cast<int>(this->journalentry().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.JournalEntryAdd.JournalEntry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 DateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.JournalEntryAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.JournalEntryAdd)
  return false;
#undef DO_
}

void JournalEntryAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.JournalEntryAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string JournalEntry = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journalentry().data(), static_cast<int>(this->journalentry().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.JournalEntryAdd.JournalEntry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->journalentry(), output);
  }

  // optional sfixed64 DateTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.JournalEntryAdd)
}

::google::protobuf::uint8* JournalEntryAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.JournalEntryAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string JournalEntry = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journalentry().data(), static_cast<int>(this->journalentry().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.JournalEntryAdd.JournalEntry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->journalentry(), target);
  }

  // optional sfixed64 DateTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.JournalEntryAdd)
  return target;
}

size_t JournalEntryAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.JournalEntryAdd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string JournalEntry = 1;
    if (has_journalentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->journalentry());
    }

    // optional sfixed64 DateTime = 2;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JournalEntryAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.JournalEntryAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const JournalEntryAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalEntryAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.JournalEntryAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.JournalEntryAdd)
    MergeFrom(*source);
  }
}

void JournalEntryAdd::MergeFrom(const JournalEntryAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.JournalEntryAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_journalentry();
      journalentry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.journalentry_);
    }
    if (cached_has_bits & 0x00000002u) {
      datetime_ = from.datetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JournalEntryAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.JournalEntryAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalEntryAdd::CopyFrom(const JournalEntryAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.JournalEntryAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalEntryAdd::IsInitialized() const {
  return true;
}

void JournalEntryAdd::Swap(JournalEntryAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalEntryAdd::InternalSwap(JournalEntryAdd* other) {
  using std::swap;
  journalentry_.Swap(&other->journalentry_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(datetime_, other->datetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JournalEntryAdd::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JournalEntriesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalEntriesRequest::kRequestIDFieldNumber;
const int JournalEntriesRequest::kStartDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalEntriesRequest::JournalEntriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_JournalEntriesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.JournalEntriesRequest)
}
JournalEntriesRequest::JournalEntriesRequest(const JournalEntriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startdatetime_, &from.startdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&startdatetime_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.JournalEntriesRequest)
}

void JournalEntriesRequest::SharedCtor() {
  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(requestid_));
}

JournalEntriesRequest::~JournalEntriesRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.JournalEntriesRequest)
  SharedDtor();
}

void JournalEntriesRequest::SharedDtor() {
}

void JournalEntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JournalEntriesRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JournalEntriesRequest& JournalEntriesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_JournalEntriesRequest.base);
  return *internal_default_instance();
}


void JournalEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.JournalEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&startdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&startdatetime_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JournalEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.JournalEntriesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 StartDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_startdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.JournalEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.JournalEntriesRequest)
  return false;
#undef DO_
}

void JournalEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.JournalEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional sfixed64 StartDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->startdatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.JournalEntriesRequest)
}

::google::protobuf::uint8* JournalEntriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.JournalEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional sfixed64 StartDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->startdatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.JournalEntriesRequest)
  return target;
}

size_t JournalEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.JournalEntriesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sfixed64 StartDateTime = 2;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JournalEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.JournalEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JournalEntriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalEntriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.JournalEntriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.JournalEntriesRequest)
    MergeFrom(*source);
  }
}

void JournalEntriesRequest::MergeFrom(const JournalEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.JournalEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      startdatetime_ = from.startdatetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JournalEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.JournalEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalEntriesRequest::CopyFrom(const JournalEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.JournalEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalEntriesRequest::IsInitialized() const {
  return true;
}

void JournalEntriesRequest::Swap(JournalEntriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalEntriesRequest::InternalSwap(JournalEntriesRequest* other) {
  using std::swap;
  swap(startdatetime_, other->startdatetime_);
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JournalEntriesRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JournalEntriesReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalEntriesReject::kRequestIDFieldNumber;
const int JournalEntriesReject::kRejectTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalEntriesReject::JournalEntriesReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_JournalEntriesReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.JournalEntriesReject)
}
JournalEntriesReject::JournalEntriesReject(const JournalEntriesReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:DTC_PB.JournalEntriesReject)
}

void JournalEntriesReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0;
}

JournalEntriesReject::~JournalEntriesReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.JournalEntriesReject)
  SharedDtor();
}

void JournalEntriesReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JournalEntriesReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JournalEntriesReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JournalEntriesReject& JournalEntriesReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_JournalEntriesReject.base);
  return *internal_default_instance();
}


void JournalEntriesReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.JournalEntriesReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JournalEntriesReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.JournalEntriesReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.JournalEntriesReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.JournalEntriesReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.JournalEntriesReject)
  return false;
#undef DO_
}

void JournalEntriesReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.JournalEntriesReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.JournalEntriesReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.JournalEntriesReject)
}

::google::protobuf::uint8* JournalEntriesReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.JournalEntriesReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.JournalEntriesReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.JournalEntriesReject)
  return target;
}

size_t JournalEntriesReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.JournalEntriesReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JournalEntriesReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.JournalEntriesReject)
  GOOGLE_DCHECK_NE(&from, this);
  const JournalEntriesReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalEntriesReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.JournalEntriesReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.JournalEntriesReject)
    MergeFrom(*source);
  }
}

void JournalEntriesReject::MergeFrom(const JournalEntriesReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.JournalEntriesReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JournalEntriesReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.JournalEntriesReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalEntriesReject::CopyFrom(const JournalEntriesReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.JournalEntriesReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalEntriesReject::IsInitialized() const {
  return true;
}

void JournalEntriesReject::Swap(JournalEntriesReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalEntriesReject::InternalSwap(JournalEntriesReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JournalEntriesReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JournalEntryResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalEntryResponse::kJournalEntryFieldNumber;
const int JournalEntryResponse::kDateTimeFieldNumber;
const int JournalEntryResponse::kIsFinalResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalEntryResponse::JournalEntryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_JournalEntryResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.JournalEntryResponse)
}
JournalEntryResponse::JournalEntryResponse(const JournalEntryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  journalentry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_journalentry()) {
    journalentry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.journalentry_);
  }
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalresponse_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalresponse_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.JournalEntryResponse)
}

void JournalEntryResponse::SharedCtor() {
  journalentry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalresponse_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalresponse_));
}

JournalEntryResponse::~JournalEntryResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.JournalEntryResponse)
  SharedDtor();
}

void JournalEntryResponse::SharedDtor() {
  journalentry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JournalEntryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JournalEntryResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JournalEntryResponse& JournalEntryResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_JournalEntryResponse.base);
  return *internal_default_instance();
}


void JournalEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.JournalEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    journalentry_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&datetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isfinalresponse_) -
        reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalresponse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JournalEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.JournalEntryResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string JournalEntry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_journalentry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->journalentry().data(), static_cast<int>(this->journalentry().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.JournalEntryResponse.JournalEntry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 DateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFinalResponse = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isfinalresponse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalresponse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.JournalEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.JournalEntryResponse)
  return false;
#undef DO_
}

void JournalEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.JournalEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string JournalEntry = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journalentry().data(), static_cast<int>(this->journalentry().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.JournalEntryResponse.JournalEntry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->journalentry(), output);
  }

  // optional sfixed64 DateTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->datetime(), output);
  }

  // optional uint32 IsFinalResponse = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfinalresponse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.JournalEntryResponse)
}

::google::protobuf::uint8* JournalEntryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.JournalEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string JournalEntry = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journalentry().data(), static_cast<int>(this->journalentry().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.JournalEntryResponse.JournalEntry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->journalentry(), target);
  }

  // optional sfixed64 DateTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->datetime(), target);
  }

  // optional uint32 IsFinalResponse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isfinalresponse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.JournalEntryResponse)
  return target;
}

size_t JournalEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.JournalEntryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string JournalEntry = 1;
    if (has_journalentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->journalentry());
    }

    // optional sfixed64 DateTime = 2;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsFinalResponse = 3;
    if (has_isfinalresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalresponse());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JournalEntryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.JournalEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JournalEntryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalEntryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.JournalEntryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.JournalEntryResponse)
    MergeFrom(*source);
  }
}

void JournalEntryResponse::MergeFrom(const JournalEntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.JournalEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_journalentry();
      journalentry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.journalentry_);
    }
    if (cached_has_bits & 0x00000002u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000004u) {
      isfinalresponse_ = from.isfinalresponse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JournalEntryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.JournalEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalEntryResponse::CopyFrom(const JournalEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.JournalEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalEntryResponse::IsInitialized() const {
  return true;
}

void JournalEntryResponse::Swap(JournalEntryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalEntryResponse::InternalSwap(JournalEntryResponse* other) {
  using std::swap;
  journalentry_.Swap(&other->journalentry_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(datetime_, other->datetime_);
  swap(isfinalresponse_, other->isfinalresponse_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JournalEntryResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AlertMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlertMessage::kMessageTextFieldNumber;
const int AlertMessage::kTradeAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlertMessage::AlertMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_AlertMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.AlertMessage)
}
AlertMessage::AlertMessage(const AlertMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_messagetext()) {
    messagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetext_);
  }
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tradeaccount()) {
    tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
  }
  // @@protoc_insertion_point(copy_constructor:DTC_PB.AlertMessage)
}

void AlertMessage::SharedCtor() {
  messagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AlertMessage::~AlertMessage() {
  // @@protoc_insertion_point(destructor:DTC_PB.AlertMessage)
  SharedDtor();
}

void AlertMessage::SharedDtor() {
  messagetext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeaccount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlertMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AlertMessage::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AlertMessage& AlertMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_AlertMessage.base);
  return *internal_default_instance();
}


void AlertMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.AlertMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      messagetext_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tradeaccount_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AlertMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.AlertMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MessageText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetext().data(), static_cast<int>(this->messagetext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.AlertMessage.MessageText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TradeAccount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.AlertMessage.TradeAccount");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.AlertMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.AlertMessage)
  return false;
#undef DO_
}

void AlertMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.AlertMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MessageText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), static_cast<int>(this->messagetext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AlertMessage.MessageText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagetext(), output);
  }

  // optional string TradeAccount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AlertMessage.TradeAccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradeaccount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.AlertMessage)
}

::google::protobuf::uint8* AlertMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.AlertMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string MessageText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetext().data(), static_cast<int>(this->messagetext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AlertMessage.MessageText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagetext(), target);
  }

  // optional string TradeAccount = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeaccount().data(), static_cast<int>(this->tradeaccount().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.AlertMessage.TradeAccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeaccount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.AlertMessage)
  return target;
}

size_t AlertMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.AlertMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MessageText = 3;
    if (has_messagetext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetext());
    }

    // optional string TradeAccount = 4;
    if (has_tradeaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeaccount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlertMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.AlertMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AlertMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AlertMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.AlertMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.AlertMessage)
    MergeFrom(*source);
  }
}

void AlertMessage::MergeFrom(const AlertMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.AlertMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_messagetext();
      messagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetext_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tradeaccount();
      tradeaccount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradeaccount_);
    }
  }
}

void AlertMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.AlertMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertMessage::CopyFrom(const AlertMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.AlertMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertMessage::IsInitialized() const {
  return true;
}

void AlertMessage::Swap(AlertMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlertMessage::InternalSwap(AlertMessage* other) {
  using std::swap;
  messagetext_.Swap(&other->messagetext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradeaccount_.Swap(&other->tradeaccount_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AlertMessage::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataRequest::kRequestIDFieldNumber;
const int HistoricalPriceDataRequest::kSymbolFieldNumber;
const int HistoricalPriceDataRequest::kExchangeFieldNumber;
const int HistoricalPriceDataRequest::kRecordIntervalFieldNumber;
const int HistoricalPriceDataRequest::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRequest::kEndDateTimeFieldNumber;
const int HistoricalPriceDataRequest::kMaxDaysToReturnFieldNumber;
const int HistoricalPriceDataRequest::kUseZLibCompressionFieldNumber;
const int HistoricalPriceDataRequest::kRequestDividendAdjustedStockDataFieldNumber;
const int HistoricalPriceDataRequest::kFlag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataRequest::HistoricalPriceDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRequest)
}
HistoricalPriceDataRequest::HistoricalPriceDataRequest(const HistoricalPriceDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange()) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_1_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(flag_1_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRequest)
}

void HistoricalPriceDataRequest::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_1_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(flag_1_));
}

HistoricalPriceDataRequest::~HistoricalPriceDataRequest() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRequest)
  SharedDtor();
}

void HistoricalPriceDataRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalPriceDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRequest::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataRequest& HistoricalPriceDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataRequest.base);
  return *internal_default_instance();
}


void HistoricalPriceDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usezlibcompression_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(usezlibcompression_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&requestdividendadjustedstockdata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_1_) -
        reinterpret_cast<char*>(&requestdividendadjustedstockdata_)) + sizeof(flag_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalPriceDataRequest.Symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalPriceDataRequest.Exchange");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::HistoricalDataIntervalEnum_IsValid(value)) {
            set_recordinterval(static_cast< ::DTC_PB::HistoricalDataIntervalEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 StartDateTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_startdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 EndDateTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_enddatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &enddatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MaxDaysToReturn = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_maxdaystoreturn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxdaystoreturn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UseZLibCompression = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_usezlibcompression();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usezlibcompression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RequestDividendAdjustedStockData = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_requestdividendadjustedstockdata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestdividendadjustedstockdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Flag_1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_flag_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRequest)
  return false;
#undef DO_
}

void HistoricalPriceDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string Symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->recordinterval(), output);
  }

  // optional sfixed64 StartDateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->startdatetime(), output);
  }

  // optional sfixed64 EndDateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->enddatetime(), output);
  }

  // optional uint32 MaxDaysToReturn = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxdaystoreturn(), output);
  }

  // optional uint32 UseZLibCompression = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usezlibcompression(), output);
  }

  // optional uint32 RequestDividendAdjustedStockData = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->requestdividendadjustedstockdata(), output);
  }

  // optional uint32 Flag_1 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flag_1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRequest)
}

::google::protobuf::uint8* HistoricalPriceDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string Symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string Exchange = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalPriceDataRequest.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->recordinterval(), target);
  }

  // optional sfixed64 StartDateTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->startdatetime(), target);
  }

  // optional sfixed64 EndDateTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->enddatetime(), target);
  }

  // optional uint32 MaxDaysToReturn = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxdaystoreturn(), target);
  }

  // optional uint32 UseZLibCompression = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usezlibcompression(), target);
  }

  // optional uint32 RequestDividendAdjustedStockData = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->requestdividendadjustedstockdata(), target);
  }

  // optional uint32 Flag_1 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flag_1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRequest)
  return target;
}

size_t HistoricalPriceDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string Exchange = 3;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 4;
    if (has_recordinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordinterval());
    }

    // optional sfixed64 StartDateTime = 5;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 EndDateTime = 6;
    if (has_enddatetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 MaxDaysToReturn = 7;
    if (has_maxdaystoreturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxdaystoreturn());
    }

    // optional uint32 UseZLibCompression = 8;
    if (has_usezlibcompression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usezlibcompression());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 RequestDividendAdjustedStockData = 9;
    if (has_requestdividendadjustedstockdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestdividendadjustedstockdata());
    }

    // optional uint32 Flag_1 = 10;
    if (has_flag_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataRequest)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRequest::MergeFrom(const HistoricalPriceDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_exchange();
      exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      recordinterval_ = from.recordinterval_;
    }
    if (cached_has_bits & 0x00000010u) {
      startdatetime_ = from.startdatetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      enddatetime_ = from.enddatetime_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxdaystoreturn_ = from.maxdaystoreturn_;
    }
    if (cached_has_bits & 0x00000080u) {
      usezlibcompression_ = from.usezlibcompression_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      requestdividendadjustedstockdata_ = from.requestdividendadjustedstockdata_;
    }
    if (cached_has_bits & 0x00000200u) {
      flag_1_ = from.flag_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRequest::CopyFrom(const HistoricalPriceDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRequest::IsInitialized() const {
  return true;
}

void HistoricalPriceDataRequest::Swap(HistoricalPriceDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataRequest::InternalSwap(HistoricalPriceDataRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(recordinterval_, other->recordinterval_);
  swap(startdatetime_, other->startdatetime_);
  swap(enddatetime_, other->enddatetime_);
  swap(maxdaystoreturn_, other->maxdaystoreturn_);
  swap(usezlibcompression_, other->usezlibcompression_);
  swap(requestdividendadjustedstockdata_, other->requestdividendadjustedstockdata_);
  swap(flag_1_, other->flag_1_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataRequest::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataResponseHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataResponseHeader::kRequestIDFieldNumber;
const int HistoricalPriceDataResponseHeader::kRecordIntervalFieldNumber;
const int HistoricalPriceDataResponseHeader::kUseZLibCompressionFieldNumber;
const int HistoricalPriceDataResponseHeader::kNoRecordsToReturnFieldNumber;
const int HistoricalPriceDataResponseHeader::kIntToFloatPriceDivisorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataResponseHeader::HistoricalPriceDataResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataResponseHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataResponseHeader)
}
HistoricalPriceDataResponseHeader::HistoricalPriceDataResponseHeader(const HistoricalPriceDataResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inttofloatpricedivisor_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(inttofloatpricedivisor_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataResponseHeader)
}

void HistoricalPriceDataResponseHeader::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inttofloatpricedivisor_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(inttofloatpricedivisor_));
}

HistoricalPriceDataResponseHeader::~HistoricalPriceDataResponseHeader() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataResponseHeader)
  SharedDtor();
}

void HistoricalPriceDataResponseHeader::SharedDtor() {
}

void HistoricalPriceDataResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseHeader::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataResponseHeader& HistoricalPriceDataResponseHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataResponseHeader.base);
  return *internal_default_instance();
}


void HistoricalPriceDataResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inttofloatpricedivisor_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(inttofloatpricedivisor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataResponseHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::HistoricalDataIntervalEnum_IsValid(value)) {
            set_recordinterval(static_cast< ::DTC_PB::HistoricalDataIntervalEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UseZLibCompression = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_usezlibcompression();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usezlibcompression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NoRecordsToReturn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_norecordstoreturn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &norecordstoreturn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float IntToFloatPriceDivisor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_inttofloatpricedivisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inttofloatpricedivisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataResponseHeader)
  return false;
#undef DO_
}

void HistoricalPriceDataResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->recordinterval(), output);
  }

  // optional uint32 UseZLibCompression = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usezlibcompression(), output);
  }

  // optional uint32 NoRecordsToReturn = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->norecordstoreturn(), output);
  }

  // optional float IntToFloatPriceDivisor = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->inttofloatpricedivisor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataResponseHeader)
}

::google::protobuf::uint8* HistoricalPriceDataResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->recordinterval(), target);
  }

  // optional uint32 UseZLibCompression = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usezlibcompression(), target);
  }

  // optional uint32 NoRecordsToReturn = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->norecordstoreturn(), target);
  }

  // optional float IntToFloatPriceDivisor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->inttofloatpricedivisor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataResponseHeader)
  return target;
}

size_t HistoricalPriceDataResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.HistoricalDataIntervalEnum RecordInterval = 2;
    if (has_recordinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordinterval());
    }

    // optional uint32 UseZLibCompression = 3;
    if (has_usezlibcompression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usezlibcompression());
    }

    // optional uint32 NoRecordsToReturn = 4;
    if (has_norecordstoreturn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->norecordstoreturn());
    }

    // optional float IntToFloatPriceDivisor = 5;
    if (has_inttofloatpricedivisor()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataResponseHeader)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataResponseHeader::MergeFrom(const HistoricalPriceDataResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      recordinterval_ = from.recordinterval_;
    }
    if (cached_has_bits & 0x00000004u) {
      usezlibcompression_ = from.usezlibcompression_;
    }
    if (cached_has_bits & 0x00000008u) {
      norecordstoreturn_ = from.norecordstoreturn_;
    }
    if (cached_has_bits & 0x00000010u) {
      inttofloatpricedivisor_ = from.inttofloatpricedivisor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataResponseHeader::CopyFrom(const HistoricalPriceDataResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataResponseHeader::IsInitialized() const {
  return true;
}

void HistoricalPriceDataResponseHeader::Swap(HistoricalPriceDataResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataResponseHeader::InternalSwap(HistoricalPriceDataResponseHeader* other) {
  using std::swap;
  swap(requestid_, other->requestid_);
  swap(recordinterval_, other->recordinterval_);
  swap(usezlibcompression_, other->usezlibcompression_);
  swap(norecordstoreturn_, other->norecordstoreturn_);
  swap(inttofloatpricedivisor_, other->inttofloatpricedivisor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataResponseHeader::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataReject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataReject::kRequestIDFieldNumber;
const int HistoricalPriceDataReject::kRejectTextFieldNumber;
const int HistoricalPriceDataReject::kRejectReasonCodeFieldNumber;
const int HistoricalPriceDataReject::kRetryTimeInSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataReject::HistoricalPriceDataReject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataReject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataReject)
}
HistoricalPriceDataReject::HistoricalPriceDataReject(const HistoricalPriceDataReject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rejecttext()) {
    rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retrytimeinseconds_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(retrytimeinseconds_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataReject)
}

void HistoricalPriceDataReject::SharedCtor() {
  rejecttext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrytimeinseconds_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(retrytimeinseconds_));
}

HistoricalPriceDataReject::~HistoricalPriceDataReject() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataReject)
  SharedDtor();
}

void HistoricalPriceDataReject::SharedDtor() {
  rejecttext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HistoricalPriceDataReject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataReject::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataReject& HistoricalPriceDataReject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataReject.base);
  return *internal_default_instance();
}


void HistoricalPriceDataReject::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rejecttext_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retrytimeinseconds_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(retrytimeinseconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataReject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RejectText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rejecttext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DTC_PB.HistoricalPriceDataReject.RejectText");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::HistoricalPriceDataRejectReasonCodeEnum_IsValid(value)) {
            set_rejectreasoncode(static_cast< ::DTC_PB::HistoricalPriceDataRejectReasonCodeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RetryTimeInSeconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_retrytimeinseconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrytimeinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataReject)
  return false;
#undef DO_
}

void HistoricalPriceDataReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalPriceDataReject.RejectText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rejecttext(), output);
  }

  // optional .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rejectreasoncode(), output);
  }

  // optional uint32 RetryTimeInSeconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retrytimeinseconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataReject)
}

::google::protobuf::uint8* HistoricalPriceDataReject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataReject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional string RejectText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rejecttext().data(), static_cast<int>(this->rejecttext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DTC_PB.HistoricalPriceDataReject.RejectText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rejecttext(), target);
  }

  // optional .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rejectreasoncode(), target);
  }

  // optional uint32 RetryTimeInSeconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retrytimeinseconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataReject)
  return target;
}

size_t HistoricalPriceDataReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataReject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string RejectText = 2;
    if (has_rejecttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rejecttext());
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode = 3;
    if (has_rejectreasoncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rejectreasoncode());
    }

    // optional uint32 RetryTimeInSeconds = 4;
    if (has_retrytimeinseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retrytimeinseconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataReject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataReject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataReject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataReject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataReject)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataReject::MergeFrom(const HistoricalPriceDataReject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataReject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rejecttext();
      rejecttext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rejecttext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rejectreasoncode_ = from.rejectreasoncode_;
    }
    if (cached_has_bits & 0x00000008u) {
      retrytimeinseconds_ = from.retrytimeinseconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataReject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataReject::CopyFrom(const HistoricalPriceDataReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataReject::IsInitialized() const {
  return true;
}

void HistoricalPriceDataReject::Swap(HistoricalPriceDataReject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataReject::InternalSwap(HistoricalPriceDataReject* other) {
  using std::swap;
  rejecttext_.Swap(&other->rejecttext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(rejectreasoncode_, other->rejectreasoncode_);
  swap(retrytimeinseconds_, other->retrytimeinseconds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataReject::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataRecordResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataRecordResponse::kRequestIDFieldNumber;
const int HistoricalPriceDataRecordResponse::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRecordResponse::kOpenPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kHighPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kLowPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kLastPriceFieldNumber;
const int HistoricalPriceDataRecordResponse::kVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kNumTradesFieldNumber;
const int HistoricalPriceDataRecordResponse::kBidVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kAskVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataRecordResponse::HistoricalPriceDataRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataRecordResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRecordResponse)
}
HistoricalPriceDataRecordResponse::HistoricalPriceDataRecordResponse(const HistoricalPriceDataRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startdatetime_, &from.startdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRecordResponse)
}

void HistoricalPriceDataRecordResponse::SharedCtor() {
  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataRecordResponse::~HistoricalPriceDataRecordResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRecordResponse)
  SharedDtor();
}

void HistoricalPriceDataRecordResponse::SharedDtor() {
}

void HistoricalPriceDataRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataRecordResponse& HistoricalPriceDataRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataRecordResponse.base);
  return *internal_default_instance();
}


void HistoricalPriceDataRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&startdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volume_) -
        reinterpret_cast<char*>(&startdatetime_)) + sizeof(volume_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&bidvolume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isfinalrecord_) -
        reinterpret_cast<char*>(&bidvolume_)) + sizeof(isfinalrecord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 StartDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_startdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double OpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_openprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double HighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_highprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_lowprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double LastPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_lastprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumTrades = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_numtrades();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double BidVolume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_bidvolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double AskVolume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_askvolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFinalRecord = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_isfinalrecord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRecordResponse)
  return false;
#undef DO_
}

void HistoricalPriceDataRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional sfixed64 StartDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->startdatetime(), output);
  }

  // optional double OpenPrice = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->openprice(), output);
  }

  // optional double HighPrice = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->highprice(), output);
  }

  // optional double LowPrice = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lowprice(), output);
  }

  // optional double LastPrice = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lastprice(), output);
  }

  // optional double Volume = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->volume(), output);
  }

  // optional uint32 NumTrades = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numtrades(), output);
  }

  // optional double BidVolume = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidvolume(), output);
  }

  // optional double AskVolume = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askvolume(), output);
  }

  // optional uint32 IsFinalRecord = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isfinalrecord(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRecordResponse)
}

::google::protobuf::uint8* HistoricalPriceDataRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional sfixed64 StartDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->startdatetime(), target);
  }

  // optional double OpenPrice = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->openprice(), target);
  }

  // optional double HighPrice = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->highprice(), target);
  }

  // optional double LowPrice = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lowprice(), target);
  }

  // optional double LastPrice = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lastprice(), target);
  }

  // optional double Volume = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->volume(), target);
  }

  // optional uint32 NumTrades = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numtrades(), target);
  }

  // optional double BidVolume = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidvolume(), target);
  }

  // optional double AskVolume = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askvolume(), target);
  }

  // optional uint32 IsFinalRecord = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isfinalrecord(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRecordResponse)
  return target;
}

size_t HistoricalPriceDataRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataRecordResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional sfixed64 StartDateTime = 2;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional double OpenPrice = 3;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // optional double HighPrice = 4;
    if (has_highprice()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional uint32 NumTrades = 8;
    if (has_numtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numtrades());
    }

    // optional double LowPrice = 5;
    if (has_lowprice()) {
      total_size += 1 + 8;
    }

    // optional double LastPrice = 6;
    if (has_lastprice()) {
      total_size += 1 + 8;
    }

    // optional double Volume = 7;
    if (has_volume()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double BidVolume = 9;
    if (has_bidvolume()) {
      total_size += 1 + 8;
    }

    // optional double AskVolume = 10;
    if (has_askvolume()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsFinalRecord = 11;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataRecordResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataRecordResponse)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRecordResponse::MergeFrom(const HistoricalPriceDataRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      startdatetime_ = from.startdatetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      openprice_ = from.openprice_;
    }
    if (cached_has_bits & 0x00000004u) {
      highprice_ = from.highprice_;
    }
    if (cached_has_bits & 0x00000008u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000010u) {
      numtrades_ = from.numtrades_;
    }
    if (cached_has_bits & 0x00000020u) {
      lowprice_ = from.lowprice_;
    }
    if (cached_has_bits & 0x00000040u) {
      lastprice_ = from.lastprice_;
    }
    if (cached_has_bits & 0x00000080u) {
      volume_ = from.volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      bidvolume_ = from.bidvolume_;
    }
    if (cached_has_bits & 0x00000200u) {
      askvolume_ = from.askvolume_;
    }
    if (cached_has_bits & 0x00000400u) {
      isfinalrecord_ = from.isfinalrecord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRecordResponse::CopyFrom(const HistoricalPriceDataRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRecordResponse::IsInitialized() const {
  return true;
}

void HistoricalPriceDataRecordResponse::Swap(HistoricalPriceDataRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataRecordResponse::InternalSwap(HistoricalPriceDataRecordResponse* other) {
  using std::swap;
  swap(startdatetime_, other->startdatetime_);
  swap(openprice_, other->openprice_);
  swap(highprice_, other->highprice_);
  swap(requestid_, other->requestid_);
  swap(numtrades_, other->numtrades_);
  swap(lowprice_, other->lowprice_);
  swap(lastprice_, other->lastprice_);
  swap(volume_, other->volume_);
  swap(bidvolume_, other->bidvolume_);
  swap(askvolume_, other->askvolume_);
  swap(isfinalrecord_, other->isfinalrecord_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataRecordResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataTickRecordResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataTickRecordResponse::kRequestIDFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kDateTimeFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kAtBidOrAskFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kPriceFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kVolumeFieldNumber;
const int HistoricalPriceDataTickRecordResponse::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataTickRecordResponse::HistoricalPriceDataTickRecordResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataTickRecordResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
}
HistoricalPriceDataTickRecordResponse::HistoricalPriceDataTickRecordResponse(const HistoricalPriceDataTickRecordResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
}

void HistoricalPriceDataTickRecordResponse::SharedCtor() {
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataTickRecordResponse::~HistoricalPriceDataTickRecordResponse() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataTickRecordResponse)
  SharedDtor();
}

void HistoricalPriceDataTickRecordResponse::SharedDtor() {
}

void HistoricalPriceDataTickRecordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataTickRecordResponse& HistoricalPriceDataTickRecordResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataTickRecordResponse.base);
  return *internal_default_instance();
}


void HistoricalPriceDataTickRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&datetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isfinalrecord_) -
        reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataTickRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double Volume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFinalRecord = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_isfinalrecord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return false;
#undef DO_
}

void HistoricalPriceDataTickRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double DateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->datetime(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->atbidorask(), output);
  }

  // optional double Price = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }

  // optional double Volume = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume(), output);
  }

  // optional uint32 IsFinalRecord = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfinalrecord(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataTickRecordResponse)
}

::google::protobuf::uint8* HistoricalPriceDataTickRecordResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double DateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->datetime(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->atbidorask(), target);
  }

  // optional double Price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }

  // optional double Volume = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volume(), target);
  }

  // optional uint32 IsFinalRecord = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfinalrecord(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataTickRecordResponse)
  return target;
}

size_t HistoricalPriceDataTickRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double DateTime = 2;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 3;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional double Price = 4;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double Volume = 5;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional uint32 IsFinalRecord = 6;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataTickRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataTickRecordResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataTickRecordResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataTickRecordResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataTickRecordResponse)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataTickRecordResponse::MergeFrom(const HistoricalPriceDataTickRecordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      atbidorask_ = from.atbidorask_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000020u) {
      isfinalrecord_ = from.isfinalrecord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataTickRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataTickRecordResponse::CopyFrom(const HistoricalPriceDataTickRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataTickRecordResponse::IsInitialized() const {
  return true;
}

void HistoricalPriceDataTickRecordResponse::Swap(HistoricalPriceDataTickRecordResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataTickRecordResponse::InternalSwap(HistoricalPriceDataTickRecordResponse* other) {
  using std::swap;
  swap(datetime_, other->datetime_);
  swap(requestid_, other->requestid_);
  swap(atbidorask_, other->atbidorask_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(isfinalrecord_, other->isfinalrecord_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataTickRecordResponse::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataRecordResponse_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataRecordResponse_Int::kRequestIDFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kStartDateTimeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kOpenPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kHighPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kLowPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kLastPriceFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kNumTradesFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kBidVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kAskVolumeFieldNumber;
const int HistoricalPriceDataRecordResponse_Int::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataRecordResponse_Int::HistoricalPriceDataRecordResponse_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataRecordResponse_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}
HistoricalPriceDataRecordResponse_Int::HistoricalPriceDataRecordResponse_Int(const HistoricalPriceDataRecordResponse_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startdatetime_, &from.startdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}

void HistoricalPriceDataRecordResponse_Int::SharedCtor() {
  ::memset(&startdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&startdatetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataRecordResponse_Int::~HistoricalPriceDataRecordResponse_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  SharedDtor();
}

void HistoricalPriceDataRecordResponse_Int::SharedDtor() {
}

void HistoricalPriceDataRecordResponse_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataRecordResponse_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataRecordResponse_Int& HistoricalPriceDataRecordResponse_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataRecordResponse_Int.base);
  return *internal_default_instance();
}


void HistoricalPriceDataRecordResponse_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&startdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numtrades_) -
        reinterpret_cast<char*>(&startdatetime_)) + sizeof(numtrades_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&bidvolume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isfinalrecord_) -
        reinterpret_cast<char*>(&bidvolume_)) + sizeof(isfinalrecord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataRecordResponse_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed64 StartDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_startdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &startdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 OpenPrice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_openprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 HighPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_highprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LowPrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_lowprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LastPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_lastprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NumTrades = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_numtrades();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 BidVolume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_bidvolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AskVolume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_askvolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFinalRecord = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_isfinalrecord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return false;
#undef DO_
}

void HistoricalPriceDataRecordResponse_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional sfixed64 StartDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->startdatetime(), output);
  }

  // optional int32 OpenPrice = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->openprice(), output);
  }

  // optional int32 HighPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->highprice(), output);
  }

  // optional int32 LowPrice = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lowprice(), output);
  }

  // optional int32 LastPrice = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastprice(), output);
  }

  // optional int32 Volume = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->volume(), output);
  }

  // optional uint32 NumTrades = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numtrades(), output);
  }

  // optional int32 BidVolume = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bidvolume(), output);
  }

  // optional int32 AskVolume = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->askvolume(), output);
  }

  // optional uint32 IsFinalRecord = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isfinalrecord(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataRecordResponse_Int)
}

::google::protobuf::uint8* HistoricalPriceDataRecordResponse_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional sfixed64 StartDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->startdatetime(), target);
  }

  // optional int32 OpenPrice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->openprice(), target);
  }

  // optional int32 HighPrice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->highprice(), target);
  }

  // optional int32 LowPrice = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lowprice(), target);
  }

  // optional int32 LastPrice = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastprice(), target);
  }

  // optional int32 Volume = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->volume(), target);
  }

  // optional uint32 NumTrades = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numtrades(), target);
  }

  // optional int32 BidVolume = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bidvolume(), target);
  }

  // optional int32 AskVolume = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->askvolume(), target);
  }

  // optional uint32 IsFinalRecord = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isfinalrecord(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  return target;
}

size_t HistoricalPriceDataRecordResponse_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional sfixed64 StartDateTime = 2;
    if (has_startdatetime()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 OpenPrice = 3;
    if (has_openprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openprice());
    }

    // optional int32 HighPrice = 4;
    if (has_highprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highprice());
    }

    // optional int32 LowPrice = 5;
    if (has_lowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowprice());
    }

    // optional int32 LastPrice = 6;
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastprice());
    }

    // optional int32 Volume = 7;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional uint32 NumTrades = 8;
    if (has_numtrades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numtrades());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 BidVolume = 9;
    if (has_bidvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume());
    }

    // optional int32 AskVolume = 10;
    if (has_askvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume());
    }

    // optional uint32 IsFinalRecord = 11;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataRecordResponse_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataRecordResponse_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataRecordResponse_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataRecordResponse_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataRecordResponse_Int)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataRecordResponse_Int::MergeFrom(const HistoricalPriceDataRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      startdatetime_ = from.startdatetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      openprice_ = from.openprice_;
    }
    if (cached_has_bits & 0x00000008u) {
      highprice_ = from.highprice_;
    }
    if (cached_has_bits & 0x00000010u) {
      lowprice_ = from.lowprice_;
    }
    if (cached_has_bits & 0x00000020u) {
      lastprice_ = from.lastprice_;
    }
    if (cached_has_bits & 0x00000040u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      numtrades_ = from.numtrades_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      bidvolume_ = from.bidvolume_;
    }
    if (cached_has_bits & 0x00000200u) {
      askvolume_ = from.askvolume_;
    }
    if (cached_has_bits & 0x00000400u) {
      isfinalrecord_ = from.isfinalrecord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataRecordResponse_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataRecordResponse_Int::CopyFrom(const HistoricalPriceDataRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataRecordResponse_Int::IsInitialized() const {
  return true;
}

void HistoricalPriceDataRecordResponse_Int::Swap(HistoricalPriceDataRecordResponse_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataRecordResponse_Int::InternalSwap(HistoricalPriceDataRecordResponse_Int* other) {
  using std::swap;
  swap(startdatetime_, other->startdatetime_);
  swap(requestid_, other->requestid_);
  swap(openprice_, other->openprice_);
  swap(highprice_, other->highprice_);
  swap(lowprice_, other->lowprice_);
  swap(lastprice_, other->lastprice_);
  swap(volume_, other->volume_);
  swap(numtrades_, other->numtrades_);
  swap(bidvolume_, other->bidvolume_);
  swap(askvolume_, other->askvolume_);
  swap(isfinalrecord_, other->isfinalrecord_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataRecordResponse_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataTickRecordResponse_Int::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataTickRecordResponse_Int::kRequestIDFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kDateTimeFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kPriceFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kVolumeFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kAtBidOrAskFieldNumber;
const int HistoricalPriceDataTickRecordResponse_Int::kIsFinalRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataTickRecordResponse_Int::HistoricalPriceDataTickRecordResponse_Int()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataTickRecordResponse_Int.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}
HistoricalPriceDataTickRecordResponse_Int::HistoricalPriceDataTickRecordResponse_Int(const HistoricalPriceDataTickRecordResponse_Int& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datetime_, &from.datetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfinalrecord_) -
    reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}

void HistoricalPriceDataTickRecordResponse_Int::SharedCtor() {
  ::memset(&datetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfinalrecord_) -
      reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
}

HistoricalPriceDataTickRecordResponse_Int::~HistoricalPriceDataTickRecordResponse_Int() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  SharedDtor();
}

void HistoricalPriceDataTickRecordResponse_Int::SharedDtor() {
}

void HistoricalPriceDataTickRecordResponse_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataTickRecordResponse_Int::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataTickRecordResponse_Int& HistoricalPriceDataTickRecordResponse_Int::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataTickRecordResponse_Int.base);
  return *internal_default_instance();
}


void HistoricalPriceDataTickRecordResponse_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&datetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isfinalrecord_) -
        reinterpret_cast<char*>(&datetime_)) + sizeof(isfinalrecord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataTickRecordResponse_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double DateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_datetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DTC_PB::AtBidOrAskEnum_IsValid(value)) {
            set_atbidorask(static_cast< ::DTC_PB::AtBidOrAskEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 IsFinalRecord = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_isfinalrecord();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalrecord_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return false;
#undef DO_
}

void HistoricalPriceDataTickRecordResponse_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double DateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->datetime(), output);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 Volume = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->atbidorask(), output);
  }

  // optional uint32 IsFinalRecord = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfinalrecord(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
}

::google::protobuf::uint8* HistoricalPriceDataTickRecordResponse_Int::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double DateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->datetime(), target);
  }

  // optional int32 Price = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 Volume = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->atbidorask(), target);
  }

  // optional uint32 IsFinalRecord = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isfinalrecord(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  return target;
}

size_t HistoricalPriceDataTickRecordResponse_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double DateTime = 2;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

    // optional int32 Price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 Volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional .DTC_PB.AtBidOrAskEnum AtBidOrAsk = 5;
    if (has_atbidorask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atbidorask());
    }

    // optional uint32 IsFinalRecord = 6;
    if (has_isfinalrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalrecord());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataTickRecordResponse_Int::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataTickRecordResponse_Int* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataTickRecordResponse_Int>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataTickRecordResponse_Int::MergeFrom(const HistoricalPriceDataTickRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      datetime_ = from.datetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      atbidorask_ = from.atbidorask_;
    }
    if (cached_has_bits & 0x00000020u) {
      isfinalrecord_ = from.isfinalrecord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataTickRecordResponse_Int::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataTickRecordResponse_Int::CopyFrom(const HistoricalPriceDataTickRecordResponse_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataTickRecordResponse_Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataTickRecordResponse_Int::IsInitialized() const {
  return true;
}

void HistoricalPriceDataTickRecordResponse_Int::Swap(HistoricalPriceDataTickRecordResponse_Int* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataTickRecordResponse_Int::InternalSwap(HistoricalPriceDataTickRecordResponse_Int* other) {
  using std::swap;
  swap(datetime_, other->datetime_);
  swap(requestid_, other->requestid_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
  swap(atbidorask_, other->atbidorask_);
  swap(isfinalrecord_, other->isfinalrecord_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataTickRecordResponse_Int::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HistoricalPriceDataResponseTrailer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoricalPriceDataResponseTrailer::kRequestIDFieldNumber;
const int HistoricalPriceDataResponseTrailer::kFinalRecordLastDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoricalPriceDataResponseTrailer::HistoricalPriceDataResponseTrailer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataResponseTrailer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DTC_PB.HistoricalPriceDataResponseTrailer)
}
HistoricalPriceDataResponseTrailer::HistoricalPriceDataResponseTrailer(const HistoricalPriceDataResponseTrailer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&finalrecordlastdatetime_, &from.finalrecordlastdatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&requestid_) -
    reinterpret_cast<char*>(&finalrecordlastdatetime_)) + sizeof(requestid_));
  // @@protoc_insertion_point(copy_constructor:DTC_PB.HistoricalPriceDataResponseTrailer)
}

void HistoricalPriceDataResponseTrailer::SharedCtor() {
  ::memset(&finalrecordlastdatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requestid_) -
      reinterpret_cast<char*>(&finalrecordlastdatetime_)) + sizeof(requestid_));
}

HistoricalPriceDataResponseTrailer::~HistoricalPriceDataResponseTrailer() {
  // @@protoc_insertion_point(destructor:DTC_PB.HistoricalPriceDataResponseTrailer)
  SharedDtor();
}

void HistoricalPriceDataResponseTrailer::SharedDtor() {
}

void HistoricalPriceDataResponseTrailer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HistoricalPriceDataResponseTrailer::descriptor() {
  ::protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HistoricalPriceDataResponseTrailer& HistoricalPriceDataResponseTrailer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DTCProtocol_2eproto::scc_info_HistoricalPriceDataResponseTrailer.base);
  return *internal_default_instance();
}


void HistoricalPriceDataResponseTrailer::Clear() {
// @@protoc_insertion_point(message_clear_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&finalrecordlastdatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requestid_) -
        reinterpret_cast<char*>(&finalrecordlastdatetime_)) + sizeof(requestid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HistoricalPriceDataResponseTrailer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RequestID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_requestid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double FinalRecordLastDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_finalrecordlastdatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &finalrecordlastdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DTC_PB.HistoricalPriceDataResponseTrailer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DTC_PB.HistoricalPriceDataResponseTrailer)
  return false;
#undef DO_
}

void HistoricalPriceDataResponseTrailer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requestid(), output);
  }

  // optional double FinalRecordLastDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->finalrecordlastdatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DTC_PB.HistoricalPriceDataResponseTrailer)
}

::google::protobuf::uint8* HistoricalPriceDataResponseTrailer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 RequestID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requestid(), target);
  }

  // optional double FinalRecordLastDateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->finalrecordlastdatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTC_PB.HistoricalPriceDataResponseTrailer)
  return target;
}

size_t HistoricalPriceDataResponseTrailer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double FinalRecordLastDateTime = 2;
    if (has_finalrecordlastdatetime()) {
      total_size += 1 + 8;
    }

    // optional int32 RequestID = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalPriceDataResponseTrailer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalPriceDataResponseTrailer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoricalPriceDataResponseTrailer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTC_PB.HistoricalPriceDataResponseTrailer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTC_PB.HistoricalPriceDataResponseTrailer)
    MergeFrom(*source);
  }
}

void HistoricalPriceDataResponseTrailer::MergeFrom(const HistoricalPriceDataResponseTrailer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      finalrecordlastdatetime_ = from.finalrecordlastdatetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HistoricalPriceDataResponseTrailer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalPriceDataResponseTrailer::CopyFrom(const HistoricalPriceDataResponseTrailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTC_PB.HistoricalPriceDataResponseTrailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalPriceDataResponseTrailer::IsInitialized() const {
  return true;
}

void HistoricalPriceDataResponseTrailer::Swap(HistoricalPriceDataResponseTrailer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoricalPriceDataResponseTrailer::InternalSwap(HistoricalPriceDataResponseTrailer* other) {
  using std::swap;
  swap(finalrecordlastdatetime_, other->finalrecordlastdatetime_);
  swap(requestid_, other->requestid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HistoricalPriceDataResponseTrailer::GetMetadata() const {
  protobuf_DTCProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DTCProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DTC_PB
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::EncodingRequest* Arena::CreateMaybeMessage< ::DTC_PB::EncodingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::EncodingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::EncodingResponse* Arena::CreateMaybeMessage< ::DTC_PB::EncodingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::EncodingResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::LogonRequest* Arena::CreateMaybeMessage< ::DTC_PB::LogonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::LogonRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::LogonResponse* Arena::CreateMaybeMessage< ::DTC_PB::LogonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::LogonResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::Logoff* Arena::CreateMaybeMessage< ::DTC_PB::Logoff >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::Logoff >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::Heartbeat* Arena::CreateMaybeMessage< ::DTC_PB::Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::Heartbeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataFeedStatus* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataFeedStatus >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataFeedStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataFeedSymbolStatus* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataFeedSymbolStatus >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataFeedSymbolStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::TradingSymbolStatus* Arena::CreateMaybeMessage< ::DTC_PB::TradingSymbolStatus >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::TradingSymbolStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataRequest* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthRequest* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataReject* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataSnapshot* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataSnapshot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataSnapshot_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataSnapshot_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataSnapshot_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::DepthEntry* Arena::CreateMaybeMessage< ::DTC_PB::DepthEntry >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::DepthEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthFullUpdate20* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthFullUpdate20 >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthFullUpdate20 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthFullUpdate10* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthFullUpdate10 >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthFullUpdate10 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthSnapshotLevel* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthSnapshotLevel >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthSnapshotLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthSnapshotLevel_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthSnapshotLevel_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthSnapshotLevel_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthUpdateLevel* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthUpdateLevel >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthUpdateLevel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthUpdateLevel_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthUpdateLevel_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthUpdateLevel_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthUpdateLevelCompact* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthUpdateLevelCompact >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthUpdateLevelCompact >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthUpdateLevelCompact2* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthUpdateLevelCompact2 >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthUpdateLevelCompact2 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionSettlement* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionSettlement >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionSettlement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionSettlement_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionSettlement_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionSettlement_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionOpen* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionOpen >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionOpen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionOpen_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionOpen_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionOpen_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionNumTrades* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionNumTrades >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionNumTrades >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTradingSessionDate* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTradingSessionDate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTradingSessionDate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDepthReject* Arena::CreateMaybeMessage< ::DTC_PB::MarketDepthReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDepthReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTrade* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTrade >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTrade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTrade_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTrade_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTrade_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTradeWithUnbundledIndicator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateBidAsk* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateBidAsk >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateBidAsk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateBidAsk_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateBidAsk_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateBidAsk_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateBidAskCompact* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateBidAskCompact >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateBidAskCompact >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateTradeCompact* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateTradeCompact >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateTradeCompact >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionVolume* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionVolume >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionVolume >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateOpenInterest* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateOpenInterest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateOpenInterest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionHigh* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionHigh >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionHigh >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionHigh_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionHigh_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionHigh_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionLow* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionLow >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionLow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateSessionLow_Int* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateSessionLow_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateSessionLow_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::MarketDataUpdateLastTradeSnapshot* Arena::CreateMaybeMessage< ::DTC_PB::MarketDataUpdateLastTradeSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::MarketDataUpdateLastTradeSnapshot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewSingleOrder* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewSingleOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewSingleOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewSingleOrderInt* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewSingleOrderInt >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewSingleOrderInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CancelReplaceOrder* Arena::CreateMaybeMessage< ::DTC_PB::CancelReplaceOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CancelReplaceOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CancelReplaceOrderInt* Arena::CreateMaybeMessage< ::DTC_PB::CancelReplaceOrderInt >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CancelReplaceOrderInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CancelOrder* Arena::CreateMaybeMessage< ::DTC_PB::CancelOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CancelOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewOCOOrder* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewOCOOrder >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewOCOOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SubmitNewOCOOrderInt* Arena::CreateMaybeMessage< ::DTC_PB::SubmitNewOCOOrderInt >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SubmitNewOCOOrderInt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::OpenOrdersRequest* Arena::CreateMaybeMessage< ::DTC_PB::OpenOrdersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::OpenOrdersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalOrderFillsRequest* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalOrderFillsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalOrderFillsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalOrderFillsReject* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalOrderFillsReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalOrderFillsReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CurrentPositionsRequest* Arena::CreateMaybeMessage< ::DTC_PB::CurrentPositionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CurrentPositionsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::CurrentPositionsReject* Arena::CreateMaybeMessage< ::DTC_PB::CurrentPositionsReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::CurrentPositionsReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::OrderUpdate* Arena::CreateMaybeMessage< ::DTC_PB::OrderUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::OrderUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::OpenOrdersReject* Arena::CreateMaybeMessage< ::DTC_PB::OpenOrdersReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::OpenOrdersReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalOrderFillResponse* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalOrderFillResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalOrderFillResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::PositionUpdate* Arena::CreateMaybeMessage< ::DTC_PB::PositionUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::PositionUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::TradeAccountsRequest* Arena::CreateMaybeMessage< ::DTC_PB::TradeAccountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::TradeAccountsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::TradeAccountResponse* Arena::CreateMaybeMessage< ::DTC_PB::TradeAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::TradeAccountResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::ExchangeListRequest* Arena::CreateMaybeMessage< ::DTC_PB::ExchangeListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::ExchangeListRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::ExchangeListResponse* Arena::CreateMaybeMessage< ::DTC_PB::ExchangeListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::ExchangeListResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SymbolsForExchangeRequest* Arena::CreateMaybeMessage< ::DTC_PB::SymbolsForExchangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SymbolsForExchangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::UnderlyingSymbolsForExchangeRequest* Arena::CreateMaybeMessage< ::DTC_PB::UnderlyingSymbolsForExchangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::UnderlyingSymbolsForExchangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SymbolsForUnderlyingRequest* Arena::CreateMaybeMessage< ::DTC_PB::SymbolsForUnderlyingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SymbolsForUnderlyingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SymbolSearchRequest* Arena::CreateMaybeMessage< ::DTC_PB::SymbolSearchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SymbolSearchRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SecurityDefinitionForSymbolRequest* Arena::CreateMaybeMessage< ::DTC_PB::SecurityDefinitionForSymbolRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SecurityDefinitionForSymbolRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SecurityDefinitionResponse* Arena::CreateMaybeMessage< ::DTC_PB::SecurityDefinitionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SecurityDefinitionResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::SecurityDefinitionReject* Arena::CreateMaybeMessage< ::DTC_PB::SecurityDefinitionReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::SecurityDefinitionReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::AccountBalanceRequest* Arena::CreateMaybeMessage< ::DTC_PB::AccountBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::AccountBalanceRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::AccountBalanceReject* Arena::CreateMaybeMessage< ::DTC_PB::AccountBalanceReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::AccountBalanceReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::AccountBalanceUpdate* Arena::CreateMaybeMessage< ::DTC_PB::AccountBalanceUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::AccountBalanceUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalAccountBalancesRequest* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalAccountBalancesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalAccountBalancesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalAccountBalancesReject* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalAccountBalancesReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalAccountBalancesReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalAccountBalanceResponse* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalAccountBalanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalAccountBalanceResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::UserMessage* Arena::CreateMaybeMessage< ::DTC_PB::UserMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::UserMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::GeneralLogMessage* Arena::CreateMaybeMessage< ::DTC_PB::GeneralLogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::GeneralLogMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::JournalEntryAdd* Arena::CreateMaybeMessage< ::DTC_PB::JournalEntryAdd >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::JournalEntryAdd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::JournalEntriesRequest* Arena::CreateMaybeMessage< ::DTC_PB::JournalEntriesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::JournalEntriesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::JournalEntriesReject* Arena::CreateMaybeMessage< ::DTC_PB::JournalEntriesReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::JournalEntriesReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::JournalEntryResponse* Arena::CreateMaybeMessage< ::DTC_PB::JournalEntryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::JournalEntryResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::AlertMessage* Arena::CreateMaybeMessage< ::DTC_PB::AlertMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::AlertMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataRequest* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataResponseHeader* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataResponseHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataReject* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataReject >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataReject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataRecordResponse* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataRecordResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataTickRecordResponse* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataTickRecordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataTickRecordResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataRecordResponse_Int* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataRecordResponse_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataRecordResponse_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataTickRecordResponse_Int >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DTC_PB::HistoricalPriceDataResponseTrailer* Arena::CreateMaybeMessage< ::DTC_PB::HistoricalPriceDataResponseTrailer >(Arena* arena) {
  return Arena::CreateInternal< ::DTC_PB::HistoricalPriceDataResponseTrailer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
