// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DTCProtocol.GPBV3.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DTCPB {

  /// <summary>Holder for reflection information generated from DTCProtocol.GPBV3.proto</summary>
  public static partial class DTCProtocolGPBV3Reflection {

    #region Descriptor
    /// <summary>File descriptor for DTCProtocol.GPBV3.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DTCProtocolGPBV3Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdEVENQcm90b2NvbC5HUEJWMy5wcm90bxIGRFRDX1BCImgKD0VuY29kaW5n",
            "UmVxdWVzdBIXCg9Qcm90b2NvbFZlcnNpb24YASABKAUSJgoIRW5jb2RpbmcY",
            "AiABKA4yFC5EVENfUEIuRW5jb2RpbmdFbnVtEhQKDFByb3RvY29sVHlwZRgD",
            "IAEoCSJpChBFbmNvZGluZ1Jlc3BvbnNlEhcKD1Byb3RvY29sVmVyc2lvbhgB",
            "IAEoBRImCghFbmNvZGluZxgCIAEoDjIULkRUQ19QQi5FbmNvZGluZ0VudW0S",
            "FAoMUHJvdG9jb2xUeXBlGAMgASgJIp4CCgxMb2dvblJlcXVlc3QSFwoPUHJv",
            "dG9jb2xWZXJzaW9uGAEgASgFEhAKCFVzZXJuYW1lGAIgASgJEhAKCFBhc3N3",
            "b3JkGAMgASgJEhcKD0dlbmVyYWxUZXh0RGF0YRgEIAEoCRIRCglJbnRlZ2Vy",
            "XzEYBSABKAUSEQoJSW50ZWdlcl8yGAYgASgFEiIKGkhlYXJ0YmVhdEludGVy",
            "dmFsSW5TZWNvbmRzGAcgASgFEigKCVRyYWRlTW9kZRgIIAEoDjIVLkRUQ19Q",
            "Qi5UcmFkZU1vZGVFbnVtEhQKDFRyYWRlQWNjb3VudBgJIAEoCRIaChJIYXJk",
            "d2FyZUlkZW50aWZpZXIYCiABKAkSEgoKQ2xpZW50TmFtZRgLIAEoCSK3BQoN",
            "TG9nb25SZXNwb25zZRIXCg9Qcm90b2NvbFZlcnNpb24YASABKAUSJwoGUmVz",
            "dWx0GAIgASgOMhcuRFRDX1BCLkxvZ29uU3RhdHVzRW51bRISCgpSZXN1bHRU",
            "ZXh0GAMgASgJEhgKEFJlY29ubmVjdEFkZHJlc3MYBCABKAkSEQoJSW50ZWdl",
            "cl8xGAUgASgFEhIKClNlcnZlck5hbWUYBiABKAkSJwofTWFya2V0RGVwdGhV",
            "cGRhdGVzQmVzdEJpZEFuZEFzaxgHIAEoDRIaChJUcmFkaW5nSXNTdXBwb3J0",
            "ZWQYCCABKA0SGgoST0NPT3JkZXJzU3VwcG9ydGVkGAkgASgNEiMKG09yZGVy",
            "Q2FuY2VsUmVwbGFjZVN1cHBvcnRlZBgKIAEoDRIfChdTeW1ib2xFeGNoYW5n",
            "ZURlbGltaXRlchgLIAEoCRIkChxTZWN1cml0eURlZmluaXRpb25zU3VwcG9y",
            "dGVkGAwgASgNEiQKHEhpc3RvcmljYWxQcmljZURhdGFTdXBwb3J0ZWQYDSAB",
            "KA0SLgomUmVzdWJzY3JpYmVXaGVuTWFya2V0RGF0YUZlZWRBdmFpbGFibGUY",
            "DiABKA0SHgoWTWFya2V0RGVwdGhJc1N1cHBvcnRlZBgPIAEoDRIyCipPbmVI",
            "aXN0b3JpY2FsUHJpY2VEYXRhUmVxdWVzdFBlckNvbm5lY3Rpb24YECABKA0S",
            "HgoWQnJhY2tldE9yZGVyc1N1cHBvcnRlZBgRIAEoDRIkChxVc2VJbnRlZ2Vy",
            "UHJpY2VPcmRlck1lc3NhZ2VzGBIgASgNEjUKLVVzZXNNdWx0aXBsZVBvc2l0",
            "aW9uc1BlclN5bWJvbEFuZFRyYWRlQWNjb3VudBgTIAEoDRIbChNNYXJrZXRE",
            "YXRhU3VwcG9ydGVkGBQgASgNIjAKBkxvZ29mZhIOCgZSZWFzb24YASABKAkS",
            "FgoORG9Ob3RSZWNvbm5lY3QYAiABKA0iQAoJSGVhcnRiZWF0EhoKEk51bURy",
            "b3BwZWRNZXNzYWdlcxgBIAEoDRIXCg9DdXJyZW50RGF0ZVRpbWUYAiABKBAi",
            "SAoUTWFya2V0RGF0YUZlZWRTdGF0dXMSMAoGU3RhdHVzGAEgASgOMiAuRFRD",
            "X1BCLk1hcmtldERhdGFGZWVkU3RhdHVzRW51bSJgChpNYXJrZXREYXRhRmVl",
            "ZFN5bWJvbFN0YXR1cxIQCghTeW1ib2xJRBgBIAEoDRIwCgZTdGF0dXMYAiAB",
            "KA4yIC5EVENfUEIuTWFya2V0RGF0YUZlZWRTdGF0dXNFbnVtInkKEU1hcmtl",
            "dERhdGFSZXF1ZXN0EjAKDVJlcXVlc3RBY3Rpb24YASABKA4yGS5EVENfUEIu",
            "UmVxdWVzdEFjdGlvbkVudW0SEAoIU3ltYm9sSUQYAiABKA0SDgoGU3ltYm9s",
            "GAMgASgJEhAKCEV4Y2hhbmdlGAQgASgJIo0BChJNYXJrZXREZXB0aFJlcXVl",
            "c3QSMAoNUmVxdWVzdEFjdGlvbhgBIAEoDjIZLkRUQ19QQi5SZXF1ZXN0QWN0",
            "aW9uRW51bRIQCghTeW1ib2xJRBgCIAEoDRIOCgZTeW1ib2wYAyABKAkSEAoI",
            "RXhjaGFuZ2UYBCABKAkSEQoJTnVtTGV2ZWxzGAUgASgFIjgKEE1hcmtldERh",
            "dGFSZWplY3QSEAoIU3ltYm9sSUQYASABKA0SEgoKUmVqZWN0VGV4dBgCIAEo",
            "CSLLAwoSTWFya2V0RGF0YVNuYXBzaG90EhAKCFN5bWJvbElEGAEgASgNEh4K",
            "FlNlc3Npb25TZXR0bGVtZW50UHJpY2UYAiABKAESGAoQU2Vzc2lvbk9wZW5Q",
            "cmljZRgDIAEoARIYChBTZXNzaW9uSGlnaFByaWNlGAQgASgBEhcKD1Nlc3Np",
            "b25Mb3dQcmljZRgFIAEoARIVCg1TZXNzaW9uVm9sdW1lGAYgASgBEhgKEFNl",
            "c3Npb25OdW1UcmFkZXMYByABKA0SFAoMT3BlbkludGVyZXN0GAggASgNEhAK",
            "CEJpZFByaWNlGAkgASgBEhAKCEFza1ByaWNlGAogASgBEhMKC0Fza1F1YW50",
            "aXR5GAsgASgBEhMKC0JpZFF1YW50aXR5GAwgASgBEhYKDkxhc3RUcmFkZVBy",
            "aWNlGA0gASgBEhcKD0xhc3RUcmFkZVZvbHVtZRgOIAEoARIZChFMYXN0VHJh",
            "ZGVEYXRlVGltZRgPIAEoARIWCg5CaWRBc2tEYXRlVGltZRgQIAEoARIhChlT",
            "ZXNzaW9uU2V0dGxlbWVudERhdGVUaW1lGBEgASgNEhoKElRyYWRpbmdTZXNz",
            "aW9uRGF0ZRgSIAEoDSLPAwoWTWFya2V0RGF0YVNuYXBzaG90X0ludBIQCghT",
            "eW1ib2xJRBgBIAEoDRIeChZTZXNzaW9uU2V0dGxlbWVudFByaWNlGAIgASgF",
            "EhgKEFNlc3Npb25PcGVuUHJpY2UYAyABKAUSGAoQU2Vzc2lvbkhpZ2hQcmlj",
            "ZRgEIAEoBRIXCg9TZXNzaW9uTG93UHJpY2UYBSABKAUSFQoNU2Vzc2lvblZv",
            "bHVtZRgGIAEoBRIYChBTZXNzaW9uTnVtVHJhZGVzGAcgASgNEhQKDE9wZW5J",
            "bnRlcmVzdBgIIAEoDRIQCghCaWRQcmljZRgJIAEoBRIQCghBc2tQcmljZRgK",
            "IAEoBRITCgtBc2tRdWFudGl0eRgLIAEoBRITCgtCaWRRdWFudGl0eRgMIAEo",
            "BRIWCg5MYXN0VHJhZGVQcmljZRgNIAEoBRIXCg9MYXN0VHJhZGVWb2x1bWUY",
            "DiABKAUSGQoRTGFzdFRyYWRlRGF0ZVRpbWUYDyABKAESFgoOQmlkQXNrRGF0",
            "ZVRpbWUYECABKAESIQoZU2Vzc2lvblNldHRsZW1lbnREYXRlVGltZRgRIAEo",
            "DRIaChJUcmFkaW5nU2Vzc2lvbkRhdGUYEiABKA0iLQoKRGVwdGhFbnRyeRIN",
            "CgVQcmljZRgBIAEoARIQCghRdWFudGl0eRgMIAEoAiJ3ChdNYXJrZXREZXB0",
            "aEZ1bGxVcGRhdGUyMBIQCghTeW1ib2xJRBgBIAEoDRIkCghCaWREZXB0aBgC",
            "IAMoCzISLkRUQ19QQi5EZXB0aEVudHJ5EiQKCEFza0RlcHRoGAMgAygLMhIu",
            "RFRDX1BCLkRlcHRoRW50cnkidwoXTWFya2V0RGVwdGhGdWxsVXBkYXRlMTAS",
            "EAoIU3ltYm9sSUQYASABKA0SJAoIQmlkRGVwdGgYAiADKAsyEi5EVENfUEIu",
            "RGVwdGhFbnRyeRIkCghBc2tEZXB0aBgDIAMoCzISLkRUQ19QQi5EZXB0aEVu",
            "dHJ5IuQBChhNYXJrZXREZXB0aFNuYXBzaG90TGV2ZWwSEAoIU3ltYm9sSUQY",
            "ASABKA0SJAoEU2lkZRgCIAEoDjIWLkRUQ19QQi5BdEJpZE9yQXNrRW51bRIN",
            "CgVQcmljZRgDIAEoARIQCghRdWFudGl0eRgEIAEoARINCgVMZXZlbBgFIAEo",
            "DRIdChVJc0ZpcnN0TWVzc2FnZUluQmF0Y2gYBiABKA0SHAoUSXNMYXN0TWVz",
            "c2FnZUluQmF0Y2gYByABKA0SEAoIRGF0ZVRpbWUYCCABKAESEQoJTnVtT3Jk",
            "ZXJzGAkgASgNIugBChxNYXJrZXREZXB0aFNuYXBzaG90TGV2ZWxfSW50EhAK",
            "CFN5bWJvbElEGAEgASgNEiQKBFNpZGUYAiABKA4yFi5EVENfUEIuQXRCaWRP",
            "ckFza0VudW0SDQoFUHJpY2UYAyABKAUSEAoIUXVhbnRpdHkYBCABKAUSDQoF",
            "TGV2ZWwYBSABKA0SHQoVSXNGaXJzdE1lc3NhZ2VJbkJhdGNoGAYgASgNEhwK",
            "FElzTGFzdE1lc3NhZ2VJbkJhdGNoGAcgASgNEhAKCERhdGVUaW1lGAggASgB",
            "EhEKCU51bU9yZGVycxgJIAEoDSLNAQoWTWFya2V0RGVwdGhVcGRhdGVMZXZl",
            "bBIQCghTeW1ib2xJRBgBIAEoDRIkCgRTaWRlGAIgASgOMhYuRFRDX1BCLkF0",
            "QmlkT3JBc2tFbnVtEg0KBVByaWNlGAMgASgBEhAKCFF1YW50aXR5GAQgASgB",
            "EjUKClVwZGF0ZVR5cGUYBSABKA4yIS5EVENfUEIuTWFya2V0RGVwdGhVcGRh",
            "dGVUeXBlRW51bRIQCghEYXRlVGltZRgGIAEoARIRCglOdW1PcmRlcnMYByAB",
            "KA0i0QEKGk1hcmtldERlcHRoVXBkYXRlTGV2ZWxfSW50EhAKCFN5bWJvbElE",
            "GAEgASgNEiQKBFNpZGUYAiABKA4yFi5EVENfUEIuQXRCaWRPckFza0VudW0S",
            "DQoFUHJpY2UYAyABKAUSEAoIUXVhbnRpdHkYBCABKAUSNQoKVXBkYXRlVHlw",
            "ZRgFIAEoDjIhLkRUQ19QQi5NYXJrZXREZXB0aFVwZGF0ZVR5cGVFbnVtEhAK",
            "CERhdGVUaW1lGAYgASgBEhEKCU51bU9yZGVycxgHIAEoDSLUAQodTWFya2V0",
            "RGVwdGhVcGRhdGVMZXZlbENvbXBhY3QSEAoIU3ltYm9sSUQYASABKA0SJAoE",
            "U2lkZRgCIAEoDjIWLkRUQ19QQi5BdEJpZE9yQXNrRW51bRINCgVQcmljZRgD",
            "IAEoAhIQCghRdWFudGl0eRgEIAEoAhI1CgpVcGRhdGVUeXBlGAUgASgOMiEu",
            "RFRDX1BCLk1hcmtldERlcHRoVXBkYXRlVHlwZUVudW0SEAoIRGF0ZVRpbWUY",
            "BiABKA0SEQoJTnVtT3JkZXJzGAcgASgNIlYKIU1hcmtldERhdGFVcGRhdGVT",
            "ZXNzaW9uU2V0dGxlbWVudBIQCghTeW1ib2xJRBgBIAEoDRINCgVQcmljZRgC",
            "IAEoARIQCghEYXRlVGltZRgDIAEoDSJaCiVNYXJrZXREYXRhVXBkYXRlU2Vz",
            "c2lvblNldHRsZW1lbnRfSW50EhAKCFN5bWJvbElEGAEgASgNEg0KBVByaWNl",
            "GAIgASgFEhAKCERhdGVUaW1lGAMgASgFIloKG01hcmtldERhdGFVcGRhdGVT",
            "ZXNzaW9uT3BlbhIQCghTeW1ib2xJRBgBIAEoDRINCgVQcmljZRgCIAEoARIa",
            "ChJUcmFkaW5nU2Vzc2lvbkRhdGUYAyABKA0iXgofTWFya2V0RGF0YVVwZGF0",
            "ZVNlc3Npb25PcGVuX0ludBIQCghTeW1ib2xJRBgBIAEoDRINCgVQcmljZRgC",
            "IAEoBRIaChJUcmFkaW5nU2Vzc2lvbkRhdGUYAyABKA0iYwogTWFya2V0RGF0",
            "YVVwZGF0ZVNlc3Npb25OdW1UcmFkZXMSEAoIU3ltYm9sSUQYASABKA0SEQoJ",
            "TnVtVHJhZGVzGAIgASgFEhoKElRyYWRpbmdTZXNzaW9uRGF0ZRgDIAEoDSJE",
            "CiJNYXJrZXREYXRhVXBkYXRlVHJhZGluZ1Nlc3Npb25EYXRlEhAKCFN5bWJv",
            "bElEGAEgASgNEgwKBERhdGUYAiABKA0iOQoRTWFya2V0RGVwdGhSZWplY3QS",
            "EAoIU3ltYm9sSUQYASABKA0SEgoKUmVqZWN0VGV4dBgCIAEoCSKGAQoVTWFy",
            "a2V0RGF0YVVwZGF0ZVRyYWRlEhAKCFN5bWJvbElEGAEgASgNEioKCkF0Qmlk",
            "T3JBc2sYAiABKA4yFi5EVENfUEIuQXRCaWRPckFza0VudW0SDQoFUHJpY2UY",
            "AyABKAESDgoGVm9sdW1lGAQgASgBEhAKCERhdGVUaW1lGAUgASgBIooBChlN",
            "YXJrZXREYXRhVXBkYXRlVHJhZGVfSW50EhAKCFN5bWJvbElEGAEgASgNEioK",
            "CkF0QmlkT3JBc2sYAiABKA4yFi5EVENfUEIuQXRCaWRPckFza0VudW0SDQoF",
            "UHJpY2UYAyABKAUSDgoGVm9sdW1lGAQgASgFEhAKCERhdGVUaW1lGAUgASgB",
            "IuMBCitNYXJrZXREYXRhVXBkYXRlVHJhZGVXaXRoVW5idW5kbGVkSW5kaWNh",
            "dG9yEhAKCFN5bWJvbElEGAEgASgNEisKCkF0QmlkT3JBc2sYAiABKA4yFy5E",
            "VENfUEIuQXRCaWRPckFza0VudW04EkQKF1VuYnVuZGxlZFRyYWRlSW5kaWNh",
            "dG9yGAMgASgOMiMuRFRDX1BCLlVuYnVuZGxlZFRyYWRlSW5kaWNhdG9yRW51",
            "bRINCgVQcmljZRgEIAEoARIOCgZWb2x1bWUYBSABKA0SEAoIRGF0ZVRpbWUY",
            "BiABKAEiigEKFk1hcmtldERhdGFVcGRhdGVCaWRBc2sSEAoIU3ltYm9sSUQY",
            "ASABKA0SEAoIQmlkUHJpY2UYAiABKAESEwoLQmlkUXVhbnRpdHkYAyABKAIS",
            "EAoIQXNrUHJpY2UYBCABKAESEwoLQXNrUXVhbnRpdHkYBSABKAISEAoIRGF0",
            "ZVRpbWUYBiABKA8ijgEKGk1hcmtldERhdGFVcGRhdGVCaWRBc2tfSW50EhAK",
            "CFN5bWJvbElEGAEgASgNEhAKCEJpZFByaWNlGAIgASgFEhMKC0JpZFF1YW50",
            "aXR5GAMgASgFEhAKCEFza1ByaWNlGAQgASgFEhMKC0Fza1F1YW50aXR5GAUg",
            "ASgFEhAKCERhdGVUaW1lGAYgASgPIpEBCh1NYXJrZXREYXRhVXBkYXRlQmlk",
            "QXNrQ29tcGFjdBIQCghCaWRQcmljZRgBIAEoAhITCgtCaWRRdWFudGl0eRgC",
            "IAEoAhIQCghBc2tQcmljZRgDIAEoAhITCgtBc2tRdWFudGl0eRgEIAEoAhIQ",
            "CghEYXRlVGltZRgFIAEoDxIQCghTeW1ib2xJRBgGIAEoDSKNAQocTWFya2V0",
            "RGF0YVVwZGF0ZVRyYWRlQ29tcGFjdBINCgVQcmljZRgBIAEoAhIOCgZWb2x1",
            "bWUYAiABKAISEAoIRGF0ZVRpbWUYAyABKA8SEAoIU3ltYm9sSUQYBCABKA0S",
            "KgoKQXRCaWRPckFzaxgFIAEoDjIWLkRUQ19QQi5BdEJpZE9yQXNrRW51bSJd",
            "Ch1NYXJrZXREYXRhVXBkYXRlU2Vzc2lvblZvbHVtZRIQCghTeW1ib2xJRBgB",
            "IAEoDRIOCgZWb2x1bWUYAiABKAESGgoSVHJhZGluZ1Nlc3Npb25EYXRlGAMg",
            "ASgNImIKHE1hcmtldERhdGFVcGRhdGVPcGVuSW50ZXJlc3QSEAoIU3ltYm9s",
            "SUQYASABKA0SFAoMT3BlbkludGVyZXN0GAIgASgNEhoKElRyYWRpbmdTZXNz",
            "aW9uRGF0ZRgDIAEoDSJaChtNYXJrZXREYXRhVXBkYXRlU2Vzc2lvbkhpZ2gS",
            "EAoIU3ltYm9sSUQYASABKA0SDQoFUHJpY2UYAiABKAESGgoSVHJhZGluZ1Nl",
            "c3Npb25EYXRlGAMgASgNIl4KH01hcmtldERhdGFVcGRhdGVTZXNzaW9uSGln",
            "aF9JbnQSEAoIU3ltYm9sSUQYASABKA0SDQoFUHJpY2UYAiABKAUSGgoSVHJh",
            "ZGluZ1Nlc3Npb25EYXRlGAMgASgNIlkKGk1hcmtldERhdGFVcGRhdGVTZXNz",
            "aW9uTG93EhAKCFN5bWJvbElEGAEgASgNEg0KBVByaWNlGAIgASgBEhoKElRy",
            "YWRpbmdTZXNzaW9uRGF0ZRgDIAEoDSJdCh5NYXJrZXREYXRhVXBkYXRlU2Vz",
            "c2lvbkxvd19JbnQSEAoIU3ltYm9sSUQYASABKA0SDQoFUHJpY2UYAiABKAUS",
            "GgoSVHJhZGluZ1Nlc3Npb25EYXRlGAMgASgNIoEBCiFNYXJrZXREYXRhVXBk",
            "YXRlTGFzdFRyYWRlU25hcHNob3QSEAoIU3ltYm9sSUQYASABKA0SFgoOTGFz",
            "dFRyYWRlUHJpY2UYAiABKAESFwoPTGFzdFRyYWRlVm9sdW1lGAMgASgBEhkK",
            "EUxhc3RUcmFkZURhdGVUaW1lGAQgASgBIqcDChRTdWJtaXROZXdTaW5nbGVP",
            "cmRlchIOCgZTeW1ib2wYASABKAkSEAoIRXhjaGFuZ2UYAiABKAkSFAoMVHJh",
            "ZGVBY2NvdW50GAMgASgJEhUKDUNsaWVudE9yZGVySUQYBCABKAkSKAoJT3Jk",
            "ZXJUeXBlGAUgASgOMhUuRFRDX1BCLk9yZGVyVHlwZUVudW0SJAoHQnV5U2Vs",
            "bBgGIAEoDjITLkRUQ19QQi5CdXlTZWxsRW51bRIOCgZQcmljZTEYByABKAES",
            "DgoGUHJpY2UyGAggASgBEhAKCFF1YW50aXR5GAkgASgBEiwKC1RpbWVJbkZv",
            "cmNlGAogASgOMhcuRFRDX1BCLlRpbWVJbkZvcmNlRW51bRIYChBHb29kVGls",
            "bERhdGVUaW1lGAsgASgQEhgKEElzQXV0b21hdGVkT3JkZXIYDCABKA0SFQoN",
            "SXNQYXJlbnRPcmRlchgNIAEoDRIUCgxGcmVlRm9ybVRleHQYDiABKAkSLwoL",
            "T3Blbk9yQ2xvc2UYDyABKA4yGi5EVENfUEIuT3BlbkNsb3NlVHJhZGVFbnVt",
            "IrsDChdTdWJtaXROZXdTaW5nbGVPcmRlckludBIOCgZTeW1ib2wYASABKAkS",
            "EAoIRXhjaGFuZ2UYAiABKAkSFAoMVHJhZGVBY2NvdW50GAMgASgJEhUKDUNs",
            "aWVudE9yZGVySUQYBCABKAkSKAoJT3JkZXJUeXBlGAUgASgOMhUuRFRDX1BC",
            "Lk9yZGVyVHlwZUVudW0SJAoHQnV5U2VsbBgGIAEoDjITLkRUQ19QQi5CdXlT",
            "ZWxsRW51bRIOCgZQcmljZTEYByABKAMSDgoGUHJpY2UyGAggASgDEg8KB0Rp",
            "dmlzb3IYCSABKAISEAoIUXVhbnRpdHkYCiABKAMSLAoLVGltZUluRm9yY2UY",
            "CyABKA4yFy5EVENfUEIuVGltZUluRm9yY2VFbnVtEhgKEEdvb2RUaWxsRGF0",
            "ZVRpbWUYDCABKBASGAoQSXNBdXRvbWF0ZWRPcmRlchgNIAEoDRIVCg1Jc1Bh",
            "cmVudE9yZGVyGA4gASgNEhQKDEZyZWVGb3JtVGV4dBgPIAEoCRIvCgtPcGVu",
            "T3JDbG9zZRgQIAEoDjIaLkRUQ19QQi5PcGVuQ2xvc2VUcmFkZUVudW0iigIK",
            "EkNhbmNlbFJlcGxhY2VPcmRlchIVCg1TZXJ2ZXJPcmRlcklEGAEgASgJEhUK",
            "DUNsaWVudE9yZGVySUQYAiABKAkSDgoGUHJpY2UxGAMgASgBEg4KBlByaWNl",
            "MhgEIAEoARIQCghRdWFudGl0eRgFIAEoARITCgtQcmljZTFJc1NldBgGIAEo",
            "DRITCgtQcmljZTJJc1NldBgHIAEoDRIsCgtUaW1lSW5Gb3JjZRgJIAEoDjIX",
            "LkRUQ19QQi5UaW1lSW5Gb3JjZUVudW0SGAoQR29vZFRpbGxEYXRlVGltZRgK",
            "IAEoBBIiChpVcGRhdGVQcmljZTFPZmZzZXRUb1BhcmVudBgLIAEoDSKeAgoV",
            "Q2FuY2VsUmVwbGFjZU9yZGVySW50EhUKDVNlcnZlck9yZGVySUQYASABKAkS",
            "FQoNQ2xpZW50T3JkZXJJRBgCIAEoCRIOCgZQcmljZTEYAyABKAMSDgoGUHJp",
            "Y2UyGAQgASgDEg8KB0Rpdmlzb3IYBSABKAISEAoIUXVhbnRpdHkYBiABKAMS",
            "EwoLUHJpY2UxSXNTZXQYByABKA0SEwoLUHJpY2UySXNTZXQYCCABKA0SLAoL",
            "VGltZUluRm9yY2UYCiABKA4yFy5EVENfUEIuVGltZUluRm9yY2VFbnVtEhgK",
            "EEdvb2RUaWxsRGF0ZVRpbWUYCyABKAQSIgoaVXBkYXRlUHJpY2UxT2Zmc2V0",
            "VG9QYXJlbnQYDCABKA0iOwoLQ2FuY2VsT3JkZXISFQoNU2VydmVyT3JkZXJJ",
            "RBgBIAEoCRIVCg1DbGllbnRPcmRlcklEGAIgASgJIqAFChFTdWJtaXROZXdP",
            "Q09PcmRlchIOCgZTeW1ib2wYASABKAkSEAoIRXhjaGFuZ2UYAiABKAkSFwoP",
            "Q2xpZW50T3JkZXJJRF8xGAMgASgJEioKC09yZGVyVHlwZV8xGAQgASgOMhUu",
            "RFRDX1BCLk9yZGVyVHlwZUVudW0SJgoJQnV5U2VsbF8xGAUgASgOMhMuRFRD",
            "X1BCLkJ1eVNlbGxFbnVtEhAKCFByaWNlMV8xGAYgASgBEhAKCFByaWNlMl8x",
            "GAcgASgBEhIKClF1YW50aXR5XzEYCCABKAESFwoPQ2xpZW50T3JkZXJJRF8y",
            "GAkgASgJEioKC09yZGVyVHlwZV8yGAogASgOMhUuRFRDX1BCLk9yZGVyVHlw",
            "ZUVudW0SJgoJQnV5U2VsbF8yGAsgASgOMhMuRFRDX1BCLkJ1eVNlbGxFbnVt",
            "EhAKCFByaWNlMV8yGAwgASgBEhAKCFByaWNlMl8yGA0gASgBEhIKClF1YW50",
            "aXR5XzIYDiABKAESLAoLVGltZUluRm9yY2UYDyABKA4yFy5EVENfUEIuVGlt",
            "ZUluRm9yY2VFbnVtEhgKEEdvb2RUaWxsRGF0ZVRpbWUYECABKBASFAoMVHJh",
            "ZGVBY2NvdW50GBEgASgJEhgKEElzQXV0b21hdGVkT3JkZXIYEiABKA0SIgoa",
            "UGFyZW50VHJpZ2dlckNsaWVudE9yZGVySUQYEyABKAkSFAoMRnJlZUZvcm1U",
            "ZXh0GBQgASgJEi8KC09wZW5PckNsb3NlGBUgASgOMhouRFRDX1BCLk9wZW5D",
            "bG9zZVRyYWRlRW51bRI8ChNQYXJ0aWFsRmlsbEhhbmRsaW5nGBYgASgOMh8u",
            "RFRDX1BCLlBhcnRpYWxGaWxsSGFuZGxpbmdFbnVtIrQFChRTdWJtaXROZXdP",
            "Q09PcmRlckludBIOCgZTeW1ib2wYASABKAkSEAoIRXhjaGFuZ2UYAiABKAkS",
            "FwoPQ2xpZW50T3JkZXJJRF8xGAMgASgJEioKC09yZGVyVHlwZV8xGAQgASgO",
            "MhUuRFRDX1BCLk9yZGVyVHlwZUVudW0SJgoJQnV5U2VsbF8xGAUgASgOMhMu",
            "RFRDX1BCLkJ1eVNlbGxFbnVtEhAKCFByaWNlMV8xGAYgASgDEhAKCFByaWNl",
            "Ml8xGAcgASgDEhIKClF1YW50aXR5XzEYCCABKAMSFwoPQ2xpZW50T3JkZXJJ",
            "RF8yGAkgASgJEioKC09yZGVyVHlwZV8yGAogASgOMhUuRFRDX1BCLk9yZGVy",
            "VHlwZUVudW0SJgoJQnV5U2VsbF8yGAsgASgOMhMuRFRDX1BCLkJ1eVNlbGxF",
            "bnVtEhAKCFByaWNlMV8yGAwgASgDEhAKCFByaWNlMl8yGA0gASgDEhIKClF1",
            "YW50aXR5XzIYDiABKAMSLAoLVGltZUluRm9yY2UYDyABKA4yFy5EVENfUEIu",
            "VGltZUluRm9yY2VFbnVtEhgKEEdvb2RUaWxsRGF0ZVRpbWUYECABKBASFAoM",
            "VHJhZGVBY2NvdW50GBEgASgJEhgKEElzQXV0b21hdGVkT3JkZXIYEiABKA0S",
            "IgoaUGFyZW50VHJpZ2dlckNsaWVudE9yZGVySUQYEyABKAkSFAoMRnJlZUZv",
            "cm1UZXh0GBQgASgJEg8KB0Rpdmlzb3IYFSABKAISLwoLT3Blbk9yQ2xvc2UY",
            "FiABKA4yGi5EVENfUEIuT3BlbkNsb3NlVHJhZGVFbnVtEjwKE1BhcnRpYWxG",
            "aWxsSGFuZGxpbmcYFyABKA4yHy5EVENfUEIuUGFydGlhbEZpbGxIYW5kbGlu",
            "Z0VudW0ibQoRT3Blbk9yZGVyc1JlcXVlc3QSEQoJUmVxdWVzdElEGAEgASgF",
            "EhgKEFJlcXVlc3RBbGxPcmRlcnMYAiABKAUSFQoNU2VydmVyT3JkZXJJRBgD",
            "IAEoCRIUCgxUcmFkZUFjY291bnQYBCABKAkicwobSGlzdG9yaWNhbE9yZGVy",
            "RmlsbHNSZXF1ZXN0EhEKCVJlcXVlc3RJRBgBIAEoBRIVCg1TZXJ2ZXJPcmRl",
            "cklEGAIgASgJEhQKDE51bWJlck9mRGF5cxgDIAEoBRIUCgxUcmFkZUFjY291",
            "bnQYBCABKAkiQwoaSGlzdG9yaWNhbE9yZGVyRmlsbHNSZWplY3QSEQoJUmVx",
            "dWVzdElEGAEgASgFEhIKClJlamVjdFRleHQYAiABKAkiQgoXQ3VycmVudFBv",
            "c2l0aW9uc1JlcXVlc3QSEQoJUmVxdWVzdElEGAEgASgFEhQKDFRyYWRlQWNj",
            "b3VudBgCIAEoCSI/ChZDdXJyZW50UG9zaXRpb25zUmVqZWN0EhEKCVJlcXVl",
            "c3RJRBgBIAEoBRISCgpSZWplY3RUZXh0GAIgASgJIsYHCgtPcmRlclVwZGF0",
            "ZRIRCglSZXF1ZXN0SUQYASABKAUSGAoQVG90YWxOdW1NZXNzYWdlcxgCIAEo",
            "BRIVCg1NZXNzYWdlTnVtYmVyGAMgASgFEg4KBlN5bWJvbBgEIAEoCRIQCghF",
            "eGNoYW5nZRgFIAEoCRIdChVQcmV2aW91c1NlcnZlck9yZGVySUQYBiABKAkS",
            "FQoNU2VydmVyT3JkZXJJRBgHIAEoCRIVCg1DbGllbnRPcmRlcklEGAggASgJ",
            "EhcKD0V4Y2hhbmdlT3JkZXJJRBgJIAEoCRIsCgtPcmRlclN0YXR1cxgKIAEo",
            "DjIXLkRUQ19QQi5PcmRlclN0YXR1c0VudW0SOAoRT3JkZXJVcGRhdGVSZWFz",
            "b24YCyABKA4yHS5EVENfUEIuT3JkZXJVcGRhdGVSZWFzb25FbnVtEigKCU9y",
            "ZGVyVHlwZRgMIAEoDjIVLkRUQ19QQi5PcmRlclR5cGVFbnVtEiQKB0J1eVNl",
            "bGwYDSABKA4yEy5EVENfUEIuQnV5U2VsbEVudW0SDgoGUHJpY2UxGA4gASgB",
            "Eg4KBlByaWNlMhgPIAEoARIsCgtUaW1lSW5Gb3JjZRgQIAEoDjIXLkRUQ19Q",
            "Qi5UaW1lSW5Gb3JjZUVudW0SGAoQR29vZFRpbGxEYXRlVGltZRgRIAEoEBIV",
            "Cg1PcmRlclF1YW50aXR5GBIgASgBEhYKDkZpbGxlZFF1YW50aXR5GBMgASgB",
            "EhkKEVJlbWFpbmluZ1F1YW50aXR5GBQgASgBEhgKEEF2ZXJhZ2VGaWxsUHJp",
            "Y2UYFSABKAESFQoNTGFzdEZpbGxQcmljZRgWIAEoARIYChBMYXN0RmlsbERh",
            "dGVUaW1lGBcgASgQEhgKEExhc3RGaWxsUXVhbnRpdHkYGCABKAESGwoTTGFz",
            "dEZpbGxFeGVjdXRpb25JRBgZIAEoCRIUCgxUcmFkZUFjY291bnQYGiABKAkS",
            "EAoISW5mb1RleHQYGyABKAkSEAoITm9PcmRlcnMYHCABKA0SGwoTUGFyZW50",
            "U2VydmVyT3JkZXJJRBgdIAEoCRIjChtPQ09MaW5rZWRPcmRlclNlcnZlck9y",
            "ZGVySUQYHiABKAkSLwoLT3Blbk9yQ2xvc2UYHyABKA4yGi5EVENfUEIuT3Bl",
            "bkNsb3NlVHJhZGVFbnVtEh0KFVByZXZpb3VzQ2xpZW50T3JkZXJJRBggIAEo",
            "CRIUCgxGcmVlRm9ybVRleHQYISABKAkSHQoVT3JkZXJSZWNlaXZlZERhdGVU",
            "aW1lGCIgASgQIjkKEE9wZW5PcmRlcnNSZWplY3QSEQoJUmVxdWVzdElEGAEg",
            "ASgFEhIKClJlamVjdFRleHQYAiABKAki7AIKG0hpc3RvcmljYWxPcmRlckZp",
            "bGxSZXNwb25zZRIRCglSZXF1ZXN0SUQYASABKAUSGwoTVG90YWxOdW1iZXJN",
            "ZXNzYWdlcxgCIAEoBRIVCg1NZXNzYWdlTnVtYmVyGAMgASgFEg4KBlN5bWJv",
            "bBgEIAEoCRIQCghFeGNoYW5nZRgFIAEoCRIVCg1TZXJ2ZXJPcmRlcklEGAYg",
            "ASgJEiQKB0J1eVNlbGwYByABKA4yEy5EVENfUEIuQnV5U2VsbEVudW0SDQoF",
            "UHJpY2UYCCABKAESEAoIRGF0ZVRpbWUYCSABKBASEAoIUXVhbnRpdHkYCiAB",
            "KAESGQoRVW5pcXVlRXhlY3V0aW9uSUQYCyABKAkSFAoMVHJhZGVBY2NvdW50",
            "GAwgASgJEi0KCU9wZW5DbG9zZRgNIAEoDjIaLkRUQ19QQi5PcGVuQ2xvc2VU",
            "cmFkZUVudW0SFAoMTm9PcmRlckZpbGxzGA4gASgNIv0BCg5Qb3NpdGlvblVw",
            "ZGF0ZRIRCglSZXF1ZXN0SUQYASABKAUSGwoTVG90YWxOdW1iZXJNZXNzYWdl",
            "cxgCIAEoBRIVCg1NZXNzYWdlTnVtYmVyGAMgASgFEg4KBlN5bWJvbBgEIAEo",
            "CRIQCghFeGNoYW5nZRgFIAEoCRIQCghRdWFudGl0eRgGIAEoARIUCgxBdmVy",
            "YWdlUHJpY2UYByABKAESGgoSUG9zaXRpb25JZGVudGlmaWVyGAggASgJEhQK",
            "DFRyYWRlQWNjb3VudBgJIAEoCRITCgtOb1Bvc2l0aW9ucxgKIAEoDRITCgtV",
            "bnNvbGljaXRlZBgLIAEoDSIpChRUcmFkZUFjY291bnRzUmVxdWVzdBIRCglS",
            "ZXF1ZXN0SUQYASABKAUicwoUVHJhZGVBY2NvdW50UmVzcG9uc2USGwoTVG90",
            "YWxOdW1iZXJNZXNzYWdlcxgBIAEoBRIVCg1NZXNzYWdlTnVtYmVyGAIgASgF",
            "EhQKDFRyYWRlQWNjb3VudBgDIAEoCRIRCglSZXF1ZXN0SUQYBCABKAUiKAoT",
            "RXhjaGFuZ2VMaXN0UmVxdWVzdBIRCglSZXF1ZXN0SUQYASABKAUiaAoURXhj",
            "aGFuZ2VMaXN0UmVzcG9uc2USEQoJUmVxdWVzdElEGAEgASgFEhAKCEV4Y2hh",
            "bmdlGAIgASgJEhYKDklzRmluYWxNZXNzYWdlGAMgASgNEhMKC0Rlc2NyaXB0",
            "aW9uGAQgASgJIrIBChlTeW1ib2xzRm9yRXhjaGFuZ2VSZXF1ZXN0EhEKCVJl",
            "cXVlc3RJRBgBIAEoBRIQCghFeGNoYW5nZRgCIAEoCRIuCgxTZWN1cml0eVR5",
            "cGUYAyABKA4yGC5EVENfUEIuU2VjdXJpdHlUeXBlRW51bRIwCg1SZXF1ZXN0",
            "QWN0aW9uGAQgASgOMhkuRFRDX1BCLlJlcXVlc3RBY3Rpb25FbnVtEg4KBlN5",
            "bWJvbBgFIAEoCSJ6CiNVbmRlcmx5aW5nU3ltYm9sc0ZvckV4Y2hhbmdlUmVx",
            "dWVzdBIRCglSZXF1ZXN0SUQYASABKAUSEAoIRXhjaGFuZ2UYAiABKAkSLgoM",
            "U2VjdXJpdHlUeXBlGAMgASgOMhguRFRDX1BCLlNlY3VyaXR5VHlwZUVudW0i",
            "jAEKG1N5bWJvbHNGb3JVbmRlcmx5aW5nUmVxdWVzdBIRCglSZXF1ZXN0SUQY",
            "ASABKAUSGAoQVW5kZXJseWluZ1N5bWJvbBgCIAEoCRIQCghFeGNoYW5nZRgD",
            "IAEoCRIuCgxTZWN1cml0eVR5cGUYBCABKA4yGC5EVENfUEIuU2VjdXJpdHlU",
            "eXBlRW51bSKqAQoTU3ltYm9sU2VhcmNoUmVxdWVzdBIRCglSZXF1ZXN0SUQY",
            "ASABKAUSEgoKU2VhcmNoVGV4dBgCIAEoCRIQCghFeGNoYW5nZRgDIAEoCRIu",
            "CgxTZWN1cml0eVR5cGUYBCABKA4yGC5EVENfUEIuU2VjdXJpdHlUeXBlRW51",
            "bRIqCgpTZWFyY2hUeXBlGAUgASgOMhYuRFRDX1BCLlNlYXJjaFR5cGVFbnVt",
            "IlkKIlNlY3VyaXR5RGVmaW5pdGlvbkZvclN5bWJvbFJlcXVlc3QSEQoJUmVx",
            "dWVzdElEGAEgASgFEg4KBlN5bWJvbBgCIAEoCRIQCghFeGNoYW5nZRgDIAEo",
            "CSLDBgoaU2VjdXJpdHlEZWZpbml0aW9uUmVzcG9uc2USEQoJUmVxdWVzdElE",
            "GAEgASgFEg4KBlN5bWJvbBgCIAEoCRIQCghFeGNoYW5nZRgDIAEoCRIuCgxT",
            "ZWN1cml0eVR5cGUYBCABKA4yGC5EVENfUEIuU2VjdXJpdHlUeXBlRW51bRIT",
            "CgtEZXNjcmlwdGlvbhgFIAEoCRIZChFNaW5QcmljZUluY3JlbWVudBgGIAEo",
            "AhI6ChJQcmljZURpc3BsYXlGb3JtYXQYByABKA4yHi5EVENfUEIuUHJpY2VE",
            "aXNwbGF5Rm9ybWF0RW51bRIhChlDdXJyZW5jeVZhbHVlUGVySW5jcmVtZW50",
            "GAggASgCEhYKDklzRmluYWxNZXNzYWdlGAkgASgNEiEKGUZsb2F0VG9JbnRQ",
            "cmljZU11bHRpcGxpZXIYCiABKAISHgoWSW50VG9GbG9hdFByaWNlRGl2aXNv",
            "chgLIAEoAhIYChBVbmRlcmx5aW5nU3ltYm9sGAwgASgJEhkKEVVwZGF0ZXNC",
            "aWRBc2tPbmx5GA0gASgNEhMKC1N0cmlrZVByaWNlGA4gASgCEiYKCVB1dE9y",
            "Q2FsbBgPIAEoDjITLkRUQ19QQi5QdXRDYWxsRW51bRIVCg1TaG9ydEludGVy",
            "ZXN0GBAgASgNEh4KFlNlY3VyaXR5RXhwaXJhdGlvbkRhdGUYESABKA8SGwoT",
            "QnV5Um9sbG92ZXJJbnRlcmVzdBgSIAEoAhIcChRTZWxsUm9sbG92ZXJJbnRl",
            "cmVzdBgTIAEoAhIYChBFYXJuaW5nc1BlclNoYXJlGBQgASgCEhkKEVNoYXJl",
            "c091dHN0YW5kaW5nGBUgASgNEiEKGUludFRvRmxvYXRRdWFudGl0eURpdmlz",
            "b3IYFiABKAISGgoSSGFzTWFya2V0RGVwdGhEYXRhGBcgASgNEh4KFkRpc3Bs",
            "YXlQcmljZU11bHRpcGxpZXIYGCABKAISFgoORXhjaGFuZ2VTeW1ib2wYGSAB",
            "KAkSIAoYSW5pdGlhbE1hcmdpblJlcXVpcmVtZW50GBogASgCEiQKHE1haW50",
            "ZW5hbmNlTWFyZ2luUmVxdWlyZW1lbnQYGyABKAIiQQoYU2VjdXJpdHlEZWZp",
            "bml0aW9uUmVqZWN0EhEKCVJlcXVlc3RJRBgBIAEoBRISCgpSZWplY3RUZXh0",
            "GAIgASgJIkAKFUFjY291bnRCYWxhbmNlUmVxdWVzdBIRCglSZXF1ZXN0SUQY",
            "ASABKAUSFAoMVHJhZGVBY2NvdW50GAIgASgJIj0KFEFjY291bnRCYWxhbmNl",
            "UmVqZWN0EhEKCVJlcXVlc3RJRBgBIAEoBRISCgpSZWplY3RUZXh0GAIgASgJ",
            "Iq4CChRBY2NvdW50QmFsYW5jZVVwZGF0ZRIRCglSZXF1ZXN0SUQYASABKAUS",
            "EwoLQ2FzaEJhbGFuY2UYAiABKAESJwofQmFsYW5jZUF2YWlsYWJsZUZvck5l",
            "d1Bvc2l0aW9ucxgDIAEoARIXCg9BY2NvdW50Q3VycmVuY3kYBCABKAkSFAoM",
            "VHJhZGVBY2NvdW50GAUgASgJEhcKD1NlY3VyaXRpZXNWYWx1ZRgGIAEoARIZ",
            "ChFNYXJnaW5SZXF1aXJlbWVudBgHIAEoARIbChNUb3RhbE51bWJlck1lc3Nh",
            "Z2VzGAggASgFEhUKDU1lc3NhZ2VOdW1iZXIYCSABKAUSGQoRTm9BY2NvdW50",
            "QmFsYW5jZXMYCiABKA0SEwoLVW5zb2xpY2l0ZWQYCyABKA0iOgoLVXNlck1l",
            "c3NhZ2USEwoLVXNlck1lc3NhZ2UYASABKAkSFgoOSXNQb3B1cE1lc3NhZ2UY",
            "AiABKA0iKAoRR2VuZXJhbExvZ01lc3NhZ2USEwoLTWVzc2FnZVRleHQYAyAB",
            "KAkiqAIKGkhpc3RvcmljYWxQcmljZURhdGFSZXF1ZXN0EhEKCVJlcXVlc3RJ",
            "RBgBIAEoBRIOCgZTeW1ib2wYAiABKAkSEAoIRXhjaGFuZ2UYAyABKAkSOgoO",
            "UmVjb3JkSW50ZXJ2YWwYBCABKA4yIi5EVENfUEIuSGlzdG9yaWNhbERhdGFJ",
            "bnRlcnZhbEVudW0SFQoNU3RhcnREYXRlVGltZRgFIAEoEBITCgtFbmREYXRl",
            "VGltZRgGIAEoEBIXCg9NYXhEYXlzVG9SZXR1cm4YByABKA0SGgoSVXNlWkxp",
            "YkNvbXByZXNzaW9uGAggASgNEigKIFJlcXVlc3REaXZpZGVuZEFkanVzdGVk",
            "U3RvY2tEYXRhGAkgASgNEg4KBkZsYWdfMRgKIAEoDSLJAQohSGlzdG9yaWNh",
            "bFByaWNlRGF0YVJlc3BvbnNlSGVhZGVyEhEKCVJlcXVlc3RJRBgBIAEoBRI6",
            "Cg5SZWNvcmRJbnRlcnZhbBgCIAEoDjIiLkRUQ19QQi5IaXN0b3JpY2FsRGF0",
            "YUludGVydmFsRW51bRIaChJVc2VaTGliQ29tcHJlc3Npb24YAyABKA0SGQoR",
            "Tm9SZWNvcmRzVG9SZXR1cm4YBCABKA0SHgoWSW50VG9GbG9hdFByaWNlRGl2",
            "aXNvchgFIAEoAiKpAQoZSGlzdG9yaWNhbFByaWNlRGF0YVJlamVjdBIRCglS",
            "ZXF1ZXN0SUQYASABKAUSEgoKUmVqZWN0VGV4dBgCIAEoCRJJChBSZWplY3RS",
            "ZWFzb25Db2RlGAMgASgOMi8uRFRDX1BCLkhpc3RvcmljYWxQcmljZURhdGFS",
            "ZWplY3RSZWFzb25Db2RlRW51bRIaChJSZXRyeVRpbWVJblNlY29uZHMYBCAB",
            "KA0i+AEKIUhpc3RvcmljYWxQcmljZURhdGFSZWNvcmRSZXNwb25zZRIRCglS",
            "ZXF1ZXN0SUQYASABKAUSFQoNU3RhcnREYXRlVGltZRgCIAEoEBIRCglPcGVu",
            "UHJpY2UYAyABKAESEQoJSGlnaFByaWNlGAQgASgBEhAKCExvd1ByaWNlGAUg",
            "ASgBEhEKCUxhc3RQcmljZRgGIAEoARIOCgZWb2x1bWUYByABKAESEQoJTnVt",
            "VHJhZGVzGAggASgNEhEKCUJpZFZvbHVtZRgJIAEoARIRCglBc2tWb2x1bWUY",
            "CiABKAESFQoNSXNGaW5hbFJlY29yZBgLIAEoDSKuAQolSGlzdG9yaWNhbFBy",
            "aWNlRGF0YVRpY2tSZWNvcmRSZXNwb25zZRIRCglSZXF1ZXN0SUQYASABKAUS",
            "EAoIRGF0ZVRpbWUYAiABKAESKgoKQXRCaWRPckFzaxgDIAEoDjIWLkRUQ19Q",
            "Qi5BdEJpZE9yQXNrRW51bRINCgVQcmljZRgEIAEoARIOCgZWb2x1bWUYBSAB",
            "KAESFQoNSXNGaW5hbFJlY29yZBgGIAEoDSL8AQolSGlzdG9yaWNhbFByaWNl",
            "RGF0YVJlY29yZFJlc3BvbnNlX0ludBIRCglSZXF1ZXN0SUQYASABKAUSFQoN",
            "U3RhcnREYXRlVGltZRgCIAEoEBIRCglPcGVuUHJpY2UYAyABKAUSEQoJSGln",
            "aFByaWNlGAQgASgFEhAKCExvd1ByaWNlGAUgASgFEhEKCUxhc3RQcmljZRgG",
            "IAEoBRIOCgZWb2x1bWUYByABKAUSEQoJTnVtVHJhZGVzGAggASgNEhEKCUJp",
            "ZFZvbHVtZRgJIAEoBRIRCglBc2tWb2x1bWUYCiABKAUSFQoNSXNGaW5hbFJl",
            "Y29yZBgLIAEoDSKyAQopSGlzdG9yaWNhbFByaWNlRGF0YVRpY2tSZWNvcmRS",
            "ZXNwb25zZV9JbnQSEQoJUmVxdWVzdElEGAEgASgFEhAKCERhdGVUaW1lGAIg",
            "ASgBEg0KBVByaWNlGAMgASgFEg4KBlZvbHVtZRgEIAEoBRIqCgpBdEJpZE9y",
            "QXNrGAUgASgOMhYuRFRDX1BCLkF0QmlkT3JBc2tFbnVtEhUKDUlzRmluYWxS",
            "ZWNvcmQYBiABKA0iWAoiSGlzdG9yaWNhbFByaWNlRGF0YVJlc3BvbnNlVHJh",
            "aWxlchIRCglSZXF1ZXN0SUQYASABKAUSHwoXRmluYWxSZWNvcmRMYXN0RGF0",
            "ZVRpbWUYAiABKAEqOAoKRFRDVmVyc2lvbhIVChFEVENfVkVSU0lPTl9VTlNF",
            "VBAAEhMKD0NVUlJFTlRfVkVSU0lPThAIKtMUCg5EVENNZXNzYWdlVHlwZRIW",
            "ChJNRVNTQUdFX1RZUEVfVU5TRVQQABIRCg1MT0dPTl9SRVFVRVNUEAESEgoO",
            "TE9HT05fUkVTUE9OU0UQAhINCglIRUFSVEJFQVQQAxIKCgZMT0dPRkYQBRIU",
            "ChBFTkNPRElOR19SRVFVRVNUEAYSFQoRRU5DT0RJTkdfUkVTUE9OU0UQBxIX",
            "ChNNQVJLRVRfREFUQV9SRVFVRVNUEGUSFgoSTUFSS0VUX0RBVEFfUkVKRUNU",
            "EGcSGAoUTUFSS0VUX0RBVEFfU05BUFNIT1QQaBIcChhNQVJLRVRfREFUQV9T",
            "TkFQU0hPVF9JTlQQfRIcChhNQVJLRVRfREFUQV9VUERBVEVfVFJBREUQaxIk",
            "CiBNQVJLRVRfREFUQV9VUERBVEVfVFJBREVfQ09NUEFDVBBwEiAKHE1BUktF",
            "VF9EQVRBX1VQREFURV9UUkFERV9JTlQQfhIrCiZNQVJLRVRfREFUQV9VUERB",
            "VEVfTEFTVF9UUkFERV9TTkFQU0hPVBCGARIeChpNQVJLRVRfREFUQV9VUERB",
            "VEVfQklEX0FTSxBsEiYKIk1BUktFVF9EQVRBX1VQREFURV9CSURfQVNLX0NP",
            "TVBBQ1QQdRIiCh5NQVJLRVRfREFUQV9VUERBVEVfQklEX0FTS19JTlQQfxIj",
            "Ch9NQVJLRVRfREFUQV9VUERBVEVfU0VTU0lPTl9PUEVOEHgSKAojTUFSS0VU",
            "X0RBVEFfVVBEQVRFX1NFU1NJT05fT1BFTl9JTlQQgAESIwofTUFSS0VUX0RB",
            "VEFfVVBEQVRFX1NFU1NJT05fSElHSBByEigKI01BUktFVF9EQVRBX1VQREFU",
            "RV9TRVNTSU9OX0hJR0hfSU5UEIEBEiIKHk1BUktFVF9EQVRBX1VQREFURV9T",
            "RVNTSU9OX0xPVxBzEicKIk1BUktFVF9EQVRBX1VQREFURV9TRVNTSU9OX0xP",
            "V19JTlQQggESJQohTUFSS0VUX0RBVEFfVVBEQVRFX1NFU1NJT05fVk9MVU1F",
            "EHESJAogTUFSS0VUX0RBVEFfVVBEQVRFX09QRU5fSU5URVJFU1QQfBIpCiVN",
            "QVJLRVRfREFUQV9VUERBVEVfU0VTU0lPTl9TRVRUTEVNRU5UEHcSLgopTUFS",
            "S0VUX0RBVEFfVVBEQVRFX1NFU1NJT05fU0VUVExFTUVOVF9JTlQQgwESKgol",
            "TUFSS0VUX0RBVEFfVVBEQVRFX1NFU1NJT05fTlVNX1RSQURFUxCHARIsCidN",
            "QVJLRVRfREFUQV9VUERBVEVfVFJBRElOR19TRVNTSU9OX0RBVEUQiAESGAoU",
            "TUFSS0VUX0RFUFRIX1JFUVVFU1QQZhIXChNNQVJLRVRfREVQVEhfUkVKRUNU",
            "EHkSHwobTUFSS0VUX0RFUFRIX1NOQVBTSE9UX0xFVkVMEHoSJAofTUFSS0VU",
            "X0RFUFRIX1NOQVBTSE9UX0xFVkVMX0lOVBCEARIdChlNQVJLRVRfREVQVEhf",
            "VVBEQVRFX0xFVkVMEGoSJQohTUFSS0VUX0RFUFRIX1VQREFURV9MRVZFTF9D",
            "T01QQUNUEHYSIgodTUFSS0VUX0RFUFRIX1VQREFURV9MRVZFTF9JTlQQhQES",
            "HwobTUFSS0VUX0RFUFRIX0ZVTExfVVBEQVRFXzEwEHsSHwobTUFSS0VUX0RF",
            "UFRIX0ZVTExfVVBEQVRFXzIwEGkSGwoXTUFSS0VUX0RBVEFfRkVFRF9TVEFU",
            "VVMQZBIiCh5NQVJLRVRfREFUQV9GRUVEX1NZTUJPTF9TVEFUVVMQdBIcChdT",
            "VUJNSVRfTkVXX1NJTkdMRV9PUkRFUhDQARIgChtTVUJNSVRfTkVXX1NJTkdM",
            "RV9PUkRFUl9JTlQQzgESGQoUU1VCTUlUX05FV19PQ09fT1JERVIQyQESHQoY",
            "U1VCTUlUX05FV19PQ09fT1JERVJfSU5UEM8BEhEKDENBTkNFTF9PUkRFUhDL",
            "ARIZChRDQU5DRUxfUkVQTEFDRV9PUkRFUhDMARIdChhDQU5DRUxfUkVQTEFD",
            "RV9PUkRFUl9JTlQQzQESGAoTT1BFTl9PUkRFUlNfUkVRVUVTVBCsAhIXChJP",
            "UEVOX09SREVSU19SRUpFQ1QQrgISEQoMT1JERVJfVVBEQVRFEK0CEiMKHkhJ",
            "U1RPUklDQUxfT1JERVJfRklMTFNfUkVRVUVTVBCvAhIjCh5ISVNUT1JJQ0FM",
            "X09SREVSX0ZJTExfUkVTUE9OU0UQsAISIgodSElTVE9SSUNBTF9PUkRFUl9G",
            "SUxMU19SRUpFQ1QQtAISHgoZQ1VSUkVOVF9QT1NJVElPTlNfUkVRVUVTVBCx",
            "AhIdChhDVVJSRU5UX1BPU0lUSU9OU19SRUpFQ1QQswISFAoPUE9TSVRJT05f",
            "VVBEQVRFELICEhsKFlRSQURFX0FDQ09VTlRTX1JFUVVFU1QQkAMSGwoWVFJB",
            "REVfQUNDT1VOVF9SRVNQT05TRRCRAxIaChVFWENIQU5HRV9MSVNUX1JFUVVF",
            "U1QQ9AMSGwoWRVhDSEFOR0VfTElTVF9SRVNQT05TRRD1AxIhChxTWU1CT0xT",
            "X0ZPUl9FWENIQU5HRV9SRVFVRVNUEPYDEiwKJ1VOREVSTFlJTkdfU1lNQk9M",
            "U19GT1JfRVhDSEFOR0VfUkVRVUVTVBD3AxIjCh5TWU1CT0xTX0ZPUl9VTkRF",
            "UkxZSU5HX1JFUVVFU1QQ+AMSKwomU0VDVVJJVFlfREVGSU5JVElPTl9GT1Jf",
            "U1lNQk9MX1JFUVVFU1QQ+gMSIQocU0VDVVJJVFlfREVGSU5JVElPTl9SRVNQ",
            "T05TRRD7AxIaChVTWU1CT0xfU0VBUkNIX1JFUVVFU1QQ/AMSHwoaU0VDVVJJ",
            "VFlfREVGSU5JVElPTl9SRUpFQ1QQ/QMSHAoXQUNDT1VOVF9CQUxBTkNFX1JF",
            "UVVFU1QQ2QQSGwoWQUNDT1VOVF9CQUxBTkNFX1JFSkVDVBDaBBIbChZBQ0NP",
            "VU5UX0JBTEFOQ0VfVVBEQVRFENgEEhEKDFVTRVJfTUVTU0FHRRC8BRIYChNH",
            "RU5FUkFMX0xPR19NRVNTQUdFEL0FEiIKHUhJU1RPUklDQUxfUFJJQ0VfREFU",
            "QV9SRVFVRVNUEKAGEioKJUhJU1RPUklDQUxfUFJJQ0VfREFUQV9SRVNQT05T",
            "RV9IRUFERVIQoQYSIQocSElTVE9SSUNBTF9QUklDRV9EQVRBX1JFSkVDVBCi",
            "BhIqCiVISVNUT1JJQ0FMX1BSSUNFX0RBVEFfUkVDT1JEX1JFU1BPTlNFEKMG",
            "Ei8KKkhJU1RPUklDQUxfUFJJQ0VfREFUQV9USUNLX1JFQ09SRF9SRVNQT05T",
            "RRCkBhIuCilISVNUT1JJQ0FMX1BSSUNFX0RBVEFfUkVDT1JEX1JFU1BPTlNF",
            "X0lOVBClBhIzCi5ISVNUT1JJQ0FMX1BSSUNFX0RBVEFfVElDS19SRUNPUkRf",
            "UkVTUE9OU0VfSU5UEKYGKpABCgxFbmNvZGluZ0VudW0SEwoPQklOQVJZX0VO",
            "Q09ESU5HEAASJwojQklOQVJZX1dJVEhfVkFSSUFCTEVfTEVOR1RIX1NUUklO",
            "R1MQARIRCg1KU09OX0VOQ09ESU5HEAISGQoVSlNPTl9DT01QQUNUX0VOQ09E",
            "SU5HEAMSFAoQUFJPVE9DT0xfQlVGRkVSUxAEKowBCg9Mb2dvblN0YXR1c0Vu",
            "dW0SFgoSTE9HT05fU1RBVFVTX1VOU0VUEAASEQoNTE9HT05fU1VDQ0VTUxAB",
            "Eg8KC0xPR09OX0VSUk9SEAISHAoYTE9HT05fRVJST1JfTk9fUkVDT05ORUNU",
            "EAMSHwobTE9HT05fUkVDT05ORUNUX05FV19BRERSRVNTEAQqRgoUTWVzc2Fn",
            "ZVN1cHBvcnRlZEVudW0SFwoTTUVTU0FHRV9VTlNVUFBPUlRFRBAAEhUKEU1F",
            "U1NBR0VfU1VQUE9SVEVEEAEqaQoNVHJhZGVNb2RlRW51bRIUChBUUkFERV9N",
            "T0RFX1VOU0VUEAASEwoPVFJBREVfTU9ERV9ERU1PEAESGAoUVFJBREVfTU9E",
            "RV9TSU1VTEFURUQQAhITCg9UUkFERV9NT0RFX0xJVkUQAypbChFSZXF1ZXN0",
            "QWN0aW9uRW51bRIYChRSRVFVRVNUX0FDVElPTl9VTlNFVBAAEg0KCVNVQlND",
            "UklCRRABEg8KC1VOU1VCU0NSSUJFEAISDAoIU05BUFNIT1QQAyqGAQobVW5i",
            "dW5kbGVkVHJhZGVJbmRpY2F0b3JFbnVtEhgKFFVOQlVORExFRF9UUkFERV9O",
            "T05FEAASJgoiRklSU1RfU1VCX1RSQURFX09GX1VOQlVORExFRF9UUkFERRAB",
            "EiUKIUxBU1RfU1VCX1RSQURFX09GX1VOQlVORExFRF9UUkFERRACKt4CCg9P",
            "cmRlclN0YXR1c0VudW0SHAoYT1JERVJfU1RBVFVTX1VOU1BFQ0lGSUVEEAAS",
            "GwoXT1JERVJfU1RBVFVTX09SREVSX1NFTlQQARIdChlPUkRFUl9TVEFUVVNf",
            "UEVORElOR19PUEVOEAISHgoaT1JERVJfU1RBVFVTX1BFTkRJTkdfQ0hJTEQQ",
            "AxIVChFPUkRFUl9TVEFUVVNfT1BFThAEEicKI09SREVSX1NUQVRVU19QRU5E",
            "SU5HX0NBTkNFTF9SRVBMQUNFEAUSHwobT1JERVJfU1RBVFVTX1BFTkRJTkdf",
            "Q0FOQ0VMEAYSFwoTT1JERVJfU1RBVFVTX0ZJTExFRBAHEhkKFU9SREVSX1NU",
            "QVRVU19DQU5DRUxFRBAIEhkKFU9SREVSX1NUQVRVU19SRUpFQ1RFRBAJEiEK",
            "HU9SREVSX1NUQVRVU19QQVJUSUFMTFlfRklMTEVEEAoqxQIKFU9yZGVyVXBk",
            "YXRlUmVhc29uRW51bRIdChlPUkRFUl9VUERBVEVfUkVBU09OX1VOU0VUEAAS",
            "IAocT1BFTl9PUkRFUlNfUkVRVUVTVF9SRVNQT05TRRABEhYKEk5FV19PUkRF",
            "Ul9BQ0NFUFRFRBACEhgKFEdFTkVSQUxfT1JERVJfVVBEQVRFEAMSEAoMT1JE",
            "RVJfRklMTEVEEAQSGgoWT1JERVJfRklMTEVEX1BBUlRJQUxMWRAFEhIKDk9S",
            "REVSX0NBTkNFTEVEEAYSIQodT1JERVJfQ0FOQ0VMX1JFUExBQ0VfQ09NUExF",
            "VEUQBxIWChJORVdfT1JERVJfUkVKRUNURUQQCBIZChVPUkRFUl9DQU5DRUxf",
            "UkVKRUNURUQQCRIhCh1PUkRFUl9DQU5DRUxfUkVQTEFDRV9SRUpFQ1RFRBAK",
            "KjsKDkF0QmlkT3JBc2tFbnVtEhEKDUJJRF9BU0tfVU5TRVQQABIKCgZBVF9C",
            "SUQQARIKCgZBVF9BU0sQAipCCg9BdEJpZE9yQXNrRW51bTgSEwoPQklEX0FT",
            "S19VTlNFVF84EAASDAoIQVRfQklEXzgQARIMCghBVF9BU0tfOBACKnEKGU1h",
            "cmtldERlcHRoVXBkYXRlVHlwZUVudW0SDwoLREVQVEhfVU5TRVQQABIkCiBN",
            "QVJLRVRfREVQVEhfSU5TRVJUX1VQREFURV9MRVZFTBABEh0KGU1BUktFVF9E",
            "RVBUSF9ERUxFVEVfTEVWRUwQAirFAQoNT3JkZXJUeXBlRW51bRIUChBPUkRF",
            "Ul9UWVBFX1VOU0VUEAASFQoRT1JERVJfVFlQRV9NQVJLRVQQARIUChBPUkRF",
            "Ul9UWVBFX0xJTUlUEAISEwoPT1JERVJfVFlQRV9TVE9QEAMSGQoVT1JERVJf",
            "VFlQRV9TVE9QX0xJTUlUEAQSIAocT1JERVJfVFlQRV9NQVJLRVRfSUZfVE9V",
            "Q0hFRBAFEh8KG09SREVSX1RZUEVfTElNSVRfSUZfVE9VQ0hFRBAGKq4BCg9U",
            "aW1lSW5Gb3JjZUVudW0SDQoJVElGX1VOU0VUEAASCwoHVElGX0RBWRABEhoK",
            "FlRJRl9HT09EX1RJTExfQ0FOQ0VMRUQQAhIbChdUSUZfR09PRF9USUxMX0RB",
            "VEVfVElNRRADEhsKF1RJRl9JTU1FRElBVEVfT1JfQ0FOQ0VMEAQSEwoPVElG",
            "X0FMTF9PUl9OT05FEAUSFAoQVElGX0ZJTExfT1JfS0lMTBAGKjQKC0J1eVNl",
            "bGxFbnVtEhIKDkJVWV9TRUxMX1VOU0VUEAASBwoDQlVZEAESCAoEU0VMTBAC",
            "KkYKEk9wZW5DbG9zZVRyYWRlRW51bRIPCgtUUkFERV9VTlNFVBAAEg4KClRS",
            "QURFX09QRU4QARIPCgtUUkFERV9DTE9TRRACKogBChdQYXJ0aWFsRmlsbEhh",
            "bmRsaW5nRW51bRIWChJQQVJUSUFMX0ZJTExfVU5TRVQQABIpCiVQQVJUSUFM",
            "X0ZJTExfSEFORExJTkdfUkVEVUNFX1FVQU5USVRZEAESKgomUEFSVElBTF9G",
            "SUxMX0hBTkRMSU5HX0lNTUVESUFURV9DQU5DRUwQAip/ChhNYXJrZXREYXRh",
            "RmVlZFN0YXR1c0VudW0SIQodTUFSS0VUX0RBVEFfRkVFRF9TVEFUVVNfVU5T",
            "RVQQABIgChxNQVJLRVRfREFUQV9GRUVEX1VOQVZBSUxBQkxFEAESHgoaTUFS",
            "S0VUX0RBVEFfRkVFRF9BVkFJTEFCTEUQAirYBgoWUHJpY2VEaXNwbGF5Rm9y",
            "bWF0RW51bRIiCh5QUklDRV9ESVNQTEFZX0ZPUk1BVF9ERUNJTUFMXzAQABIi",
            "Ch5QUklDRV9ESVNQTEFZX0ZPUk1BVF9ERUNJTUFMXzEQARIiCh5QUklDRV9E",
            "SVNQTEFZX0ZPUk1BVF9ERUNJTUFMXzIQAhIiCh5QUklDRV9ESVNQTEFZX0ZP",
            "Uk1BVF9ERUNJTUFMXzMQAxIiCh5QUklDRV9ESVNQTEFZX0ZPUk1BVF9ERUNJ",
            "TUFMXzQQBBIiCh5QUklDRV9ESVNQTEFZX0ZPUk1BVF9ERUNJTUFMXzUQBRIi",
            "Ch5QUklDRV9ESVNQTEFZX0ZPUk1BVF9ERUNJTUFMXzYQBhIiCh5QUklDRV9E",
            "SVNQTEFZX0ZPUk1BVF9ERUNJTUFMXzcQBxIiCh5QUklDRV9ESVNQTEFZX0ZP",
            "Uk1BVF9ERUNJTUFMXzgQCBIiCh5QUklDRV9ESVNQTEFZX0ZPUk1BVF9ERUNJ",
            "TUFMXzkQCRIpCiRQUklDRV9ESVNQTEFZX0ZPUk1BVF9ERU5PTUlOQVRPUl8y",
            "NTYQ5AISKQokUFJJQ0VfRElTUExBWV9GT1JNQVRfREVOT01JTkFUT1JfMTI4",
            "EOQBEigKI1BSSUNFX0RJU1BMQVlfRk9STUFUX0RFTk9NSU5BVE9SXzY0EKQB",
            "EjEKLFBSSUNFX0RJU1BMQVlfRk9STUFUX0RFTk9NSU5BVE9SXzMyX1FVQVJU",
            "RVJTEIgBEi8KKlBSSUNFX0RJU1BMQVlfRk9STUFUX0RFTk9NSU5BVE9SXzMy",
            "X0hBTFZFUxCGARIoCiNQUklDRV9ESVNQTEFZX0ZPUk1BVF9ERU5PTUlOQVRP",
            "Ul8zMhCEARInCiNQUklDRV9ESVNQTEFZX0ZPUk1BVF9ERU5PTUlOQVRPUl8x",
            "NhB0EiYKIlBSSUNFX0RJU1BMQVlfRk9STUFUX0RFTk9NSU5BVE9SXzgQbBIm",
            "CiJQUklDRV9ESVNQTEFZX0ZPUk1BVF9ERU5PTUlOQVRPUl80EGgSJgoiUFJJ",
            "Q0VfRElTUExBWV9GT1JNQVRfREVOT01JTkFUT1JfMhBmEicKGlBSSUNFX0RJ",
            "U1BMQVlfRk9STUFUX1VOU0VUEP///////////wEqzQIKEFNlY3VyaXR5VHlw",
            "ZUVudW0SFwoTU0VDVVJJVFlfVFlQRV9VTlNFVBAAEhgKFFNFQ1VSSVRZX1RZ",
            "UEVfRlVUVVJFEAESFwoTU0VDVVJJVFlfVFlQRV9TVE9DSxACEhcKE1NFQ1VS",
            "SVRZX1RZUEVfRk9SRVgQAxIXChNTRUNVUklUWV9UWVBFX0lOREVYEAQSIgoe",
            "U0VDVVJJVFlfVFlQRV9GVVRVUkVTX1NUUkFURUdZEAUSIAocU0VDVVJJVFlf",
            "VFlQRV9GVVRVUkVTX09QVElPThAHEh4KGlNFQ1VSSVRZX1RZUEVfU1RPQ0tf",
            "T1BUSU9OEAYSHgoaU0VDVVJJVFlfVFlQRV9JTkRFWF9PUFRJT04QCBIWChJT",
            "RUNVUklUWV9UWVBFX0JPTkQQCRIdChlTRUNVUklUWV9UWVBFX01VVFVBTF9G",
            "VU5EEAoqNAoLUHV0Q2FsbEVudW0SDAoIUENfVU5TRVQQABILCgdQQ19DQUxM",
            "EAESCgoGUENfUFVUEAIqYgoOU2VhcmNoVHlwZUVudW0SFQoRU0VBUkNIX1RZ",
            "UEVfVU5TRVQQABIZChVTRUFSQ0hfVFlQRV9CWV9TWU1CT0wQARIeChpTRUFS",
            "Q0hfVFlQRV9CWV9ERVNDUklQVElPThACKoQCChpIaXN0b3JpY2FsRGF0YUlu",
            "dGVydmFsRW51bRIRCg1JTlRFUlZBTF9USUNLEAASFQoRSU5URVJWQUxfMV9T",
            "RUNPTkQQARIWChJJTlRFUlZBTF8yX1NFQ09ORFMQAhIWChJJTlRFUlZBTF80",
            "X1NFQ09ORFMQBBIWChJJTlRFUlZBTF81X1NFQ09ORFMQBRIXChNJTlRFUlZB",
            "TF8xMF9TRUNPTkRTEAoSFwoTSU5URVJWQUxfMzBfU0VDT05EUxAeEhUKEUlO",
            "VEVSVkFMXzFfTUlOVVRFEDwSFAoOSU5URVJWQUxfMV9EQVkQgKMFEhUKD0lO",
            "VEVSVkFMXzFfV0VFSxCA9SQq5wEKJ0hpc3RvcmljYWxQcmljZURhdGFSZWpl",
            "Y3RSZWFzb25Db2RlRW51bRIOCgpIUERSX1VOU0VUEAASKQolSFBEUl9VTkFC",
            "TEVfVE9fU0VSVkVfREFUQV9SRVRSWV9MQVRFUhABEioKJkhQRFJfVU5BQkxF",
            "X1RPX1NFUlZFX0RBVEFfRE9fTk9UX1JFVFJZEAISNgoySFBEUl9EQVRBX1JF",
            "UVVFU1RfT1VUU0lERV9CT1VORFNfT0ZfQVZBSUxBQkxFX0RBVEEQAxIdChlI",
            "UERSX0dFTkVSQUxfUkVKRUNUX0VSUk9SEARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DTCPB.DTCVersion), typeof(global::DTCPB.DTCMessageType), typeof(global::DTCPB.EncodingEnum), typeof(global::DTCPB.LogonStatusEnum), typeof(global::DTCPB.MessageSupportedEnum), typeof(global::DTCPB.TradeModeEnum), typeof(global::DTCPB.RequestActionEnum), typeof(global::DTCPB.UnbundledTradeIndicatorEnum), typeof(global::DTCPB.OrderStatusEnum), typeof(global::DTCPB.OrderUpdateReasonEnum), typeof(global::DTCPB.AtBidOrAskEnum), typeof(global::DTCPB.AtBidOrAskEnum8), typeof(global::DTCPB.MarketDepthUpdateTypeEnum), typeof(global::DTCPB.OrderTypeEnum), typeof(global::DTCPB.TimeInForceEnum), typeof(global::DTCPB.BuySellEnum), typeof(global::DTCPB.OpenCloseTradeEnum), typeof(global::DTCPB.PartialFillHandlingEnum), typeof(global::DTCPB.MarketDataFeedStatusEnum), typeof(global::DTCPB.PriceDisplayFormatEnum), typeof(global::DTCPB.SecurityTypeEnum), typeof(global::DTCPB.PutCallEnum), typeof(global::DTCPB.SearchTypeEnum), typeof(global::DTCPB.HistoricalDataIntervalEnum), typeof(global::DTCPB.HistoricalPriceDataRejectReasonCodeEnum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.EncodingRequest), global::DTCPB.EncodingRequest.Parser, new[]{ "ProtocolVersion", "Encoding", "ProtocolType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.EncodingResponse), global::DTCPB.EncodingResponse.Parser, new[]{ "ProtocolVersion", "Encoding", "ProtocolType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.LogonRequest), global::DTCPB.LogonRequest.Parser, new[]{ "ProtocolVersion", "Username", "Password", "GeneralTextData", "Integer1", "Integer2", "HeartbeatIntervalInSeconds", "TradeMode", "TradeAccount", "HardwareIdentifier", "ClientName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.LogonResponse), global::DTCPB.LogonResponse.Parser, new[]{ "ProtocolVersion", "Result", "ResultText", "ReconnectAddress", "Integer1", "ServerName", "MarketDepthUpdatesBestBidAndAsk", "TradingIsSupported", "OCOOrdersSupported", "OrderCancelReplaceSupported", "SymbolExchangeDelimiter", "SecurityDefinitionsSupported", "HistoricalPriceDataSupported", "ResubscribeWhenMarketDataFeedAvailable", "MarketDepthIsSupported", "OneHistoricalPriceDataRequestPerConnection", "BracketOrdersSupported", "UseIntegerPriceOrderMessages", "UsesMultiplePositionsPerSymbolAndTradeAccount", "MarketDataSupported" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.Logoff), global::DTCPB.Logoff.Parser, new[]{ "Reason", "DoNotReconnect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.Heartbeat), global::DTCPB.Heartbeat.Parser, new[]{ "NumDroppedMessages", "CurrentDateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataFeedStatus), global::DTCPB.MarketDataFeedStatus.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataFeedSymbolStatus), global::DTCPB.MarketDataFeedSymbolStatus.Parser, new[]{ "SymbolID", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataRequest), global::DTCPB.MarketDataRequest.Parser, new[]{ "RequestAction", "SymbolID", "Symbol", "Exchange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthRequest), global::DTCPB.MarketDepthRequest.Parser, new[]{ "RequestAction", "SymbolID", "Symbol", "Exchange", "NumLevels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataReject), global::DTCPB.MarketDataReject.Parser, new[]{ "SymbolID", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataSnapshot), global::DTCPB.MarketDataSnapshot.Parser, new[]{ "SymbolID", "SessionSettlementPrice", "SessionOpenPrice", "SessionHighPrice", "SessionLowPrice", "SessionVolume", "SessionNumTrades", "OpenInterest", "BidPrice", "AskPrice", "AskQuantity", "BidQuantity", "LastTradePrice", "LastTradeVolume", "LastTradeDateTime", "BidAskDateTime", "SessionSettlementDateTime", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataSnapshot_Int), global::DTCPB.MarketDataSnapshot_Int.Parser, new[]{ "SymbolID", "SessionSettlementPrice", "SessionOpenPrice", "SessionHighPrice", "SessionLowPrice", "SessionVolume", "SessionNumTrades", "OpenInterest", "BidPrice", "AskPrice", "AskQuantity", "BidQuantity", "LastTradePrice", "LastTradeVolume", "LastTradeDateTime", "BidAskDateTime", "SessionSettlementDateTime", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.DepthEntry), global::DTCPB.DepthEntry.Parser, new[]{ "Price", "Quantity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthFullUpdate20), global::DTCPB.MarketDepthFullUpdate20.Parser, new[]{ "SymbolID", "BidDepth", "AskDepth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthFullUpdate10), global::DTCPB.MarketDepthFullUpdate10.Parser, new[]{ "SymbolID", "BidDepth", "AskDepth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthSnapshotLevel), global::DTCPB.MarketDepthSnapshotLevel.Parser, new[]{ "SymbolID", "Side", "Price", "Quantity", "Level", "IsFirstMessageInBatch", "IsLastMessageInBatch", "DateTime", "NumOrders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthSnapshotLevel_Int), global::DTCPB.MarketDepthSnapshotLevel_Int.Parser, new[]{ "SymbolID", "Side", "Price", "Quantity", "Level", "IsFirstMessageInBatch", "IsLastMessageInBatch", "DateTime", "NumOrders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthUpdateLevel), global::DTCPB.MarketDepthUpdateLevel.Parser, new[]{ "SymbolID", "Side", "Price", "Quantity", "UpdateType", "DateTime", "NumOrders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthUpdateLevel_Int), global::DTCPB.MarketDepthUpdateLevel_Int.Parser, new[]{ "SymbolID", "Side", "Price", "Quantity", "UpdateType", "DateTime", "NumOrders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthUpdateLevelCompact), global::DTCPB.MarketDepthUpdateLevelCompact.Parser, new[]{ "SymbolID", "Side", "Price", "Quantity", "UpdateType", "DateTime", "NumOrders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionSettlement), global::DTCPB.MarketDataUpdateSessionSettlement.Parser, new[]{ "SymbolID", "Price", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionSettlement_Int), global::DTCPB.MarketDataUpdateSessionSettlement_Int.Parser, new[]{ "SymbolID", "Price", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionOpen), global::DTCPB.MarketDataUpdateSessionOpen.Parser, new[]{ "SymbolID", "Price", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionOpen_Int), global::DTCPB.MarketDataUpdateSessionOpen_Int.Parser, new[]{ "SymbolID", "Price", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionNumTrades), global::DTCPB.MarketDataUpdateSessionNumTrades.Parser, new[]{ "SymbolID", "NumTrades", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateTradingSessionDate), global::DTCPB.MarketDataUpdateTradingSessionDate.Parser, new[]{ "SymbolID", "Date" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDepthReject), global::DTCPB.MarketDepthReject.Parser, new[]{ "SymbolID", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateTrade), global::DTCPB.MarketDataUpdateTrade.Parser, new[]{ "SymbolID", "AtBidOrAsk", "Price", "Volume", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateTrade_Int), global::DTCPB.MarketDataUpdateTrade_Int.Parser, new[]{ "SymbolID", "AtBidOrAsk", "Price", "Volume", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateTradeWithUnbundledIndicator), global::DTCPB.MarketDataUpdateTradeWithUnbundledIndicator.Parser, new[]{ "SymbolID", "AtBidOrAsk", "UnbundledTradeIndicator", "Price", "Volume", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateBidAsk), global::DTCPB.MarketDataUpdateBidAsk.Parser, new[]{ "SymbolID", "BidPrice", "BidQuantity", "AskPrice", "AskQuantity", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateBidAsk_Int), global::DTCPB.MarketDataUpdateBidAsk_Int.Parser, new[]{ "SymbolID", "BidPrice", "BidQuantity", "AskPrice", "AskQuantity", "DateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateBidAskCompact), global::DTCPB.MarketDataUpdateBidAskCompact.Parser, new[]{ "BidPrice", "BidQuantity", "AskPrice", "AskQuantity", "DateTime", "SymbolID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateTradeCompact), global::DTCPB.MarketDataUpdateTradeCompact.Parser, new[]{ "Price", "Volume", "DateTime", "SymbolID", "AtBidOrAsk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionVolume), global::DTCPB.MarketDataUpdateSessionVolume.Parser, new[]{ "SymbolID", "Volume", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateOpenInterest), global::DTCPB.MarketDataUpdateOpenInterest.Parser, new[]{ "SymbolID", "OpenInterest", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionHigh), global::DTCPB.MarketDataUpdateSessionHigh.Parser, new[]{ "SymbolID", "Price", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionHigh_Int), global::DTCPB.MarketDataUpdateSessionHigh_Int.Parser, new[]{ "SymbolID", "Price", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionLow), global::DTCPB.MarketDataUpdateSessionLow.Parser, new[]{ "SymbolID", "Price", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateSessionLow_Int), global::DTCPB.MarketDataUpdateSessionLow_Int.Parser, new[]{ "SymbolID", "Price", "TradingSessionDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.MarketDataUpdateLastTradeSnapshot), global::DTCPB.MarketDataUpdateLastTradeSnapshot.Parser, new[]{ "SymbolID", "LastTradePrice", "LastTradeVolume", "LastTradeDateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SubmitNewSingleOrder), global::DTCPB.SubmitNewSingleOrder.Parser, new[]{ "Symbol", "Exchange", "TradeAccount", "ClientOrderID", "OrderType", "BuySell", "Price1", "Price2", "Quantity", "TimeInForce", "GoodTillDateTime", "IsAutomatedOrder", "IsParentOrder", "FreeFormText", "OpenOrClose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SubmitNewSingleOrderInt), global::DTCPB.SubmitNewSingleOrderInt.Parser, new[]{ "Symbol", "Exchange", "TradeAccount", "ClientOrderID", "OrderType", "BuySell", "Price1", "Price2", "Divisor", "Quantity", "TimeInForce", "GoodTillDateTime", "IsAutomatedOrder", "IsParentOrder", "FreeFormText", "OpenOrClose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.CancelReplaceOrder), global::DTCPB.CancelReplaceOrder.Parser, new[]{ "ServerOrderID", "ClientOrderID", "Price1", "Price2", "Quantity", "Price1IsSet", "Price2IsSet", "TimeInForce", "GoodTillDateTime", "UpdatePrice1OffsetToParent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.CancelReplaceOrderInt), global::DTCPB.CancelReplaceOrderInt.Parser, new[]{ "ServerOrderID", "ClientOrderID", "Price1", "Price2", "Divisor", "Quantity", "Price1IsSet", "Price2IsSet", "TimeInForce", "GoodTillDateTime", "UpdatePrice1OffsetToParent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.CancelOrder), global::DTCPB.CancelOrder.Parser, new[]{ "ServerOrderID", "ClientOrderID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SubmitNewOCOOrder), global::DTCPB.SubmitNewOCOOrder.Parser, new[]{ "Symbol", "Exchange", "ClientOrderID1", "OrderType1", "BuySell1", "Price11", "Price21", "Quantity1", "ClientOrderID2", "OrderType2", "BuySell2", "Price12", "Price22", "Quantity2", "TimeInForce", "GoodTillDateTime", "TradeAccount", "IsAutomatedOrder", "ParentTriggerClientOrderID", "FreeFormText", "OpenOrClose", "PartialFillHandling" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SubmitNewOCOOrderInt), global::DTCPB.SubmitNewOCOOrderInt.Parser, new[]{ "Symbol", "Exchange", "ClientOrderID1", "OrderType1", "BuySell1", "Price11", "Price21", "Quantity1", "ClientOrderID2", "OrderType2", "BuySell2", "Price12", "Price22", "Quantity2", "TimeInForce", "GoodTillDateTime", "TradeAccount", "IsAutomatedOrder", "ParentTriggerClientOrderID", "FreeFormText", "Divisor", "OpenOrClose", "PartialFillHandling" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.OpenOrdersRequest), global::DTCPB.OpenOrdersRequest.Parser, new[]{ "RequestID", "RequestAllOrders", "ServerOrderID", "TradeAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalOrderFillsRequest), global::DTCPB.HistoricalOrderFillsRequest.Parser, new[]{ "RequestID", "ServerOrderID", "NumberOfDays", "TradeAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalOrderFillsReject), global::DTCPB.HistoricalOrderFillsReject.Parser, new[]{ "RequestID", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.CurrentPositionsRequest), global::DTCPB.CurrentPositionsRequest.Parser, new[]{ "RequestID", "TradeAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.CurrentPositionsReject), global::DTCPB.CurrentPositionsReject.Parser, new[]{ "RequestID", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.OrderUpdate), global::DTCPB.OrderUpdate.Parser, new[]{ "RequestID", "TotalNumMessages", "MessageNumber", "Symbol", "Exchange", "PreviousServerOrderID", "ServerOrderID", "ClientOrderID", "ExchangeOrderID", "OrderStatus", "OrderUpdateReason", "OrderType", "BuySell", "Price1", "Price2", "TimeInForce", "GoodTillDateTime", "OrderQuantity", "FilledQuantity", "RemainingQuantity", "AverageFillPrice", "LastFillPrice", "LastFillDateTime", "LastFillQuantity", "LastFillExecutionID", "TradeAccount", "InfoText", "NoOrders", "ParentServerOrderID", "OCOLinkedOrderServerOrderID", "OpenOrClose", "PreviousClientOrderID", "FreeFormText", "OrderReceivedDateTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.OpenOrdersReject), global::DTCPB.OpenOrdersReject.Parser, new[]{ "RequestID", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalOrderFillResponse), global::DTCPB.HistoricalOrderFillResponse.Parser, new[]{ "RequestID", "TotalNumberMessages", "MessageNumber", "Symbol", "Exchange", "ServerOrderID", "BuySell", "Price", "DateTime", "Quantity", "UniqueExecutionID", "TradeAccount", "OpenClose", "NoOrderFills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.PositionUpdate), global::DTCPB.PositionUpdate.Parser, new[]{ "RequestID", "TotalNumberMessages", "MessageNumber", "Symbol", "Exchange", "Quantity", "AveragePrice", "PositionIdentifier", "TradeAccount", "NoPositions", "Unsolicited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.TradeAccountsRequest), global::DTCPB.TradeAccountsRequest.Parser, new[]{ "RequestID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.TradeAccountResponse), global::DTCPB.TradeAccountResponse.Parser, new[]{ "TotalNumberMessages", "MessageNumber", "TradeAccount", "RequestID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.ExchangeListRequest), global::DTCPB.ExchangeListRequest.Parser, new[]{ "RequestID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.ExchangeListResponse), global::DTCPB.ExchangeListResponse.Parser, new[]{ "RequestID", "Exchange", "IsFinalMessage", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SymbolsForExchangeRequest), global::DTCPB.SymbolsForExchangeRequest.Parser, new[]{ "RequestID", "Exchange", "SecurityType", "RequestAction", "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.UnderlyingSymbolsForExchangeRequest), global::DTCPB.UnderlyingSymbolsForExchangeRequest.Parser, new[]{ "RequestID", "Exchange", "SecurityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SymbolsForUnderlyingRequest), global::DTCPB.SymbolsForUnderlyingRequest.Parser, new[]{ "RequestID", "UnderlyingSymbol", "Exchange", "SecurityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SymbolSearchRequest), global::DTCPB.SymbolSearchRequest.Parser, new[]{ "RequestID", "SearchText", "Exchange", "SecurityType", "SearchType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SecurityDefinitionForSymbolRequest), global::DTCPB.SecurityDefinitionForSymbolRequest.Parser, new[]{ "RequestID", "Symbol", "Exchange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SecurityDefinitionResponse), global::DTCPB.SecurityDefinitionResponse.Parser, new[]{ "RequestID", "Symbol", "Exchange", "SecurityType", "Description", "MinPriceIncrement", "PriceDisplayFormat", "CurrencyValuePerIncrement", "IsFinalMessage", "FloatToIntPriceMultiplier", "IntToFloatPriceDivisor", "UnderlyingSymbol", "UpdatesBidAskOnly", "StrikePrice", "PutOrCall", "ShortInterest", "SecurityExpirationDate", "BuyRolloverInterest", "SellRolloverInterest", "EarningsPerShare", "SharesOutstanding", "IntToFloatQuantityDivisor", "HasMarketDepthData", "DisplayPriceMultiplier", "ExchangeSymbol", "InitialMarginRequirement", "MaintenanceMarginRequirement" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.SecurityDefinitionReject), global::DTCPB.SecurityDefinitionReject.Parser, new[]{ "RequestID", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.AccountBalanceRequest), global::DTCPB.AccountBalanceRequest.Parser, new[]{ "RequestID", "TradeAccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.AccountBalanceReject), global::DTCPB.AccountBalanceReject.Parser, new[]{ "RequestID", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.AccountBalanceUpdate), global::DTCPB.AccountBalanceUpdate.Parser, new[]{ "RequestID", "CashBalance", "BalanceAvailableForNewPositions", "AccountCurrency", "TradeAccount", "SecuritiesValue", "MarginRequirement", "TotalNumberMessages", "MessageNumber", "NoAccountBalances", "Unsolicited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.UserMessage), global::DTCPB.UserMessage.Parser, new[]{ "UserMessage_", "IsPopupMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.GeneralLogMessage), global::DTCPB.GeneralLogMessage.Parser, new[]{ "MessageText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataRequest), global::DTCPB.HistoricalPriceDataRequest.Parser, new[]{ "RequestID", "Symbol", "Exchange", "RecordInterval", "StartDateTime", "EndDateTime", "MaxDaysToReturn", "UseZLibCompression", "RequestDividendAdjustedStockData", "Flag1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataResponseHeader), global::DTCPB.HistoricalPriceDataResponseHeader.Parser, new[]{ "RequestID", "RecordInterval", "UseZLibCompression", "NoRecordsToReturn", "IntToFloatPriceDivisor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataReject), global::DTCPB.HistoricalPriceDataReject.Parser, new[]{ "RequestID", "RejectText", "RejectReasonCode", "RetryTimeInSeconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataRecordResponse), global::DTCPB.HistoricalPriceDataRecordResponse.Parser, new[]{ "RequestID", "StartDateTime", "OpenPrice", "HighPrice", "LowPrice", "LastPrice", "Volume", "NumTrades", "BidVolume", "AskVolume", "IsFinalRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataTickRecordResponse), global::DTCPB.HistoricalPriceDataTickRecordResponse.Parser, new[]{ "RequestID", "DateTime", "AtBidOrAsk", "Price", "Volume", "IsFinalRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataRecordResponse_Int), global::DTCPB.HistoricalPriceDataRecordResponse_Int.Parser, new[]{ "RequestID", "StartDateTime", "OpenPrice", "HighPrice", "LowPrice", "LastPrice", "Volume", "NumTrades", "BidVolume", "AskVolume", "IsFinalRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataTickRecordResponse_Int), global::DTCPB.HistoricalPriceDataTickRecordResponse_Int.Parser, new[]{ "RequestID", "DateTime", "Price", "Volume", "AtBidOrAsk", "IsFinalRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DTCPB.HistoricalPriceDataResponseTrailer), global::DTCPB.HistoricalPriceDataResponseTrailer.Parser, new[]{ "RequestID", "FinalRecordLastDateTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///============================================================================
  /// DTC protocol version
  /// </summary>
  public enum DTCVersion {
    [pbr::OriginalName("DTC_VERSION_UNSET")] Unset = 0,
    [pbr::OriginalName("CURRENT_VERSION")] CurrentVersion = 8,
  }

  public enum DTCMessageType {
    [pbr::OriginalName("MESSAGE_TYPE_UNSET")] MessageTypeUnset = 0,
    /// <summary>
    /// Authentication and connection monitoring
    /// </summary>
    [pbr::OriginalName("LOGON_REQUEST")] LogonRequest = 1,
    [pbr::OriginalName("LOGON_RESPONSE")] LogonResponse = 2,
    [pbr::OriginalName("HEARTBEAT")] Heartbeat = 3,
    [pbr::OriginalName("LOGOFF")] Logoff = 5,
    [pbr::OriginalName("ENCODING_REQUEST")] EncodingRequest = 6,
    [pbr::OriginalName("ENCODING_RESPONSE")] EncodingResponse = 7,
    /// <summary>
    /// Market data
    /// </summary>
    [pbr::OriginalName("MARKET_DATA_REQUEST")] MarketDataRequest = 101,
    [pbr::OriginalName("MARKET_DATA_REJECT")] MarketDataReject = 103,
    [pbr::OriginalName("MARKET_DATA_SNAPSHOT")] MarketDataSnapshot = 104,
    [pbr::OriginalName("MARKET_DATA_SNAPSHOT_INT")] MarketDataSnapshotInt = 125,
    [pbr::OriginalName("MARKET_DATA_UPDATE_TRADE")] MarketDataUpdateTrade = 107,
    [pbr::OriginalName("MARKET_DATA_UPDATE_TRADE_COMPACT")] MarketDataUpdateTradeCompact = 112,
    [pbr::OriginalName("MARKET_DATA_UPDATE_TRADE_INT")] MarketDataUpdateTradeInt = 126,
    [pbr::OriginalName("MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT")] MarketDataUpdateLastTradeSnapshot = 134,
    [pbr::OriginalName("MARKET_DATA_UPDATE_BID_ASK")] MarketDataUpdateBidAsk = 108,
    [pbr::OriginalName("MARKET_DATA_UPDATE_BID_ASK_COMPACT")] MarketDataUpdateBidAskCompact = 117,
    [pbr::OriginalName("MARKET_DATA_UPDATE_BID_ASK_INT")] MarketDataUpdateBidAskInt = 127,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_OPEN")] MarketDataUpdateSessionOpen = 120,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_OPEN_INT")] MarketDataUpdateSessionOpenInt = 128,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_HIGH")] MarketDataUpdateSessionHigh = 114,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_HIGH_INT")] MarketDataUpdateSessionHighInt = 129,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_LOW")] MarketDataUpdateSessionLow = 115,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_LOW_INT")] MarketDataUpdateSessionLowInt = 130,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_VOLUME")] MarketDataUpdateSessionVolume = 113,
    [pbr::OriginalName("MARKET_DATA_UPDATE_OPEN_INTEREST")] MarketDataUpdateOpenInterest = 124,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_SETTLEMENT")] MarketDataUpdateSessionSettlement = 119,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_SETTLEMENT_INT")] MarketDataUpdateSessionSettlementInt = 131,
    [pbr::OriginalName("MARKET_DATA_UPDATE_SESSION_NUM_TRADES")] MarketDataUpdateSessionNumTrades = 135,
    [pbr::OriginalName("MARKET_DATA_UPDATE_TRADING_SESSION_DATE")] MarketDataUpdateTradingSessionDate = 136,
    [pbr::OriginalName("MARKET_DEPTH_REQUEST")] MarketDepthRequest = 102,
    [pbr::OriginalName("MARKET_DEPTH_REJECT")] MarketDepthReject = 121,
    [pbr::OriginalName("MARKET_DEPTH_SNAPSHOT_LEVEL")] MarketDepthSnapshotLevel = 122,
    [pbr::OriginalName("MARKET_DEPTH_SNAPSHOT_LEVEL_INT")] MarketDepthSnapshotLevelInt = 132,
    [pbr::OriginalName("MARKET_DEPTH_UPDATE_LEVEL")] MarketDepthUpdateLevel = 106,
    [pbr::OriginalName("MARKET_DEPTH_UPDATE_LEVEL_COMPACT")] MarketDepthUpdateLevelCompact = 118,
    [pbr::OriginalName("MARKET_DEPTH_UPDATE_LEVEL_INT")] MarketDepthUpdateLevelInt = 133,
    [pbr::OriginalName("MARKET_DEPTH_FULL_UPDATE_10")] MarketDepthFullUpdate10 = 123,
    [pbr::OriginalName("MARKET_DEPTH_FULL_UPDATE_20")] MarketDepthFullUpdate20 = 105,
    [pbr::OriginalName("MARKET_DATA_FEED_STATUS")] MarketDataFeedStatus = 100,
    [pbr::OriginalName("MARKET_DATA_FEED_SYMBOL_STATUS")] MarketDataFeedSymbolStatus = 116,
    /// <summary>
    /// Order entry and modification
    /// </summary>
    [pbr::OriginalName("SUBMIT_NEW_SINGLE_ORDER")] SubmitNewSingleOrder = 208,
    [pbr::OriginalName("SUBMIT_NEW_SINGLE_ORDER_INT")] SubmitNewSingleOrderInt = 206,
    [pbr::OriginalName("SUBMIT_NEW_OCO_ORDER")] SubmitNewOcoOrder = 201,
    [pbr::OriginalName("SUBMIT_NEW_OCO_ORDER_INT")] SubmitNewOcoOrderInt = 207,
    [pbr::OriginalName("CANCEL_ORDER")] CancelOrder = 203,
    [pbr::OriginalName("CANCEL_REPLACE_ORDER")] CancelReplaceOrder = 204,
    [pbr::OriginalName("CANCEL_REPLACE_ORDER_INT")] CancelReplaceOrderInt = 205,
    /// <summary>
    /// Trading related
    /// </summary>
    [pbr::OriginalName("OPEN_ORDERS_REQUEST")] OpenOrdersRequest = 300,
    [pbr::OriginalName("OPEN_ORDERS_REJECT")] OpenOrdersReject = 302,
    [pbr::OriginalName("ORDER_UPDATE")] OrderUpdate = 301,
    [pbr::OriginalName("HISTORICAL_ORDER_FILLS_REQUEST")] HistoricalOrderFillsRequest = 303,
    [pbr::OriginalName("HISTORICAL_ORDER_FILL_RESPONSE")] HistoricalOrderFillResponse = 304,
    [pbr::OriginalName("HISTORICAL_ORDER_FILLS_REJECT")] HistoricalOrderFillsReject = 308,
    [pbr::OriginalName("CURRENT_POSITIONS_REQUEST")] CurrentPositionsRequest = 305,
    [pbr::OriginalName("CURRENT_POSITIONS_REJECT")] CurrentPositionsReject = 307,
    [pbr::OriginalName("POSITION_UPDATE")] PositionUpdate = 306,
    /// <summary>
    /// Account list
    /// </summary>
    [pbr::OriginalName("TRADE_ACCOUNTS_REQUEST")] TradeAccountsRequest = 400,
    [pbr::OriginalName("TRADE_ACCOUNT_RESPONSE")] TradeAccountResponse = 401,
    /// <summary>
    /// Symbol discovery and security definitions
    /// </summary>
    [pbr::OriginalName("EXCHANGE_LIST_REQUEST")] ExchangeListRequest = 500,
    [pbr::OriginalName("EXCHANGE_LIST_RESPONSE")] ExchangeListResponse = 501,
    [pbr::OriginalName("SYMBOLS_FOR_EXCHANGE_REQUEST")] SymbolsForExchangeRequest = 502,
    [pbr::OriginalName("UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST")] UnderlyingSymbolsForExchangeRequest = 503,
    [pbr::OriginalName("SYMBOLS_FOR_UNDERLYING_REQUEST")] SymbolsForUnderlyingRequest = 504,
    [pbr::OriginalName("SECURITY_DEFINITION_FOR_SYMBOL_REQUEST")] SecurityDefinitionForSymbolRequest = 506,
    [pbr::OriginalName("SECURITY_DEFINITION_RESPONSE")] SecurityDefinitionResponse = 507,
    [pbr::OriginalName("SYMBOL_SEARCH_REQUEST")] SymbolSearchRequest = 508,
    [pbr::OriginalName("SECURITY_DEFINITION_REJECT")] SecurityDefinitionReject = 509,
    /// <summary>
    /// Account balance
    /// </summary>
    [pbr::OriginalName("ACCOUNT_BALANCE_REQUEST")] AccountBalanceRequest = 601,
    [pbr::OriginalName("ACCOUNT_BALANCE_REJECT")] AccountBalanceReject = 602,
    [pbr::OriginalName("ACCOUNT_BALANCE_UPDATE")] AccountBalanceUpdate = 600,
    /// <summary>
    /// Logging
    /// </summary>
    [pbr::OriginalName("USER_MESSAGE")] UserMessage = 700,
    [pbr::OriginalName("GENERAL_LOG_MESSAGE")] GeneralLogMessage = 701,
    /// <summary>
    /// Historical price data
    /// </summary>
    [pbr::OriginalName("HISTORICAL_PRICE_DATA_REQUEST")] HistoricalPriceDataRequest = 800,
    [pbr::OriginalName("HISTORICAL_PRICE_DATA_RESPONSE_HEADER")] HistoricalPriceDataResponseHeader = 801,
    [pbr::OriginalName("HISTORICAL_PRICE_DATA_REJECT")] HistoricalPriceDataReject = 802,
    [pbr::OriginalName("HISTORICAL_PRICE_DATA_RECORD_RESPONSE")] HistoricalPriceDataRecordResponse = 803,
    [pbr::OriginalName("HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE")] HistoricalPriceDataTickRecordResponse = 804,
    [pbr::OriginalName("HISTORICAL_PRICE_DATA_RECORD_RESPONSE_INT")] HistoricalPriceDataRecordResponseInt = 805,
    [pbr::OriginalName("HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE_INT")] HistoricalPriceDataTickRecordResponseInt = 806,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum EncodingEnum {
    [pbr::OriginalName("BINARY_ENCODING")] BinaryEncoding = 0,
    [pbr::OriginalName("BINARY_WITH_VARIABLE_LENGTH_STRINGS")] BinaryWithVariableLengthStrings = 1,
    [pbr::OriginalName("JSON_ENCODING")] JsonEncoding = 2,
    [pbr::OriginalName("JSON_COMPACT_ENCODING")] JsonCompactEncoding = 3,
    [pbr::OriginalName("PROTOCOL_BUFFERS")] ProtocolBuffers = 4,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum LogonStatusEnum {
    [pbr::OriginalName("LOGON_STATUS_UNSET")] LogonStatusUnset = 0,
    [pbr::OriginalName("LOGON_SUCCESS")] LogonSuccess = 1,
    [pbr::OriginalName("LOGON_ERROR")] LogonError = 2,
    [pbr::OriginalName("LOGON_ERROR_NO_RECONNECT")] LogonErrorNoReconnect = 3,
    [pbr::OriginalName("LOGON_RECONNECT_NEW_ADDRESS")] LogonReconnectNewAddress = 4,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum MessageSupportedEnum {
    [pbr::OriginalName("MESSAGE_UNSUPPORTED")] MessageUnsupported = 0,
    [pbr::OriginalName("MESSAGE_SUPPORTED")] MessageSupported = 1,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum TradeModeEnum {
    [pbr::OriginalName("TRADE_MODE_UNSET")] TradeModeUnset = 0,
    [pbr::OriginalName("TRADE_MODE_DEMO")] TradeModeDemo = 1,
    [pbr::OriginalName("TRADE_MODE_SIMULATED")] TradeModeSimulated = 2,
    [pbr::OriginalName("TRADE_MODE_LIVE")] TradeModeLive = 3,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum RequestActionEnum {
    [pbr::OriginalName("REQUEST_ACTION_UNSET")] RequestActionUnset = 0,
    [pbr::OriginalName("SUBSCRIBE")] Subscribe = 1,
    [pbr::OriginalName("UNSUBSCRIBE")] Unsubscribe = 2,
    [pbr::OriginalName("SNAPSHOT")] Snapshot = 3,
  }

  /// <summary>
  ///==========================================================================
  /// </summary>
  public enum UnbundledTradeIndicatorEnum {
    [pbr::OriginalName("UNBUNDLED_TRADE_NONE")] UnbundledTradeNone = 0,
    [pbr::OriginalName("FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE")] FirstSubTradeOfUnbundledTrade = 1,
    [pbr::OriginalName("LAST_SUB_TRADE_OF_UNBUNDLED_TRADE")] LastSubTradeOfUnbundledTrade = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum OrderStatusEnum {
    [pbr::OriginalName("ORDER_STATUS_UNSPECIFIED")] OrderStatusUnspecified = 0,
    [pbr::OriginalName("ORDER_STATUS_ORDER_SENT")] OrderStatusOrderSent = 1,
    [pbr::OriginalName("ORDER_STATUS_PENDING_OPEN")] OrderStatusPendingOpen = 2,
    [pbr::OriginalName("ORDER_STATUS_PENDING_CHILD")] OrderStatusPendingChild = 3,
    [pbr::OriginalName("ORDER_STATUS_OPEN")] OrderStatusOpen = 4,
    [pbr::OriginalName("ORDER_STATUS_PENDING_CANCEL_REPLACE")] OrderStatusPendingCancelReplace = 5,
    [pbr::OriginalName("ORDER_STATUS_PENDING_CANCEL")] OrderStatusPendingCancel = 6,
    [pbr::OriginalName("ORDER_STATUS_FILLED")] OrderStatusFilled = 7,
    [pbr::OriginalName("ORDER_STATUS_CANCELED")] OrderStatusCanceled = 8,
    [pbr::OriginalName("ORDER_STATUS_REJECTED")] OrderStatusRejected = 9,
    [pbr::OriginalName("ORDER_STATUS_PARTIALLY_FILLED")] OrderStatusPartiallyFilled = 10,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum OrderUpdateReasonEnum {
    [pbr::OriginalName("ORDER_UPDATE_REASON_UNSET")] OrderUpdateReasonUnset = 0,
    [pbr::OriginalName("OPEN_ORDERS_REQUEST_RESPONSE")] OpenOrdersRequestResponse = 1,
    [pbr::OriginalName("NEW_ORDER_ACCEPTED")] NewOrderAccepted = 2,
    [pbr::OriginalName("GENERAL_ORDER_UPDATE")] GeneralOrderUpdate = 3,
    [pbr::OriginalName("ORDER_FILLED")] OrderFilled = 4,
    [pbr::OriginalName("ORDER_FILLED_PARTIALLY")] OrderFilledPartially = 5,
    [pbr::OriginalName("ORDER_CANCELED")] OrderCanceled = 6,
    [pbr::OriginalName("ORDER_CANCEL_REPLACE_COMPLETE")] OrderCancelReplaceComplete = 7,
    [pbr::OriginalName("NEW_ORDER_REJECTED")] NewOrderRejected = 8,
    [pbr::OriginalName("ORDER_CANCEL_REJECTED")] OrderCancelRejected = 9,
    [pbr::OriginalName("ORDER_CANCEL_REPLACE_REJECTED")] OrderCancelReplaceRejected = 10,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum AtBidOrAskEnum {
    [pbr::OriginalName("BID_ASK_UNSET")] BidAskUnset = 0,
    [pbr::OriginalName("AT_BID")] AtBid = 1,
    [pbr::OriginalName("AT_ASK")] AtAsk = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum AtBidOrAskEnum8 {
    [pbr::OriginalName("BID_ASK_UNSET_8")] BidAskUnset8 = 0,
    [pbr::OriginalName("AT_BID_8")] AtBid8 = 1,
    [pbr::OriginalName("AT_ASK_8")] AtAsk8 = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum MarketDepthUpdateTypeEnum {
    [pbr::OriginalName("DEPTH_UNSET")] DepthUnset = 0,
    /// <summary>
    /// Insert or update depth at the given price level
    /// </summary>
    [pbr::OriginalName("MARKET_DEPTH_INSERT_UPDATE_LEVEL")] MarketDepthInsertUpdateLevel = 1,
    /// <summary>
    /// Delete depth at the given price level
    /// </summary>
    [pbr::OriginalName("MARKET_DEPTH_DELETE_LEVEL")] MarketDepthDeleteLevel = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum OrderTypeEnum {
    [pbr::OriginalName("ORDER_TYPE_UNSET")] OrderTypeUnset = 0,
    [pbr::OriginalName("ORDER_TYPE_MARKET")] OrderTypeMarket = 1,
    [pbr::OriginalName("ORDER_TYPE_LIMIT")] OrderTypeLimit = 2,
    [pbr::OriginalName("ORDER_TYPE_STOP")] OrderTypeStop = 3,
    [pbr::OriginalName("ORDER_TYPE_STOP_LIMIT")] OrderTypeStopLimit = 4,
    [pbr::OriginalName("ORDER_TYPE_MARKET_IF_TOUCHED")] OrderTypeMarketIfTouched = 5,
    [pbr::OriginalName("ORDER_TYPE_LIMIT_IF_TOUCHED")] OrderTypeLimitIfTouched = 6,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum TimeInForceEnum {
    [pbr::OriginalName("TIF_UNSET")] TifUnset = 0,
    [pbr::OriginalName("TIF_DAY")] TifDay = 1,
    [pbr::OriginalName("TIF_GOOD_TILL_CANCELED")] TifGoodTillCanceled = 2,
    [pbr::OriginalName("TIF_GOOD_TILL_DATE_TIME")] TifGoodTillDateTime = 3,
    [pbr::OriginalName("TIF_IMMEDIATE_OR_CANCEL")] TifImmediateOrCancel = 4,
    [pbr::OriginalName("TIF_ALL_OR_NONE")] TifAllOrNone = 5,
    [pbr::OriginalName("TIF_FILL_OR_KILL")] TifFillOrKill = 6,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum BuySellEnum {
    [pbr::OriginalName("BUY_SELL_UNSET")] BuySellUnset = 0,
    [pbr::OriginalName("BUY")] Buy = 1,
    [pbr::OriginalName("SELL")] Sell = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum OpenCloseTradeEnum {
    [pbr::OriginalName("TRADE_UNSET")] TradeUnset = 0,
    [pbr::OriginalName("TRADE_OPEN")] TradeOpen = 1,
    [pbr::OriginalName("TRADE_CLOSE")] TradeClose = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum PartialFillHandlingEnum {
    [pbr::OriginalName("PARTIAL_FILL_UNSET")] PartialFillUnset = 0,
    [pbr::OriginalName("PARTIAL_FILL_HANDLING_REDUCE_QUANTITY")] PartialFillHandlingReduceQuantity = 1,
    [pbr::OriginalName("PARTIAL_FILL_HANDLING_IMMEDIATE_CANCEL")] PartialFillHandlingImmediateCancel = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum MarketDataFeedStatusEnum {
    [pbr::OriginalName("MARKET_DATA_FEED_STATUS_UNSET")] MarketDataFeedStatusUnset = 0,
    [pbr::OriginalName("MARKET_DATA_FEED_UNAVAILABLE")] MarketDataFeedUnavailable = 1,
    [pbr::OriginalName("MARKET_DATA_FEED_AVAILABLE")] MarketDataFeedAvailable = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum PriceDisplayFormatEnum {
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_0")] PriceDisplayFormatDecimal0 = 0,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_1")] PriceDisplayFormatDecimal1 = 1,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_2")] PriceDisplayFormatDecimal2 = 2,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_3")] PriceDisplayFormatDecimal3 = 3,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_4")] PriceDisplayFormatDecimal4 = 4,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_5")] PriceDisplayFormatDecimal5 = 5,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_6")] PriceDisplayFormatDecimal6 = 6,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_7")] PriceDisplayFormatDecimal7 = 7,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_8")] PriceDisplayFormatDecimal8 = 8,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DECIMAL_9")] PriceDisplayFormatDecimal9 = 9,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_256")] PriceDisplayFormatDenominator256 = 356,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_128")] PriceDisplayFormatDenominator128 = 228,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_64")] PriceDisplayFormatDenominator64 = 164,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_32_QUARTERS")] PriceDisplayFormatDenominator32Quarters = 136,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_32_HALVES")] PriceDisplayFormatDenominator32Halves = 134,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_32")] PriceDisplayFormatDenominator32 = 132,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_16")] PriceDisplayFormatDenominator16 = 116,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_8")] PriceDisplayFormatDenominator8 = 108,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_4")] PriceDisplayFormatDenominator4 = 104,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_DENOMINATOR_2")] PriceDisplayFormatDenominator2 = 102,
    [pbr::OriginalName("PRICE_DISPLAY_FORMAT_UNSET")] PriceDisplayFormatUnset = -1,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum SecurityTypeEnum {
    [pbr::OriginalName("SECURITY_TYPE_UNSET")] SecurityTypeUnset = 0,
    [pbr::OriginalName("SECURITY_TYPE_FUTURE")] SecurityTypeFuture = 1,
    [pbr::OriginalName("SECURITY_TYPE_STOCK")] SecurityTypeStock = 2,
    [pbr::OriginalName("SECURITY_TYPE_FOREX")] SecurityTypeForex = 3,
    [pbr::OriginalName("SECURITY_TYPE_INDEX")] SecurityTypeIndex = 4,
    [pbr::OriginalName("SECURITY_TYPE_FUTURES_STRATEGY")] SecurityTypeFuturesStrategy = 5,
    [pbr::OriginalName("SECURITY_TYPE_FUTURES_OPTION")] SecurityTypeFuturesOption = 7,
    [pbr::OriginalName("SECURITY_TYPE_STOCK_OPTION")] SecurityTypeStockOption = 6,
    [pbr::OriginalName("SECURITY_TYPE_INDEX_OPTION")] SecurityTypeIndexOption = 8,
    [pbr::OriginalName("SECURITY_TYPE_BOND")] SecurityTypeBond = 9,
    [pbr::OriginalName("SECURITY_TYPE_MUTUAL_FUND")] SecurityTypeMutualFund = 10,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum PutCallEnum {
    [pbr::OriginalName("PC_UNSET")] PcUnset = 0,
    [pbr::OriginalName("PC_CALL")] PcCall = 1,
    [pbr::OriginalName("PC_PUT")] PcPut = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum SearchTypeEnum {
    [pbr::OriginalName("SEARCH_TYPE_UNSET")] SearchTypeUnset = 0,
    [pbr::OriginalName("SEARCH_TYPE_BY_SYMBOL")] SearchTypeBySymbol = 1,
    [pbr::OriginalName("SEARCH_TYPE_BY_DESCRIPTION")] SearchTypeByDescription = 2,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum HistoricalDataIntervalEnum {
    [pbr::OriginalName("INTERVAL_TICK")] IntervalTick = 0,
    [pbr::OriginalName("INTERVAL_1_SECOND")] Interval1Second = 1,
    [pbr::OriginalName("INTERVAL_2_SECONDS")] Interval2Seconds = 2,
    [pbr::OriginalName("INTERVAL_4_SECONDS")] Interval4Seconds = 4,
    [pbr::OriginalName("INTERVAL_5_SECONDS")] Interval5Seconds = 5,
    [pbr::OriginalName("INTERVAL_10_SECONDS")] Interval10Seconds = 10,
    [pbr::OriginalName("INTERVAL_30_SECONDS")] Interval30Seconds = 30,
    [pbr::OriginalName("INTERVAL_1_MINUTE")] Interval1Minute = 60,
    [pbr::OriginalName("INTERVAL_1_DAY")] Interval1Day = 86400,
    [pbr::OriginalName("INTERVAL_1_WEEK")] Interval1Week = 604800,
  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public enum HistoricalPriceDataRejectReasonCodeEnum {
    [pbr::OriginalName("HPDR_UNSET")] HpdrUnset = 0,
    [pbr::OriginalName("HPDR_UNABLE_TO_SERVE_DATA_RETRY_LATER")] HpdrUnableToServeDataRetryLater = 1,
    [pbr::OriginalName("HPDR_UNABLE_TO_SERVE_DATA_DO_NOT_RETRY")] HpdrUnableToServeDataDoNotRetry = 2,
    [pbr::OriginalName("HPDR_DATA_REQUEST_OUTSIDE_BOUNDS_OF_AVAILABLE_DATA")] HpdrDataRequestOutsideBoundsOfAvailableData = 3,
    [pbr::OriginalName("HPDR_GENERAL_REJECT_ERROR")] HpdrGeneralRejectError = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class EncodingRequest : pb::IMessage<EncodingRequest> {
    private static readonly pb::MessageParser<EncodingRequest> _parser = new pb::MessageParser<EncodingRequest>(() => new EncodingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncodingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingRequest(EncodingRequest other) : this() {
      protocolVersion_ = other.protocolVersion_;
      encoding_ = other.encoding_;
      protocolType_ = other.protocolType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingRequest Clone() {
      return new EncodingRequest(this);
    }

    /// <summary>Field number for the "ProtocolVersion" field.</summary>
    public const int ProtocolVersionFieldNumber = 1;
    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "Encoding" field.</summary>
    public const int EncodingFieldNumber = 2;
    private global::DTCPB.EncodingEnum encoding_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.EncodingEnum Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "ProtocolType" field.</summary>
    public const int ProtocolTypeFieldNumber = 3;
    private string protocolType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolType {
      get { return protocolType_; }
      set {
        protocolType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncodingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncodingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (Encoding != other.Encoding) return false;
      if (ProtocolType != other.ProtocolType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (ProtocolType.Length != 0) hash ^= ProtocolType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtocolVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProtocolVersion);
      }
      if (Encoding != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Encoding);
      }
      if (ProtocolType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProtocolType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (ProtocolType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncodingRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.ProtocolType.Length != 0) {
        ProtocolType = other.ProtocolType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 16: {
            encoding_ = (global::DTCPB.EncodingEnum) input.ReadEnum();
            break;
          }
          case 26: {
            ProtocolType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class EncodingResponse : pb::IMessage<EncodingResponse> {
    private static readonly pb::MessageParser<EncodingResponse> _parser = new pb::MessageParser<EncodingResponse>(() => new EncodingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncodingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingResponse(EncodingResponse other) : this() {
      protocolVersion_ = other.protocolVersion_;
      encoding_ = other.encoding_;
      protocolType_ = other.protocolType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingResponse Clone() {
      return new EncodingResponse(this);
    }

    /// <summary>Field number for the "ProtocolVersion" field.</summary>
    public const int ProtocolVersionFieldNumber = 1;
    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "Encoding" field.</summary>
    public const int EncodingFieldNumber = 2;
    private global::DTCPB.EncodingEnum encoding_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.EncodingEnum Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "ProtocolType" field.</summary>
    public const int ProtocolTypeFieldNumber = 3;
    private string protocolType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtocolType {
      get { return protocolType_; }
      set {
        protocolType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncodingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncodingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (Encoding != other.Encoding) return false;
      if (ProtocolType != other.ProtocolType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (ProtocolType.Length != 0) hash ^= ProtocolType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtocolVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProtocolVersion);
      }
      if (Encoding != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Encoding);
      }
      if (ProtocolType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProtocolType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (ProtocolType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProtocolType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncodingResponse other) {
      if (other == null) {
        return;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.ProtocolType.Length != 0) {
        ProtocolType = other.ProtocolType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 16: {
            encoding_ = (global::DTCPB.EncodingEnum) input.ReadEnum();
            break;
          }
          case 26: {
            ProtocolType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class LogonRequest : pb::IMessage<LogonRequest> {
    private static readonly pb::MessageParser<LogonRequest> _parser = new pb::MessageParser<LogonRequest>(() => new LogonRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogonRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonRequest(LogonRequest other) : this() {
      protocolVersion_ = other.protocolVersion_;
      username_ = other.username_;
      password_ = other.password_;
      generalTextData_ = other.generalTextData_;
      integer1_ = other.integer1_;
      integer2_ = other.integer2_;
      heartbeatIntervalInSeconds_ = other.heartbeatIntervalInSeconds_;
      tradeMode_ = other.tradeMode_;
      tradeAccount_ = other.tradeAccount_;
      hardwareIdentifier_ = other.hardwareIdentifier_;
      clientName_ = other.clientName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonRequest Clone() {
      return new LogonRequest(this);
    }

    /// <summary>Field number for the "ProtocolVersion" field.</summary>
    public const int ProtocolVersionFieldNumber = 1;
    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GeneralTextData" field.</summary>
    public const int GeneralTextDataFieldNumber = 4;
    private string generalTextData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeneralTextData {
      get { return generalTextData_; }
      set {
        generalTextData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Integer_1" field.</summary>
    public const int Integer1FieldNumber = 5;
    private int integer1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integer1 {
      get { return integer1_; }
      set {
        integer1_ = value;
      }
    }

    /// <summary>Field number for the "Integer_2" field.</summary>
    public const int Integer2FieldNumber = 6;
    private int integer2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integer2 {
      get { return integer2_; }
      set {
        integer2_ = value;
      }
    }

    /// <summary>Field number for the "HeartbeatIntervalInSeconds" field.</summary>
    public const int HeartbeatIntervalInSecondsFieldNumber = 7;
    private int heartbeatIntervalInSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeartbeatIntervalInSeconds {
      get { return heartbeatIntervalInSeconds_; }
      set {
        heartbeatIntervalInSeconds_ = value;
      }
    }

    /// <summary>Field number for the "TradeMode" field.</summary>
    public const int TradeModeFieldNumber = 8;
    private global::DTCPB.TradeModeEnum tradeMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TradeModeEnum TradeMode {
      get { return tradeMode_; }
      set {
        tradeMode_ = value;
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 9;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HardwareIdentifier" field.</summary>
    public const int HardwareIdentifierFieldNumber = 10;
    private string hardwareIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HardwareIdentifier {
      get { return hardwareIdentifier_; }
      set {
        hardwareIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientName" field.</summary>
    public const int ClientNameFieldNumber = 11;
    private string clientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogonRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (GeneralTextData != other.GeneralTextData) return false;
      if (Integer1 != other.Integer1) return false;
      if (Integer2 != other.Integer2) return false;
      if (HeartbeatIntervalInSeconds != other.HeartbeatIntervalInSeconds) return false;
      if (TradeMode != other.TradeMode) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (HardwareIdentifier != other.HardwareIdentifier) return false;
      if (ClientName != other.ClientName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (GeneralTextData.Length != 0) hash ^= GeneralTextData.GetHashCode();
      if (Integer1 != 0) hash ^= Integer1.GetHashCode();
      if (Integer2 != 0) hash ^= Integer2.GetHashCode();
      if (HeartbeatIntervalInSeconds != 0) hash ^= HeartbeatIntervalInSeconds.GetHashCode();
      if (TradeMode != 0) hash ^= TradeMode.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (HardwareIdentifier.Length != 0) hash ^= HardwareIdentifier.GetHashCode();
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtocolVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProtocolVersion);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (GeneralTextData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GeneralTextData);
      }
      if (Integer1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Integer1);
      }
      if (Integer2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Integer2);
      }
      if (HeartbeatIntervalInSeconds != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeartbeatIntervalInSeconds);
      }
      if (TradeMode != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) TradeMode);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TradeAccount);
      }
      if (HardwareIdentifier.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(HardwareIdentifier);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClientName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (GeneralTextData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GeneralTextData);
      }
      if (Integer1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integer1);
      }
      if (Integer2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integer2);
      }
      if (HeartbeatIntervalInSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartbeatIntervalInSeconds);
      }
      if (TradeMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeMode);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (HardwareIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareIdentifier);
      }
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogonRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.GeneralTextData.Length != 0) {
        GeneralTextData = other.GeneralTextData;
      }
      if (other.Integer1 != 0) {
        Integer1 = other.Integer1;
      }
      if (other.Integer2 != 0) {
        Integer2 = other.Integer2;
      }
      if (other.HeartbeatIntervalInSeconds != 0) {
        HeartbeatIntervalInSeconds = other.HeartbeatIntervalInSeconds;
      }
      if (other.TradeMode != 0) {
        TradeMode = other.TradeMode;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.HardwareIdentifier.Length != 0) {
        HardwareIdentifier = other.HardwareIdentifier;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            GeneralTextData = input.ReadString();
            break;
          }
          case 40: {
            Integer1 = input.ReadInt32();
            break;
          }
          case 48: {
            Integer2 = input.ReadInt32();
            break;
          }
          case 56: {
            HeartbeatIntervalInSeconds = input.ReadInt32();
            break;
          }
          case 64: {
            tradeMode_ = (global::DTCPB.TradeModeEnum) input.ReadEnum();
            break;
          }
          case 74: {
            TradeAccount = input.ReadString();
            break;
          }
          case 82: {
            HardwareIdentifier = input.ReadString();
            break;
          }
          case 90: {
            ClientName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class LogonResponse : pb::IMessage<LogonResponse> {
    private static readonly pb::MessageParser<LogonResponse> _parser = new pb::MessageParser<LogonResponse>(() => new LogonResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogonResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonResponse(LogonResponse other) : this() {
      protocolVersion_ = other.protocolVersion_;
      result_ = other.result_;
      resultText_ = other.resultText_;
      reconnectAddress_ = other.reconnectAddress_;
      integer1_ = other.integer1_;
      serverName_ = other.serverName_;
      marketDepthUpdatesBestBidAndAsk_ = other.marketDepthUpdatesBestBidAndAsk_;
      tradingIsSupported_ = other.tradingIsSupported_;
      oCOOrdersSupported_ = other.oCOOrdersSupported_;
      orderCancelReplaceSupported_ = other.orderCancelReplaceSupported_;
      symbolExchangeDelimiter_ = other.symbolExchangeDelimiter_;
      securityDefinitionsSupported_ = other.securityDefinitionsSupported_;
      historicalPriceDataSupported_ = other.historicalPriceDataSupported_;
      resubscribeWhenMarketDataFeedAvailable_ = other.resubscribeWhenMarketDataFeedAvailable_;
      marketDepthIsSupported_ = other.marketDepthIsSupported_;
      oneHistoricalPriceDataRequestPerConnection_ = other.oneHistoricalPriceDataRequestPerConnection_;
      bracketOrdersSupported_ = other.bracketOrdersSupported_;
      useIntegerPriceOrderMessages_ = other.useIntegerPriceOrderMessages_;
      usesMultiplePositionsPerSymbolAndTradeAccount_ = other.usesMultiplePositionsPerSymbolAndTradeAccount_;
      marketDataSupported_ = other.marketDataSupported_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogonResponse Clone() {
      return new LogonResponse(this);
    }

    /// <summary>Field number for the "ProtocolVersion" field.</summary>
    public const int ProtocolVersionFieldNumber = 1;
    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::DTCPB.LogonStatusEnum result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.LogonStatusEnum Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ResultText" field.</summary>
    public const int ResultTextFieldNumber = 3;
    private string resultText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResultText {
      get { return resultText_; }
      set {
        resultText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ReconnectAddress" field.</summary>
    public const int ReconnectAddressFieldNumber = 4;
    private string reconnectAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReconnectAddress {
      get { return reconnectAddress_; }
      set {
        reconnectAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Integer_1" field.</summary>
    public const int Integer1FieldNumber = 5;
    private int integer1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integer1 {
      get { return integer1_; }
      set {
        integer1_ = value;
      }
    }

    /// <summary>Field number for the "ServerName" field.</summary>
    public const int ServerNameFieldNumber = 6;
    private string serverName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MarketDepthUpdatesBestBidAndAsk" field.</summary>
    public const int MarketDepthUpdatesBestBidAndAskFieldNumber = 7;
    private uint marketDepthUpdatesBestBidAndAsk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MarketDepthUpdatesBestBidAndAsk {
      get { return marketDepthUpdatesBestBidAndAsk_; }
      set {
        marketDepthUpdatesBestBidAndAsk_ = value;
      }
    }

    /// <summary>Field number for the "TradingIsSupported" field.</summary>
    public const int TradingIsSupportedFieldNumber = 8;
    private uint tradingIsSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingIsSupported {
      get { return tradingIsSupported_; }
      set {
        tradingIsSupported_ = value;
      }
    }

    /// <summary>Field number for the "OCOOrdersSupported" field.</summary>
    public const int OCOOrdersSupportedFieldNumber = 9;
    private uint oCOOrdersSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OCOOrdersSupported {
      get { return oCOOrdersSupported_; }
      set {
        oCOOrdersSupported_ = value;
      }
    }

    /// <summary>Field number for the "OrderCancelReplaceSupported" field.</summary>
    public const int OrderCancelReplaceSupportedFieldNumber = 10;
    private uint orderCancelReplaceSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OrderCancelReplaceSupported {
      get { return orderCancelReplaceSupported_; }
      set {
        orderCancelReplaceSupported_ = value;
      }
    }

    /// <summary>Field number for the "SymbolExchangeDelimiter" field.</summary>
    public const int SymbolExchangeDelimiterFieldNumber = 11;
    private string symbolExchangeDelimiter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolExchangeDelimiter {
      get { return symbolExchangeDelimiter_; }
      set {
        symbolExchangeDelimiter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecurityDefinitionsSupported" field.</summary>
    public const int SecurityDefinitionsSupportedFieldNumber = 12;
    private uint securityDefinitionsSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecurityDefinitionsSupported {
      get { return securityDefinitionsSupported_; }
      set {
        securityDefinitionsSupported_ = value;
      }
    }

    /// <summary>Field number for the "HistoricalPriceDataSupported" field.</summary>
    public const int HistoricalPriceDataSupportedFieldNumber = 13;
    private uint historicalPriceDataSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HistoricalPriceDataSupported {
      get { return historicalPriceDataSupported_; }
      set {
        historicalPriceDataSupported_ = value;
      }
    }

    /// <summary>Field number for the "ResubscribeWhenMarketDataFeedAvailable" field.</summary>
    public const int ResubscribeWhenMarketDataFeedAvailableFieldNumber = 14;
    private uint resubscribeWhenMarketDataFeedAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResubscribeWhenMarketDataFeedAvailable {
      get { return resubscribeWhenMarketDataFeedAvailable_; }
      set {
        resubscribeWhenMarketDataFeedAvailable_ = value;
      }
    }

    /// <summary>Field number for the "MarketDepthIsSupported" field.</summary>
    public const int MarketDepthIsSupportedFieldNumber = 15;
    private uint marketDepthIsSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MarketDepthIsSupported {
      get { return marketDepthIsSupported_; }
      set {
        marketDepthIsSupported_ = value;
      }
    }

    /// <summary>Field number for the "OneHistoricalPriceDataRequestPerConnection" field.</summary>
    public const int OneHistoricalPriceDataRequestPerConnectionFieldNumber = 16;
    private uint oneHistoricalPriceDataRequestPerConnection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OneHistoricalPriceDataRequestPerConnection {
      get { return oneHistoricalPriceDataRequestPerConnection_; }
      set {
        oneHistoricalPriceDataRequestPerConnection_ = value;
      }
    }

    /// <summary>Field number for the "BracketOrdersSupported" field.</summary>
    public const int BracketOrdersSupportedFieldNumber = 17;
    private uint bracketOrdersSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BracketOrdersSupported {
      get { return bracketOrdersSupported_; }
      set {
        bracketOrdersSupported_ = value;
      }
    }

    /// <summary>Field number for the "UseIntegerPriceOrderMessages" field.</summary>
    public const int UseIntegerPriceOrderMessagesFieldNumber = 18;
    private uint useIntegerPriceOrderMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseIntegerPriceOrderMessages {
      get { return useIntegerPriceOrderMessages_; }
      set {
        useIntegerPriceOrderMessages_ = value;
      }
    }

    /// <summary>Field number for the "UsesMultiplePositionsPerSymbolAndTradeAccount" field.</summary>
    public const int UsesMultiplePositionsPerSymbolAndTradeAccountFieldNumber = 19;
    private uint usesMultiplePositionsPerSymbolAndTradeAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsesMultiplePositionsPerSymbolAndTradeAccount {
      get { return usesMultiplePositionsPerSymbolAndTradeAccount_; }
      set {
        usesMultiplePositionsPerSymbolAndTradeAccount_ = value;
      }
    }

    /// <summary>Field number for the "MarketDataSupported" field.</summary>
    public const int MarketDataSupportedFieldNumber = 20;
    private uint marketDataSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MarketDataSupported {
      get { return marketDataSupported_; }
      set {
        marketDataSupported_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogonResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogonResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (Result != other.Result) return false;
      if (ResultText != other.ResultText) return false;
      if (ReconnectAddress != other.ReconnectAddress) return false;
      if (Integer1 != other.Integer1) return false;
      if (ServerName != other.ServerName) return false;
      if (MarketDepthUpdatesBestBidAndAsk != other.MarketDepthUpdatesBestBidAndAsk) return false;
      if (TradingIsSupported != other.TradingIsSupported) return false;
      if (OCOOrdersSupported != other.OCOOrdersSupported) return false;
      if (OrderCancelReplaceSupported != other.OrderCancelReplaceSupported) return false;
      if (SymbolExchangeDelimiter != other.SymbolExchangeDelimiter) return false;
      if (SecurityDefinitionsSupported != other.SecurityDefinitionsSupported) return false;
      if (HistoricalPriceDataSupported != other.HistoricalPriceDataSupported) return false;
      if (ResubscribeWhenMarketDataFeedAvailable != other.ResubscribeWhenMarketDataFeedAvailable) return false;
      if (MarketDepthIsSupported != other.MarketDepthIsSupported) return false;
      if (OneHistoricalPriceDataRequestPerConnection != other.OneHistoricalPriceDataRequestPerConnection) return false;
      if (BracketOrdersSupported != other.BracketOrdersSupported) return false;
      if (UseIntegerPriceOrderMessages != other.UseIntegerPriceOrderMessages) return false;
      if (UsesMultiplePositionsPerSymbolAndTradeAccount != other.UsesMultiplePositionsPerSymbolAndTradeAccount) return false;
      if (MarketDataSupported != other.MarketDataSupported) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ResultText.Length != 0) hash ^= ResultText.GetHashCode();
      if (ReconnectAddress.Length != 0) hash ^= ReconnectAddress.GetHashCode();
      if (Integer1 != 0) hash ^= Integer1.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (MarketDepthUpdatesBestBidAndAsk != 0) hash ^= MarketDepthUpdatesBestBidAndAsk.GetHashCode();
      if (TradingIsSupported != 0) hash ^= TradingIsSupported.GetHashCode();
      if (OCOOrdersSupported != 0) hash ^= OCOOrdersSupported.GetHashCode();
      if (OrderCancelReplaceSupported != 0) hash ^= OrderCancelReplaceSupported.GetHashCode();
      if (SymbolExchangeDelimiter.Length != 0) hash ^= SymbolExchangeDelimiter.GetHashCode();
      if (SecurityDefinitionsSupported != 0) hash ^= SecurityDefinitionsSupported.GetHashCode();
      if (HistoricalPriceDataSupported != 0) hash ^= HistoricalPriceDataSupported.GetHashCode();
      if (ResubscribeWhenMarketDataFeedAvailable != 0) hash ^= ResubscribeWhenMarketDataFeedAvailable.GetHashCode();
      if (MarketDepthIsSupported != 0) hash ^= MarketDepthIsSupported.GetHashCode();
      if (OneHistoricalPriceDataRequestPerConnection != 0) hash ^= OneHistoricalPriceDataRequestPerConnection.GetHashCode();
      if (BracketOrdersSupported != 0) hash ^= BracketOrdersSupported.GetHashCode();
      if (UseIntegerPriceOrderMessages != 0) hash ^= UseIntegerPriceOrderMessages.GetHashCode();
      if (UsesMultiplePositionsPerSymbolAndTradeAccount != 0) hash ^= UsesMultiplePositionsPerSymbolAndTradeAccount.GetHashCode();
      if (MarketDataSupported != 0) hash ^= MarketDataSupported.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtocolVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProtocolVersion);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (ResultText.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResultText);
      }
      if (ReconnectAddress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReconnectAddress);
      }
      if (Integer1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Integer1);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServerName);
      }
      if (MarketDepthUpdatesBestBidAndAsk != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MarketDepthUpdatesBestBidAndAsk);
      }
      if (TradingIsSupported != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TradingIsSupported);
      }
      if (OCOOrdersSupported != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(OCOOrdersSupported);
      }
      if (OrderCancelReplaceSupported != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(OrderCancelReplaceSupported);
      }
      if (SymbolExchangeDelimiter.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SymbolExchangeDelimiter);
      }
      if (SecurityDefinitionsSupported != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SecurityDefinitionsSupported);
      }
      if (HistoricalPriceDataSupported != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(HistoricalPriceDataSupported);
      }
      if (ResubscribeWhenMarketDataFeedAvailable != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(ResubscribeWhenMarketDataFeedAvailable);
      }
      if (MarketDepthIsSupported != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MarketDepthIsSupported);
      }
      if (OneHistoricalPriceDataRequestPerConnection != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(OneHistoricalPriceDataRequestPerConnection);
      }
      if (BracketOrdersSupported != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(BracketOrdersSupported);
      }
      if (UseIntegerPriceOrderMessages != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(UseIntegerPriceOrderMessages);
      }
      if (UsesMultiplePositionsPerSymbolAndTradeAccount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(UsesMultiplePositionsPerSymbolAndTradeAccount);
      }
      if (MarketDataSupported != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(MarketDataSupported);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (ResultText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResultText);
      }
      if (ReconnectAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReconnectAddress);
      }
      if (Integer1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integer1);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (MarketDepthUpdatesBestBidAndAsk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarketDepthUpdatesBestBidAndAsk);
      }
      if (TradingIsSupported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingIsSupported);
      }
      if (OCOOrdersSupported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OCOOrdersSupported);
      }
      if (OrderCancelReplaceSupported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrderCancelReplaceSupported);
      }
      if (SymbolExchangeDelimiter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolExchangeDelimiter);
      }
      if (SecurityDefinitionsSupported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecurityDefinitionsSupported);
      }
      if (HistoricalPriceDataSupported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HistoricalPriceDataSupported);
      }
      if (ResubscribeWhenMarketDataFeedAvailable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResubscribeWhenMarketDataFeedAvailable);
      }
      if (MarketDepthIsSupported != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarketDepthIsSupported);
      }
      if (OneHistoricalPriceDataRequestPerConnection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OneHistoricalPriceDataRequestPerConnection);
      }
      if (BracketOrdersSupported != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BracketOrdersSupported);
      }
      if (UseIntegerPriceOrderMessages != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UseIntegerPriceOrderMessages);
      }
      if (UsesMultiplePositionsPerSymbolAndTradeAccount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UsesMultiplePositionsPerSymbolAndTradeAccount);
      }
      if (MarketDataSupported != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MarketDataSupported);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogonResponse other) {
      if (other == null) {
        return;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ResultText.Length != 0) {
        ResultText = other.ResultText;
      }
      if (other.ReconnectAddress.Length != 0) {
        ReconnectAddress = other.ReconnectAddress;
      }
      if (other.Integer1 != 0) {
        Integer1 = other.Integer1;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      if (other.MarketDepthUpdatesBestBidAndAsk != 0) {
        MarketDepthUpdatesBestBidAndAsk = other.MarketDepthUpdatesBestBidAndAsk;
      }
      if (other.TradingIsSupported != 0) {
        TradingIsSupported = other.TradingIsSupported;
      }
      if (other.OCOOrdersSupported != 0) {
        OCOOrdersSupported = other.OCOOrdersSupported;
      }
      if (other.OrderCancelReplaceSupported != 0) {
        OrderCancelReplaceSupported = other.OrderCancelReplaceSupported;
      }
      if (other.SymbolExchangeDelimiter.Length != 0) {
        SymbolExchangeDelimiter = other.SymbolExchangeDelimiter;
      }
      if (other.SecurityDefinitionsSupported != 0) {
        SecurityDefinitionsSupported = other.SecurityDefinitionsSupported;
      }
      if (other.HistoricalPriceDataSupported != 0) {
        HistoricalPriceDataSupported = other.HistoricalPriceDataSupported;
      }
      if (other.ResubscribeWhenMarketDataFeedAvailable != 0) {
        ResubscribeWhenMarketDataFeedAvailable = other.ResubscribeWhenMarketDataFeedAvailable;
      }
      if (other.MarketDepthIsSupported != 0) {
        MarketDepthIsSupported = other.MarketDepthIsSupported;
      }
      if (other.OneHistoricalPriceDataRequestPerConnection != 0) {
        OneHistoricalPriceDataRequestPerConnection = other.OneHistoricalPriceDataRequestPerConnection;
      }
      if (other.BracketOrdersSupported != 0) {
        BracketOrdersSupported = other.BracketOrdersSupported;
      }
      if (other.UseIntegerPriceOrderMessages != 0) {
        UseIntegerPriceOrderMessages = other.UseIntegerPriceOrderMessages;
      }
      if (other.UsesMultiplePositionsPerSymbolAndTradeAccount != 0) {
        UsesMultiplePositionsPerSymbolAndTradeAccount = other.UsesMultiplePositionsPerSymbolAndTradeAccount;
      }
      if (other.MarketDataSupported != 0) {
        MarketDataSupported = other.MarketDataSupported;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 16: {
            result_ = (global::DTCPB.LogonStatusEnum) input.ReadEnum();
            break;
          }
          case 26: {
            ResultText = input.ReadString();
            break;
          }
          case 34: {
            ReconnectAddress = input.ReadString();
            break;
          }
          case 40: {
            Integer1 = input.ReadInt32();
            break;
          }
          case 50: {
            ServerName = input.ReadString();
            break;
          }
          case 56: {
            MarketDepthUpdatesBestBidAndAsk = input.ReadUInt32();
            break;
          }
          case 64: {
            TradingIsSupported = input.ReadUInt32();
            break;
          }
          case 72: {
            OCOOrdersSupported = input.ReadUInt32();
            break;
          }
          case 80: {
            OrderCancelReplaceSupported = input.ReadUInt32();
            break;
          }
          case 90: {
            SymbolExchangeDelimiter = input.ReadString();
            break;
          }
          case 96: {
            SecurityDefinitionsSupported = input.ReadUInt32();
            break;
          }
          case 104: {
            HistoricalPriceDataSupported = input.ReadUInt32();
            break;
          }
          case 112: {
            ResubscribeWhenMarketDataFeedAvailable = input.ReadUInt32();
            break;
          }
          case 120: {
            MarketDepthIsSupported = input.ReadUInt32();
            break;
          }
          case 128: {
            OneHistoricalPriceDataRequestPerConnection = input.ReadUInt32();
            break;
          }
          case 136: {
            BracketOrdersSupported = input.ReadUInt32();
            break;
          }
          case 144: {
            UseIntegerPriceOrderMessages = input.ReadUInt32();
            break;
          }
          case 152: {
            UsesMultiplePositionsPerSymbolAndTradeAccount = input.ReadUInt32();
            break;
          }
          case 160: {
            MarketDataSupported = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class Logoff : pb::IMessage<Logoff> {
    private static readonly pb::MessageParser<Logoff> _parser = new pb::MessageParser<Logoff>(() => new Logoff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Logoff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logoff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logoff(Logoff other) : this() {
      reason_ = other.reason_;
      doNotReconnect_ = other.doNotReconnect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logoff Clone() {
      return new Logoff(this);
    }

    /// <summary>Field number for the "Reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DoNotReconnect" field.</summary>
    public const int DoNotReconnectFieldNumber = 2;
    private uint doNotReconnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DoNotReconnect {
      get { return doNotReconnect_; }
      set {
        doNotReconnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Logoff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Logoff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      if (DoNotReconnect != other.DoNotReconnect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (DoNotReconnect != 0) hash ^= DoNotReconnect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Reason);
      }
      if (DoNotReconnect != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DoNotReconnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (DoNotReconnect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DoNotReconnect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Logoff other) {
      if (other == null) {
        return;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.DoNotReconnect != 0) {
        DoNotReconnect = other.DoNotReconnect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Reason = input.ReadString();
            break;
          }
          case 16: {
            DoNotReconnect = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      numDroppedMessages_ = other.numDroppedMessages_;
      currentDateTime_ = other.currentDateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "NumDroppedMessages" field.</summary>
    public const int NumDroppedMessagesFieldNumber = 1;
    private uint numDroppedMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumDroppedMessages {
      get { return numDroppedMessages_; }
      set {
        numDroppedMessages_ = value;
      }
    }

    /// <summary>Field number for the "CurrentDateTime" field.</summary>
    public const int CurrentDateTimeFieldNumber = 2;
    private long currentDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentDateTime {
      get { return currentDateTime_; }
      set {
        currentDateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumDroppedMessages != other.NumDroppedMessages) return false;
      if (CurrentDateTime != other.CurrentDateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumDroppedMessages != 0) hash ^= NumDroppedMessages.GetHashCode();
      if (CurrentDateTime != 0L) hash ^= CurrentDateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumDroppedMessages != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumDroppedMessages);
      }
      if (CurrentDateTime != 0L) {
        output.WriteRawTag(17);
        output.WriteSFixed64(CurrentDateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumDroppedMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumDroppedMessages);
      }
      if (CurrentDateTime != 0L) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.NumDroppedMessages != 0) {
        NumDroppedMessages = other.NumDroppedMessages;
      }
      if (other.CurrentDateTime != 0L) {
        CurrentDateTime = other.CurrentDateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumDroppedMessages = input.ReadUInt32();
            break;
          }
          case 17: {
            CurrentDateTime = input.ReadSFixed64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataFeedStatus : pb::IMessage<MarketDataFeedStatus> {
    private static readonly pb::MessageParser<MarketDataFeedStatus> _parser = new pb::MessageParser<MarketDataFeedStatus>(() => new MarketDataFeedStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataFeedStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataFeedStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataFeedStatus(MarketDataFeedStatus other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataFeedStatus Clone() {
      return new MarketDataFeedStatus(this);
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::DTCPB.MarketDataFeedStatusEnum status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.MarketDataFeedStatusEnum Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataFeedStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataFeedStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataFeedStatus other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::DTCPB.MarketDataFeedStatusEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataFeedSymbolStatus : pb::IMessage<MarketDataFeedSymbolStatus> {
    private static readonly pb::MessageParser<MarketDataFeedSymbolStatus> _parser = new pb::MessageParser<MarketDataFeedSymbolStatus>(() => new MarketDataFeedSymbolStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataFeedSymbolStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataFeedSymbolStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataFeedSymbolStatus(MarketDataFeedSymbolStatus other) : this() {
      symbolID_ = other.symbolID_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataFeedSymbolStatus Clone() {
      return new MarketDataFeedSymbolStatus(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DTCPB.MarketDataFeedStatusEnum status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.MarketDataFeedStatusEnum Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataFeedSymbolStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataFeedSymbolStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataFeedSymbolStatus other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            status_ = (global::DTCPB.MarketDataFeedStatusEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataRequest : pb::IMessage<MarketDataRequest> {
    private static readonly pb::MessageParser<MarketDataRequest> _parser = new pb::MessageParser<MarketDataRequest>(() => new MarketDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequest(MarketDataRequest other) : this() {
      requestAction_ = other.requestAction_;
      symbolID_ = other.symbolID_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequest Clone() {
      return new MarketDataRequest(this);
    }

    /// <summary>Field number for the "RequestAction" field.</summary>
    public const int RequestActionFieldNumber = 1;
    private global::DTCPB.RequestActionEnum requestAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.RequestActionEnum RequestAction {
      get { return requestAction_; }
      set {
        requestAction_ = value;
      }
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 2;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 4;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestAction != other.RequestAction) return false;
      if (SymbolID != other.SymbolID) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestAction != 0) hash ^= RequestAction.GetHashCode();
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestAction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestAction);
      }
      if (SymbolID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SymbolID);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Exchange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestAction);
      }
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestAction != 0) {
        RequestAction = other.RequestAction;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            requestAction_ = (global::DTCPB.RequestActionEnum) input.ReadEnum();
            break;
          }
          case 16: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Exchange = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthRequest : pb::IMessage<MarketDepthRequest> {
    private static readonly pb::MessageParser<MarketDepthRequest> _parser = new pb::MessageParser<MarketDepthRequest>(() => new MarketDepthRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthRequest(MarketDepthRequest other) : this() {
      requestAction_ = other.requestAction_;
      symbolID_ = other.symbolID_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      numLevels_ = other.numLevels_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthRequest Clone() {
      return new MarketDepthRequest(this);
    }

    /// <summary>Field number for the "RequestAction" field.</summary>
    public const int RequestActionFieldNumber = 1;
    private global::DTCPB.RequestActionEnum requestAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.RequestActionEnum RequestAction {
      get { return requestAction_; }
      set {
        requestAction_ = value;
      }
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 2;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 4;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NumLevels" field.</summary>
    public const int NumLevelsFieldNumber = 5;
    private int numLevels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumLevels {
      get { return numLevels_; }
      set {
        numLevels_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestAction != other.RequestAction) return false;
      if (SymbolID != other.SymbolID) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (NumLevels != other.NumLevels) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestAction != 0) hash ^= RequestAction.GetHashCode();
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (NumLevels != 0) hash ^= NumLevels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestAction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestAction);
      }
      if (SymbolID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SymbolID);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Exchange);
      }
      if (NumLevels != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumLevels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestAction);
      }
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (NumLevels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumLevels);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestAction != 0) {
        RequestAction = other.RequestAction;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.NumLevels != 0) {
        NumLevels = other.NumLevels;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            requestAction_ = (global::DTCPB.RequestActionEnum) input.ReadEnum();
            break;
          }
          case 16: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Exchange = input.ReadString();
            break;
          }
          case 40: {
            NumLevels = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataReject : pb::IMessage<MarketDataReject> {
    private static readonly pb::MessageParser<MarketDataReject> _parser = new pb::MessageParser<MarketDataReject>(() => new MarketDataReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataReject(MarketDataReject other) : this() {
      symbolID_ = other.symbolID_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataReject Clone() {
      return new MarketDataReject(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataReject other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataSnapshot : pb::IMessage<MarketDataSnapshot> {
    private static readonly pb::MessageParser<MarketDataSnapshot> _parser = new pb::MessageParser<MarketDataSnapshot>(() => new MarketDataSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataSnapshot(MarketDataSnapshot other) : this() {
      symbolID_ = other.symbolID_;
      sessionSettlementPrice_ = other.sessionSettlementPrice_;
      sessionOpenPrice_ = other.sessionOpenPrice_;
      sessionHighPrice_ = other.sessionHighPrice_;
      sessionLowPrice_ = other.sessionLowPrice_;
      sessionVolume_ = other.sessionVolume_;
      sessionNumTrades_ = other.sessionNumTrades_;
      openInterest_ = other.openInterest_;
      bidPrice_ = other.bidPrice_;
      askPrice_ = other.askPrice_;
      askQuantity_ = other.askQuantity_;
      bidQuantity_ = other.bidQuantity_;
      lastTradePrice_ = other.lastTradePrice_;
      lastTradeVolume_ = other.lastTradeVolume_;
      lastTradeDateTime_ = other.lastTradeDateTime_;
      bidAskDateTime_ = other.bidAskDateTime_;
      sessionSettlementDateTime_ = other.sessionSettlementDateTime_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataSnapshot Clone() {
      return new MarketDataSnapshot(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "SessionSettlementPrice" field.</summary>
    public const int SessionSettlementPriceFieldNumber = 2;
    private double sessionSettlementPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SessionSettlementPrice {
      get { return sessionSettlementPrice_; }
      set {
        sessionSettlementPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionOpenPrice" field.</summary>
    public const int SessionOpenPriceFieldNumber = 3;
    private double sessionOpenPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SessionOpenPrice {
      get { return sessionOpenPrice_; }
      set {
        sessionOpenPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionHighPrice" field.</summary>
    public const int SessionHighPriceFieldNumber = 4;
    private double sessionHighPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SessionHighPrice {
      get { return sessionHighPrice_; }
      set {
        sessionHighPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionLowPrice" field.</summary>
    public const int SessionLowPriceFieldNumber = 5;
    private double sessionLowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SessionLowPrice {
      get { return sessionLowPrice_; }
      set {
        sessionLowPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionVolume" field.</summary>
    public const int SessionVolumeFieldNumber = 6;
    private double sessionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SessionVolume {
      get { return sessionVolume_; }
      set {
        sessionVolume_ = value;
      }
    }

    /// <summary>Field number for the "SessionNumTrades" field.</summary>
    public const int SessionNumTradesFieldNumber = 7;
    private uint sessionNumTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SessionNumTrades {
      get { return sessionNumTrades_; }
      set {
        sessionNumTrades_ = value;
      }
    }

    /// <summary>Field number for the "OpenInterest" field.</summary>
    public const int OpenInterestFieldNumber = 8;
    private uint openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "BidPrice" field.</summary>
    public const int BidPriceFieldNumber = 9;
    private double bidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "AskPrice" field.</summary>
    public const int AskPriceFieldNumber = 10;
    private double askPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "AskQuantity" field.</summary>
    public const int AskQuantityFieldNumber = 11;
    private double askQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = value;
      }
    }

    /// <summary>Field number for the "BidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 12;
    private double bidQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    /// <summary>Field number for the "LastTradePrice" field.</summary>
    public const int LastTradePriceFieldNumber = 13;
    private double lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "LastTradeVolume" field.</summary>
    public const int LastTradeVolumeFieldNumber = 14;
    private double lastTradeVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradeVolume {
      get { return lastTradeVolume_; }
      set {
        lastTradeVolume_ = value;
      }
    }

    /// <summary>Field number for the "LastTradeDateTime" field.</summary>
    public const int LastTradeDateTimeFieldNumber = 15;
    private double lastTradeDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradeDateTime {
      get { return lastTradeDateTime_; }
      set {
        lastTradeDateTime_ = value;
      }
    }

    /// <summary>Field number for the "BidAskDateTime" field.</summary>
    public const int BidAskDateTimeFieldNumber = 16;
    private double bidAskDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidAskDateTime {
      get { return bidAskDateTime_; }
      set {
        bidAskDateTime_ = value;
      }
    }

    /// <summary>Field number for the "SessionSettlementDateTime" field.</summary>
    public const int SessionSettlementDateTimeFieldNumber = 17;
    private uint sessionSettlementDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SessionSettlementDateTime {
      get { return sessionSettlementDateTime_; }
      set {
        sessionSettlementDateTime_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 18;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionSettlementPrice, other.SessionSettlementPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionOpenPrice, other.SessionOpenPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionHighPrice, other.SessionHighPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionLowPrice, other.SessionLowPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SessionVolume, other.SessionVolume)) return false;
      if (SessionNumTrades != other.SessionNumTrades) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPrice, other.BidPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPrice, other.AskPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskQuantity, other.AskQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidQuantity, other.BidQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradeVolume, other.LastTradeVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradeDateTime, other.LastTradeDateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidAskDateTime, other.BidAskDateTime)) return false;
      if (SessionSettlementDateTime != other.SessionSettlementDateTime) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (SessionSettlementPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionSettlementPrice);
      if (SessionOpenPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionOpenPrice);
      if (SessionHighPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionHighPrice);
      if (SessionLowPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionLowPrice);
      if (SessionVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SessionVolume);
      if (SessionNumTrades != 0) hash ^= SessionNumTrades.GetHashCode();
      if (OpenInterest != 0) hash ^= OpenInterest.GetHashCode();
      if (BidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPrice);
      if (AskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPrice);
      if (AskQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskQuantity);
      if (BidQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidQuantity);
      if (LastTradePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradePrice);
      if (LastTradeVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradeVolume);
      if (LastTradeDateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradeDateTime);
      if (BidAskDateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidAskDateTime);
      if (SessionSettlementDateTime != 0) hash ^= SessionSettlementDateTime.GetHashCode();
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (SessionSettlementPrice != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SessionSettlementPrice);
      }
      if (SessionOpenPrice != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SessionOpenPrice);
      }
      if (SessionHighPrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SessionHighPrice);
      }
      if (SessionLowPrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SessionLowPrice);
      }
      if (SessionVolume != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SessionVolume);
      }
      if (SessionNumTrades != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SessionNumTrades);
      }
      if (OpenInterest != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(OpenInterest);
      }
      if (BidPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(BidPrice);
      }
      if (AskPrice != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(AskPrice);
      }
      if (AskQuantity != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AskQuantity);
      }
      if (BidQuantity != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(BidQuantity);
      }
      if (LastTradePrice != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(LastTradePrice);
      }
      if (LastTradeVolume != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(LastTradeVolume);
      }
      if (LastTradeDateTime != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(LastTradeDateTime);
      }
      if (BidAskDateTime != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(BidAskDateTime);
      }
      if (SessionSettlementDateTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(SessionSettlementDateTime);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (SessionSettlementPrice != 0D) {
        size += 1 + 8;
      }
      if (SessionOpenPrice != 0D) {
        size += 1 + 8;
      }
      if (SessionHighPrice != 0D) {
        size += 1 + 8;
      }
      if (SessionLowPrice != 0D) {
        size += 1 + 8;
      }
      if (SessionVolume != 0D) {
        size += 1 + 8;
      }
      if (SessionNumTrades != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionNumTrades);
      }
      if (OpenInterest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenInterest);
      }
      if (BidPrice != 0D) {
        size += 1 + 8;
      }
      if (AskPrice != 0D) {
        size += 1 + 8;
      }
      if (AskQuantity != 0D) {
        size += 1 + 8;
      }
      if (BidQuantity != 0D) {
        size += 1 + 8;
      }
      if (LastTradePrice != 0D) {
        size += 1 + 8;
      }
      if (LastTradeVolume != 0D) {
        size += 1 + 8;
      }
      if (LastTradeDateTime != 0D) {
        size += 1 + 8;
      }
      if (BidAskDateTime != 0D) {
        size += 2 + 8;
      }
      if (SessionSettlementDateTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SessionSettlementDateTime);
      }
      if (TradingSessionDate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.SessionSettlementPrice != 0D) {
        SessionSettlementPrice = other.SessionSettlementPrice;
      }
      if (other.SessionOpenPrice != 0D) {
        SessionOpenPrice = other.SessionOpenPrice;
      }
      if (other.SessionHighPrice != 0D) {
        SessionHighPrice = other.SessionHighPrice;
      }
      if (other.SessionLowPrice != 0D) {
        SessionLowPrice = other.SessionLowPrice;
      }
      if (other.SessionVolume != 0D) {
        SessionVolume = other.SessionVolume;
      }
      if (other.SessionNumTrades != 0) {
        SessionNumTrades = other.SessionNumTrades;
      }
      if (other.OpenInterest != 0) {
        OpenInterest = other.OpenInterest;
      }
      if (other.BidPrice != 0D) {
        BidPrice = other.BidPrice;
      }
      if (other.AskPrice != 0D) {
        AskPrice = other.AskPrice;
      }
      if (other.AskQuantity != 0D) {
        AskQuantity = other.AskQuantity;
      }
      if (other.BidQuantity != 0D) {
        BidQuantity = other.BidQuantity;
      }
      if (other.LastTradePrice != 0D) {
        LastTradePrice = other.LastTradePrice;
      }
      if (other.LastTradeVolume != 0D) {
        LastTradeVolume = other.LastTradeVolume;
      }
      if (other.LastTradeDateTime != 0D) {
        LastTradeDateTime = other.LastTradeDateTime;
      }
      if (other.BidAskDateTime != 0D) {
        BidAskDateTime = other.BidAskDateTime;
      }
      if (other.SessionSettlementDateTime != 0) {
        SessionSettlementDateTime = other.SessionSettlementDateTime;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            SessionSettlementPrice = input.ReadDouble();
            break;
          }
          case 25: {
            SessionOpenPrice = input.ReadDouble();
            break;
          }
          case 33: {
            SessionHighPrice = input.ReadDouble();
            break;
          }
          case 41: {
            SessionLowPrice = input.ReadDouble();
            break;
          }
          case 49: {
            SessionVolume = input.ReadDouble();
            break;
          }
          case 56: {
            SessionNumTrades = input.ReadUInt32();
            break;
          }
          case 64: {
            OpenInterest = input.ReadUInt32();
            break;
          }
          case 73: {
            BidPrice = input.ReadDouble();
            break;
          }
          case 81: {
            AskPrice = input.ReadDouble();
            break;
          }
          case 89: {
            AskQuantity = input.ReadDouble();
            break;
          }
          case 97: {
            BidQuantity = input.ReadDouble();
            break;
          }
          case 105: {
            LastTradePrice = input.ReadDouble();
            break;
          }
          case 113: {
            LastTradeVolume = input.ReadDouble();
            break;
          }
          case 121: {
            LastTradeDateTime = input.ReadDouble();
            break;
          }
          case 129: {
            BidAskDateTime = input.ReadDouble();
            break;
          }
          case 136: {
            SessionSettlementDateTime = input.ReadUInt32();
            break;
          }
          case 144: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataSnapshot_Int : pb::IMessage<MarketDataSnapshot_Int> {
    private static readonly pb::MessageParser<MarketDataSnapshot_Int> _parser = new pb::MessageParser<MarketDataSnapshot_Int>(() => new MarketDataSnapshot_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataSnapshot_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataSnapshot_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataSnapshot_Int(MarketDataSnapshot_Int other) : this() {
      symbolID_ = other.symbolID_;
      sessionSettlementPrice_ = other.sessionSettlementPrice_;
      sessionOpenPrice_ = other.sessionOpenPrice_;
      sessionHighPrice_ = other.sessionHighPrice_;
      sessionLowPrice_ = other.sessionLowPrice_;
      sessionVolume_ = other.sessionVolume_;
      sessionNumTrades_ = other.sessionNumTrades_;
      openInterest_ = other.openInterest_;
      bidPrice_ = other.bidPrice_;
      askPrice_ = other.askPrice_;
      askQuantity_ = other.askQuantity_;
      bidQuantity_ = other.bidQuantity_;
      lastTradePrice_ = other.lastTradePrice_;
      lastTradeVolume_ = other.lastTradeVolume_;
      lastTradeDateTime_ = other.lastTradeDateTime_;
      bidAskDateTime_ = other.bidAskDateTime_;
      sessionSettlementDateTime_ = other.sessionSettlementDateTime_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataSnapshot_Int Clone() {
      return new MarketDataSnapshot_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "SessionSettlementPrice" field.</summary>
    public const int SessionSettlementPriceFieldNumber = 2;
    private int sessionSettlementPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionSettlementPrice {
      get { return sessionSettlementPrice_; }
      set {
        sessionSettlementPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionOpenPrice" field.</summary>
    public const int SessionOpenPriceFieldNumber = 3;
    private int sessionOpenPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionOpenPrice {
      get { return sessionOpenPrice_; }
      set {
        sessionOpenPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionHighPrice" field.</summary>
    public const int SessionHighPriceFieldNumber = 4;
    private int sessionHighPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionHighPrice {
      get { return sessionHighPrice_; }
      set {
        sessionHighPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionLowPrice" field.</summary>
    public const int SessionLowPriceFieldNumber = 5;
    private int sessionLowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionLowPrice {
      get { return sessionLowPrice_; }
      set {
        sessionLowPrice_ = value;
      }
    }

    /// <summary>Field number for the "SessionVolume" field.</summary>
    public const int SessionVolumeFieldNumber = 6;
    private int sessionVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SessionVolume {
      get { return sessionVolume_; }
      set {
        sessionVolume_ = value;
      }
    }

    /// <summary>Field number for the "SessionNumTrades" field.</summary>
    public const int SessionNumTradesFieldNumber = 7;
    private uint sessionNumTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SessionNumTrades {
      get { return sessionNumTrades_; }
      set {
        sessionNumTrades_ = value;
      }
    }

    /// <summary>Field number for the "OpenInterest" field.</summary>
    public const int OpenInterestFieldNumber = 8;
    private uint openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "BidPrice" field.</summary>
    public const int BidPriceFieldNumber = 9;
    private int bidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "AskPrice" field.</summary>
    public const int AskPriceFieldNumber = 10;
    private int askPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "AskQuantity" field.</summary>
    public const int AskQuantityFieldNumber = 11;
    private int askQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = value;
      }
    }

    /// <summary>Field number for the "BidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 12;
    private int bidQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    /// <summary>Field number for the "LastTradePrice" field.</summary>
    public const int LastTradePriceFieldNumber = 13;
    private int lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "LastTradeVolume" field.</summary>
    public const int LastTradeVolumeFieldNumber = 14;
    private int lastTradeVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTradeVolume {
      get { return lastTradeVolume_; }
      set {
        lastTradeVolume_ = value;
      }
    }

    /// <summary>Field number for the "LastTradeDateTime" field.</summary>
    public const int LastTradeDateTimeFieldNumber = 15;
    private double lastTradeDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradeDateTime {
      get { return lastTradeDateTime_; }
      set {
        lastTradeDateTime_ = value;
      }
    }

    /// <summary>Field number for the "BidAskDateTime" field.</summary>
    public const int BidAskDateTimeFieldNumber = 16;
    private double bidAskDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidAskDateTime {
      get { return bidAskDateTime_; }
      set {
        bidAskDateTime_ = value;
      }
    }

    /// <summary>Field number for the "SessionSettlementDateTime" field.</summary>
    public const int SessionSettlementDateTimeFieldNumber = 17;
    private uint sessionSettlementDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SessionSettlementDateTime {
      get { return sessionSettlementDateTime_; }
      set {
        sessionSettlementDateTime_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 18;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataSnapshot_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataSnapshot_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (SessionSettlementPrice != other.SessionSettlementPrice) return false;
      if (SessionOpenPrice != other.SessionOpenPrice) return false;
      if (SessionHighPrice != other.SessionHighPrice) return false;
      if (SessionLowPrice != other.SessionLowPrice) return false;
      if (SessionVolume != other.SessionVolume) return false;
      if (SessionNumTrades != other.SessionNumTrades) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (BidPrice != other.BidPrice) return false;
      if (AskPrice != other.AskPrice) return false;
      if (AskQuantity != other.AskQuantity) return false;
      if (BidQuantity != other.BidQuantity) return false;
      if (LastTradePrice != other.LastTradePrice) return false;
      if (LastTradeVolume != other.LastTradeVolume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradeDateTime, other.LastTradeDateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidAskDateTime, other.BidAskDateTime)) return false;
      if (SessionSettlementDateTime != other.SessionSettlementDateTime) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (SessionSettlementPrice != 0) hash ^= SessionSettlementPrice.GetHashCode();
      if (SessionOpenPrice != 0) hash ^= SessionOpenPrice.GetHashCode();
      if (SessionHighPrice != 0) hash ^= SessionHighPrice.GetHashCode();
      if (SessionLowPrice != 0) hash ^= SessionLowPrice.GetHashCode();
      if (SessionVolume != 0) hash ^= SessionVolume.GetHashCode();
      if (SessionNumTrades != 0) hash ^= SessionNumTrades.GetHashCode();
      if (OpenInterest != 0) hash ^= OpenInterest.GetHashCode();
      if (BidPrice != 0) hash ^= BidPrice.GetHashCode();
      if (AskPrice != 0) hash ^= AskPrice.GetHashCode();
      if (AskQuantity != 0) hash ^= AskQuantity.GetHashCode();
      if (BidQuantity != 0) hash ^= BidQuantity.GetHashCode();
      if (LastTradePrice != 0) hash ^= LastTradePrice.GetHashCode();
      if (LastTradeVolume != 0) hash ^= LastTradeVolume.GetHashCode();
      if (LastTradeDateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradeDateTime);
      if (BidAskDateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidAskDateTime);
      if (SessionSettlementDateTime != 0) hash ^= SessionSettlementDateTime.GetHashCode();
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (SessionSettlementPrice != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SessionSettlementPrice);
      }
      if (SessionOpenPrice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SessionOpenPrice);
      }
      if (SessionHighPrice != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SessionHighPrice);
      }
      if (SessionLowPrice != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SessionLowPrice);
      }
      if (SessionVolume != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SessionVolume);
      }
      if (SessionNumTrades != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SessionNumTrades);
      }
      if (OpenInterest != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(OpenInterest);
      }
      if (BidPrice != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BidPrice);
      }
      if (AskPrice != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AskPrice);
      }
      if (AskQuantity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AskQuantity);
      }
      if (BidQuantity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BidQuantity);
      }
      if (LastTradePrice != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LastTradePrice);
      }
      if (LastTradeVolume != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LastTradeVolume);
      }
      if (LastTradeDateTime != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(LastTradeDateTime);
      }
      if (BidAskDateTime != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(BidAskDateTime);
      }
      if (SessionSettlementDateTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(SessionSettlementDateTime);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (SessionSettlementPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionSettlementPrice);
      }
      if (SessionOpenPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionOpenPrice);
      }
      if (SessionHighPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionHighPrice);
      }
      if (SessionLowPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionLowPrice);
      }
      if (SessionVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SessionVolume);
      }
      if (SessionNumTrades != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionNumTrades);
      }
      if (OpenInterest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenInterest);
      }
      if (BidPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidPrice);
      }
      if (AskPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskPrice);
      }
      if (AskQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskQuantity);
      }
      if (BidQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidQuantity);
      }
      if (LastTradePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTradePrice);
      }
      if (LastTradeVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTradeVolume);
      }
      if (LastTradeDateTime != 0D) {
        size += 1 + 8;
      }
      if (BidAskDateTime != 0D) {
        size += 2 + 8;
      }
      if (SessionSettlementDateTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SessionSettlementDateTime);
      }
      if (TradingSessionDate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataSnapshot_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.SessionSettlementPrice != 0) {
        SessionSettlementPrice = other.SessionSettlementPrice;
      }
      if (other.SessionOpenPrice != 0) {
        SessionOpenPrice = other.SessionOpenPrice;
      }
      if (other.SessionHighPrice != 0) {
        SessionHighPrice = other.SessionHighPrice;
      }
      if (other.SessionLowPrice != 0) {
        SessionLowPrice = other.SessionLowPrice;
      }
      if (other.SessionVolume != 0) {
        SessionVolume = other.SessionVolume;
      }
      if (other.SessionNumTrades != 0) {
        SessionNumTrades = other.SessionNumTrades;
      }
      if (other.OpenInterest != 0) {
        OpenInterest = other.OpenInterest;
      }
      if (other.BidPrice != 0) {
        BidPrice = other.BidPrice;
      }
      if (other.AskPrice != 0) {
        AskPrice = other.AskPrice;
      }
      if (other.AskQuantity != 0) {
        AskQuantity = other.AskQuantity;
      }
      if (other.BidQuantity != 0) {
        BidQuantity = other.BidQuantity;
      }
      if (other.LastTradePrice != 0) {
        LastTradePrice = other.LastTradePrice;
      }
      if (other.LastTradeVolume != 0) {
        LastTradeVolume = other.LastTradeVolume;
      }
      if (other.LastTradeDateTime != 0D) {
        LastTradeDateTime = other.LastTradeDateTime;
      }
      if (other.BidAskDateTime != 0D) {
        BidAskDateTime = other.BidAskDateTime;
      }
      if (other.SessionSettlementDateTime != 0) {
        SessionSettlementDateTime = other.SessionSettlementDateTime;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            SessionSettlementPrice = input.ReadInt32();
            break;
          }
          case 24: {
            SessionOpenPrice = input.ReadInt32();
            break;
          }
          case 32: {
            SessionHighPrice = input.ReadInt32();
            break;
          }
          case 40: {
            SessionLowPrice = input.ReadInt32();
            break;
          }
          case 48: {
            SessionVolume = input.ReadInt32();
            break;
          }
          case 56: {
            SessionNumTrades = input.ReadUInt32();
            break;
          }
          case 64: {
            OpenInterest = input.ReadUInt32();
            break;
          }
          case 72: {
            BidPrice = input.ReadInt32();
            break;
          }
          case 80: {
            AskPrice = input.ReadInt32();
            break;
          }
          case 88: {
            AskQuantity = input.ReadInt32();
            break;
          }
          case 96: {
            BidQuantity = input.ReadInt32();
            break;
          }
          case 104: {
            LastTradePrice = input.ReadInt32();
            break;
          }
          case 112: {
            LastTradeVolume = input.ReadInt32();
            break;
          }
          case 121: {
            LastTradeDateTime = input.ReadDouble();
            break;
          }
          case 129: {
            BidAskDateTime = input.ReadDouble();
            break;
          }
          case 136: {
            SessionSettlementDateTime = input.ReadUInt32();
            break;
          }
          case 144: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class DepthEntry : pb::IMessage<DepthEntry> {
    private static readonly pb::MessageParser<DepthEntry> _parser = new pb::MessageParser<DepthEntry>(() => new DepthEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepthEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthEntry(DepthEntry other) : this() {
      price_ = other.price_;
      quantity_ = other.quantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepthEntry Clone() {
      return new DepthEntry(this);
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 1;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 12;
    private float quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepthEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepthEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Quantity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Quantity);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Price);
      }
      if (Quantity != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Quantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Quantity != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepthEntry other) {
      if (other == null) {
        return;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Quantity != 0F) {
        Quantity = other.Quantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Price = input.ReadDouble();
            break;
          }
          case 101: {
            Quantity = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthFullUpdate20 : pb::IMessage<MarketDepthFullUpdate20> {
    private static readonly pb::MessageParser<MarketDepthFullUpdate20> _parser = new pb::MessageParser<MarketDepthFullUpdate20>(() => new MarketDepthFullUpdate20());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthFullUpdate20> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthFullUpdate20() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthFullUpdate20(MarketDepthFullUpdate20 other) : this() {
      symbolID_ = other.symbolID_;
      bidDepth_ = other.bidDepth_.Clone();
      askDepth_ = other.askDepth_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthFullUpdate20 Clone() {
      return new MarketDepthFullUpdate20(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "BidDepth" field.</summary>
    public const int BidDepthFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DTCPB.DepthEntry> _repeated_bidDepth_codec
        = pb::FieldCodec.ForMessage(18, global::DTCPB.DepthEntry.Parser);
    private readonly pbc::RepeatedField<global::DTCPB.DepthEntry> bidDepth_ = new pbc::RepeatedField<global::DTCPB.DepthEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DTCPB.DepthEntry> BidDepth {
      get { return bidDepth_; }
    }

    /// <summary>Field number for the "AskDepth" field.</summary>
    public const int AskDepthFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DTCPB.DepthEntry> _repeated_askDepth_codec
        = pb::FieldCodec.ForMessage(26, global::DTCPB.DepthEntry.Parser);
    private readonly pbc::RepeatedField<global::DTCPB.DepthEntry> askDepth_ = new pbc::RepeatedField<global::DTCPB.DepthEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DTCPB.DepthEntry> AskDepth {
      get { return askDepth_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthFullUpdate20);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthFullUpdate20 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if(!bidDepth_.Equals(other.bidDepth_)) return false;
      if(!askDepth_.Equals(other.askDepth_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      hash ^= bidDepth_.GetHashCode();
      hash ^= askDepth_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      bidDepth_.WriteTo(output, _repeated_bidDepth_codec);
      askDepth_.WriteTo(output, _repeated_askDepth_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      size += bidDepth_.CalculateSize(_repeated_bidDepth_codec);
      size += askDepth_.CalculateSize(_repeated_askDepth_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthFullUpdate20 other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      bidDepth_.Add(other.bidDepth_);
      askDepth_.Add(other.askDepth_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 18: {
            bidDepth_.AddEntriesFrom(input, _repeated_bidDepth_codec);
            break;
          }
          case 26: {
            askDepth_.AddEntriesFrom(input, _repeated_askDepth_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthFullUpdate10 : pb::IMessage<MarketDepthFullUpdate10> {
    private static readonly pb::MessageParser<MarketDepthFullUpdate10> _parser = new pb::MessageParser<MarketDepthFullUpdate10>(() => new MarketDepthFullUpdate10());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthFullUpdate10> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthFullUpdate10() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthFullUpdate10(MarketDepthFullUpdate10 other) : this() {
      symbolID_ = other.symbolID_;
      bidDepth_ = other.bidDepth_.Clone();
      askDepth_ = other.askDepth_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthFullUpdate10 Clone() {
      return new MarketDepthFullUpdate10(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "BidDepth" field.</summary>
    public const int BidDepthFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DTCPB.DepthEntry> _repeated_bidDepth_codec
        = pb::FieldCodec.ForMessage(18, global::DTCPB.DepthEntry.Parser);
    private readonly pbc::RepeatedField<global::DTCPB.DepthEntry> bidDepth_ = new pbc::RepeatedField<global::DTCPB.DepthEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DTCPB.DepthEntry> BidDepth {
      get { return bidDepth_; }
    }

    /// <summary>Field number for the "AskDepth" field.</summary>
    public const int AskDepthFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DTCPB.DepthEntry> _repeated_askDepth_codec
        = pb::FieldCodec.ForMessage(26, global::DTCPB.DepthEntry.Parser);
    private readonly pbc::RepeatedField<global::DTCPB.DepthEntry> askDepth_ = new pbc::RepeatedField<global::DTCPB.DepthEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DTCPB.DepthEntry> AskDepth {
      get { return askDepth_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthFullUpdate10);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthFullUpdate10 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if(!bidDepth_.Equals(other.bidDepth_)) return false;
      if(!askDepth_.Equals(other.askDepth_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      hash ^= bidDepth_.GetHashCode();
      hash ^= askDepth_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      bidDepth_.WriteTo(output, _repeated_bidDepth_codec);
      askDepth_.WriteTo(output, _repeated_askDepth_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      size += bidDepth_.CalculateSize(_repeated_bidDepth_codec);
      size += askDepth_.CalculateSize(_repeated_askDepth_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthFullUpdate10 other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      bidDepth_.Add(other.bidDepth_);
      askDepth_.Add(other.askDepth_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 18: {
            bidDepth_.AddEntriesFrom(input, _repeated_bidDepth_codec);
            break;
          }
          case 26: {
            askDepth_.AddEntriesFrom(input, _repeated_askDepth_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthSnapshotLevel : pb::IMessage<MarketDepthSnapshotLevel> {
    private static readonly pb::MessageParser<MarketDepthSnapshotLevel> _parser = new pb::MessageParser<MarketDepthSnapshotLevel>(() => new MarketDepthSnapshotLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthSnapshotLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthSnapshotLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthSnapshotLevel(MarketDepthSnapshotLevel other) : this() {
      symbolID_ = other.symbolID_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      level_ = other.level_;
      isFirstMessageInBatch_ = other.isFirstMessageInBatch_;
      isLastMessageInBatch_ = other.isLastMessageInBatch_;
      dateTime_ = other.dateTime_;
      numOrders_ = other.numOrders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthSnapshotLevel Clone() {
      return new MarketDepthSnapshotLevel(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "IsFirstMessageInBatch" field.</summary>
    public const int IsFirstMessageInBatchFieldNumber = 6;
    private uint isFirstMessageInBatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFirstMessageInBatch {
      get { return isFirstMessageInBatch_; }
      set {
        isFirstMessageInBatch_ = value;
      }
    }

    /// <summary>Field number for the "IsLastMessageInBatch" field.</summary>
    public const int IsLastMessageInBatchFieldNumber = 7;
    private uint isLastMessageInBatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsLastMessageInBatch {
      get { return isLastMessageInBatch_; }
      set {
        isLastMessageInBatch_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 8;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "NumOrders" field.</summary>
    public const int NumOrdersFieldNumber = 9;
    private uint numOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOrders {
      get { return numOrders_; }
      set {
        numOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthSnapshotLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthSnapshotLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Side != other.Side) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (Level != other.Level) return false;
      if (IsFirstMessageInBatch != other.IsFirstMessageInBatch) return false;
      if (IsLastMessageInBatch != other.IsLastMessageInBatch) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      if (NumOrders != other.NumOrders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Quantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity);
      if (Level != 0) hash ^= Level.GetHashCode();
      if (IsFirstMessageInBatch != 0) hash ^= IsFirstMessageInBatch.GetHashCode();
      if (IsLastMessageInBatch != 0) hash ^= IsLastMessageInBatch.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (NumOrders != 0) hash ^= NumOrders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Side);
      }
      if (Price != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Price);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Quantity);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (IsFirstMessageInBatch != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IsFirstMessageInBatch);
      }
      if (IsLastMessageInBatch != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(IsLastMessageInBatch);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DateTime);
      }
      if (NumOrders != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (IsFirstMessageInBatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFirstMessageInBatch);
      }
      if (IsLastMessageInBatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsLastMessageInBatch);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (NumOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOrders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthSnapshotLevel other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.IsFirstMessageInBatch != 0) {
        IsFirstMessageInBatch = other.IsFirstMessageInBatch;
      }
      if (other.IsLastMessageInBatch != 0) {
        IsLastMessageInBatch = other.IsLastMessageInBatch;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      if (other.NumOrders != 0) {
        NumOrders = other.NumOrders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            side_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 25: {
            Price = input.ReadDouble();
            break;
          }
          case 33: {
            Quantity = input.ReadDouble();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            IsFirstMessageInBatch = input.ReadUInt32();
            break;
          }
          case 56: {
            IsLastMessageInBatch = input.ReadUInt32();
            break;
          }
          case 65: {
            DateTime = input.ReadDouble();
            break;
          }
          case 72: {
            NumOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthSnapshotLevel_Int : pb::IMessage<MarketDepthSnapshotLevel_Int> {
    private static readonly pb::MessageParser<MarketDepthSnapshotLevel_Int> _parser = new pb::MessageParser<MarketDepthSnapshotLevel_Int>(() => new MarketDepthSnapshotLevel_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthSnapshotLevel_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthSnapshotLevel_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthSnapshotLevel_Int(MarketDepthSnapshotLevel_Int other) : this() {
      symbolID_ = other.symbolID_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      level_ = other.level_;
      isFirstMessageInBatch_ = other.isFirstMessageInBatch_;
      isLastMessageInBatch_ = other.isLastMessageInBatch_;
      dateTime_ = other.dateTime_;
      numOrders_ = other.numOrders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthSnapshotLevel_Int Clone() {
      return new MarketDepthSnapshotLevel_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private int quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "IsFirstMessageInBatch" field.</summary>
    public const int IsFirstMessageInBatchFieldNumber = 6;
    private uint isFirstMessageInBatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFirstMessageInBatch {
      get { return isFirstMessageInBatch_; }
      set {
        isFirstMessageInBatch_ = value;
      }
    }

    /// <summary>Field number for the "IsLastMessageInBatch" field.</summary>
    public const int IsLastMessageInBatchFieldNumber = 7;
    private uint isLastMessageInBatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsLastMessageInBatch {
      get { return isLastMessageInBatch_; }
      set {
        isLastMessageInBatch_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 8;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "NumOrders" field.</summary>
    public const int NumOrdersFieldNumber = 9;
    private uint numOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOrders {
      get { return numOrders_; }
      set {
        numOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthSnapshotLevel_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthSnapshotLevel_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Side != other.Side) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (Level != other.Level) return false;
      if (IsFirstMessageInBatch != other.IsFirstMessageInBatch) return false;
      if (IsLastMessageInBatch != other.IsLastMessageInBatch) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      if (NumOrders != other.NumOrders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (IsFirstMessageInBatch != 0) hash ^= IsFirstMessageInBatch.GetHashCode();
      if (IsLastMessageInBatch != 0) hash ^= IsLastMessageInBatch.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (NumOrders != 0) hash ^= NumOrders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Side);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (Quantity != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Quantity);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (IsFirstMessageInBatch != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IsFirstMessageInBatch);
      }
      if (IsLastMessageInBatch != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(IsLastMessageInBatch);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DateTime);
      }
      if (NumOrders != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (IsFirstMessageInBatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFirstMessageInBatch);
      }
      if (IsLastMessageInBatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsLastMessageInBatch);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (NumOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOrders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthSnapshotLevel_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.IsFirstMessageInBatch != 0) {
        IsFirstMessageInBatch = other.IsFirstMessageInBatch;
      }
      if (other.IsLastMessageInBatch != 0) {
        IsLastMessageInBatch = other.IsLastMessageInBatch;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      if (other.NumOrders != 0) {
        NumOrders = other.NumOrders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            side_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
          case 32: {
            Quantity = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            IsFirstMessageInBatch = input.ReadUInt32();
            break;
          }
          case 56: {
            IsLastMessageInBatch = input.ReadUInt32();
            break;
          }
          case 65: {
            DateTime = input.ReadDouble();
            break;
          }
          case 72: {
            NumOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthUpdateLevel : pb::IMessage<MarketDepthUpdateLevel> {
    private static readonly pb::MessageParser<MarketDepthUpdateLevel> _parser = new pb::MessageParser<MarketDepthUpdateLevel>(() => new MarketDepthUpdateLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthUpdateLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevel(MarketDepthUpdateLevel other) : this() {
      symbolID_ = other.symbolID_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      updateType_ = other.updateType_;
      dateTime_ = other.dateTime_;
      numOrders_ = other.numOrders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevel Clone() {
      return new MarketDepthUpdateLevel(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "UpdateType" field.</summary>
    public const int UpdateTypeFieldNumber = 5;
    private global::DTCPB.MarketDepthUpdateTypeEnum updateType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.MarketDepthUpdateTypeEnum UpdateType {
      get { return updateType_; }
      set {
        updateType_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 6;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "NumOrders" field.</summary>
    public const int NumOrdersFieldNumber = 7;
    private uint numOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOrders {
      get { return numOrders_; }
      set {
        numOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthUpdateLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthUpdateLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Side != other.Side) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (UpdateType != other.UpdateType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      if (NumOrders != other.NumOrders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Quantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity);
      if (UpdateType != 0) hash ^= UpdateType.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (NumOrders != 0) hash ^= NumOrders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Side);
      }
      if (Price != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Price);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Quantity);
      }
      if (UpdateType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) UpdateType);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DateTime);
      }
      if (NumOrders != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NumOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (UpdateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateType);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (NumOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOrders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthUpdateLevel other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.UpdateType != 0) {
        UpdateType = other.UpdateType;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      if (other.NumOrders != 0) {
        NumOrders = other.NumOrders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            side_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 25: {
            Price = input.ReadDouble();
            break;
          }
          case 33: {
            Quantity = input.ReadDouble();
            break;
          }
          case 40: {
            updateType_ = (global::DTCPB.MarketDepthUpdateTypeEnum) input.ReadEnum();
            break;
          }
          case 49: {
            DateTime = input.ReadDouble();
            break;
          }
          case 56: {
            NumOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthUpdateLevel_Int : pb::IMessage<MarketDepthUpdateLevel_Int> {
    private static readonly pb::MessageParser<MarketDepthUpdateLevel_Int> _parser = new pb::MessageParser<MarketDepthUpdateLevel_Int>(() => new MarketDepthUpdateLevel_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthUpdateLevel_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevel_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevel_Int(MarketDepthUpdateLevel_Int other) : this() {
      symbolID_ = other.symbolID_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      updateType_ = other.updateType_;
      dateTime_ = other.dateTime_;
      numOrders_ = other.numOrders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevel_Int Clone() {
      return new MarketDepthUpdateLevel_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private int quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "UpdateType" field.</summary>
    public const int UpdateTypeFieldNumber = 5;
    private global::DTCPB.MarketDepthUpdateTypeEnum updateType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.MarketDepthUpdateTypeEnum UpdateType {
      get { return updateType_; }
      set {
        updateType_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 6;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "NumOrders" field.</summary>
    public const int NumOrdersFieldNumber = 7;
    private uint numOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOrders {
      get { return numOrders_; }
      set {
        numOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthUpdateLevel_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthUpdateLevel_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Side != other.Side) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (UpdateType != other.UpdateType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      if (NumOrders != other.NumOrders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (UpdateType != 0) hash ^= UpdateType.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (NumOrders != 0) hash ^= NumOrders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Side);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (Quantity != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Quantity);
      }
      if (UpdateType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) UpdateType);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DateTime);
      }
      if (NumOrders != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NumOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quantity);
      }
      if (UpdateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateType);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (NumOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOrders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthUpdateLevel_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.UpdateType != 0) {
        UpdateType = other.UpdateType;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      if (other.NumOrders != 0) {
        NumOrders = other.NumOrders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            side_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
          case 32: {
            Quantity = input.ReadInt32();
            break;
          }
          case 40: {
            updateType_ = (global::DTCPB.MarketDepthUpdateTypeEnum) input.ReadEnum();
            break;
          }
          case 49: {
            DateTime = input.ReadDouble();
            break;
          }
          case 56: {
            NumOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthUpdateLevelCompact : pb::IMessage<MarketDepthUpdateLevelCompact> {
    private static readonly pb::MessageParser<MarketDepthUpdateLevelCompact> _parser = new pb::MessageParser<MarketDepthUpdateLevelCompact>(() => new MarketDepthUpdateLevelCompact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthUpdateLevelCompact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevelCompact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevelCompact(MarketDepthUpdateLevelCompact other) : this() {
      symbolID_ = other.symbolID_;
      side_ = other.side_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      updateType_ = other.updateType_;
      dateTime_ = other.dateTime_;
      numOrders_ = other.numOrders_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthUpdateLevelCompact Clone() {
      return new MarketDepthUpdateLevelCompact(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private float quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "UpdateType" field.</summary>
    public const int UpdateTypeFieldNumber = 5;
    private global::DTCPB.MarketDepthUpdateTypeEnum updateType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.MarketDepthUpdateTypeEnum UpdateType {
      get { return updateType_; }
      set {
        updateType_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 6;
    private uint dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "NumOrders" field.</summary>
    public const int NumOrdersFieldNumber = 7;
    private uint numOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOrders {
      get { return numOrders_; }
      set {
        numOrders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthUpdateLevelCompact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthUpdateLevelCompact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Side != other.Side) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (UpdateType != other.UpdateType) return false;
      if (DateTime != other.DateTime) return false;
      if (NumOrders != other.NumOrders) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
      if (Quantity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Quantity);
      if (UpdateType != 0) hash ^= UpdateType.GetHashCode();
      if (DateTime != 0) hash ^= DateTime.GetHashCode();
      if (NumOrders != 0) hash ^= NumOrders.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Side);
      }
      if (Price != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Price);
      }
      if (Quantity != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Quantity);
      }
      if (UpdateType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) UpdateType);
      }
      if (DateTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DateTime);
      }
      if (NumOrders != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NumOrders);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (Quantity != 0F) {
        size += 1 + 4;
      }
      if (UpdateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateType);
      }
      if (DateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DateTime);
      }
      if (NumOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOrders);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthUpdateLevelCompact other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.Quantity != 0F) {
        Quantity = other.Quantity;
      }
      if (other.UpdateType != 0) {
        UpdateType = other.UpdateType;
      }
      if (other.DateTime != 0) {
        DateTime = other.DateTime;
      }
      if (other.NumOrders != 0) {
        NumOrders = other.NumOrders;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            side_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 29: {
            Price = input.ReadFloat();
            break;
          }
          case 37: {
            Quantity = input.ReadFloat();
            break;
          }
          case 40: {
            updateType_ = (global::DTCPB.MarketDepthUpdateTypeEnum) input.ReadEnum();
            break;
          }
          case 48: {
            DateTime = input.ReadUInt32();
            break;
          }
          case 56: {
            NumOrders = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionSettlement : pb::IMessage<MarketDataUpdateSessionSettlement> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionSettlement> _parser = new pb::MessageParser<MarketDataUpdateSessionSettlement>(() => new MarketDataUpdateSessionSettlement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionSettlement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionSettlement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionSettlement(MarketDataUpdateSessionSettlement other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      dateTime_ = other.dateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionSettlement Clone() {
      return new MarketDataUpdateSessionSettlement(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 3;
    private uint dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionSettlement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionSettlement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (DateTime != other.DateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (DateTime != 0) hash ^= DateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (DateTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (DateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionSettlement other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.DateTime != 0) {
        DateTime = other.DateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 24: {
            DateTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionSettlement_Int : pb::IMessage<MarketDataUpdateSessionSettlement_Int> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionSettlement_Int> _parser = new pb::MessageParser<MarketDataUpdateSessionSettlement_Int>(() => new MarketDataUpdateSessionSettlement_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionSettlement_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionSettlement_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionSettlement_Int(MarketDataUpdateSessionSettlement_Int other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      dateTime_ = other.dateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionSettlement_Int Clone() {
      return new MarketDataUpdateSessionSettlement_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 3;
    private int dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionSettlement_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionSettlement_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Price != other.Price) return false;
      if (DateTime != other.DateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (DateTime != 0) hash ^= DateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (DateTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (DateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionSettlement_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.DateTime != 0) {
        DateTime = other.DateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
          case 24: {
            DateTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionOpen : pb::IMessage<MarketDataUpdateSessionOpen> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionOpen> _parser = new pb::MessageParser<MarketDataUpdateSessionOpen>(() => new MarketDataUpdateSessionOpen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionOpen(MarketDataUpdateSessionOpen other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionOpen Clone() {
      return new MarketDataUpdateSessionOpen(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionOpen other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionOpen_Int : pb::IMessage<MarketDataUpdateSessionOpen_Int> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionOpen_Int> _parser = new pb::MessageParser<MarketDataUpdateSessionOpen_Int>(() => new MarketDataUpdateSessionOpen_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionOpen_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionOpen_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionOpen_Int(MarketDataUpdateSessionOpen_Int other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionOpen_Int Clone() {
      return new MarketDataUpdateSessionOpen_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionOpen_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionOpen_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Price != other.Price) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionOpen_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionNumTrades : pb::IMessage<MarketDataUpdateSessionNumTrades> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionNumTrades> _parser = new pb::MessageParser<MarketDataUpdateSessionNumTrades>(() => new MarketDataUpdateSessionNumTrades());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionNumTrades> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionNumTrades() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionNumTrades(MarketDataUpdateSessionNumTrades other) : this() {
      symbolID_ = other.symbolID_;
      numTrades_ = other.numTrades_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionNumTrades Clone() {
      return new MarketDataUpdateSessionNumTrades(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "NumTrades" field.</summary>
    public const int NumTradesFieldNumber = 2;
    private int numTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTrades {
      get { return numTrades_; }
      set {
        numTrades_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionNumTrades);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionNumTrades other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (NumTrades != other.NumTrades) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (NumTrades != 0) hash ^= NumTrades.GetHashCode();
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (NumTrades != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumTrades);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (NumTrades != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTrades);
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionNumTrades other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.NumTrades != 0) {
        NumTrades = other.NumTrades;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            NumTrades = input.ReadInt32();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateTradingSessionDate : pb::IMessage<MarketDataUpdateTradingSessionDate> {
    private static readonly pb::MessageParser<MarketDataUpdateTradingSessionDate> _parser = new pb::MessageParser<MarketDataUpdateTradingSessionDate>(() => new MarketDataUpdateTradingSessionDate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateTradingSessionDate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradingSessionDate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradingSessionDate(MarketDataUpdateTradingSessionDate other) : this() {
      symbolID_ = other.symbolID_;
      date_ = other.date_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradingSessionDate Clone() {
      return new MarketDataUpdateTradingSessionDate(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Date" field.</summary>
    public const int DateFieldNumber = 2;
    private uint date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateTradingSessionDate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateTradingSessionDate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Date != other.Date) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Date != 0) hash ^= Date.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Date != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Date);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Date != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Date);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateTradingSessionDate other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Date != 0) {
        Date = other.Date;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            Date = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDepthReject : pb::IMessage<MarketDepthReject> {
    private static readonly pb::MessageParser<MarketDepthReject> _parser = new pb::MessageParser<MarketDepthReject>(() => new MarketDepthReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthReject(MarketDepthReject other) : this() {
      symbolID_ = other.symbolID_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthReject Clone() {
      return new MarketDepthReject(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthReject other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateTrade : pb::IMessage<MarketDataUpdateTrade> {
    private static readonly pb::MessageParser<MarketDataUpdateTrade> _parser = new pb::MessageParser<MarketDataUpdateTrade>(() => new MarketDataUpdateTrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateTrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTrade(MarketDataUpdateTrade other) : this() {
      symbolID_ = other.symbolID_;
      atBidOrAsk_ = other.atBidOrAsk_;
      price_ = other.price_;
      volume_ = other.volume_;
      dateTime_ = other.dateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTrade Clone() {
      return new MarketDataUpdateTrade(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "AtBidOrAsk" field.</summary>
    public const int AtBidOrAskFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum atBidOrAsk_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum AtBidOrAsk {
      get { return atBidOrAsk_; }
      set {
        atBidOrAsk_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 4;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 5;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateTrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateTrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (AtBidOrAsk != other.AtBidOrAsk) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (AtBidOrAsk != 0) hash ^= AtBidOrAsk.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AtBidOrAsk);
      }
      if (Price != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Price);
      }
      if (Volume != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Volume);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AtBidOrAsk);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateTrade other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.AtBidOrAsk != 0) {
        AtBidOrAsk = other.AtBidOrAsk;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            atBidOrAsk_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 25: {
            Price = input.ReadDouble();
            break;
          }
          case 33: {
            Volume = input.ReadDouble();
            break;
          }
          case 41: {
            DateTime = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateTrade_Int : pb::IMessage<MarketDataUpdateTrade_Int> {
    private static readonly pb::MessageParser<MarketDataUpdateTrade_Int> _parser = new pb::MessageParser<MarketDataUpdateTrade_Int>(() => new MarketDataUpdateTrade_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateTrade_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTrade_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTrade_Int(MarketDataUpdateTrade_Int other) : this() {
      symbolID_ = other.symbolID_;
      atBidOrAsk_ = other.atBidOrAsk_;
      price_ = other.price_;
      volume_ = other.volume_;
      dateTime_ = other.dateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTrade_Int Clone() {
      return new MarketDataUpdateTrade_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "AtBidOrAsk" field.</summary>
    public const int AtBidOrAskFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum atBidOrAsk_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum AtBidOrAsk {
      get { return atBidOrAsk_; }
      set {
        atBidOrAsk_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 4;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 5;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateTrade_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateTrade_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (AtBidOrAsk != other.AtBidOrAsk) return false;
      if (Price != other.Price) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (AtBidOrAsk != 0) hash ^= AtBidOrAsk.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AtBidOrAsk);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (Volume != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Volume);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AtBidOrAsk);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateTrade_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.AtBidOrAsk != 0) {
        AtBidOrAsk = other.AtBidOrAsk;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            atBidOrAsk_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
          case 32: {
            Volume = input.ReadInt32();
            break;
          }
          case 41: {
            DateTime = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateTradeWithUnbundledIndicator : pb::IMessage<MarketDataUpdateTradeWithUnbundledIndicator> {
    private static readonly pb::MessageParser<MarketDataUpdateTradeWithUnbundledIndicator> _parser = new pb::MessageParser<MarketDataUpdateTradeWithUnbundledIndicator>(() => new MarketDataUpdateTradeWithUnbundledIndicator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateTradeWithUnbundledIndicator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradeWithUnbundledIndicator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradeWithUnbundledIndicator(MarketDataUpdateTradeWithUnbundledIndicator other) : this() {
      symbolID_ = other.symbolID_;
      atBidOrAsk_ = other.atBidOrAsk_;
      unbundledTradeIndicator_ = other.unbundledTradeIndicator_;
      price_ = other.price_;
      volume_ = other.volume_;
      dateTime_ = other.dateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradeWithUnbundledIndicator Clone() {
      return new MarketDataUpdateTradeWithUnbundledIndicator(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "AtBidOrAsk" field.</summary>
    public const int AtBidOrAskFieldNumber = 2;
    private global::DTCPB.AtBidOrAskEnum8 atBidOrAsk_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum8 AtBidOrAsk {
      get { return atBidOrAsk_; }
      set {
        atBidOrAsk_ = value;
      }
    }

    /// <summary>Field number for the "UnbundledTradeIndicator" field.</summary>
    public const int UnbundledTradeIndicatorFieldNumber = 3;
    private global::DTCPB.UnbundledTradeIndicatorEnum unbundledTradeIndicator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.UnbundledTradeIndicatorEnum UnbundledTradeIndicator {
      get { return unbundledTradeIndicator_; }
      set {
        unbundledTradeIndicator_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 5;
    private uint volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 6;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateTradeWithUnbundledIndicator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateTradeWithUnbundledIndicator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (AtBidOrAsk != other.AtBidOrAsk) return false;
      if (UnbundledTradeIndicator != other.UnbundledTradeIndicator) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (AtBidOrAsk != 0) hash ^= AtBidOrAsk.GetHashCode();
      if (UnbundledTradeIndicator != 0) hash ^= UnbundledTradeIndicator.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AtBidOrAsk);
      }
      if (UnbundledTradeIndicator != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UnbundledTradeIndicator);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (Volume != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Volume);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(DateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AtBidOrAsk);
      }
      if (UnbundledTradeIndicator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnbundledTradeIndicator);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Volume);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateTradeWithUnbundledIndicator other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.AtBidOrAsk != 0) {
        AtBidOrAsk = other.AtBidOrAsk;
      }
      if (other.UnbundledTradeIndicator != 0) {
        UnbundledTradeIndicator = other.UnbundledTradeIndicator;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            atBidOrAsk_ = (global::DTCPB.AtBidOrAskEnum8) input.ReadEnum();
            break;
          }
          case 24: {
            unbundledTradeIndicator_ = (global::DTCPB.UnbundledTradeIndicatorEnum) input.ReadEnum();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 40: {
            Volume = input.ReadUInt32();
            break;
          }
          case 49: {
            DateTime = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateBidAsk : pb::IMessage<MarketDataUpdateBidAsk> {
    private static readonly pb::MessageParser<MarketDataUpdateBidAsk> _parser = new pb::MessageParser<MarketDataUpdateBidAsk>(() => new MarketDataUpdateBidAsk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateBidAsk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAsk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAsk(MarketDataUpdateBidAsk other) : this() {
      symbolID_ = other.symbolID_;
      bidPrice_ = other.bidPrice_;
      bidQuantity_ = other.bidQuantity_;
      askPrice_ = other.askPrice_;
      askQuantity_ = other.askQuantity_;
      dateTime_ = other.dateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAsk Clone() {
      return new MarketDataUpdateBidAsk(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "BidPrice" field.</summary>
    public const int BidPriceFieldNumber = 2;
    private double bidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "BidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 3;
    private float bidQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    /// <summary>Field number for the "AskPrice" field.</summary>
    public const int AskPriceFieldNumber = 4;
    private double askPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "AskQuantity" field.</summary>
    public const int AskQuantityFieldNumber = 5;
    private float askQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 6;
    private int dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateBidAsk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateBidAsk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPrice, other.BidPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidQuantity, other.BidQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPrice, other.AskPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskQuantity, other.AskQuantity)) return false;
      if (DateTime != other.DateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (BidPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPrice);
      if (BidQuantity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidQuantity);
      if (AskPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPrice);
      if (AskQuantity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskQuantity);
      if (DateTime != 0) hash ^= DateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (BidPrice != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BidPrice);
      }
      if (BidQuantity != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BidQuantity);
      }
      if (AskPrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AskPrice);
      }
      if (AskQuantity != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AskQuantity);
      }
      if (DateTime != 0) {
        output.WriteRawTag(53);
        output.WriteSFixed32(DateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (BidPrice != 0D) {
        size += 1 + 8;
      }
      if (BidQuantity != 0F) {
        size += 1 + 4;
      }
      if (AskPrice != 0D) {
        size += 1 + 8;
      }
      if (AskQuantity != 0F) {
        size += 1 + 4;
      }
      if (DateTime != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateBidAsk other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.BidPrice != 0D) {
        BidPrice = other.BidPrice;
      }
      if (other.BidQuantity != 0F) {
        BidQuantity = other.BidQuantity;
      }
      if (other.AskPrice != 0D) {
        AskPrice = other.AskPrice;
      }
      if (other.AskQuantity != 0F) {
        AskQuantity = other.AskQuantity;
      }
      if (other.DateTime != 0) {
        DateTime = other.DateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            BidPrice = input.ReadDouble();
            break;
          }
          case 29: {
            BidQuantity = input.ReadFloat();
            break;
          }
          case 33: {
            AskPrice = input.ReadDouble();
            break;
          }
          case 45: {
            AskQuantity = input.ReadFloat();
            break;
          }
          case 53: {
            DateTime = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateBidAsk_Int : pb::IMessage<MarketDataUpdateBidAsk_Int> {
    private static readonly pb::MessageParser<MarketDataUpdateBidAsk_Int> _parser = new pb::MessageParser<MarketDataUpdateBidAsk_Int>(() => new MarketDataUpdateBidAsk_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateBidAsk_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAsk_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAsk_Int(MarketDataUpdateBidAsk_Int other) : this() {
      symbolID_ = other.symbolID_;
      bidPrice_ = other.bidPrice_;
      bidQuantity_ = other.bidQuantity_;
      askPrice_ = other.askPrice_;
      askQuantity_ = other.askQuantity_;
      dateTime_ = other.dateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAsk_Int Clone() {
      return new MarketDataUpdateBidAsk_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "BidPrice" field.</summary>
    public const int BidPriceFieldNumber = 2;
    private int bidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "BidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 3;
    private int bidQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    /// <summary>Field number for the "AskPrice" field.</summary>
    public const int AskPriceFieldNumber = 4;
    private int askPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "AskQuantity" field.</summary>
    public const int AskQuantityFieldNumber = 5;
    private int askQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 6;
    private int dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateBidAsk_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateBidAsk_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (BidPrice != other.BidPrice) return false;
      if (BidQuantity != other.BidQuantity) return false;
      if (AskPrice != other.AskPrice) return false;
      if (AskQuantity != other.AskQuantity) return false;
      if (DateTime != other.DateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (BidPrice != 0) hash ^= BidPrice.GetHashCode();
      if (BidQuantity != 0) hash ^= BidQuantity.GetHashCode();
      if (AskPrice != 0) hash ^= AskPrice.GetHashCode();
      if (AskQuantity != 0) hash ^= AskQuantity.GetHashCode();
      if (DateTime != 0) hash ^= DateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (BidPrice != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BidPrice);
      }
      if (BidQuantity != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BidQuantity);
      }
      if (AskPrice != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AskPrice);
      }
      if (AskQuantity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AskQuantity);
      }
      if (DateTime != 0) {
        output.WriteRawTag(53);
        output.WriteSFixed32(DateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (BidPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidPrice);
      }
      if (BidQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidQuantity);
      }
      if (AskPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskPrice);
      }
      if (AskQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskQuantity);
      }
      if (DateTime != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateBidAsk_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.BidPrice != 0) {
        BidPrice = other.BidPrice;
      }
      if (other.BidQuantity != 0) {
        BidQuantity = other.BidQuantity;
      }
      if (other.AskPrice != 0) {
        AskPrice = other.AskPrice;
      }
      if (other.AskQuantity != 0) {
        AskQuantity = other.AskQuantity;
      }
      if (other.DateTime != 0) {
        DateTime = other.DateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            BidPrice = input.ReadInt32();
            break;
          }
          case 24: {
            BidQuantity = input.ReadInt32();
            break;
          }
          case 32: {
            AskPrice = input.ReadInt32();
            break;
          }
          case 40: {
            AskQuantity = input.ReadInt32();
            break;
          }
          case 53: {
            DateTime = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateBidAskCompact : pb::IMessage<MarketDataUpdateBidAskCompact> {
    private static readonly pb::MessageParser<MarketDataUpdateBidAskCompact> _parser = new pb::MessageParser<MarketDataUpdateBidAskCompact>(() => new MarketDataUpdateBidAskCompact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateBidAskCompact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAskCompact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAskCompact(MarketDataUpdateBidAskCompact other) : this() {
      bidPrice_ = other.bidPrice_;
      bidQuantity_ = other.bidQuantity_;
      askPrice_ = other.askPrice_;
      askQuantity_ = other.askQuantity_;
      dateTime_ = other.dateTime_;
      symbolID_ = other.symbolID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateBidAskCompact Clone() {
      return new MarketDataUpdateBidAskCompact(this);
    }

    /// <summary>Field number for the "BidPrice" field.</summary>
    public const int BidPriceFieldNumber = 1;
    private float bidPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "BidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 2;
    private float bidQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = value;
      }
    }

    /// <summary>Field number for the "AskPrice" field.</summary>
    public const int AskPriceFieldNumber = 3;
    private float askPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "AskQuantity" field.</summary>
    public const int AskQuantityFieldNumber = 4;
    private float askQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 5;
    private int dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 6;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateBidAskCompact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateBidAskCompact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrice, other.BidPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidQuantity, other.BidQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrice, other.AskPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskQuantity, other.AskQuantity)) return false;
      if (DateTime != other.DateTime) return false;
      if (SymbolID != other.SymbolID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BidPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrice);
      if (BidQuantity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidQuantity);
      if (AskPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrice);
      if (AskQuantity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskQuantity);
      if (DateTime != 0) hash ^= DateTime.GetHashCode();
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BidPrice != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(BidPrice);
      }
      if (BidQuantity != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BidQuantity);
      }
      if (AskPrice != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AskPrice);
      }
      if (AskQuantity != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AskQuantity);
      }
      if (DateTime != 0) {
        output.WriteRawTag(45);
        output.WriteSFixed32(DateTime);
      }
      if (SymbolID != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SymbolID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BidPrice != 0F) {
        size += 1 + 4;
      }
      if (BidQuantity != 0F) {
        size += 1 + 4;
      }
      if (AskPrice != 0F) {
        size += 1 + 4;
      }
      if (AskQuantity != 0F) {
        size += 1 + 4;
      }
      if (DateTime != 0) {
        size += 1 + 4;
      }
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateBidAskCompact other) {
      if (other == null) {
        return;
      }
      if (other.BidPrice != 0F) {
        BidPrice = other.BidPrice;
      }
      if (other.BidQuantity != 0F) {
        BidQuantity = other.BidQuantity;
      }
      if (other.AskPrice != 0F) {
        AskPrice = other.AskPrice;
      }
      if (other.AskQuantity != 0F) {
        AskQuantity = other.AskQuantity;
      }
      if (other.DateTime != 0) {
        DateTime = other.DateTime;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            BidPrice = input.ReadFloat();
            break;
          }
          case 21: {
            BidQuantity = input.ReadFloat();
            break;
          }
          case 29: {
            AskPrice = input.ReadFloat();
            break;
          }
          case 37: {
            AskQuantity = input.ReadFloat();
            break;
          }
          case 45: {
            DateTime = input.ReadSFixed32();
            break;
          }
          case 48: {
            SymbolID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateTradeCompact : pb::IMessage<MarketDataUpdateTradeCompact> {
    private static readonly pb::MessageParser<MarketDataUpdateTradeCompact> _parser = new pb::MessageParser<MarketDataUpdateTradeCompact>(() => new MarketDataUpdateTradeCompact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateTradeCompact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradeCompact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradeCompact(MarketDataUpdateTradeCompact other) : this() {
      price_ = other.price_;
      volume_ = other.volume_;
      dateTime_ = other.dateTime_;
      symbolID_ = other.symbolID_;
      atBidOrAsk_ = other.atBidOrAsk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateTradeCompact Clone() {
      return new MarketDataUpdateTradeCompact(this);
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 1;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 2;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 3;
    private int dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 4;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "AtBidOrAsk" field.</summary>
    public const int AtBidOrAskFieldNumber = 5;
    private global::DTCPB.AtBidOrAskEnum atBidOrAsk_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum AtBidOrAsk {
      get { return atBidOrAsk_; }
      set {
        atBidOrAsk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateTradeCompact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateTradeCompact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (DateTime != other.DateTime) return false;
      if (SymbolID != other.SymbolID) return false;
      if (AtBidOrAsk != other.AtBidOrAsk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
      if (Volume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (DateTime != 0) hash ^= DateTime.GetHashCode();
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (AtBidOrAsk != 0) hash ^= AtBidOrAsk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Price);
      }
      if (Volume != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Volume);
      }
      if (DateTime != 0) {
        output.WriteRawTag(29);
        output.WriteSFixed32(DateTime);
      }
      if (SymbolID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AtBidOrAsk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (Volume != 0F) {
        size += 1 + 4;
      }
      if (DateTime != 0) {
        size += 1 + 4;
      }
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (AtBidOrAsk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AtBidOrAsk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateTradeCompact other) {
      if (other == null) {
        return;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      if (other.DateTime != 0) {
        DateTime = other.DateTime;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.AtBidOrAsk != 0) {
        AtBidOrAsk = other.AtBidOrAsk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Price = input.ReadFloat();
            break;
          }
          case 21: {
            Volume = input.ReadFloat();
            break;
          }
          case 29: {
            DateTime = input.ReadSFixed32();
            break;
          }
          case 32: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 40: {
            atBidOrAsk_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionVolume : pb::IMessage<MarketDataUpdateSessionVolume> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionVolume> _parser = new pb::MessageParser<MarketDataUpdateSessionVolume>(() => new MarketDataUpdateSessionVolume());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionVolume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionVolume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionVolume(MarketDataUpdateSessionVolume other) : this() {
      symbolID_ = other.symbolID_;
      volume_ = other.volume_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionVolume Clone() {
      return new MarketDataUpdateSessionVolume(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 2;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionVolume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionVolume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Volume != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Volume);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionVolume other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            Volume = input.ReadDouble();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateOpenInterest : pb::IMessage<MarketDataUpdateOpenInterest> {
    private static readonly pb::MessageParser<MarketDataUpdateOpenInterest> _parser = new pb::MessageParser<MarketDataUpdateOpenInterest>(() => new MarketDataUpdateOpenInterest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateOpenInterest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateOpenInterest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateOpenInterest(MarketDataUpdateOpenInterest other) : this() {
      symbolID_ = other.symbolID_;
      openInterest_ = other.openInterest_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateOpenInterest Clone() {
      return new MarketDataUpdateOpenInterest(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "OpenInterest" field.</summary>
    public const int OpenInterestFieldNumber = 2;
    private uint openInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateOpenInterest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateOpenInterest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (OpenInterest != 0) hash ^= OpenInterest.GetHashCode();
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (OpenInterest != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OpenInterest);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (OpenInterest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenInterest);
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateOpenInterest other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.OpenInterest != 0) {
        OpenInterest = other.OpenInterest;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            OpenInterest = input.ReadUInt32();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionHigh : pb::IMessage<MarketDataUpdateSessionHigh> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionHigh> _parser = new pb::MessageParser<MarketDataUpdateSessionHigh>(() => new MarketDataUpdateSessionHigh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionHigh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionHigh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionHigh(MarketDataUpdateSessionHigh other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionHigh Clone() {
      return new MarketDataUpdateSessionHigh(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionHigh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionHigh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionHigh other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionHigh_Int : pb::IMessage<MarketDataUpdateSessionHigh_Int> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionHigh_Int> _parser = new pb::MessageParser<MarketDataUpdateSessionHigh_Int>(() => new MarketDataUpdateSessionHigh_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionHigh_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionHigh_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionHigh_Int(MarketDataUpdateSessionHigh_Int other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionHigh_Int Clone() {
      return new MarketDataUpdateSessionHigh_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionHigh_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionHigh_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Price != other.Price) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionHigh_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionLow : pb::IMessage<MarketDataUpdateSessionLow> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionLow> _parser = new pb::MessageParser<MarketDataUpdateSessionLow>(() => new MarketDataUpdateSessionLow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionLow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionLow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionLow(MarketDataUpdateSessionLow other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionLow Clone() {
      return new MarketDataUpdateSessionLow(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionLow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionLow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionLow other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateSessionLow_Int : pb::IMessage<MarketDataUpdateSessionLow_Int> {
    private static readonly pb::MessageParser<MarketDataUpdateSessionLow_Int> _parser = new pb::MessageParser<MarketDataUpdateSessionLow_Int>(() => new MarketDataUpdateSessionLow_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateSessionLow_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionLow_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionLow_Int(MarketDataUpdateSessionLow_Int other) : this() {
      symbolID_ = other.symbolID_;
      price_ = other.price_;
      tradingSessionDate_ = other.tradingSessionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateSessionLow_Int Clone() {
      return new MarketDataUpdateSessionLow_Int(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "TradingSessionDate" field.</summary>
    public const int TradingSessionDateFieldNumber = 3;
    private uint tradingSessionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradingSessionDate {
      get { return tradingSessionDate_; }
      set {
        tradingSessionDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateSessionLow_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateSessionLow_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (Price != other.Price) return false;
      if (TradingSessionDate != other.TradingSessionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (TradingSessionDate != 0) hash ^= TradingSessionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (TradingSessionDate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TradingSessionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (TradingSessionDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TradingSessionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateSessionLow_Int other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.TradingSessionDate != 0) {
        TradingSessionDate = other.TradingSessionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
          case 24: {
            TradingSessionDate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class MarketDataUpdateLastTradeSnapshot : pb::IMessage<MarketDataUpdateLastTradeSnapshot> {
    private static readonly pb::MessageParser<MarketDataUpdateLastTradeSnapshot> _parser = new pb::MessageParser<MarketDataUpdateLastTradeSnapshot>(() => new MarketDataUpdateLastTradeSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataUpdateLastTradeSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateLastTradeSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateLastTradeSnapshot(MarketDataUpdateLastTradeSnapshot other) : this() {
      symbolID_ = other.symbolID_;
      lastTradePrice_ = other.lastTradePrice_;
      lastTradeVolume_ = other.lastTradeVolume_;
      lastTradeDateTime_ = other.lastTradeDateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataUpdateLastTradeSnapshot Clone() {
      return new MarketDataUpdateLastTradeSnapshot(this);
    }

    /// <summary>Field number for the "SymbolID" field.</summary>
    public const int SymbolIDFieldNumber = 1;
    private uint symbolID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SymbolID {
      get { return symbolID_; }
      set {
        symbolID_ = value;
      }
    }

    /// <summary>Field number for the "LastTradePrice" field.</summary>
    public const int LastTradePriceFieldNumber = 2;
    private double lastTradePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradePrice {
      get { return lastTradePrice_; }
      set {
        lastTradePrice_ = value;
      }
    }

    /// <summary>Field number for the "LastTradeVolume" field.</summary>
    public const int LastTradeVolumeFieldNumber = 3;
    private double lastTradeVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradeVolume {
      get { return lastTradeVolume_; }
      set {
        lastTradeVolume_ = value;
      }
    }

    /// <summary>Field number for the "LastTradeDateTime" field.</summary>
    public const int LastTradeDateTimeFieldNumber = 4;
    private double lastTradeDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastTradeDateTime {
      get { return lastTradeDateTime_; }
      set {
        lastTradeDateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataUpdateLastTradeSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataUpdateLastTradeSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolID != other.SymbolID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradePrice, other.LastTradePrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradeVolume, other.LastTradeVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastTradeDateTime, other.LastTradeDateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolID != 0) hash ^= SymbolID.GetHashCode();
      if (LastTradePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradePrice);
      if (LastTradeVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradeVolume);
      if (LastTradeDateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastTradeDateTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SymbolID);
      }
      if (LastTradePrice != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LastTradePrice);
      }
      if (LastTradeVolume != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LastTradeVolume);
      }
      if (LastTradeDateTime != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LastTradeDateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolID);
      }
      if (LastTradePrice != 0D) {
        size += 1 + 8;
      }
      if (LastTradeVolume != 0D) {
        size += 1 + 8;
      }
      if (LastTradeDateTime != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataUpdateLastTradeSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.SymbolID != 0) {
        SymbolID = other.SymbolID;
      }
      if (other.LastTradePrice != 0D) {
        LastTradePrice = other.LastTradePrice;
      }
      if (other.LastTradeVolume != 0D) {
        LastTradeVolume = other.LastTradeVolume;
      }
      if (other.LastTradeDateTime != 0D) {
        LastTradeDateTime = other.LastTradeDateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SymbolID = input.ReadUInt32();
            break;
          }
          case 17: {
            LastTradePrice = input.ReadDouble();
            break;
          }
          case 25: {
            LastTradeVolume = input.ReadDouble();
            break;
          }
          case 33: {
            LastTradeDateTime = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SubmitNewSingleOrder : pb::IMessage<SubmitNewSingleOrder> {
    private static readonly pb::MessageParser<SubmitNewSingleOrder> _parser = new pb::MessageParser<SubmitNewSingleOrder>(() => new SubmitNewSingleOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitNewSingleOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewSingleOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewSingleOrder(SubmitNewSingleOrder other) : this() {
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      tradeAccount_ = other.tradeAccount_;
      clientOrderID_ = other.clientOrderID_;
      orderType_ = other.orderType_;
      buySell_ = other.buySell_;
      price1_ = other.price1_;
      price2_ = other.price2_;
      quantity_ = other.quantity_;
      timeInForce_ = other.timeInForce_;
      goodTillDateTime_ = other.goodTillDateTime_;
      isAutomatedOrder_ = other.isAutomatedOrder_;
      isParentOrder_ = other.isParentOrder_;
      freeFormText_ = other.freeFormText_;
      openOrClose_ = other.openOrClose_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewSingleOrder Clone() {
      return new SubmitNewSingleOrder(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 3;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID" field.</summary>
    public const int ClientOrderIDFieldNumber = 4;
    private string clientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID {
      get { return clientOrderID_; }
      set {
        clientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderType" field.</summary>
    public const int OrderTypeFieldNumber = 5;
    private global::DTCPB.OrderTypeEnum orderType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderTypeEnum OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "BuySell" field.</summary>
    public const int BuySellFieldNumber = 6;
    private global::DTCPB.BuySellEnum buySell_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell {
      get { return buySell_; }
      set {
        buySell_ = value;
      }
    }

    /// <summary>Field number for the "Price1" field.</summary>
    public const int Price1FieldNumber = 7;
    private double price1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price1 {
      get { return price1_; }
      set {
        price1_ = value;
      }
    }

    /// <summary>Field number for the "Price2" field.</summary>
    public const int Price2FieldNumber = 8;
    private double price2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price2 {
      get { return price2_; }
      set {
        price2_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 9;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 10;
    private global::DTCPB.TimeInForceEnum timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TimeInForceEnum TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "GoodTillDateTime" field.</summary>
    public const int GoodTillDateTimeFieldNumber = 11;
    private long goodTillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GoodTillDateTime {
      get { return goodTillDateTime_; }
      set {
        goodTillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "IsAutomatedOrder" field.</summary>
    public const int IsAutomatedOrderFieldNumber = 12;
    private uint isAutomatedOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsAutomatedOrder {
      get { return isAutomatedOrder_; }
      set {
        isAutomatedOrder_ = value;
      }
    }

    /// <summary>Field number for the "IsParentOrder" field.</summary>
    public const int IsParentOrderFieldNumber = 13;
    private uint isParentOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsParentOrder {
      get { return isParentOrder_; }
      set {
        isParentOrder_ = value;
      }
    }

    /// <summary>Field number for the "FreeFormText" field.</summary>
    public const int FreeFormTextFieldNumber = 14;
    private string freeFormText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreeFormText {
      get { return freeFormText_; }
      set {
        freeFormText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenOrClose" field.</summary>
    public const int OpenOrCloseFieldNumber = 15;
    private global::DTCPB.OpenCloseTradeEnum openOrClose_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OpenCloseTradeEnum OpenOrClose {
      get { return openOrClose_; }
      set {
        openOrClose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitNewSingleOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitNewSingleOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (ClientOrderID != other.ClientOrderID) return false;
      if (OrderType != other.OrderType) return false;
      if (BuySell != other.BuySell) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price1, other.Price1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price2, other.Price2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (GoodTillDateTime != other.GoodTillDateTime) return false;
      if (IsAutomatedOrder != other.IsAutomatedOrder) return false;
      if (IsParentOrder != other.IsParentOrder) return false;
      if (FreeFormText != other.FreeFormText) return false;
      if (OpenOrClose != other.OpenOrClose) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (ClientOrderID.Length != 0) hash ^= ClientOrderID.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (BuySell != 0) hash ^= BuySell.GetHashCode();
      if (Price1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price1);
      if (Price2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price2);
      if (Quantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity);
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (GoodTillDateTime != 0L) hash ^= GoodTillDateTime.GetHashCode();
      if (IsAutomatedOrder != 0) hash ^= IsAutomatedOrder.GetHashCode();
      if (IsParentOrder != 0) hash ^= IsParentOrder.GetHashCode();
      if (FreeFormText.Length != 0) hash ^= FreeFormText.GetHashCode();
      if (OpenOrClose != 0) hash ^= OpenOrClose.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Exchange);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TradeAccount);
      }
      if (ClientOrderID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientOrderID);
      }
      if (OrderType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) OrderType);
      }
      if (BuySell != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BuySell);
      }
      if (Price1 != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Price1);
      }
      if (Price2 != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Price2);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Quantity);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        output.WriteRawTag(89);
        output.WriteSFixed64(GoodTillDateTime);
      }
      if (IsAutomatedOrder != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(IsAutomatedOrder);
      }
      if (IsParentOrder != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(IsParentOrder);
      }
      if (FreeFormText.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(FreeFormText);
      }
      if (OpenOrClose != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) OpenOrClose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (ClientOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (BuySell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell);
      }
      if (Price1 != 0D) {
        size += 1 + 8;
      }
      if (Price2 != 0D) {
        size += 1 + 8;
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        size += 1 + 8;
      }
      if (IsAutomatedOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsAutomatedOrder);
      }
      if (IsParentOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsParentOrder);
      }
      if (FreeFormText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FreeFormText);
      }
      if (OpenOrClose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpenOrClose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitNewSingleOrder other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.ClientOrderID.Length != 0) {
        ClientOrderID = other.ClientOrderID;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.BuySell != 0) {
        BuySell = other.BuySell;
      }
      if (other.Price1 != 0D) {
        Price1 = other.Price1;
      }
      if (other.Price2 != 0D) {
        Price2 = other.Price2;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.GoodTillDateTime != 0L) {
        GoodTillDateTime = other.GoodTillDateTime;
      }
      if (other.IsAutomatedOrder != 0) {
        IsAutomatedOrder = other.IsAutomatedOrder;
      }
      if (other.IsParentOrder != 0) {
        IsParentOrder = other.IsParentOrder;
      }
      if (other.FreeFormText.Length != 0) {
        FreeFormText = other.FreeFormText;
      }
      if (other.OpenOrClose != 0) {
        OpenOrClose = other.OpenOrClose;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            Exchange = input.ReadString();
            break;
          }
          case 26: {
            TradeAccount = input.ReadString();
            break;
          }
          case 34: {
            ClientOrderID = input.ReadString();
            break;
          }
          case 40: {
            orderType_ = (global::DTCPB.OrderTypeEnum) input.ReadEnum();
            break;
          }
          case 48: {
            buySell_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 57: {
            Price1 = input.ReadDouble();
            break;
          }
          case 65: {
            Price2 = input.ReadDouble();
            break;
          }
          case 73: {
            Quantity = input.ReadDouble();
            break;
          }
          case 80: {
            timeInForce_ = (global::DTCPB.TimeInForceEnum) input.ReadEnum();
            break;
          }
          case 89: {
            GoodTillDateTime = input.ReadSFixed64();
            break;
          }
          case 96: {
            IsAutomatedOrder = input.ReadUInt32();
            break;
          }
          case 104: {
            IsParentOrder = input.ReadUInt32();
            break;
          }
          case 114: {
            FreeFormText = input.ReadString();
            break;
          }
          case 120: {
            openOrClose_ = (global::DTCPB.OpenCloseTradeEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SubmitNewSingleOrderInt : pb::IMessage<SubmitNewSingleOrderInt> {
    private static readonly pb::MessageParser<SubmitNewSingleOrderInt> _parser = new pb::MessageParser<SubmitNewSingleOrderInt>(() => new SubmitNewSingleOrderInt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitNewSingleOrderInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewSingleOrderInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewSingleOrderInt(SubmitNewSingleOrderInt other) : this() {
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      tradeAccount_ = other.tradeAccount_;
      clientOrderID_ = other.clientOrderID_;
      orderType_ = other.orderType_;
      buySell_ = other.buySell_;
      price1_ = other.price1_;
      price2_ = other.price2_;
      divisor_ = other.divisor_;
      quantity_ = other.quantity_;
      timeInForce_ = other.timeInForce_;
      goodTillDateTime_ = other.goodTillDateTime_;
      isAutomatedOrder_ = other.isAutomatedOrder_;
      isParentOrder_ = other.isParentOrder_;
      freeFormText_ = other.freeFormText_;
      openOrClose_ = other.openOrClose_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewSingleOrderInt Clone() {
      return new SubmitNewSingleOrderInt(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 3;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID" field.</summary>
    public const int ClientOrderIDFieldNumber = 4;
    private string clientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID {
      get { return clientOrderID_; }
      set {
        clientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderType" field.</summary>
    public const int OrderTypeFieldNumber = 5;
    private global::DTCPB.OrderTypeEnum orderType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderTypeEnum OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "BuySell" field.</summary>
    public const int BuySellFieldNumber = 6;
    private global::DTCPB.BuySellEnum buySell_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell {
      get { return buySell_; }
      set {
        buySell_ = value;
      }
    }

    /// <summary>Field number for the "Price1" field.</summary>
    public const int Price1FieldNumber = 7;
    private long price1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price1 {
      get { return price1_; }
      set {
        price1_ = value;
      }
    }

    /// <summary>Field number for the "Price2" field.</summary>
    public const int Price2FieldNumber = 8;
    private long price2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price2 {
      get { return price2_; }
      set {
        price2_ = value;
      }
    }

    /// <summary>Field number for the "Divisor" field.</summary>
    public const int DivisorFieldNumber = 9;
    private float divisor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Divisor {
      get { return divisor_; }
      set {
        divisor_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 10;
    private long quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 11;
    private global::DTCPB.TimeInForceEnum timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TimeInForceEnum TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "GoodTillDateTime" field.</summary>
    public const int GoodTillDateTimeFieldNumber = 12;
    private long goodTillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GoodTillDateTime {
      get { return goodTillDateTime_; }
      set {
        goodTillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "IsAutomatedOrder" field.</summary>
    public const int IsAutomatedOrderFieldNumber = 13;
    private uint isAutomatedOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsAutomatedOrder {
      get { return isAutomatedOrder_; }
      set {
        isAutomatedOrder_ = value;
      }
    }

    /// <summary>Field number for the "IsParentOrder" field.</summary>
    public const int IsParentOrderFieldNumber = 14;
    private uint isParentOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsParentOrder {
      get { return isParentOrder_; }
      set {
        isParentOrder_ = value;
      }
    }

    /// <summary>Field number for the "FreeFormText" field.</summary>
    public const int FreeFormTextFieldNumber = 15;
    private string freeFormText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreeFormText {
      get { return freeFormText_; }
      set {
        freeFormText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenOrClose" field.</summary>
    public const int OpenOrCloseFieldNumber = 16;
    private global::DTCPB.OpenCloseTradeEnum openOrClose_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OpenCloseTradeEnum OpenOrClose {
      get { return openOrClose_; }
      set {
        openOrClose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitNewSingleOrderInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitNewSingleOrderInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (ClientOrderID != other.ClientOrderID) return false;
      if (OrderType != other.OrderType) return false;
      if (BuySell != other.BuySell) return false;
      if (Price1 != other.Price1) return false;
      if (Price2 != other.Price2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Divisor, other.Divisor)) return false;
      if (Quantity != other.Quantity) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (GoodTillDateTime != other.GoodTillDateTime) return false;
      if (IsAutomatedOrder != other.IsAutomatedOrder) return false;
      if (IsParentOrder != other.IsParentOrder) return false;
      if (FreeFormText != other.FreeFormText) return false;
      if (OpenOrClose != other.OpenOrClose) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (ClientOrderID.Length != 0) hash ^= ClientOrderID.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (BuySell != 0) hash ^= BuySell.GetHashCode();
      if (Price1 != 0L) hash ^= Price1.GetHashCode();
      if (Price2 != 0L) hash ^= Price2.GetHashCode();
      if (Divisor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Divisor);
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (GoodTillDateTime != 0L) hash ^= GoodTillDateTime.GetHashCode();
      if (IsAutomatedOrder != 0) hash ^= IsAutomatedOrder.GetHashCode();
      if (IsParentOrder != 0) hash ^= IsParentOrder.GetHashCode();
      if (FreeFormText.Length != 0) hash ^= FreeFormText.GetHashCode();
      if (OpenOrClose != 0) hash ^= OpenOrClose.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Exchange);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TradeAccount);
      }
      if (ClientOrderID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientOrderID);
      }
      if (OrderType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) OrderType);
      }
      if (BuySell != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BuySell);
      }
      if (Price1 != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Price1);
      }
      if (Price2 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Price2);
      }
      if (Divisor != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Divisor);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Quantity);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        output.WriteRawTag(97);
        output.WriteSFixed64(GoodTillDateTime);
      }
      if (IsAutomatedOrder != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(IsAutomatedOrder);
      }
      if (IsParentOrder != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(IsParentOrder);
      }
      if (FreeFormText.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FreeFormText);
      }
      if (OpenOrClose != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) OpenOrClose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (ClientOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (BuySell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell);
      }
      if (Price1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price1);
      }
      if (Price2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price2);
      }
      if (Divisor != 0F) {
        size += 1 + 4;
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quantity);
      }
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        size += 1 + 8;
      }
      if (IsAutomatedOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsAutomatedOrder);
      }
      if (IsParentOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsParentOrder);
      }
      if (FreeFormText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FreeFormText);
      }
      if (OpenOrClose != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpenOrClose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitNewSingleOrderInt other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.ClientOrderID.Length != 0) {
        ClientOrderID = other.ClientOrderID;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.BuySell != 0) {
        BuySell = other.BuySell;
      }
      if (other.Price1 != 0L) {
        Price1 = other.Price1;
      }
      if (other.Price2 != 0L) {
        Price2 = other.Price2;
      }
      if (other.Divisor != 0F) {
        Divisor = other.Divisor;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.GoodTillDateTime != 0L) {
        GoodTillDateTime = other.GoodTillDateTime;
      }
      if (other.IsAutomatedOrder != 0) {
        IsAutomatedOrder = other.IsAutomatedOrder;
      }
      if (other.IsParentOrder != 0) {
        IsParentOrder = other.IsParentOrder;
      }
      if (other.FreeFormText.Length != 0) {
        FreeFormText = other.FreeFormText;
      }
      if (other.OpenOrClose != 0) {
        OpenOrClose = other.OpenOrClose;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            Exchange = input.ReadString();
            break;
          }
          case 26: {
            TradeAccount = input.ReadString();
            break;
          }
          case 34: {
            ClientOrderID = input.ReadString();
            break;
          }
          case 40: {
            orderType_ = (global::DTCPB.OrderTypeEnum) input.ReadEnum();
            break;
          }
          case 48: {
            buySell_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 56: {
            Price1 = input.ReadInt64();
            break;
          }
          case 64: {
            Price2 = input.ReadInt64();
            break;
          }
          case 77: {
            Divisor = input.ReadFloat();
            break;
          }
          case 80: {
            Quantity = input.ReadInt64();
            break;
          }
          case 88: {
            timeInForce_ = (global::DTCPB.TimeInForceEnum) input.ReadEnum();
            break;
          }
          case 97: {
            GoodTillDateTime = input.ReadSFixed64();
            break;
          }
          case 104: {
            IsAutomatedOrder = input.ReadUInt32();
            break;
          }
          case 112: {
            IsParentOrder = input.ReadUInt32();
            break;
          }
          case 122: {
            FreeFormText = input.ReadString();
            break;
          }
          case 128: {
            openOrClose_ = (global::DTCPB.OpenCloseTradeEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class CancelReplaceOrder : pb::IMessage<CancelReplaceOrder> {
    private static readonly pb::MessageParser<CancelReplaceOrder> _parser = new pb::MessageParser<CancelReplaceOrder>(() => new CancelReplaceOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelReplaceOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReplaceOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReplaceOrder(CancelReplaceOrder other) : this() {
      serverOrderID_ = other.serverOrderID_;
      clientOrderID_ = other.clientOrderID_;
      price1_ = other.price1_;
      price2_ = other.price2_;
      quantity_ = other.quantity_;
      price1IsSet_ = other.price1IsSet_;
      price2IsSet_ = other.price2IsSet_;
      timeInForce_ = other.timeInForce_;
      goodTillDateTime_ = other.goodTillDateTime_;
      updatePrice1OffsetToParent_ = other.updatePrice1OffsetToParent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReplaceOrder Clone() {
      return new CancelReplaceOrder(this);
    }

    /// <summary>Field number for the "ServerOrderID" field.</summary>
    public const int ServerOrderIDFieldNumber = 1;
    private string serverOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerOrderID {
      get { return serverOrderID_; }
      set {
        serverOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID" field.</summary>
    public const int ClientOrderIDFieldNumber = 2;
    private string clientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID {
      get { return clientOrderID_; }
      set {
        clientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price1" field.</summary>
    public const int Price1FieldNumber = 3;
    private double price1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price1 {
      get { return price1_; }
      set {
        price1_ = value;
      }
    }

    /// <summary>Field number for the "Price2" field.</summary>
    public const int Price2FieldNumber = 4;
    private double price2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price2 {
      get { return price2_; }
      set {
        price2_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 5;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "Price1IsSet" field.</summary>
    public const int Price1IsSetFieldNumber = 6;
    private uint price1IsSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price1IsSet {
      get { return price1IsSet_; }
      set {
        price1IsSet_ = value;
      }
    }

    /// <summary>Field number for the "Price2IsSet" field.</summary>
    public const int Price2IsSetFieldNumber = 7;
    private uint price2IsSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price2IsSet {
      get { return price2IsSet_; }
      set {
        price2IsSet_ = value;
      }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 9;
    private global::DTCPB.TimeInForceEnum timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TimeInForceEnum TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "GoodTillDateTime" field.</summary>
    public const int GoodTillDateTimeFieldNumber = 10;
    private ulong goodTillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodTillDateTime {
      get { return goodTillDateTime_; }
      set {
        goodTillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "UpdatePrice1OffsetToParent" field.</summary>
    public const int UpdatePrice1OffsetToParentFieldNumber = 11;
    private uint updatePrice1OffsetToParent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpdatePrice1OffsetToParent {
      get { return updatePrice1OffsetToParent_; }
      set {
        updatePrice1OffsetToParent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelReplaceOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelReplaceOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerOrderID != other.ServerOrderID) return false;
      if (ClientOrderID != other.ClientOrderID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price1, other.Price1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price2, other.Price2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (Price1IsSet != other.Price1IsSet) return false;
      if (Price2IsSet != other.Price2IsSet) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (GoodTillDateTime != other.GoodTillDateTime) return false;
      if (UpdatePrice1OffsetToParent != other.UpdatePrice1OffsetToParent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerOrderID.Length != 0) hash ^= ServerOrderID.GetHashCode();
      if (ClientOrderID.Length != 0) hash ^= ClientOrderID.GetHashCode();
      if (Price1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price1);
      if (Price2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price2);
      if (Quantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity);
      if (Price1IsSet != 0) hash ^= Price1IsSet.GetHashCode();
      if (Price2IsSet != 0) hash ^= Price2IsSet.GetHashCode();
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (GoodTillDateTime != 0UL) hash ^= GoodTillDateTime.GetHashCode();
      if (UpdatePrice1OffsetToParent != 0) hash ^= UpdatePrice1OffsetToParent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerOrderID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientOrderID);
      }
      if (Price1 != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Price1);
      }
      if (Price2 != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price2);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Quantity);
      }
      if (Price1IsSet != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Price1IsSet);
      }
      if (Price2IsSet != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Price2IsSet);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TimeInForce);
      }
      if (GoodTillDateTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(GoodTillDateTime);
      }
      if (UpdatePrice1OffsetToParent != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(UpdatePrice1OffsetToParent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID);
      }
      if (Price1 != 0D) {
        size += 1 + 8;
      }
      if (Price2 != 0D) {
        size += 1 + 8;
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (Price1IsSet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price1IsSet);
      }
      if (Price2IsSet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price2IsSet);
      }
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (GoodTillDateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodTillDateTime);
      }
      if (UpdatePrice1OffsetToParent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdatePrice1OffsetToParent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelReplaceOrder other) {
      if (other == null) {
        return;
      }
      if (other.ServerOrderID.Length != 0) {
        ServerOrderID = other.ServerOrderID;
      }
      if (other.ClientOrderID.Length != 0) {
        ClientOrderID = other.ClientOrderID;
      }
      if (other.Price1 != 0D) {
        Price1 = other.Price1;
      }
      if (other.Price2 != 0D) {
        Price2 = other.Price2;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.Price1IsSet != 0) {
        Price1IsSet = other.Price1IsSet;
      }
      if (other.Price2IsSet != 0) {
        Price2IsSet = other.Price2IsSet;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.GoodTillDateTime != 0UL) {
        GoodTillDateTime = other.GoodTillDateTime;
      }
      if (other.UpdatePrice1OffsetToParent != 0) {
        UpdatePrice1OffsetToParent = other.UpdatePrice1OffsetToParent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerOrderID = input.ReadString();
            break;
          }
          case 18: {
            ClientOrderID = input.ReadString();
            break;
          }
          case 25: {
            Price1 = input.ReadDouble();
            break;
          }
          case 33: {
            Price2 = input.ReadDouble();
            break;
          }
          case 41: {
            Quantity = input.ReadDouble();
            break;
          }
          case 48: {
            Price1IsSet = input.ReadUInt32();
            break;
          }
          case 56: {
            Price2IsSet = input.ReadUInt32();
            break;
          }
          case 72: {
            timeInForce_ = (global::DTCPB.TimeInForceEnum) input.ReadEnum();
            break;
          }
          case 80: {
            GoodTillDateTime = input.ReadUInt64();
            break;
          }
          case 88: {
            UpdatePrice1OffsetToParent = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class CancelReplaceOrderInt : pb::IMessage<CancelReplaceOrderInt> {
    private static readonly pb::MessageParser<CancelReplaceOrderInt> _parser = new pb::MessageParser<CancelReplaceOrderInt>(() => new CancelReplaceOrderInt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelReplaceOrderInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReplaceOrderInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReplaceOrderInt(CancelReplaceOrderInt other) : this() {
      serverOrderID_ = other.serverOrderID_;
      clientOrderID_ = other.clientOrderID_;
      price1_ = other.price1_;
      price2_ = other.price2_;
      divisor_ = other.divisor_;
      quantity_ = other.quantity_;
      price1IsSet_ = other.price1IsSet_;
      price2IsSet_ = other.price2IsSet_;
      timeInForce_ = other.timeInForce_;
      goodTillDateTime_ = other.goodTillDateTime_;
      updatePrice1OffsetToParent_ = other.updatePrice1OffsetToParent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelReplaceOrderInt Clone() {
      return new CancelReplaceOrderInt(this);
    }

    /// <summary>Field number for the "ServerOrderID" field.</summary>
    public const int ServerOrderIDFieldNumber = 1;
    private string serverOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerOrderID {
      get { return serverOrderID_; }
      set {
        serverOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID" field.</summary>
    public const int ClientOrderIDFieldNumber = 2;
    private string clientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID {
      get { return clientOrderID_; }
      set {
        clientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price1" field.</summary>
    public const int Price1FieldNumber = 3;
    private long price1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price1 {
      get { return price1_; }
      set {
        price1_ = value;
      }
    }

    /// <summary>Field number for the "Price2" field.</summary>
    public const int Price2FieldNumber = 4;
    private long price2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price2 {
      get { return price2_; }
      set {
        price2_ = value;
      }
    }

    /// <summary>Field number for the "Divisor" field.</summary>
    public const int DivisorFieldNumber = 5;
    private float divisor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Divisor {
      get { return divisor_; }
      set {
        divisor_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 6;
    private long quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "Price1IsSet" field.</summary>
    public const int Price1IsSetFieldNumber = 7;
    private uint price1IsSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price1IsSet {
      get { return price1IsSet_; }
      set {
        price1IsSet_ = value;
      }
    }

    /// <summary>Field number for the "Price2IsSet" field.</summary>
    public const int Price2IsSetFieldNumber = 8;
    private uint price2IsSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price2IsSet {
      get { return price2IsSet_; }
      set {
        price2IsSet_ = value;
      }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 10;
    private global::DTCPB.TimeInForceEnum timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TimeInForceEnum TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "GoodTillDateTime" field.</summary>
    public const int GoodTillDateTimeFieldNumber = 11;
    private ulong goodTillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoodTillDateTime {
      get { return goodTillDateTime_; }
      set {
        goodTillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "UpdatePrice1OffsetToParent" field.</summary>
    public const int UpdatePrice1OffsetToParentFieldNumber = 12;
    private uint updatePrice1OffsetToParent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpdatePrice1OffsetToParent {
      get { return updatePrice1OffsetToParent_; }
      set {
        updatePrice1OffsetToParent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelReplaceOrderInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelReplaceOrderInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerOrderID != other.ServerOrderID) return false;
      if (ClientOrderID != other.ClientOrderID) return false;
      if (Price1 != other.Price1) return false;
      if (Price2 != other.Price2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Divisor, other.Divisor)) return false;
      if (Quantity != other.Quantity) return false;
      if (Price1IsSet != other.Price1IsSet) return false;
      if (Price2IsSet != other.Price2IsSet) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (GoodTillDateTime != other.GoodTillDateTime) return false;
      if (UpdatePrice1OffsetToParent != other.UpdatePrice1OffsetToParent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerOrderID.Length != 0) hash ^= ServerOrderID.GetHashCode();
      if (ClientOrderID.Length != 0) hash ^= ClientOrderID.GetHashCode();
      if (Price1 != 0L) hash ^= Price1.GetHashCode();
      if (Price2 != 0L) hash ^= Price2.GetHashCode();
      if (Divisor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Divisor);
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (Price1IsSet != 0) hash ^= Price1IsSet.GetHashCode();
      if (Price2IsSet != 0) hash ^= Price2IsSet.GetHashCode();
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (GoodTillDateTime != 0UL) hash ^= GoodTillDateTime.GetHashCode();
      if (UpdatePrice1OffsetToParent != 0) hash ^= UpdatePrice1OffsetToParent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerOrderID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientOrderID);
      }
      if (Price1 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Price1);
      }
      if (Price2 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Price2);
      }
      if (Divisor != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Divisor);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Quantity);
      }
      if (Price1IsSet != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Price1IsSet);
      }
      if (Price2IsSet != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Price2IsSet);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TimeInForce);
      }
      if (GoodTillDateTime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(GoodTillDateTime);
      }
      if (UpdatePrice1OffsetToParent != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(UpdatePrice1OffsetToParent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID);
      }
      if (Price1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price1);
      }
      if (Price2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price2);
      }
      if (Divisor != 0F) {
        size += 1 + 4;
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quantity);
      }
      if (Price1IsSet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price1IsSet);
      }
      if (Price2IsSet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price2IsSet);
      }
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (GoodTillDateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoodTillDateTime);
      }
      if (UpdatePrice1OffsetToParent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdatePrice1OffsetToParent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelReplaceOrderInt other) {
      if (other == null) {
        return;
      }
      if (other.ServerOrderID.Length != 0) {
        ServerOrderID = other.ServerOrderID;
      }
      if (other.ClientOrderID.Length != 0) {
        ClientOrderID = other.ClientOrderID;
      }
      if (other.Price1 != 0L) {
        Price1 = other.Price1;
      }
      if (other.Price2 != 0L) {
        Price2 = other.Price2;
      }
      if (other.Divisor != 0F) {
        Divisor = other.Divisor;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.Price1IsSet != 0) {
        Price1IsSet = other.Price1IsSet;
      }
      if (other.Price2IsSet != 0) {
        Price2IsSet = other.Price2IsSet;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.GoodTillDateTime != 0UL) {
        GoodTillDateTime = other.GoodTillDateTime;
      }
      if (other.UpdatePrice1OffsetToParent != 0) {
        UpdatePrice1OffsetToParent = other.UpdatePrice1OffsetToParent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerOrderID = input.ReadString();
            break;
          }
          case 18: {
            ClientOrderID = input.ReadString();
            break;
          }
          case 24: {
            Price1 = input.ReadInt64();
            break;
          }
          case 32: {
            Price2 = input.ReadInt64();
            break;
          }
          case 45: {
            Divisor = input.ReadFloat();
            break;
          }
          case 48: {
            Quantity = input.ReadInt64();
            break;
          }
          case 56: {
            Price1IsSet = input.ReadUInt32();
            break;
          }
          case 64: {
            Price2IsSet = input.ReadUInt32();
            break;
          }
          case 80: {
            timeInForce_ = (global::DTCPB.TimeInForceEnum) input.ReadEnum();
            break;
          }
          case 88: {
            GoodTillDateTime = input.ReadUInt64();
            break;
          }
          case 96: {
            UpdatePrice1OffsetToParent = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class CancelOrder : pb::IMessage<CancelOrder> {
    private static readonly pb::MessageParser<CancelOrder> _parser = new pb::MessageParser<CancelOrder>(() => new CancelOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrder(CancelOrder other) : this() {
      serverOrderID_ = other.serverOrderID_;
      clientOrderID_ = other.clientOrderID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelOrder Clone() {
      return new CancelOrder(this);
    }

    /// <summary>Field number for the "ServerOrderID" field.</summary>
    public const int ServerOrderIDFieldNumber = 1;
    private string serverOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerOrderID {
      get { return serverOrderID_; }
      set {
        serverOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID" field.</summary>
    public const int ClientOrderIDFieldNumber = 2;
    private string clientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID {
      get { return clientOrderID_; }
      set {
        clientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerOrderID != other.ServerOrderID) return false;
      if (ClientOrderID != other.ClientOrderID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerOrderID.Length != 0) hash ^= ServerOrderID.GetHashCode();
      if (ClientOrderID.Length != 0) hash ^= ClientOrderID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerOrderID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientOrderID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelOrder other) {
      if (other == null) {
        return;
      }
      if (other.ServerOrderID.Length != 0) {
        ServerOrderID = other.ServerOrderID;
      }
      if (other.ClientOrderID.Length != 0) {
        ClientOrderID = other.ClientOrderID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerOrderID = input.ReadString();
            break;
          }
          case 18: {
            ClientOrderID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SubmitNewOCOOrder : pb::IMessage<SubmitNewOCOOrder> {
    private static readonly pb::MessageParser<SubmitNewOCOOrder> _parser = new pb::MessageParser<SubmitNewOCOOrder>(() => new SubmitNewOCOOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitNewOCOOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewOCOOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewOCOOrder(SubmitNewOCOOrder other) : this() {
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      clientOrderID1_ = other.clientOrderID1_;
      orderType1_ = other.orderType1_;
      buySell1_ = other.buySell1_;
      price11_ = other.price11_;
      price21_ = other.price21_;
      quantity1_ = other.quantity1_;
      clientOrderID2_ = other.clientOrderID2_;
      orderType2_ = other.orderType2_;
      buySell2_ = other.buySell2_;
      price12_ = other.price12_;
      price22_ = other.price22_;
      quantity2_ = other.quantity2_;
      timeInForce_ = other.timeInForce_;
      goodTillDateTime_ = other.goodTillDateTime_;
      tradeAccount_ = other.tradeAccount_;
      isAutomatedOrder_ = other.isAutomatedOrder_;
      parentTriggerClientOrderID_ = other.parentTriggerClientOrderID_;
      freeFormText_ = other.freeFormText_;
      openOrClose_ = other.openOrClose_;
      partialFillHandling_ = other.partialFillHandling_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewOCOOrder Clone() {
      return new SubmitNewOCOOrder(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID_1" field.</summary>
    public const int ClientOrderID1FieldNumber = 3;
    private string clientOrderID1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID1 {
      get { return clientOrderID1_; }
      set {
        clientOrderID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderType_1" field.</summary>
    public const int OrderType1FieldNumber = 4;
    private global::DTCPB.OrderTypeEnum orderType1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderTypeEnum OrderType1 {
      get { return orderType1_; }
      set {
        orderType1_ = value;
      }
    }

    /// <summary>Field number for the "BuySell_1" field.</summary>
    public const int BuySell1FieldNumber = 5;
    private global::DTCPB.BuySellEnum buySell1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell1 {
      get { return buySell1_; }
      set {
        buySell1_ = value;
      }
    }

    /// <summary>Field number for the "Price1_1" field.</summary>
    public const int Price11FieldNumber = 6;
    private double price11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price11 {
      get { return price11_; }
      set {
        price11_ = value;
      }
    }

    /// <summary>Field number for the "Price2_1" field.</summary>
    public const int Price21FieldNumber = 7;
    private double price21_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price21 {
      get { return price21_; }
      set {
        price21_ = value;
      }
    }

    /// <summary>Field number for the "Quantity_1" field.</summary>
    public const int Quantity1FieldNumber = 8;
    private double quantity1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity1 {
      get { return quantity1_; }
      set {
        quantity1_ = value;
      }
    }

    /// <summary>Field number for the "ClientOrderID_2" field.</summary>
    public const int ClientOrderID2FieldNumber = 9;
    private string clientOrderID2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID2 {
      get { return clientOrderID2_; }
      set {
        clientOrderID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderType_2" field.</summary>
    public const int OrderType2FieldNumber = 10;
    private global::DTCPB.OrderTypeEnum orderType2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderTypeEnum OrderType2 {
      get { return orderType2_; }
      set {
        orderType2_ = value;
      }
    }

    /// <summary>Field number for the "BuySell_2" field.</summary>
    public const int BuySell2FieldNumber = 11;
    private global::DTCPB.BuySellEnum buySell2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell2 {
      get { return buySell2_; }
      set {
        buySell2_ = value;
      }
    }

    /// <summary>Field number for the "Price1_2" field.</summary>
    public const int Price12FieldNumber = 12;
    private double price12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price12 {
      get { return price12_; }
      set {
        price12_ = value;
      }
    }

    /// <summary>Field number for the "Price2_2" field.</summary>
    public const int Price22FieldNumber = 13;
    private double price22_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price22 {
      get { return price22_; }
      set {
        price22_ = value;
      }
    }

    /// <summary>Field number for the "Quantity_2" field.</summary>
    public const int Quantity2FieldNumber = 14;
    private double quantity2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity2 {
      get { return quantity2_; }
      set {
        quantity2_ = value;
      }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 15;
    private global::DTCPB.TimeInForceEnum timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TimeInForceEnum TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "GoodTillDateTime" field.</summary>
    public const int GoodTillDateTimeFieldNumber = 16;
    private long goodTillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GoodTillDateTime {
      get { return goodTillDateTime_; }
      set {
        goodTillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 17;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsAutomatedOrder" field.</summary>
    public const int IsAutomatedOrderFieldNumber = 18;
    private uint isAutomatedOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsAutomatedOrder {
      get { return isAutomatedOrder_; }
      set {
        isAutomatedOrder_ = value;
      }
    }

    /// <summary>Field number for the "ParentTriggerClientOrderID" field.</summary>
    public const int ParentTriggerClientOrderIDFieldNumber = 19;
    private string parentTriggerClientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentTriggerClientOrderID {
      get { return parentTriggerClientOrderID_; }
      set {
        parentTriggerClientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FreeFormText" field.</summary>
    public const int FreeFormTextFieldNumber = 20;
    private string freeFormText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreeFormText {
      get { return freeFormText_; }
      set {
        freeFormText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenOrClose" field.</summary>
    public const int OpenOrCloseFieldNumber = 21;
    private global::DTCPB.OpenCloseTradeEnum openOrClose_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OpenCloseTradeEnum OpenOrClose {
      get { return openOrClose_; }
      set {
        openOrClose_ = value;
      }
    }

    /// <summary>Field number for the "PartialFillHandling" field.</summary>
    public const int PartialFillHandlingFieldNumber = 22;
    private global::DTCPB.PartialFillHandlingEnum partialFillHandling_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.PartialFillHandlingEnum PartialFillHandling {
      get { return partialFillHandling_; }
      set {
        partialFillHandling_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitNewOCOOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitNewOCOOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (ClientOrderID1 != other.ClientOrderID1) return false;
      if (OrderType1 != other.OrderType1) return false;
      if (BuySell1 != other.BuySell1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price11, other.Price11)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price21, other.Price21)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity1, other.Quantity1)) return false;
      if (ClientOrderID2 != other.ClientOrderID2) return false;
      if (OrderType2 != other.OrderType2) return false;
      if (BuySell2 != other.BuySell2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price12, other.Price12)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price22, other.Price22)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity2, other.Quantity2)) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (GoodTillDateTime != other.GoodTillDateTime) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (IsAutomatedOrder != other.IsAutomatedOrder) return false;
      if (ParentTriggerClientOrderID != other.ParentTriggerClientOrderID) return false;
      if (FreeFormText != other.FreeFormText) return false;
      if (OpenOrClose != other.OpenOrClose) return false;
      if (PartialFillHandling != other.PartialFillHandling) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (ClientOrderID1.Length != 0) hash ^= ClientOrderID1.GetHashCode();
      if (OrderType1 != 0) hash ^= OrderType1.GetHashCode();
      if (BuySell1 != 0) hash ^= BuySell1.GetHashCode();
      if (Price11 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price11);
      if (Price21 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price21);
      if (Quantity1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity1);
      if (ClientOrderID2.Length != 0) hash ^= ClientOrderID2.GetHashCode();
      if (OrderType2 != 0) hash ^= OrderType2.GetHashCode();
      if (BuySell2 != 0) hash ^= BuySell2.GetHashCode();
      if (Price12 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price12);
      if (Price22 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price22);
      if (Quantity2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity2);
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (GoodTillDateTime != 0L) hash ^= GoodTillDateTime.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (IsAutomatedOrder != 0) hash ^= IsAutomatedOrder.GetHashCode();
      if (ParentTriggerClientOrderID.Length != 0) hash ^= ParentTriggerClientOrderID.GetHashCode();
      if (FreeFormText.Length != 0) hash ^= FreeFormText.GetHashCode();
      if (OpenOrClose != 0) hash ^= OpenOrClose.GetHashCode();
      if (PartialFillHandling != 0) hash ^= PartialFillHandling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Exchange);
      }
      if (ClientOrderID1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientOrderID1);
      }
      if (OrderType1 != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OrderType1);
      }
      if (BuySell1 != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BuySell1);
      }
      if (Price11 != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Price11);
      }
      if (Price21 != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Price21);
      }
      if (Quantity1 != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Quantity1);
      }
      if (ClientOrderID2.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ClientOrderID2);
      }
      if (OrderType2 != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OrderType2);
      }
      if (BuySell2 != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) BuySell2);
      }
      if (Price12 != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Price12);
      }
      if (Price22 != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Price22);
      }
      if (Quantity2 != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Quantity2);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        output.WriteRawTag(129, 1);
        output.WriteSFixed64(GoodTillDateTime);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TradeAccount);
      }
      if (IsAutomatedOrder != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(IsAutomatedOrder);
      }
      if (ParentTriggerClientOrderID.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ParentTriggerClientOrderID);
      }
      if (FreeFormText.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(FreeFormText);
      }
      if (OpenOrClose != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) OpenOrClose);
      }
      if (PartialFillHandling != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) PartialFillHandling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (ClientOrderID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID1);
      }
      if (OrderType1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType1);
      }
      if (BuySell1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell1);
      }
      if (Price11 != 0D) {
        size += 1 + 8;
      }
      if (Price21 != 0D) {
        size += 1 + 8;
      }
      if (Quantity1 != 0D) {
        size += 1 + 8;
      }
      if (ClientOrderID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID2);
      }
      if (OrderType2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType2);
      }
      if (BuySell2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell2);
      }
      if (Price12 != 0D) {
        size += 1 + 8;
      }
      if (Price22 != 0D) {
        size += 1 + 8;
      }
      if (Quantity2 != 0D) {
        size += 1 + 8;
      }
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        size += 2 + 8;
      }
      if (TradeAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (IsAutomatedOrder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsAutomatedOrder);
      }
      if (ParentTriggerClientOrderID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParentTriggerClientOrderID);
      }
      if (FreeFormText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FreeFormText);
      }
      if (OpenOrClose != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpenOrClose);
      }
      if (PartialFillHandling != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PartialFillHandling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitNewOCOOrder other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.ClientOrderID1.Length != 0) {
        ClientOrderID1 = other.ClientOrderID1;
      }
      if (other.OrderType1 != 0) {
        OrderType1 = other.OrderType1;
      }
      if (other.BuySell1 != 0) {
        BuySell1 = other.BuySell1;
      }
      if (other.Price11 != 0D) {
        Price11 = other.Price11;
      }
      if (other.Price21 != 0D) {
        Price21 = other.Price21;
      }
      if (other.Quantity1 != 0D) {
        Quantity1 = other.Quantity1;
      }
      if (other.ClientOrderID2.Length != 0) {
        ClientOrderID2 = other.ClientOrderID2;
      }
      if (other.OrderType2 != 0) {
        OrderType2 = other.OrderType2;
      }
      if (other.BuySell2 != 0) {
        BuySell2 = other.BuySell2;
      }
      if (other.Price12 != 0D) {
        Price12 = other.Price12;
      }
      if (other.Price22 != 0D) {
        Price22 = other.Price22;
      }
      if (other.Quantity2 != 0D) {
        Quantity2 = other.Quantity2;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.GoodTillDateTime != 0L) {
        GoodTillDateTime = other.GoodTillDateTime;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.IsAutomatedOrder != 0) {
        IsAutomatedOrder = other.IsAutomatedOrder;
      }
      if (other.ParentTriggerClientOrderID.Length != 0) {
        ParentTriggerClientOrderID = other.ParentTriggerClientOrderID;
      }
      if (other.FreeFormText.Length != 0) {
        FreeFormText = other.FreeFormText;
      }
      if (other.OpenOrClose != 0) {
        OpenOrClose = other.OpenOrClose;
      }
      if (other.PartialFillHandling != 0) {
        PartialFillHandling = other.PartialFillHandling;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            Exchange = input.ReadString();
            break;
          }
          case 26: {
            ClientOrderID1 = input.ReadString();
            break;
          }
          case 32: {
            orderType1_ = (global::DTCPB.OrderTypeEnum) input.ReadEnum();
            break;
          }
          case 40: {
            buySell1_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 49: {
            Price11 = input.ReadDouble();
            break;
          }
          case 57: {
            Price21 = input.ReadDouble();
            break;
          }
          case 65: {
            Quantity1 = input.ReadDouble();
            break;
          }
          case 74: {
            ClientOrderID2 = input.ReadString();
            break;
          }
          case 80: {
            orderType2_ = (global::DTCPB.OrderTypeEnum) input.ReadEnum();
            break;
          }
          case 88: {
            buySell2_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 97: {
            Price12 = input.ReadDouble();
            break;
          }
          case 105: {
            Price22 = input.ReadDouble();
            break;
          }
          case 113: {
            Quantity2 = input.ReadDouble();
            break;
          }
          case 120: {
            timeInForce_ = (global::DTCPB.TimeInForceEnum) input.ReadEnum();
            break;
          }
          case 129: {
            GoodTillDateTime = input.ReadSFixed64();
            break;
          }
          case 138: {
            TradeAccount = input.ReadString();
            break;
          }
          case 144: {
            IsAutomatedOrder = input.ReadUInt32();
            break;
          }
          case 154: {
            ParentTriggerClientOrderID = input.ReadString();
            break;
          }
          case 162: {
            FreeFormText = input.ReadString();
            break;
          }
          case 168: {
            openOrClose_ = (global::DTCPB.OpenCloseTradeEnum) input.ReadEnum();
            break;
          }
          case 176: {
            partialFillHandling_ = (global::DTCPB.PartialFillHandlingEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SubmitNewOCOOrderInt : pb::IMessage<SubmitNewOCOOrderInt> {
    private static readonly pb::MessageParser<SubmitNewOCOOrderInt> _parser = new pb::MessageParser<SubmitNewOCOOrderInt>(() => new SubmitNewOCOOrderInt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitNewOCOOrderInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewOCOOrderInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewOCOOrderInt(SubmitNewOCOOrderInt other) : this() {
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      clientOrderID1_ = other.clientOrderID1_;
      orderType1_ = other.orderType1_;
      buySell1_ = other.buySell1_;
      price11_ = other.price11_;
      price21_ = other.price21_;
      quantity1_ = other.quantity1_;
      clientOrderID2_ = other.clientOrderID2_;
      orderType2_ = other.orderType2_;
      buySell2_ = other.buySell2_;
      price12_ = other.price12_;
      price22_ = other.price22_;
      quantity2_ = other.quantity2_;
      timeInForce_ = other.timeInForce_;
      goodTillDateTime_ = other.goodTillDateTime_;
      tradeAccount_ = other.tradeAccount_;
      isAutomatedOrder_ = other.isAutomatedOrder_;
      parentTriggerClientOrderID_ = other.parentTriggerClientOrderID_;
      freeFormText_ = other.freeFormText_;
      divisor_ = other.divisor_;
      openOrClose_ = other.openOrClose_;
      partialFillHandling_ = other.partialFillHandling_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitNewOCOOrderInt Clone() {
      return new SubmitNewOCOOrderInt(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID_1" field.</summary>
    public const int ClientOrderID1FieldNumber = 3;
    private string clientOrderID1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID1 {
      get { return clientOrderID1_; }
      set {
        clientOrderID1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderType_1" field.</summary>
    public const int OrderType1FieldNumber = 4;
    private global::DTCPB.OrderTypeEnum orderType1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderTypeEnum OrderType1 {
      get { return orderType1_; }
      set {
        orderType1_ = value;
      }
    }

    /// <summary>Field number for the "BuySell_1" field.</summary>
    public const int BuySell1FieldNumber = 5;
    private global::DTCPB.BuySellEnum buySell1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell1 {
      get { return buySell1_; }
      set {
        buySell1_ = value;
      }
    }

    /// <summary>Field number for the "Price1_1" field.</summary>
    public const int Price11FieldNumber = 6;
    private long price11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price11 {
      get { return price11_; }
      set {
        price11_ = value;
      }
    }

    /// <summary>Field number for the "Price2_1" field.</summary>
    public const int Price21FieldNumber = 7;
    private long price21_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price21 {
      get { return price21_; }
      set {
        price21_ = value;
      }
    }

    /// <summary>Field number for the "Quantity_1" field.</summary>
    public const int Quantity1FieldNumber = 8;
    private long quantity1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity1 {
      get { return quantity1_; }
      set {
        quantity1_ = value;
      }
    }

    /// <summary>Field number for the "ClientOrderID_2" field.</summary>
    public const int ClientOrderID2FieldNumber = 9;
    private string clientOrderID2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID2 {
      get { return clientOrderID2_; }
      set {
        clientOrderID2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderType_2" field.</summary>
    public const int OrderType2FieldNumber = 10;
    private global::DTCPB.OrderTypeEnum orderType2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderTypeEnum OrderType2 {
      get { return orderType2_; }
      set {
        orderType2_ = value;
      }
    }

    /// <summary>Field number for the "BuySell_2" field.</summary>
    public const int BuySell2FieldNumber = 11;
    private global::DTCPB.BuySellEnum buySell2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell2 {
      get { return buySell2_; }
      set {
        buySell2_ = value;
      }
    }

    /// <summary>Field number for the "Price1_2" field.</summary>
    public const int Price12FieldNumber = 12;
    private long price12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price12 {
      get { return price12_; }
      set {
        price12_ = value;
      }
    }

    /// <summary>Field number for the "Price2_2" field.</summary>
    public const int Price22FieldNumber = 13;
    private long price22_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price22 {
      get { return price22_; }
      set {
        price22_ = value;
      }
    }

    /// <summary>Field number for the "Quantity_2" field.</summary>
    public const int Quantity2FieldNumber = 14;
    private long quantity2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity2 {
      get { return quantity2_; }
      set {
        quantity2_ = value;
      }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 15;
    private global::DTCPB.TimeInForceEnum timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TimeInForceEnum TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "GoodTillDateTime" field.</summary>
    public const int GoodTillDateTimeFieldNumber = 16;
    private long goodTillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GoodTillDateTime {
      get { return goodTillDateTime_; }
      set {
        goodTillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 17;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsAutomatedOrder" field.</summary>
    public const int IsAutomatedOrderFieldNumber = 18;
    private uint isAutomatedOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsAutomatedOrder {
      get { return isAutomatedOrder_; }
      set {
        isAutomatedOrder_ = value;
      }
    }

    /// <summary>Field number for the "ParentTriggerClientOrderID" field.</summary>
    public const int ParentTriggerClientOrderIDFieldNumber = 19;
    private string parentTriggerClientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentTriggerClientOrderID {
      get { return parentTriggerClientOrderID_; }
      set {
        parentTriggerClientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FreeFormText" field.</summary>
    public const int FreeFormTextFieldNumber = 20;
    private string freeFormText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreeFormText {
      get { return freeFormText_; }
      set {
        freeFormText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Divisor" field.</summary>
    public const int DivisorFieldNumber = 21;
    private float divisor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Divisor {
      get { return divisor_; }
      set {
        divisor_ = value;
      }
    }

    /// <summary>Field number for the "OpenOrClose" field.</summary>
    public const int OpenOrCloseFieldNumber = 22;
    private global::DTCPB.OpenCloseTradeEnum openOrClose_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OpenCloseTradeEnum OpenOrClose {
      get { return openOrClose_; }
      set {
        openOrClose_ = value;
      }
    }

    /// <summary>Field number for the "PartialFillHandling" field.</summary>
    public const int PartialFillHandlingFieldNumber = 23;
    private global::DTCPB.PartialFillHandlingEnum partialFillHandling_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.PartialFillHandlingEnum PartialFillHandling {
      get { return partialFillHandling_; }
      set {
        partialFillHandling_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitNewOCOOrderInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitNewOCOOrderInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (ClientOrderID1 != other.ClientOrderID1) return false;
      if (OrderType1 != other.OrderType1) return false;
      if (BuySell1 != other.BuySell1) return false;
      if (Price11 != other.Price11) return false;
      if (Price21 != other.Price21) return false;
      if (Quantity1 != other.Quantity1) return false;
      if (ClientOrderID2 != other.ClientOrderID2) return false;
      if (OrderType2 != other.OrderType2) return false;
      if (BuySell2 != other.BuySell2) return false;
      if (Price12 != other.Price12) return false;
      if (Price22 != other.Price22) return false;
      if (Quantity2 != other.Quantity2) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (GoodTillDateTime != other.GoodTillDateTime) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (IsAutomatedOrder != other.IsAutomatedOrder) return false;
      if (ParentTriggerClientOrderID != other.ParentTriggerClientOrderID) return false;
      if (FreeFormText != other.FreeFormText) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Divisor, other.Divisor)) return false;
      if (OpenOrClose != other.OpenOrClose) return false;
      if (PartialFillHandling != other.PartialFillHandling) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (ClientOrderID1.Length != 0) hash ^= ClientOrderID1.GetHashCode();
      if (OrderType1 != 0) hash ^= OrderType1.GetHashCode();
      if (BuySell1 != 0) hash ^= BuySell1.GetHashCode();
      if (Price11 != 0L) hash ^= Price11.GetHashCode();
      if (Price21 != 0L) hash ^= Price21.GetHashCode();
      if (Quantity1 != 0L) hash ^= Quantity1.GetHashCode();
      if (ClientOrderID2.Length != 0) hash ^= ClientOrderID2.GetHashCode();
      if (OrderType2 != 0) hash ^= OrderType2.GetHashCode();
      if (BuySell2 != 0) hash ^= BuySell2.GetHashCode();
      if (Price12 != 0L) hash ^= Price12.GetHashCode();
      if (Price22 != 0L) hash ^= Price22.GetHashCode();
      if (Quantity2 != 0L) hash ^= Quantity2.GetHashCode();
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (GoodTillDateTime != 0L) hash ^= GoodTillDateTime.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (IsAutomatedOrder != 0) hash ^= IsAutomatedOrder.GetHashCode();
      if (ParentTriggerClientOrderID.Length != 0) hash ^= ParentTriggerClientOrderID.GetHashCode();
      if (FreeFormText.Length != 0) hash ^= FreeFormText.GetHashCode();
      if (Divisor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Divisor);
      if (OpenOrClose != 0) hash ^= OpenOrClose.GetHashCode();
      if (PartialFillHandling != 0) hash ^= PartialFillHandling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Exchange);
      }
      if (ClientOrderID1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientOrderID1);
      }
      if (OrderType1 != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OrderType1);
      }
      if (BuySell1 != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BuySell1);
      }
      if (Price11 != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Price11);
      }
      if (Price21 != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Price21);
      }
      if (Quantity1 != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Quantity1);
      }
      if (ClientOrderID2.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ClientOrderID2);
      }
      if (OrderType2 != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OrderType2);
      }
      if (BuySell2 != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) BuySell2);
      }
      if (Price12 != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Price12);
      }
      if (Price22 != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Price22);
      }
      if (Quantity2 != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Quantity2);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        output.WriteRawTag(129, 1);
        output.WriteSFixed64(GoodTillDateTime);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(TradeAccount);
      }
      if (IsAutomatedOrder != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(IsAutomatedOrder);
      }
      if (ParentTriggerClientOrderID.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ParentTriggerClientOrderID);
      }
      if (FreeFormText.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(FreeFormText);
      }
      if (Divisor != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Divisor);
      }
      if (OpenOrClose != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) OpenOrClose);
      }
      if (PartialFillHandling != 0) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) PartialFillHandling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (ClientOrderID1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID1);
      }
      if (OrderType1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType1);
      }
      if (BuySell1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell1);
      }
      if (Price11 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price11);
      }
      if (Price21 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price21);
      }
      if (Quantity1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quantity1);
      }
      if (ClientOrderID2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID2);
      }
      if (OrderType2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType2);
      }
      if (BuySell2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell2);
      }
      if (Price12 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price12);
      }
      if (Price22 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price22);
      }
      if (Quantity2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quantity2);
      }
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        size += 2 + 8;
      }
      if (TradeAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (IsAutomatedOrder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsAutomatedOrder);
      }
      if (ParentTriggerClientOrderID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParentTriggerClientOrderID);
      }
      if (FreeFormText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FreeFormText);
      }
      if (Divisor != 0F) {
        size += 2 + 4;
      }
      if (OpenOrClose != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpenOrClose);
      }
      if (PartialFillHandling != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PartialFillHandling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitNewOCOOrderInt other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.ClientOrderID1.Length != 0) {
        ClientOrderID1 = other.ClientOrderID1;
      }
      if (other.OrderType1 != 0) {
        OrderType1 = other.OrderType1;
      }
      if (other.BuySell1 != 0) {
        BuySell1 = other.BuySell1;
      }
      if (other.Price11 != 0L) {
        Price11 = other.Price11;
      }
      if (other.Price21 != 0L) {
        Price21 = other.Price21;
      }
      if (other.Quantity1 != 0L) {
        Quantity1 = other.Quantity1;
      }
      if (other.ClientOrderID2.Length != 0) {
        ClientOrderID2 = other.ClientOrderID2;
      }
      if (other.OrderType2 != 0) {
        OrderType2 = other.OrderType2;
      }
      if (other.BuySell2 != 0) {
        BuySell2 = other.BuySell2;
      }
      if (other.Price12 != 0L) {
        Price12 = other.Price12;
      }
      if (other.Price22 != 0L) {
        Price22 = other.Price22;
      }
      if (other.Quantity2 != 0L) {
        Quantity2 = other.Quantity2;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.GoodTillDateTime != 0L) {
        GoodTillDateTime = other.GoodTillDateTime;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.IsAutomatedOrder != 0) {
        IsAutomatedOrder = other.IsAutomatedOrder;
      }
      if (other.ParentTriggerClientOrderID.Length != 0) {
        ParentTriggerClientOrderID = other.ParentTriggerClientOrderID;
      }
      if (other.FreeFormText.Length != 0) {
        FreeFormText = other.FreeFormText;
      }
      if (other.Divisor != 0F) {
        Divisor = other.Divisor;
      }
      if (other.OpenOrClose != 0) {
        OpenOrClose = other.OpenOrClose;
      }
      if (other.PartialFillHandling != 0) {
        PartialFillHandling = other.PartialFillHandling;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            Exchange = input.ReadString();
            break;
          }
          case 26: {
            ClientOrderID1 = input.ReadString();
            break;
          }
          case 32: {
            orderType1_ = (global::DTCPB.OrderTypeEnum) input.ReadEnum();
            break;
          }
          case 40: {
            buySell1_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 48: {
            Price11 = input.ReadInt64();
            break;
          }
          case 56: {
            Price21 = input.ReadInt64();
            break;
          }
          case 64: {
            Quantity1 = input.ReadInt64();
            break;
          }
          case 74: {
            ClientOrderID2 = input.ReadString();
            break;
          }
          case 80: {
            orderType2_ = (global::DTCPB.OrderTypeEnum) input.ReadEnum();
            break;
          }
          case 88: {
            buySell2_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 96: {
            Price12 = input.ReadInt64();
            break;
          }
          case 104: {
            Price22 = input.ReadInt64();
            break;
          }
          case 112: {
            Quantity2 = input.ReadInt64();
            break;
          }
          case 120: {
            timeInForce_ = (global::DTCPB.TimeInForceEnum) input.ReadEnum();
            break;
          }
          case 129: {
            GoodTillDateTime = input.ReadSFixed64();
            break;
          }
          case 138: {
            TradeAccount = input.ReadString();
            break;
          }
          case 144: {
            IsAutomatedOrder = input.ReadUInt32();
            break;
          }
          case 154: {
            ParentTriggerClientOrderID = input.ReadString();
            break;
          }
          case 162: {
            FreeFormText = input.ReadString();
            break;
          }
          case 173: {
            Divisor = input.ReadFloat();
            break;
          }
          case 176: {
            openOrClose_ = (global::DTCPB.OpenCloseTradeEnum) input.ReadEnum();
            break;
          }
          case 184: {
            partialFillHandling_ = (global::DTCPB.PartialFillHandlingEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class OpenOrdersRequest : pb::IMessage<OpenOrdersRequest> {
    private static readonly pb::MessageParser<OpenOrdersRequest> _parser = new pb::MessageParser<OpenOrdersRequest>(() => new OpenOrdersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenOrdersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenOrdersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenOrdersRequest(OpenOrdersRequest other) : this() {
      requestID_ = other.requestID_;
      requestAllOrders_ = other.requestAllOrders_;
      serverOrderID_ = other.serverOrderID_;
      tradeAccount_ = other.tradeAccount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenOrdersRequest Clone() {
      return new OpenOrdersRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RequestAllOrders" field.</summary>
    public const int RequestAllOrdersFieldNumber = 2;
    private int requestAllOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestAllOrders {
      get { return requestAllOrders_; }
      set {
        requestAllOrders_ = value;
      }
    }

    /// <summary>Field number for the "ServerOrderID" field.</summary>
    public const int ServerOrderIDFieldNumber = 3;
    private string serverOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerOrderID {
      get { return serverOrderID_; }
      set {
        serverOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 4;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenOrdersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenOrdersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RequestAllOrders != other.RequestAllOrders) return false;
      if (ServerOrderID != other.ServerOrderID) return false;
      if (TradeAccount != other.TradeAccount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RequestAllOrders != 0) hash ^= RequestAllOrders.GetHashCode();
      if (ServerOrderID.Length != 0) hash ^= ServerOrderID.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RequestAllOrders != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RequestAllOrders);
      }
      if (ServerOrderID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerOrderID);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TradeAccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RequestAllOrders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestAllOrders);
      }
      if (ServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerOrderID);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenOrdersRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RequestAllOrders != 0) {
        RequestAllOrders = other.RequestAllOrders;
      }
      if (other.ServerOrderID.Length != 0) {
        ServerOrderID = other.ServerOrderID;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 16: {
            RequestAllOrders = input.ReadInt32();
            break;
          }
          case 26: {
            ServerOrderID = input.ReadString();
            break;
          }
          case 34: {
            TradeAccount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalOrderFillsRequest : pb::IMessage<HistoricalOrderFillsRequest> {
    private static readonly pb::MessageParser<HistoricalOrderFillsRequest> _parser = new pb::MessageParser<HistoricalOrderFillsRequest>(() => new HistoricalOrderFillsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalOrderFillsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillsRequest(HistoricalOrderFillsRequest other) : this() {
      requestID_ = other.requestID_;
      serverOrderID_ = other.serverOrderID_;
      numberOfDays_ = other.numberOfDays_;
      tradeAccount_ = other.tradeAccount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillsRequest Clone() {
      return new HistoricalOrderFillsRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "ServerOrderID" field.</summary>
    public const int ServerOrderIDFieldNumber = 2;
    private string serverOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerOrderID {
      get { return serverOrderID_; }
      set {
        serverOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NumberOfDays" field.</summary>
    public const int NumberOfDaysFieldNumber = 3;
    private int numberOfDays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfDays {
      get { return numberOfDays_; }
      set {
        numberOfDays_ = value;
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 4;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalOrderFillsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalOrderFillsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (ServerOrderID != other.ServerOrderID) return false;
      if (NumberOfDays != other.NumberOfDays) return false;
      if (TradeAccount != other.TradeAccount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (ServerOrderID.Length != 0) hash ^= ServerOrderID.GetHashCode();
      if (NumberOfDays != 0) hash ^= NumberOfDays.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (ServerOrderID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerOrderID);
      }
      if (NumberOfDays != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumberOfDays);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TradeAccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (ServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerOrderID);
      }
      if (NumberOfDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfDays);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalOrderFillsRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.ServerOrderID.Length != 0) {
        ServerOrderID = other.ServerOrderID;
      }
      if (other.NumberOfDays != 0) {
        NumberOfDays = other.NumberOfDays;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            ServerOrderID = input.ReadString();
            break;
          }
          case 24: {
            NumberOfDays = input.ReadInt32();
            break;
          }
          case 34: {
            TradeAccount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalOrderFillsReject : pb::IMessage<HistoricalOrderFillsReject> {
    private static readonly pb::MessageParser<HistoricalOrderFillsReject> _parser = new pb::MessageParser<HistoricalOrderFillsReject>(() => new HistoricalOrderFillsReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalOrderFillsReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillsReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillsReject(HistoricalOrderFillsReject other) : this() {
      requestID_ = other.requestID_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillsReject Clone() {
      return new HistoricalOrderFillsReject(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalOrderFillsReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalOrderFillsReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalOrderFillsReject other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class CurrentPositionsRequest : pb::IMessage<CurrentPositionsRequest> {
    private static readonly pb::MessageParser<CurrentPositionsRequest> _parser = new pb::MessageParser<CurrentPositionsRequest>(() => new CurrentPositionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentPositionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentPositionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentPositionsRequest(CurrentPositionsRequest other) : this() {
      requestID_ = other.requestID_;
      tradeAccount_ = other.tradeAccount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentPositionsRequest Clone() {
      return new CurrentPositionsRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 2;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentPositionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentPositionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (TradeAccount != other.TradeAccount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TradeAccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentPositionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            TradeAccount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class CurrentPositionsReject : pb::IMessage<CurrentPositionsReject> {
    private static readonly pb::MessageParser<CurrentPositionsReject> _parser = new pb::MessageParser<CurrentPositionsReject>(() => new CurrentPositionsReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentPositionsReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentPositionsReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentPositionsReject(CurrentPositionsReject other) : this() {
      requestID_ = other.requestID_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentPositionsReject Clone() {
      return new CurrentPositionsReject(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentPositionsReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentPositionsReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentPositionsReject other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class OrderUpdate : pb::IMessage<OrderUpdate> {
    private static readonly pb::MessageParser<OrderUpdate> _parser = new pb::MessageParser<OrderUpdate>(() => new OrderUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderUpdate(OrderUpdate other) : this() {
      requestID_ = other.requestID_;
      totalNumMessages_ = other.totalNumMessages_;
      messageNumber_ = other.messageNumber_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      previousServerOrderID_ = other.previousServerOrderID_;
      serverOrderID_ = other.serverOrderID_;
      clientOrderID_ = other.clientOrderID_;
      exchangeOrderID_ = other.exchangeOrderID_;
      orderStatus_ = other.orderStatus_;
      orderUpdateReason_ = other.orderUpdateReason_;
      orderType_ = other.orderType_;
      buySell_ = other.buySell_;
      price1_ = other.price1_;
      price2_ = other.price2_;
      timeInForce_ = other.timeInForce_;
      goodTillDateTime_ = other.goodTillDateTime_;
      orderQuantity_ = other.orderQuantity_;
      filledQuantity_ = other.filledQuantity_;
      remainingQuantity_ = other.remainingQuantity_;
      averageFillPrice_ = other.averageFillPrice_;
      lastFillPrice_ = other.lastFillPrice_;
      lastFillDateTime_ = other.lastFillDateTime_;
      lastFillQuantity_ = other.lastFillQuantity_;
      lastFillExecutionID_ = other.lastFillExecutionID_;
      tradeAccount_ = other.tradeAccount_;
      infoText_ = other.infoText_;
      noOrders_ = other.noOrders_;
      parentServerOrderID_ = other.parentServerOrderID_;
      oCOLinkedOrderServerOrderID_ = other.oCOLinkedOrderServerOrderID_;
      openOrClose_ = other.openOrClose_;
      previousClientOrderID_ = other.previousClientOrderID_;
      freeFormText_ = other.freeFormText_;
      orderReceivedDateTime_ = other.orderReceivedDateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderUpdate Clone() {
      return new OrderUpdate(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "TotalNumMessages" field.</summary>
    public const int TotalNumMessagesFieldNumber = 2;
    private int totalNumMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNumMessages {
      get { return totalNumMessages_; }
      set {
        totalNumMessages_ = value;
      }
    }

    /// <summary>Field number for the "MessageNumber" field.</summary>
    public const int MessageNumberFieldNumber = 3;
    private int messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreviousServerOrderID" field.</summary>
    public const int PreviousServerOrderIDFieldNumber = 6;
    private string previousServerOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreviousServerOrderID {
      get { return previousServerOrderID_; }
      set {
        previousServerOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerOrderID" field.</summary>
    public const int ServerOrderIDFieldNumber = 7;
    private string serverOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerOrderID {
      get { return serverOrderID_; }
      set {
        serverOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientOrderID" field.</summary>
    public const int ClientOrderIDFieldNumber = 8;
    private string clientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientOrderID {
      get { return clientOrderID_; }
      set {
        clientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExchangeOrderID" field.</summary>
    public const int ExchangeOrderIDFieldNumber = 9;
    private string exchangeOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExchangeOrderID {
      get { return exchangeOrderID_; }
      set {
        exchangeOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderStatus" field.</summary>
    public const int OrderStatusFieldNumber = 10;
    private global::DTCPB.OrderStatusEnum orderStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderStatusEnum OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "OrderUpdateReason" field.</summary>
    public const int OrderUpdateReasonFieldNumber = 11;
    private global::DTCPB.OrderUpdateReasonEnum orderUpdateReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderUpdateReasonEnum OrderUpdateReason {
      get { return orderUpdateReason_; }
      set {
        orderUpdateReason_ = value;
      }
    }

    /// <summary>Field number for the "OrderType" field.</summary>
    public const int OrderTypeFieldNumber = 12;
    private global::DTCPB.OrderTypeEnum orderType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OrderTypeEnum OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "BuySell" field.</summary>
    public const int BuySellFieldNumber = 13;
    private global::DTCPB.BuySellEnum buySell_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell {
      get { return buySell_; }
      set {
        buySell_ = value;
      }
    }

    /// <summary>Field number for the "Price1" field.</summary>
    public const int Price1FieldNumber = 14;
    private double price1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price1 {
      get { return price1_; }
      set {
        price1_ = value;
      }
    }

    /// <summary>Field number for the "Price2" field.</summary>
    public const int Price2FieldNumber = 15;
    private double price2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price2 {
      get { return price2_; }
      set {
        price2_ = value;
      }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 16;
    private global::DTCPB.TimeInForceEnum timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.TimeInForceEnum TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "GoodTillDateTime" field.</summary>
    public const int GoodTillDateTimeFieldNumber = 17;
    private long goodTillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GoodTillDateTime {
      get { return goodTillDateTime_; }
      set {
        goodTillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "OrderQuantity" field.</summary>
    public const int OrderQuantityFieldNumber = 18;
    private double orderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OrderQuantity {
      get { return orderQuantity_; }
      set {
        orderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "FilledQuantity" field.</summary>
    public const int FilledQuantityFieldNumber = 19;
    private double filledQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FilledQuantity {
      get { return filledQuantity_; }
      set {
        filledQuantity_ = value;
      }
    }

    /// <summary>Field number for the "RemainingQuantity" field.</summary>
    public const int RemainingQuantityFieldNumber = 20;
    private double remainingQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RemainingQuantity {
      get { return remainingQuantity_; }
      set {
        remainingQuantity_ = value;
      }
    }

    /// <summary>Field number for the "AverageFillPrice" field.</summary>
    public const int AverageFillPriceFieldNumber = 21;
    private double averageFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AverageFillPrice {
      get { return averageFillPrice_; }
      set {
        averageFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "LastFillPrice" field.</summary>
    public const int LastFillPriceFieldNumber = 22;
    private double lastFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastFillPrice {
      get { return lastFillPrice_; }
      set {
        lastFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "LastFillDateTime" field.</summary>
    public const int LastFillDateTimeFieldNumber = 23;
    private long lastFillDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastFillDateTime {
      get { return lastFillDateTime_; }
      set {
        lastFillDateTime_ = value;
      }
    }

    /// <summary>Field number for the "LastFillQuantity" field.</summary>
    public const int LastFillQuantityFieldNumber = 24;
    private double lastFillQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastFillQuantity {
      get { return lastFillQuantity_; }
      set {
        lastFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "LastFillExecutionID" field.</summary>
    public const int LastFillExecutionIDFieldNumber = 25;
    private string lastFillExecutionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastFillExecutionID {
      get { return lastFillExecutionID_; }
      set {
        lastFillExecutionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 26;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InfoText" field.</summary>
    public const int InfoTextFieldNumber = 27;
    private string infoText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InfoText {
      get { return infoText_; }
      set {
        infoText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NoOrders" field.</summary>
    public const int NoOrdersFieldNumber = 28;
    private uint noOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoOrders {
      get { return noOrders_; }
      set {
        noOrders_ = value;
      }
    }

    /// <summary>Field number for the "ParentServerOrderID" field.</summary>
    public const int ParentServerOrderIDFieldNumber = 29;
    private string parentServerOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentServerOrderID {
      get { return parentServerOrderID_; }
      set {
        parentServerOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OCOLinkedOrderServerOrderID" field.</summary>
    public const int OCOLinkedOrderServerOrderIDFieldNumber = 30;
    private string oCOLinkedOrderServerOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OCOLinkedOrderServerOrderID {
      get { return oCOLinkedOrderServerOrderID_; }
      set {
        oCOLinkedOrderServerOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenOrClose" field.</summary>
    public const int OpenOrCloseFieldNumber = 31;
    private global::DTCPB.OpenCloseTradeEnum openOrClose_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OpenCloseTradeEnum OpenOrClose {
      get { return openOrClose_; }
      set {
        openOrClose_ = value;
      }
    }

    /// <summary>Field number for the "PreviousClientOrderID" field.</summary>
    public const int PreviousClientOrderIDFieldNumber = 32;
    private string previousClientOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreviousClientOrderID {
      get { return previousClientOrderID_; }
      set {
        previousClientOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FreeFormText" field.</summary>
    public const int FreeFormTextFieldNumber = 33;
    private string freeFormText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FreeFormText {
      get { return freeFormText_; }
      set {
        freeFormText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderReceivedDateTime" field.</summary>
    public const int OrderReceivedDateTimeFieldNumber = 34;
    private long orderReceivedDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrderReceivedDateTime {
      get { return orderReceivedDateTime_; }
      set {
        orderReceivedDateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (TotalNumMessages != other.TotalNumMessages) return false;
      if (MessageNumber != other.MessageNumber) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (PreviousServerOrderID != other.PreviousServerOrderID) return false;
      if (ServerOrderID != other.ServerOrderID) return false;
      if (ClientOrderID != other.ClientOrderID) return false;
      if (ExchangeOrderID != other.ExchangeOrderID) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (OrderUpdateReason != other.OrderUpdateReason) return false;
      if (OrderType != other.OrderType) return false;
      if (BuySell != other.BuySell) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price1, other.Price1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price2, other.Price2)) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (GoodTillDateTime != other.GoodTillDateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderQuantity, other.OrderQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FilledQuantity, other.FilledQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RemainingQuantity, other.RemainingQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageFillPrice, other.AverageFillPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastFillPrice, other.LastFillPrice)) return false;
      if (LastFillDateTime != other.LastFillDateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastFillQuantity, other.LastFillQuantity)) return false;
      if (LastFillExecutionID != other.LastFillExecutionID) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (InfoText != other.InfoText) return false;
      if (NoOrders != other.NoOrders) return false;
      if (ParentServerOrderID != other.ParentServerOrderID) return false;
      if (OCOLinkedOrderServerOrderID != other.OCOLinkedOrderServerOrderID) return false;
      if (OpenOrClose != other.OpenOrClose) return false;
      if (PreviousClientOrderID != other.PreviousClientOrderID) return false;
      if (FreeFormText != other.FreeFormText) return false;
      if (OrderReceivedDateTime != other.OrderReceivedDateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (TotalNumMessages != 0) hash ^= TotalNumMessages.GetHashCode();
      if (MessageNumber != 0) hash ^= MessageNumber.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (PreviousServerOrderID.Length != 0) hash ^= PreviousServerOrderID.GetHashCode();
      if (ServerOrderID.Length != 0) hash ^= ServerOrderID.GetHashCode();
      if (ClientOrderID.Length != 0) hash ^= ClientOrderID.GetHashCode();
      if (ExchangeOrderID.Length != 0) hash ^= ExchangeOrderID.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (OrderUpdateReason != 0) hash ^= OrderUpdateReason.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (BuySell != 0) hash ^= BuySell.GetHashCode();
      if (Price1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price1);
      if (Price2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price2);
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (GoodTillDateTime != 0L) hash ^= GoodTillDateTime.GetHashCode();
      if (OrderQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderQuantity);
      if (FilledQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FilledQuantity);
      if (RemainingQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RemainingQuantity);
      if (AverageFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageFillPrice);
      if (LastFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastFillPrice);
      if (LastFillDateTime != 0L) hash ^= LastFillDateTime.GetHashCode();
      if (LastFillQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastFillQuantity);
      if (LastFillExecutionID.Length != 0) hash ^= LastFillExecutionID.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (InfoText.Length != 0) hash ^= InfoText.GetHashCode();
      if (NoOrders != 0) hash ^= NoOrders.GetHashCode();
      if (ParentServerOrderID.Length != 0) hash ^= ParentServerOrderID.GetHashCode();
      if (OCOLinkedOrderServerOrderID.Length != 0) hash ^= OCOLinkedOrderServerOrderID.GetHashCode();
      if (OpenOrClose != 0) hash ^= OpenOrClose.GetHashCode();
      if (PreviousClientOrderID.Length != 0) hash ^= PreviousClientOrderID.GetHashCode();
      if (FreeFormText.Length != 0) hash ^= FreeFormText.GetHashCode();
      if (OrderReceivedDateTime != 0L) hash ^= OrderReceivedDateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (TotalNumMessages != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalNumMessages);
      }
      if (MessageNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MessageNumber);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (PreviousServerOrderID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PreviousServerOrderID);
      }
      if (ServerOrderID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientOrderID);
      }
      if (ExchangeOrderID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ExchangeOrderID);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OrderStatus);
      }
      if (OrderUpdateReason != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) OrderUpdateReason);
      }
      if (OrderType != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OrderType);
      }
      if (BuySell != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) BuySell);
      }
      if (Price1 != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Price1);
      }
      if (Price2 != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Price2);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        output.WriteRawTag(137, 1);
        output.WriteSFixed64(GoodTillDateTime);
      }
      if (OrderQuantity != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(OrderQuantity);
      }
      if (FilledQuantity != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(FilledQuantity);
      }
      if (RemainingQuantity != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(RemainingQuantity);
      }
      if (AverageFillPrice != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(AverageFillPrice);
      }
      if (LastFillPrice != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(LastFillPrice);
      }
      if (LastFillDateTime != 0L) {
        output.WriteRawTag(185, 1);
        output.WriteSFixed64(LastFillDateTime);
      }
      if (LastFillQuantity != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(LastFillQuantity);
      }
      if (LastFillExecutionID.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(LastFillExecutionID);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(TradeAccount);
      }
      if (InfoText.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(InfoText);
      }
      if (NoOrders != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(NoOrders);
      }
      if (ParentServerOrderID.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ParentServerOrderID);
      }
      if (OCOLinkedOrderServerOrderID.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(OCOLinkedOrderServerOrderID);
      }
      if (OpenOrClose != 0) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) OpenOrClose);
      }
      if (PreviousClientOrderID.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(PreviousClientOrderID);
      }
      if (FreeFormText.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(FreeFormText);
      }
      if (OrderReceivedDateTime != 0L) {
        output.WriteRawTag(145, 2);
        output.WriteSFixed64(OrderReceivedDateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (TotalNumMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumMessages);
      }
      if (MessageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageNumber);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (PreviousServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviousServerOrderID);
      }
      if (ServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerOrderID);
      }
      if (ClientOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientOrderID);
      }
      if (ExchangeOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeOrderID);
      }
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderStatus);
      }
      if (OrderUpdateReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderUpdateReason);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (BuySell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell);
      }
      if (Price1 != 0D) {
        size += 1 + 8;
      }
      if (Price2 != 0D) {
        size += 1 + 8;
      }
      if (TimeInForce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (GoodTillDateTime != 0L) {
        size += 2 + 8;
      }
      if (OrderQuantity != 0D) {
        size += 2 + 8;
      }
      if (FilledQuantity != 0D) {
        size += 2 + 8;
      }
      if (RemainingQuantity != 0D) {
        size += 2 + 8;
      }
      if (AverageFillPrice != 0D) {
        size += 2 + 8;
      }
      if (LastFillPrice != 0D) {
        size += 2 + 8;
      }
      if (LastFillDateTime != 0L) {
        size += 2 + 8;
      }
      if (LastFillQuantity != 0D) {
        size += 2 + 8;
      }
      if (LastFillExecutionID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastFillExecutionID);
      }
      if (TradeAccount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (InfoText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InfoText);
      }
      if (NoOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NoOrders);
      }
      if (ParentServerOrderID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParentServerOrderID);
      }
      if (OCOLinkedOrderServerOrderID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OCOLinkedOrderServerOrderID);
      }
      if (OpenOrClose != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OpenOrClose);
      }
      if (PreviousClientOrderID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreviousClientOrderID);
      }
      if (FreeFormText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FreeFormText);
      }
      if (OrderReceivedDateTime != 0L) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderUpdate other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.TotalNumMessages != 0) {
        TotalNumMessages = other.TotalNumMessages;
      }
      if (other.MessageNumber != 0) {
        MessageNumber = other.MessageNumber;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.PreviousServerOrderID.Length != 0) {
        PreviousServerOrderID = other.PreviousServerOrderID;
      }
      if (other.ServerOrderID.Length != 0) {
        ServerOrderID = other.ServerOrderID;
      }
      if (other.ClientOrderID.Length != 0) {
        ClientOrderID = other.ClientOrderID;
      }
      if (other.ExchangeOrderID.Length != 0) {
        ExchangeOrderID = other.ExchangeOrderID;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.OrderUpdateReason != 0) {
        OrderUpdateReason = other.OrderUpdateReason;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.BuySell != 0) {
        BuySell = other.BuySell;
      }
      if (other.Price1 != 0D) {
        Price1 = other.Price1;
      }
      if (other.Price2 != 0D) {
        Price2 = other.Price2;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.GoodTillDateTime != 0L) {
        GoodTillDateTime = other.GoodTillDateTime;
      }
      if (other.OrderQuantity != 0D) {
        OrderQuantity = other.OrderQuantity;
      }
      if (other.FilledQuantity != 0D) {
        FilledQuantity = other.FilledQuantity;
      }
      if (other.RemainingQuantity != 0D) {
        RemainingQuantity = other.RemainingQuantity;
      }
      if (other.AverageFillPrice != 0D) {
        AverageFillPrice = other.AverageFillPrice;
      }
      if (other.LastFillPrice != 0D) {
        LastFillPrice = other.LastFillPrice;
      }
      if (other.LastFillDateTime != 0L) {
        LastFillDateTime = other.LastFillDateTime;
      }
      if (other.LastFillQuantity != 0D) {
        LastFillQuantity = other.LastFillQuantity;
      }
      if (other.LastFillExecutionID.Length != 0) {
        LastFillExecutionID = other.LastFillExecutionID;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.InfoText.Length != 0) {
        InfoText = other.InfoText;
      }
      if (other.NoOrders != 0) {
        NoOrders = other.NoOrders;
      }
      if (other.ParentServerOrderID.Length != 0) {
        ParentServerOrderID = other.ParentServerOrderID;
      }
      if (other.OCOLinkedOrderServerOrderID.Length != 0) {
        OCOLinkedOrderServerOrderID = other.OCOLinkedOrderServerOrderID;
      }
      if (other.OpenOrClose != 0) {
        OpenOrClose = other.OpenOrClose;
      }
      if (other.PreviousClientOrderID.Length != 0) {
        PreviousClientOrderID = other.PreviousClientOrderID;
      }
      if (other.FreeFormText.Length != 0) {
        FreeFormText = other.FreeFormText;
      }
      if (other.OrderReceivedDateTime != 0L) {
        OrderReceivedDateTime = other.OrderReceivedDateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 16: {
            TotalNumMessages = input.ReadInt32();
            break;
          }
          case 24: {
            MessageNumber = input.ReadInt32();
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 50: {
            PreviousServerOrderID = input.ReadString();
            break;
          }
          case 58: {
            ServerOrderID = input.ReadString();
            break;
          }
          case 66: {
            ClientOrderID = input.ReadString();
            break;
          }
          case 74: {
            ExchangeOrderID = input.ReadString();
            break;
          }
          case 80: {
            orderStatus_ = (global::DTCPB.OrderStatusEnum) input.ReadEnum();
            break;
          }
          case 88: {
            orderUpdateReason_ = (global::DTCPB.OrderUpdateReasonEnum) input.ReadEnum();
            break;
          }
          case 96: {
            orderType_ = (global::DTCPB.OrderTypeEnum) input.ReadEnum();
            break;
          }
          case 104: {
            buySell_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 113: {
            Price1 = input.ReadDouble();
            break;
          }
          case 121: {
            Price2 = input.ReadDouble();
            break;
          }
          case 128: {
            timeInForce_ = (global::DTCPB.TimeInForceEnum) input.ReadEnum();
            break;
          }
          case 137: {
            GoodTillDateTime = input.ReadSFixed64();
            break;
          }
          case 145: {
            OrderQuantity = input.ReadDouble();
            break;
          }
          case 153: {
            FilledQuantity = input.ReadDouble();
            break;
          }
          case 161: {
            RemainingQuantity = input.ReadDouble();
            break;
          }
          case 169: {
            AverageFillPrice = input.ReadDouble();
            break;
          }
          case 177: {
            LastFillPrice = input.ReadDouble();
            break;
          }
          case 185: {
            LastFillDateTime = input.ReadSFixed64();
            break;
          }
          case 193: {
            LastFillQuantity = input.ReadDouble();
            break;
          }
          case 202: {
            LastFillExecutionID = input.ReadString();
            break;
          }
          case 210: {
            TradeAccount = input.ReadString();
            break;
          }
          case 218: {
            InfoText = input.ReadString();
            break;
          }
          case 224: {
            NoOrders = input.ReadUInt32();
            break;
          }
          case 234: {
            ParentServerOrderID = input.ReadString();
            break;
          }
          case 242: {
            OCOLinkedOrderServerOrderID = input.ReadString();
            break;
          }
          case 248: {
            openOrClose_ = (global::DTCPB.OpenCloseTradeEnum) input.ReadEnum();
            break;
          }
          case 258: {
            PreviousClientOrderID = input.ReadString();
            break;
          }
          case 266: {
            FreeFormText = input.ReadString();
            break;
          }
          case 273: {
            OrderReceivedDateTime = input.ReadSFixed64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class OpenOrdersReject : pb::IMessage<OpenOrdersReject> {
    private static readonly pb::MessageParser<OpenOrdersReject> _parser = new pb::MessageParser<OpenOrdersReject>(() => new OpenOrdersReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenOrdersReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenOrdersReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenOrdersReject(OpenOrdersReject other) : this() {
      requestID_ = other.requestID_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenOrdersReject Clone() {
      return new OpenOrdersReject(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenOrdersReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenOrdersReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenOrdersReject other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalOrderFillResponse : pb::IMessage<HistoricalOrderFillResponse> {
    private static readonly pb::MessageParser<HistoricalOrderFillResponse> _parser = new pb::MessageParser<HistoricalOrderFillResponse>(() => new HistoricalOrderFillResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalOrderFillResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillResponse(HistoricalOrderFillResponse other) : this() {
      requestID_ = other.requestID_;
      totalNumberMessages_ = other.totalNumberMessages_;
      messageNumber_ = other.messageNumber_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      serverOrderID_ = other.serverOrderID_;
      buySell_ = other.buySell_;
      price_ = other.price_;
      dateTime_ = other.dateTime_;
      quantity_ = other.quantity_;
      uniqueExecutionID_ = other.uniqueExecutionID_;
      tradeAccount_ = other.tradeAccount_;
      openClose_ = other.openClose_;
      noOrderFills_ = other.noOrderFills_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalOrderFillResponse Clone() {
      return new HistoricalOrderFillResponse(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "TotalNumberMessages" field.</summary>
    public const int TotalNumberMessagesFieldNumber = 2;
    private int totalNumberMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNumberMessages {
      get { return totalNumberMessages_; }
      set {
        totalNumberMessages_ = value;
      }
    }

    /// <summary>Field number for the "MessageNumber" field.</summary>
    public const int MessageNumberFieldNumber = 3;
    private int messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerOrderID" field.</summary>
    public const int ServerOrderIDFieldNumber = 6;
    private string serverOrderID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerOrderID {
      get { return serverOrderID_; }
      set {
        serverOrderID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BuySell" field.</summary>
    public const int BuySellFieldNumber = 7;
    private global::DTCPB.BuySellEnum buySell_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.BuySellEnum BuySell {
      get { return buySell_; }
      set {
        buySell_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 8;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 9;
    private long dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 10;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "UniqueExecutionID" field.</summary>
    public const int UniqueExecutionIDFieldNumber = 11;
    private string uniqueExecutionID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueExecutionID {
      get { return uniqueExecutionID_; }
      set {
        uniqueExecutionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 12;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OpenClose" field.</summary>
    public const int OpenCloseFieldNumber = 13;
    private global::DTCPB.OpenCloseTradeEnum openClose_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.OpenCloseTradeEnum OpenClose {
      get { return openClose_; }
      set {
        openClose_ = value;
      }
    }

    /// <summary>Field number for the "NoOrderFills" field.</summary>
    public const int NoOrderFillsFieldNumber = 14;
    private uint noOrderFills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoOrderFills {
      get { return noOrderFills_; }
      set {
        noOrderFills_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalOrderFillResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalOrderFillResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (TotalNumberMessages != other.TotalNumberMessages) return false;
      if (MessageNumber != other.MessageNumber) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (ServerOrderID != other.ServerOrderID) return false;
      if (BuySell != other.BuySell) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (DateTime != other.DateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (UniqueExecutionID != other.UniqueExecutionID) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (OpenClose != other.OpenClose) return false;
      if (NoOrderFills != other.NoOrderFills) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (TotalNumberMessages != 0) hash ^= TotalNumberMessages.GetHashCode();
      if (MessageNumber != 0) hash ^= MessageNumber.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (ServerOrderID.Length != 0) hash ^= ServerOrderID.GetHashCode();
      if (BuySell != 0) hash ^= BuySell.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (DateTime != 0L) hash ^= DateTime.GetHashCode();
      if (Quantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity);
      if (UniqueExecutionID.Length != 0) hash ^= UniqueExecutionID.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (OpenClose != 0) hash ^= OpenClose.GetHashCode();
      if (NoOrderFills != 0) hash ^= NoOrderFills.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (TotalNumberMessages != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MessageNumber);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (ServerOrderID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServerOrderID);
      }
      if (BuySell != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BuySell);
      }
      if (Price != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Price);
      }
      if (DateTime != 0L) {
        output.WriteRawTag(73);
        output.WriteSFixed64(DateTime);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Quantity);
      }
      if (UniqueExecutionID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UniqueExecutionID);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TradeAccount);
      }
      if (OpenClose != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) OpenClose);
      }
      if (NoOrderFills != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(NoOrderFills);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (TotalNumberMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageNumber);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (ServerOrderID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerOrderID);
      }
      if (BuySell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuySell);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (DateTime != 0L) {
        size += 1 + 8;
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (UniqueExecutionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueExecutionID);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (OpenClose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpenClose);
      }
      if (NoOrderFills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoOrderFills);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalOrderFillResponse other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.TotalNumberMessages != 0) {
        TotalNumberMessages = other.TotalNumberMessages;
      }
      if (other.MessageNumber != 0) {
        MessageNumber = other.MessageNumber;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.ServerOrderID.Length != 0) {
        ServerOrderID = other.ServerOrderID;
      }
      if (other.BuySell != 0) {
        BuySell = other.BuySell;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.DateTime != 0L) {
        DateTime = other.DateTime;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.UniqueExecutionID.Length != 0) {
        UniqueExecutionID = other.UniqueExecutionID;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.OpenClose != 0) {
        OpenClose = other.OpenClose;
      }
      if (other.NoOrderFills != 0) {
        NoOrderFills = other.NoOrderFills;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 16: {
            TotalNumberMessages = input.ReadInt32();
            break;
          }
          case 24: {
            MessageNumber = input.ReadInt32();
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 50: {
            ServerOrderID = input.ReadString();
            break;
          }
          case 56: {
            buySell_ = (global::DTCPB.BuySellEnum) input.ReadEnum();
            break;
          }
          case 65: {
            Price = input.ReadDouble();
            break;
          }
          case 73: {
            DateTime = input.ReadSFixed64();
            break;
          }
          case 81: {
            Quantity = input.ReadDouble();
            break;
          }
          case 90: {
            UniqueExecutionID = input.ReadString();
            break;
          }
          case 98: {
            TradeAccount = input.ReadString();
            break;
          }
          case 104: {
            openClose_ = (global::DTCPB.OpenCloseTradeEnum) input.ReadEnum();
            break;
          }
          case 112: {
            NoOrderFills = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class PositionUpdate : pb::IMessage<PositionUpdate> {
    private static readonly pb::MessageParser<PositionUpdate> _parser = new pb::MessageParser<PositionUpdate>(() => new PositionUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate(PositionUpdate other) : this() {
      requestID_ = other.requestID_;
      totalNumberMessages_ = other.totalNumberMessages_;
      messageNumber_ = other.messageNumber_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      quantity_ = other.quantity_;
      averagePrice_ = other.averagePrice_;
      positionIdentifier_ = other.positionIdentifier_;
      tradeAccount_ = other.tradeAccount_;
      noPositions_ = other.noPositions_;
      unsolicited_ = other.unsolicited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate Clone() {
      return new PositionUpdate(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "TotalNumberMessages" field.</summary>
    public const int TotalNumberMessagesFieldNumber = 2;
    private int totalNumberMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNumberMessages {
      get { return totalNumberMessages_; }
      set {
        totalNumberMessages_ = value;
      }
    }

    /// <summary>Field number for the "MessageNumber" field.</summary>
    public const int MessageNumberFieldNumber = 3;
    private int messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 6;
    private double quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "AveragePrice" field.</summary>
    public const int AveragePriceFieldNumber = 7;
    private double averagePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AveragePrice {
      get { return averagePrice_; }
      set {
        averagePrice_ = value;
      }
    }

    /// <summary>Field number for the "PositionIdentifier" field.</summary>
    public const int PositionIdentifierFieldNumber = 8;
    private string positionIdentifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PositionIdentifier {
      get { return positionIdentifier_; }
      set {
        positionIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 9;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NoPositions" field.</summary>
    public const int NoPositionsFieldNumber = 10;
    private uint noPositions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoPositions {
      get { return noPositions_; }
      set {
        noPositions_ = value;
      }
    }

    /// <summary>Field number for the "Unsolicited" field.</summary>
    public const int UnsolicitedFieldNumber = 11;
    private uint unsolicited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unsolicited {
      get { return unsolicited_; }
      set {
        unsolicited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (TotalNumberMessages != other.TotalNumberMessages) return false;
      if (MessageNumber != other.MessageNumber) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AveragePrice, other.AveragePrice)) return false;
      if (PositionIdentifier != other.PositionIdentifier) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (NoPositions != other.NoPositions) return false;
      if (Unsolicited != other.Unsolicited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (TotalNumberMessages != 0) hash ^= TotalNumberMessages.GetHashCode();
      if (MessageNumber != 0) hash ^= MessageNumber.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (Quantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Quantity);
      if (AveragePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AveragePrice);
      if (PositionIdentifier.Length != 0) hash ^= PositionIdentifier.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (NoPositions != 0) hash ^= NoPositions.GetHashCode();
      if (Unsolicited != 0) hash ^= Unsolicited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (TotalNumberMessages != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MessageNumber);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (Quantity != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Quantity);
      }
      if (AveragePrice != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AveragePrice);
      }
      if (PositionIdentifier.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PositionIdentifier);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TradeAccount);
      }
      if (NoPositions != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NoPositions);
      }
      if (Unsolicited != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Unsolicited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (TotalNumberMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageNumber);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (Quantity != 0D) {
        size += 1 + 8;
      }
      if (AveragePrice != 0D) {
        size += 1 + 8;
      }
      if (PositionIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionIdentifier);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (NoPositions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoPositions);
      }
      if (Unsolicited != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unsolicited);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionUpdate other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.TotalNumberMessages != 0) {
        TotalNumberMessages = other.TotalNumberMessages;
      }
      if (other.MessageNumber != 0) {
        MessageNumber = other.MessageNumber;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.Quantity != 0D) {
        Quantity = other.Quantity;
      }
      if (other.AveragePrice != 0D) {
        AveragePrice = other.AveragePrice;
      }
      if (other.PositionIdentifier.Length != 0) {
        PositionIdentifier = other.PositionIdentifier;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.NoPositions != 0) {
        NoPositions = other.NoPositions;
      }
      if (other.Unsolicited != 0) {
        Unsolicited = other.Unsolicited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 16: {
            TotalNumberMessages = input.ReadInt32();
            break;
          }
          case 24: {
            MessageNumber = input.ReadInt32();
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 49: {
            Quantity = input.ReadDouble();
            break;
          }
          case 57: {
            AveragePrice = input.ReadDouble();
            break;
          }
          case 66: {
            PositionIdentifier = input.ReadString();
            break;
          }
          case 74: {
            TradeAccount = input.ReadString();
            break;
          }
          case 80: {
            NoPositions = input.ReadUInt32();
            break;
          }
          case 88: {
            Unsolicited = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class TradeAccountsRequest : pb::IMessage<TradeAccountsRequest> {
    private static readonly pb::MessageParser<TradeAccountsRequest> _parser = new pb::MessageParser<TradeAccountsRequest>(() => new TradeAccountsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeAccountsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeAccountsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeAccountsRequest(TradeAccountsRequest other) : this() {
      requestID_ = other.requestID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeAccountsRequest Clone() {
      return new TradeAccountsRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeAccountsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeAccountsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeAccountsRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class TradeAccountResponse : pb::IMessage<TradeAccountResponse> {
    private static readonly pb::MessageParser<TradeAccountResponse> _parser = new pb::MessageParser<TradeAccountResponse>(() => new TradeAccountResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeAccountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeAccountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeAccountResponse(TradeAccountResponse other) : this() {
      totalNumberMessages_ = other.totalNumberMessages_;
      messageNumber_ = other.messageNumber_;
      tradeAccount_ = other.tradeAccount_;
      requestID_ = other.requestID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeAccountResponse Clone() {
      return new TradeAccountResponse(this);
    }

    /// <summary>Field number for the "TotalNumberMessages" field.</summary>
    public const int TotalNumberMessagesFieldNumber = 1;
    private int totalNumberMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNumberMessages {
      get { return totalNumberMessages_; }
      set {
        totalNumberMessages_ = value;
      }
    }

    /// <summary>Field number for the "MessageNumber" field.</summary>
    public const int MessageNumberFieldNumber = 2;
    private int messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 3;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 4;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeAccountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeAccountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalNumberMessages != other.TotalNumberMessages) return false;
      if (MessageNumber != other.MessageNumber) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (RequestID != other.RequestID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalNumberMessages != 0) hash ^= TotalNumberMessages.GetHashCode();
      if (MessageNumber != 0) hash ^= MessageNumber.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalNumberMessages != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MessageNumber);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TradeAccount);
      }
      if (RequestID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RequestID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalNumberMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageNumber);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeAccountResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalNumberMessages != 0) {
        TotalNumberMessages = other.TotalNumberMessages;
      }
      if (other.MessageNumber != 0) {
        MessageNumber = other.MessageNumber;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalNumberMessages = input.ReadInt32();
            break;
          }
          case 16: {
            MessageNumber = input.ReadInt32();
            break;
          }
          case 26: {
            TradeAccount = input.ReadString();
            break;
          }
          case 32: {
            RequestID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class ExchangeListRequest : pb::IMessage<ExchangeListRequest> {
    private static readonly pb::MessageParser<ExchangeListRequest> _parser = new pb::MessageParser<ExchangeListRequest>(() => new ExchangeListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeListRequest(ExchangeListRequest other) : this() {
      requestID_ = other.requestID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeListRequest Clone() {
      return new ExchangeListRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeListRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class ExchangeListResponse : pb::IMessage<ExchangeListResponse> {
    private static readonly pb::MessageParser<ExchangeListResponse> _parser = new pb::MessageParser<ExchangeListResponse>(() => new ExchangeListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeListResponse(ExchangeListResponse other) : this() {
      requestID_ = other.requestID_;
      exchange_ = other.exchange_;
      isFinalMessage_ = other.isFinalMessage_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeListResponse Clone() {
      return new ExchangeListResponse(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsFinalMessage" field.</summary>
    public const int IsFinalMessageFieldNumber = 3;
    private uint isFinalMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFinalMessage {
      get { return isFinalMessage_; }
      set {
        isFinalMessage_ = value;
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (Exchange != other.Exchange) return false;
      if (IsFinalMessage != other.IsFinalMessage) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (IsFinalMessage != 0) hash ^= IsFinalMessage.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Exchange);
      }
      if (IsFinalMessage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IsFinalMessage);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (IsFinalMessage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFinalMessage);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeListResponse other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.IsFinalMessage != 0) {
        IsFinalMessage = other.IsFinalMessage;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            Exchange = input.ReadString();
            break;
          }
          case 24: {
            IsFinalMessage = input.ReadUInt32();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SymbolsForExchangeRequest : pb::IMessage<SymbolsForExchangeRequest> {
    private static readonly pb::MessageParser<SymbolsForExchangeRequest> _parser = new pb::MessageParser<SymbolsForExchangeRequest>(() => new SymbolsForExchangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolsForExchangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsForExchangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsForExchangeRequest(SymbolsForExchangeRequest other) : this() {
      requestID_ = other.requestID_;
      exchange_ = other.exchange_;
      securityType_ = other.securityType_;
      requestAction_ = other.requestAction_;
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsForExchangeRequest Clone() {
      return new SymbolsForExchangeRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecurityType" field.</summary>
    public const int SecurityTypeFieldNumber = 3;
    private global::DTCPB.SecurityTypeEnum securityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.SecurityTypeEnum SecurityType {
      get { return securityType_; }
      set {
        securityType_ = value;
      }
    }

    /// <summary>Field number for the "RequestAction" field.</summary>
    public const int RequestActionFieldNumber = 4;
    private global::DTCPB.RequestActionEnum requestAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.RequestActionEnum RequestAction {
      get { return requestAction_; }
      set {
        requestAction_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 5;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolsForExchangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolsForExchangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (Exchange != other.Exchange) return false;
      if (SecurityType != other.SecurityType) return false;
      if (RequestAction != other.RequestAction) return false;
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (SecurityType != 0) hash ^= SecurityType.GetHashCode();
      if (RequestAction != 0) hash ^= RequestAction.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Exchange);
      }
      if (SecurityType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SecurityType);
      }
      if (RequestAction != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RequestAction);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (SecurityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityType);
      }
      if (RequestAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestAction);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolsForExchangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.SecurityType != 0) {
        SecurityType = other.SecurityType;
      }
      if (other.RequestAction != 0) {
        RequestAction = other.RequestAction;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            Exchange = input.ReadString();
            break;
          }
          case 24: {
            securityType_ = (global::DTCPB.SecurityTypeEnum) input.ReadEnum();
            break;
          }
          case 32: {
            requestAction_ = (global::DTCPB.RequestActionEnum) input.ReadEnum();
            break;
          }
          case 42: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class UnderlyingSymbolsForExchangeRequest : pb::IMessage<UnderlyingSymbolsForExchangeRequest> {
    private static readonly pb::MessageParser<UnderlyingSymbolsForExchangeRequest> _parser = new pb::MessageParser<UnderlyingSymbolsForExchangeRequest>(() => new UnderlyingSymbolsForExchangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnderlyingSymbolsForExchangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnderlyingSymbolsForExchangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnderlyingSymbolsForExchangeRequest(UnderlyingSymbolsForExchangeRequest other) : this() {
      requestID_ = other.requestID_;
      exchange_ = other.exchange_;
      securityType_ = other.securityType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnderlyingSymbolsForExchangeRequest Clone() {
      return new UnderlyingSymbolsForExchangeRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecurityType" field.</summary>
    public const int SecurityTypeFieldNumber = 3;
    private global::DTCPB.SecurityTypeEnum securityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.SecurityTypeEnum SecurityType {
      get { return securityType_; }
      set {
        securityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnderlyingSymbolsForExchangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnderlyingSymbolsForExchangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (Exchange != other.Exchange) return false;
      if (SecurityType != other.SecurityType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (SecurityType != 0) hash ^= SecurityType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Exchange);
      }
      if (SecurityType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SecurityType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (SecurityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnderlyingSymbolsForExchangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.SecurityType != 0) {
        SecurityType = other.SecurityType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            Exchange = input.ReadString();
            break;
          }
          case 24: {
            securityType_ = (global::DTCPB.SecurityTypeEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SymbolsForUnderlyingRequest : pb::IMessage<SymbolsForUnderlyingRequest> {
    private static readonly pb::MessageParser<SymbolsForUnderlyingRequest> _parser = new pb::MessageParser<SymbolsForUnderlyingRequest>(() => new SymbolsForUnderlyingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolsForUnderlyingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsForUnderlyingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsForUnderlyingRequest(SymbolsForUnderlyingRequest other) : this() {
      requestID_ = other.requestID_;
      underlyingSymbol_ = other.underlyingSymbol_;
      exchange_ = other.exchange_;
      securityType_ = other.securityType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsForUnderlyingRequest Clone() {
      return new SymbolsForUnderlyingRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "UnderlyingSymbol" field.</summary>
    public const int UnderlyingSymbolFieldNumber = 2;
    private string underlyingSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnderlyingSymbol {
      get { return underlyingSymbol_; }
      set {
        underlyingSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecurityType" field.</summary>
    public const int SecurityTypeFieldNumber = 4;
    private global::DTCPB.SecurityTypeEnum securityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.SecurityTypeEnum SecurityType {
      get { return securityType_; }
      set {
        securityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolsForUnderlyingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolsForUnderlyingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (UnderlyingSymbol != other.UnderlyingSymbol) return false;
      if (Exchange != other.Exchange) return false;
      if (SecurityType != other.SecurityType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (UnderlyingSymbol.Length != 0) hash ^= UnderlyingSymbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (SecurityType != 0) hash ^= SecurityType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (UnderlyingSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnderlyingSymbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Exchange);
      }
      if (SecurityType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SecurityType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (UnderlyingSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnderlyingSymbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (SecurityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolsForUnderlyingRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.UnderlyingSymbol.Length != 0) {
        UnderlyingSymbol = other.UnderlyingSymbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.SecurityType != 0) {
        SecurityType = other.SecurityType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            UnderlyingSymbol = input.ReadString();
            break;
          }
          case 26: {
            Exchange = input.ReadString();
            break;
          }
          case 32: {
            securityType_ = (global::DTCPB.SecurityTypeEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SymbolSearchRequest : pb::IMessage<SymbolSearchRequest> {
    private static readonly pb::MessageParser<SymbolSearchRequest> _parser = new pb::MessageParser<SymbolSearchRequest>(() => new SymbolSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolSearchRequest(SymbolSearchRequest other) : this() {
      requestID_ = other.requestID_;
      searchText_ = other.searchText_;
      exchange_ = other.exchange_;
      securityType_ = other.securityType_;
      searchType_ = other.searchType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolSearchRequest Clone() {
      return new SymbolSearchRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "SearchText" field.</summary>
    public const int SearchTextFieldNumber = 2;
    private string searchText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchText {
      get { return searchText_; }
      set {
        searchText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecurityType" field.</summary>
    public const int SecurityTypeFieldNumber = 4;
    private global::DTCPB.SecurityTypeEnum securityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.SecurityTypeEnum SecurityType {
      get { return securityType_; }
      set {
        securityType_ = value;
      }
    }

    /// <summary>Field number for the "SearchType" field.</summary>
    public const int SearchTypeFieldNumber = 5;
    private global::DTCPB.SearchTypeEnum searchType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.SearchTypeEnum SearchType {
      get { return searchType_; }
      set {
        searchType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (SearchText != other.SearchText) return false;
      if (Exchange != other.Exchange) return false;
      if (SecurityType != other.SecurityType) return false;
      if (SearchType != other.SearchType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (SearchText.Length != 0) hash ^= SearchText.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (SecurityType != 0) hash ^= SecurityType.GetHashCode();
      if (SearchType != 0) hash ^= SearchType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (SearchText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SearchText);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Exchange);
      }
      if (SecurityType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SecurityType);
      }
      if (SearchType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SearchType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (SearchText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchText);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (SecurityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityType);
      }
      if (SearchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SearchType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.SearchText.Length != 0) {
        SearchText = other.SearchText;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.SecurityType != 0) {
        SecurityType = other.SecurityType;
      }
      if (other.SearchType != 0) {
        SearchType = other.SearchType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            SearchText = input.ReadString();
            break;
          }
          case 26: {
            Exchange = input.ReadString();
            break;
          }
          case 32: {
            securityType_ = (global::DTCPB.SecurityTypeEnum) input.ReadEnum();
            break;
          }
          case 40: {
            searchType_ = (global::DTCPB.SearchTypeEnum) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SecurityDefinitionForSymbolRequest : pb::IMessage<SecurityDefinitionForSymbolRequest> {
    private static readonly pb::MessageParser<SecurityDefinitionForSymbolRequest> _parser = new pb::MessageParser<SecurityDefinitionForSymbolRequest>(() => new SecurityDefinitionForSymbolRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityDefinitionForSymbolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionForSymbolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionForSymbolRequest(SecurityDefinitionForSymbolRequest other) : this() {
      requestID_ = other.requestID_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionForSymbolRequest Clone() {
      return new SecurityDefinitionForSymbolRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityDefinitionForSymbolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityDefinitionForSymbolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Exchange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityDefinitionForSymbolRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            Exchange = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SecurityDefinitionResponse : pb::IMessage<SecurityDefinitionResponse> {
    private static readonly pb::MessageParser<SecurityDefinitionResponse> _parser = new pb::MessageParser<SecurityDefinitionResponse>(() => new SecurityDefinitionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityDefinitionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionResponse(SecurityDefinitionResponse other) : this() {
      requestID_ = other.requestID_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      securityType_ = other.securityType_;
      description_ = other.description_;
      minPriceIncrement_ = other.minPriceIncrement_;
      priceDisplayFormat_ = other.priceDisplayFormat_;
      currencyValuePerIncrement_ = other.currencyValuePerIncrement_;
      isFinalMessage_ = other.isFinalMessage_;
      floatToIntPriceMultiplier_ = other.floatToIntPriceMultiplier_;
      intToFloatPriceDivisor_ = other.intToFloatPriceDivisor_;
      underlyingSymbol_ = other.underlyingSymbol_;
      updatesBidAskOnly_ = other.updatesBidAskOnly_;
      strikePrice_ = other.strikePrice_;
      putOrCall_ = other.putOrCall_;
      shortInterest_ = other.shortInterest_;
      securityExpirationDate_ = other.securityExpirationDate_;
      buyRolloverInterest_ = other.buyRolloverInterest_;
      sellRolloverInterest_ = other.sellRolloverInterest_;
      earningsPerShare_ = other.earningsPerShare_;
      sharesOutstanding_ = other.sharesOutstanding_;
      intToFloatQuantityDivisor_ = other.intToFloatQuantityDivisor_;
      hasMarketDepthData_ = other.hasMarketDepthData_;
      displayPriceMultiplier_ = other.displayPriceMultiplier_;
      exchangeSymbol_ = other.exchangeSymbol_;
      initialMarginRequirement_ = other.initialMarginRequirement_;
      maintenanceMarginRequirement_ = other.maintenanceMarginRequirement_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionResponse Clone() {
      return new SecurityDefinitionResponse(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecurityType" field.</summary>
    public const int SecurityTypeFieldNumber = 4;
    private global::DTCPB.SecurityTypeEnum securityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.SecurityTypeEnum SecurityType {
      get { return securityType_; }
      set {
        securityType_ = value;
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MinPriceIncrement" field.</summary>
    public const int MinPriceIncrementFieldNumber = 6;
    private float minPriceIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "PriceDisplayFormat" field.</summary>
    public const int PriceDisplayFormatFieldNumber = 7;
    private global::DTCPB.PriceDisplayFormatEnum priceDisplayFormat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.PriceDisplayFormatEnum PriceDisplayFormat {
      get { return priceDisplayFormat_; }
      set {
        priceDisplayFormat_ = value;
      }
    }

    /// <summary>Field number for the "CurrencyValuePerIncrement" field.</summary>
    public const int CurrencyValuePerIncrementFieldNumber = 8;
    private float currencyValuePerIncrement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrencyValuePerIncrement {
      get { return currencyValuePerIncrement_; }
      set {
        currencyValuePerIncrement_ = value;
      }
    }

    /// <summary>Field number for the "IsFinalMessage" field.</summary>
    public const int IsFinalMessageFieldNumber = 9;
    private uint isFinalMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFinalMessage {
      get { return isFinalMessage_; }
      set {
        isFinalMessage_ = value;
      }
    }

    /// <summary>Field number for the "FloatToIntPriceMultiplier" field.</summary>
    public const int FloatToIntPriceMultiplierFieldNumber = 10;
    private float floatToIntPriceMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatToIntPriceMultiplier {
      get { return floatToIntPriceMultiplier_; }
      set {
        floatToIntPriceMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "IntToFloatPriceDivisor" field.</summary>
    public const int IntToFloatPriceDivisorFieldNumber = 11;
    private float intToFloatPriceDivisor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntToFloatPriceDivisor {
      get { return intToFloatPriceDivisor_; }
      set {
        intToFloatPriceDivisor_ = value;
      }
    }

    /// <summary>Field number for the "UnderlyingSymbol" field.</summary>
    public const int UnderlyingSymbolFieldNumber = 12;
    private string underlyingSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnderlyingSymbol {
      get { return underlyingSymbol_; }
      set {
        underlyingSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UpdatesBidAskOnly" field.</summary>
    public const int UpdatesBidAskOnlyFieldNumber = 13;
    private uint updatesBidAskOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpdatesBidAskOnly {
      get { return updatesBidAskOnly_; }
      set {
        updatesBidAskOnly_ = value;
      }
    }

    /// <summary>Field number for the "StrikePrice" field.</summary>
    public const int StrikePriceFieldNumber = 14;
    private float strikePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "PutOrCall" field.</summary>
    public const int PutOrCallFieldNumber = 15;
    private global::DTCPB.PutCallEnum putOrCall_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.PutCallEnum PutOrCall {
      get { return putOrCall_; }
      set {
        putOrCall_ = value;
      }
    }

    /// <summary>Field number for the "ShortInterest" field.</summary>
    public const int ShortInterestFieldNumber = 16;
    private uint shortInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShortInterest {
      get { return shortInterest_; }
      set {
        shortInterest_ = value;
      }
    }

    /// <summary>Field number for the "SecurityExpirationDate" field.</summary>
    public const int SecurityExpirationDateFieldNumber = 17;
    private int securityExpirationDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecurityExpirationDate {
      get { return securityExpirationDate_; }
      set {
        securityExpirationDate_ = value;
      }
    }

    /// <summary>Field number for the "BuyRolloverInterest" field.</summary>
    public const int BuyRolloverInterestFieldNumber = 18;
    private float buyRolloverInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BuyRolloverInterest {
      get { return buyRolloverInterest_; }
      set {
        buyRolloverInterest_ = value;
      }
    }

    /// <summary>Field number for the "SellRolloverInterest" field.</summary>
    public const int SellRolloverInterestFieldNumber = 19;
    private float sellRolloverInterest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SellRolloverInterest {
      get { return sellRolloverInterest_; }
      set {
        sellRolloverInterest_ = value;
      }
    }

    /// <summary>Field number for the "EarningsPerShare" field.</summary>
    public const int EarningsPerShareFieldNumber = 20;
    private float earningsPerShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EarningsPerShare {
      get { return earningsPerShare_; }
      set {
        earningsPerShare_ = value;
      }
    }

    /// <summary>Field number for the "SharesOutstanding" field.</summary>
    public const int SharesOutstandingFieldNumber = 21;
    private uint sharesOutstanding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SharesOutstanding {
      get { return sharesOutstanding_; }
      set {
        sharesOutstanding_ = value;
      }
    }

    /// <summary>Field number for the "IntToFloatQuantityDivisor" field.</summary>
    public const int IntToFloatQuantityDivisorFieldNumber = 22;
    private float intToFloatQuantityDivisor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntToFloatQuantityDivisor {
      get { return intToFloatQuantityDivisor_; }
      set {
        intToFloatQuantityDivisor_ = value;
      }
    }

    /// <summary>Field number for the "HasMarketDepthData" field.</summary>
    public const int HasMarketDepthDataFieldNumber = 23;
    private uint hasMarketDepthData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HasMarketDepthData {
      get { return hasMarketDepthData_; }
      set {
        hasMarketDepthData_ = value;
      }
    }

    /// <summary>Field number for the "DisplayPriceMultiplier" field.</summary>
    public const int DisplayPriceMultiplierFieldNumber = 24;
    private float displayPriceMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DisplayPriceMultiplier {
      get { return displayPriceMultiplier_; }
      set {
        displayPriceMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "ExchangeSymbol" field.</summary>
    public const int ExchangeSymbolFieldNumber = 25;
    private string exchangeSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExchangeSymbol {
      get { return exchangeSymbol_; }
      set {
        exchangeSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InitialMarginRequirement" field.</summary>
    public const int InitialMarginRequirementFieldNumber = 26;
    private float initialMarginRequirement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialMarginRequirement {
      get { return initialMarginRequirement_; }
      set {
        initialMarginRequirement_ = value;
      }
    }

    /// <summary>Field number for the "MaintenanceMarginRequirement" field.</summary>
    public const int MaintenanceMarginRequirementFieldNumber = 27;
    private float maintenanceMarginRequirement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaintenanceMarginRequirement {
      get { return maintenanceMarginRequirement_; }
      set {
        maintenanceMarginRequirement_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityDefinitionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityDefinitionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (SecurityType != other.SecurityType) return false;
      if (Description != other.Description) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (PriceDisplayFormat != other.PriceDisplayFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrencyValuePerIncrement, other.CurrencyValuePerIncrement)) return false;
      if (IsFinalMessage != other.IsFinalMessage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatToIntPriceMultiplier, other.FloatToIntPriceMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntToFloatPriceDivisor, other.IntToFloatPriceDivisor)) return false;
      if (UnderlyingSymbol != other.UnderlyingSymbol) return false;
      if (UpdatesBidAskOnly != other.UpdatesBidAskOnly) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
      if (PutOrCall != other.PutOrCall) return false;
      if (ShortInterest != other.ShortInterest) return false;
      if (SecurityExpirationDate != other.SecurityExpirationDate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BuyRolloverInterest, other.BuyRolloverInterest)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SellRolloverInterest, other.SellRolloverInterest)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarningsPerShare, other.EarningsPerShare)) return false;
      if (SharesOutstanding != other.SharesOutstanding) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntToFloatQuantityDivisor, other.IntToFloatQuantityDivisor)) return false;
      if (HasMarketDepthData != other.HasMarketDepthData) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplayPriceMultiplier, other.DisplayPriceMultiplier)) return false;
      if (ExchangeSymbol != other.ExchangeSymbol) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialMarginRequirement, other.InitialMarginRequirement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaintenanceMarginRequirement, other.MaintenanceMarginRequirement)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (SecurityType != 0) hash ^= SecurityType.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (MinPriceIncrement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinPriceIncrement);
      if (PriceDisplayFormat != 0) hash ^= PriceDisplayFormat.GetHashCode();
      if (CurrencyValuePerIncrement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrencyValuePerIncrement);
      if (IsFinalMessage != 0) hash ^= IsFinalMessage.GetHashCode();
      if (FloatToIntPriceMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatToIntPriceMultiplier);
      if (IntToFloatPriceDivisor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntToFloatPriceDivisor);
      if (UnderlyingSymbol.Length != 0) hash ^= UnderlyingSymbol.GetHashCode();
      if (UpdatesBidAskOnly != 0) hash ^= UpdatesBidAskOnly.GetHashCode();
      if (StrikePrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrikePrice);
      if (PutOrCall != 0) hash ^= PutOrCall.GetHashCode();
      if (ShortInterest != 0) hash ^= ShortInterest.GetHashCode();
      if (SecurityExpirationDate != 0) hash ^= SecurityExpirationDate.GetHashCode();
      if (BuyRolloverInterest != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BuyRolloverInterest);
      if (SellRolloverInterest != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SellRolloverInterest);
      if (EarningsPerShare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarningsPerShare);
      if (SharesOutstanding != 0) hash ^= SharesOutstanding.GetHashCode();
      if (IntToFloatQuantityDivisor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntToFloatQuantityDivisor);
      if (HasMarketDepthData != 0) hash ^= HasMarketDepthData.GetHashCode();
      if (DisplayPriceMultiplier != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplayPriceMultiplier);
      if (ExchangeSymbol.Length != 0) hash ^= ExchangeSymbol.GetHashCode();
      if (InitialMarginRequirement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialMarginRequirement);
      if (MaintenanceMarginRequirement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaintenanceMarginRequirement);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Exchange);
      }
      if (SecurityType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SecurityType);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (MinPriceIncrement != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MinPriceIncrement);
      }
      if (PriceDisplayFormat != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PriceDisplayFormat);
      }
      if (CurrencyValuePerIncrement != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CurrencyValuePerIncrement);
      }
      if (IsFinalMessage != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(IsFinalMessage);
      }
      if (FloatToIntPriceMultiplier != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(FloatToIntPriceMultiplier);
      }
      if (IntToFloatPriceDivisor != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(IntToFloatPriceDivisor);
      }
      if (UnderlyingSymbol.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UnderlyingSymbol);
      }
      if (UpdatesBidAskOnly != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(UpdatesBidAskOnly);
      }
      if (StrikePrice != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(StrikePrice);
      }
      if (PutOrCall != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) PutOrCall);
      }
      if (ShortInterest != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ShortInterest);
      }
      if (SecurityExpirationDate != 0) {
        output.WriteRawTag(141, 1);
        output.WriteSFixed32(SecurityExpirationDate);
      }
      if (BuyRolloverInterest != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(BuyRolloverInterest);
      }
      if (SellRolloverInterest != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(SellRolloverInterest);
      }
      if (EarningsPerShare != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(EarningsPerShare);
      }
      if (SharesOutstanding != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SharesOutstanding);
      }
      if (IntToFloatQuantityDivisor != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(IntToFloatQuantityDivisor);
      }
      if (HasMarketDepthData != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(HasMarketDepthData);
      }
      if (DisplayPriceMultiplier != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(DisplayPriceMultiplier);
      }
      if (ExchangeSymbol.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(ExchangeSymbol);
      }
      if (InitialMarginRequirement != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(InitialMarginRequirement);
      }
      if (MaintenanceMarginRequirement != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(MaintenanceMarginRequirement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (SecurityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityType);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (MinPriceIncrement != 0F) {
        size += 1 + 4;
      }
      if (PriceDisplayFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PriceDisplayFormat);
      }
      if (CurrencyValuePerIncrement != 0F) {
        size += 1 + 4;
      }
      if (IsFinalMessage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFinalMessage);
      }
      if (FloatToIntPriceMultiplier != 0F) {
        size += 1 + 4;
      }
      if (IntToFloatPriceDivisor != 0F) {
        size += 1 + 4;
      }
      if (UnderlyingSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnderlyingSymbol);
      }
      if (UpdatesBidAskOnly != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdatesBidAskOnly);
      }
      if (StrikePrice != 0F) {
        size += 1 + 4;
      }
      if (PutOrCall != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PutOrCall);
      }
      if (ShortInterest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ShortInterest);
      }
      if (SecurityExpirationDate != 0) {
        size += 2 + 4;
      }
      if (BuyRolloverInterest != 0F) {
        size += 2 + 4;
      }
      if (SellRolloverInterest != 0F) {
        size += 2 + 4;
      }
      if (EarningsPerShare != 0F) {
        size += 2 + 4;
      }
      if (SharesOutstanding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SharesOutstanding);
      }
      if (IntToFloatQuantityDivisor != 0F) {
        size += 2 + 4;
      }
      if (HasMarketDepthData != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HasMarketDepthData);
      }
      if (DisplayPriceMultiplier != 0F) {
        size += 2 + 4;
      }
      if (ExchangeSymbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchangeSymbol);
      }
      if (InitialMarginRequirement != 0F) {
        size += 2 + 4;
      }
      if (MaintenanceMarginRequirement != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityDefinitionResponse other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.SecurityType != 0) {
        SecurityType = other.SecurityType;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.MinPriceIncrement != 0F) {
        MinPriceIncrement = other.MinPriceIncrement;
      }
      if (other.PriceDisplayFormat != 0) {
        PriceDisplayFormat = other.PriceDisplayFormat;
      }
      if (other.CurrencyValuePerIncrement != 0F) {
        CurrencyValuePerIncrement = other.CurrencyValuePerIncrement;
      }
      if (other.IsFinalMessage != 0) {
        IsFinalMessage = other.IsFinalMessage;
      }
      if (other.FloatToIntPriceMultiplier != 0F) {
        FloatToIntPriceMultiplier = other.FloatToIntPriceMultiplier;
      }
      if (other.IntToFloatPriceDivisor != 0F) {
        IntToFloatPriceDivisor = other.IntToFloatPriceDivisor;
      }
      if (other.UnderlyingSymbol.Length != 0) {
        UnderlyingSymbol = other.UnderlyingSymbol;
      }
      if (other.UpdatesBidAskOnly != 0) {
        UpdatesBidAskOnly = other.UpdatesBidAskOnly;
      }
      if (other.StrikePrice != 0F) {
        StrikePrice = other.StrikePrice;
      }
      if (other.PutOrCall != 0) {
        PutOrCall = other.PutOrCall;
      }
      if (other.ShortInterest != 0) {
        ShortInterest = other.ShortInterest;
      }
      if (other.SecurityExpirationDate != 0) {
        SecurityExpirationDate = other.SecurityExpirationDate;
      }
      if (other.BuyRolloverInterest != 0F) {
        BuyRolloverInterest = other.BuyRolloverInterest;
      }
      if (other.SellRolloverInterest != 0F) {
        SellRolloverInterest = other.SellRolloverInterest;
      }
      if (other.EarningsPerShare != 0F) {
        EarningsPerShare = other.EarningsPerShare;
      }
      if (other.SharesOutstanding != 0) {
        SharesOutstanding = other.SharesOutstanding;
      }
      if (other.IntToFloatQuantityDivisor != 0F) {
        IntToFloatQuantityDivisor = other.IntToFloatQuantityDivisor;
      }
      if (other.HasMarketDepthData != 0) {
        HasMarketDepthData = other.HasMarketDepthData;
      }
      if (other.DisplayPriceMultiplier != 0F) {
        DisplayPriceMultiplier = other.DisplayPriceMultiplier;
      }
      if (other.ExchangeSymbol.Length != 0) {
        ExchangeSymbol = other.ExchangeSymbol;
      }
      if (other.InitialMarginRequirement != 0F) {
        InitialMarginRequirement = other.InitialMarginRequirement;
      }
      if (other.MaintenanceMarginRequirement != 0F) {
        MaintenanceMarginRequirement = other.MaintenanceMarginRequirement;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            Exchange = input.ReadString();
            break;
          }
          case 32: {
            securityType_ = (global::DTCPB.SecurityTypeEnum) input.ReadEnum();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 53: {
            MinPriceIncrement = input.ReadFloat();
            break;
          }
          case 56: {
            priceDisplayFormat_ = (global::DTCPB.PriceDisplayFormatEnum) input.ReadEnum();
            break;
          }
          case 69: {
            CurrencyValuePerIncrement = input.ReadFloat();
            break;
          }
          case 72: {
            IsFinalMessage = input.ReadUInt32();
            break;
          }
          case 85: {
            FloatToIntPriceMultiplier = input.ReadFloat();
            break;
          }
          case 93: {
            IntToFloatPriceDivisor = input.ReadFloat();
            break;
          }
          case 98: {
            UnderlyingSymbol = input.ReadString();
            break;
          }
          case 104: {
            UpdatesBidAskOnly = input.ReadUInt32();
            break;
          }
          case 117: {
            StrikePrice = input.ReadFloat();
            break;
          }
          case 120: {
            putOrCall_ = (global::DTCPB.PutCallEnum) input.ReadEnum();
            break;
          }
          case 128: {
            ShortInterest = input.ReadUInt32();
            break;
          }
          case 141: {
            SecurityExpirationDate = input.ReadSFixed32();
            break;
          }
          case 149: {
            BuyRolloverInterest = input.ReadFloat();
            break;
          }
          case 157: {
            SellRolloverInterest = input.ReadFloat();
            break;
          }
          case 165: {
            EarningsPerShare = input.ReadFloat();
            break;
          }
          case 168: {
            SharesOutstanding = input.ReadUInt32();
            break;
          }
          case 181: {
            IntToFloatQuantityDivisor = input.ReadFloat();
            break;
          }
          case 184: {
            HasMarketDepthData = input.ReadUInt32();
            break;
          }
          case 197: {
            DisplayPriceMultiplier = input.ReadFloat();
            break;
          }
          case 202: {
            ExchangeSymbol = input.ReadString();
            break;
          }
          case 213: {
            InitialMarginRequirement = input.ReadFloat();
            break;
          }
          case 221: {
            MaintenanceMarginRequirement = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class SecurityDefinitionReject : pb::IMessage<SecurityDefinitionReject> {
    private static readonly pb::MessageParser<SecurityDefinitionReject> _parser = new pb::MessageParser<SecurityDefinitionReject>(() => new SecurityDefinitionReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityDefinitionReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionReject(SecurityDefinitionReject other) : this() {
      requestID_ = other.requestID_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityDefinitionReject Clone() {
      return new SecurityDefinitionReject(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityDefinitionReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityDefinitionReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityDefinitionReject other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class AccountBalanceRequest : pb::IMessage<AccountBalanceRequest> {
    private static readonly pb::MessageParser<AccountBalanceRequest> _parser = new pb::MessageParser<AccountBalanceRequest>(() => new AccountBalanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceRequest(AccountBalanceRequest other) : this() {
      requestID_ = other.requestID_;
      tradeAccount_ = other.tradeAccount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceRequest Clone() {
      return new AccountBalanceRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 2;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (TradeAccount != other.TradeAccount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TradeAccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountBalanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            TradeAccount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class AccountBalanceReject : pb::IMessage<AccountBalanceReject> {
    private static readonly pb::MessageParser<AccountBalanceReject> _parser = new pb::MessageParser<AccountBalanceReject>(() => new AccountBalanceReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountBalanceReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceReject(AccountBalanceReject other) : this() {
      requestID_ = other.requestID_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceReject Clone() {
      return new AccountBalanceReject(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountBalanceReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountBalanceReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountBalanceReject other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class AccountBalanceUpdate : pb::IMessage<AccountBalanceUpdate> {
    private static readonly pb::MessageParser<AccountBalanceUpdate> _parser = new pb::MessageParser<AccountBalanceUpdate>(() => new AccountBalanceUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountBalanceUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceUpdate(AccountBalanceUpdate other) : this() {
      requestID_ = other.requestID_;
      cashBalance_ = other.cashBalance_;
      balanceAvailableForNewPositions_ = other.balanceAvailableForNewPositions_;
      accountCurrency_ = other.accountCurrency_;
      tradeAccount_ = other.tradeAccount_;
      securitiesValue_ = other.securitiesValue_;
      marginRequirement_ = other.marginRequirement_;
      totalNumberMessages_ = other.totalNumberMessages_;
      messageNumber_ = other.messageNumber_;
      noAccountBalances_ = other.noAccountBalances_;
      unsolicited_ = other.unsolicited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountBalanceUpdate Clone() {
      return new AccountBalanceUpdate(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "CashBalance" field.</summary>
    public const int CashBalanceFieldNumber = 2;
    private double cashBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CashBalance {
      get { return cashBalance_; }
      set {
        cashBalance_ = value;
      }
    }

    /// <summary>Field number for the "BalanceAvailableForNewPositions" field.</summary>
    public const int BalanceAvailableForNewPositionsFieldNumber = 3;
    private double balanceAvailableForNewPositions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BalanceAvailableForNewPositions {
      get { return balanceAvailableForNewPositions_; }
      set {
        balanceAvailableForNewPositions_ = value;
      }
    }

    /// <summary>Field number for the "AccountCurrency" field.</summary>
    public const int AccountCurrencyFieldNumber = 4;
    private string accountCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountCurrency {
      get { return accountCurrency_; }
      set {
        accountCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeAccount" field.</summary>
    public const int TradeAccountFieldNumber = 5;
    private string tradeAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeAccount {
      get { return tradeAccount_; }
      set {
        tradeAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SecuritiesValue" field.</summary>
    public const int SecuritiesValueFieldNumber = 6;
    private double securitiesValue_;
    /// <summary>
    /// Not including cash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SecuritiesValue {
      get { return securitiesValue_; }
      set {
        securitiesValue_ = value;
      }
    }

    /// <summary>Field number for the "MarginRequirement" field.</summary>
    public const int MarginRequirementFieldNumber = 7;
    private double marginRequirement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MarginRequirement {
      get { return marginRequirement_; }
      set {
        marginRequirement_ = value;
      }
    }

    /// <summary>Field number for the "TotalNumberMessages" field.</summary>
    public const int TotalNumberMessagesFieldNumber = 8;
    private int totalNumberMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNumberMessages {
      get { return totalNumberMessages_; }
      set {
        totalNumberMessages_ = value;
      }
    }

    /// <summary>Field number for the "MessageNumber" field.</summary>
    public const int MessageNumberFieldNumber = 9;
    private int messageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageNumber {
      get { return messageNumber_; }
      set {
        messageNumber_ = value;
      }
    }

    /// <summary>Field number for the "NoAccountBalances" field.</summary>
    public const int NoAccountBalancesFieldNumber = 10;
    private uint noAccountBalances_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoAccountBalances {
      get { return noAccountBalances_; }
      set {
        noAccountBalances_ = value;
      }
    }

    /// <summary>Field number for the "Unsolicited" field.</summary>
    public const int UnsolicitedFieldNumber = 11;
    private uint unsolicited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unsolicited {
      get { return unsolicited_; }
      set {
        unsolicited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountBalanceUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountBalanceUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CashBalance, other.CashBalance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BalanceAvailableForNewPositions, other.BalanceAvailableForNewPositions)) return false;
      if (AccountCurrency != other.AccountCurrency) return false;
      if (TradeAccount != other.TradeAccount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SecuritiesValue, other.SecuritiesValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRequirement, other.MarginRequirement)) return false;
      if (TotalNumberMessages != other.TotalNumberMessages) return false;
      if (MessageNumber != other.MessageNumber) return false;
      if (NoAccountBalances != other.NoAccountBalances) return false;
      if (Unsolicited != other.Unsolicited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (CashBalance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CashBalance);
      if (BalanceAvailableForNewPositions != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BalanceAvailableForNewPositions);
      if (AccountCurrency.Length != 0) hash ^= AccountCurrency.GetHashCode();
      if (TradeAccount.Length != 0) hash ^= TradeAccount.GetHashCode();
      if (SecuritiesValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SecuritiesValue);
      if (MarginRequirement != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRequirement);
      if (TotalNumberMessages != 0) hash ^= TotalNumberMessages.GetHashCode();
      if (MessageNumber != 0) hash ^= MessageNumber.GetHashCode();
      if (NoAccountBalances != 0) hash ^= NoAccountBalances.GetHashCode();
      if (Unsolicited != 0) hash ^= Unsolicited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (CashBalance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CashBalance);
      }
      if (BalanceAvailableForNewPositions != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(BalanceAvailableForNewPositions);
      }
      if (AccountCurrency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccountCurrency);
      }
      if (TradeAccount.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TradeAccount);
      }
      if (SecuritiesValue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SecuritiesValue);
      }
      if (MarginRequirement != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MarginRequirement);
      }
      if (TotalNumberMessages != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MessageNumber);
      }
      if (NoAccountBalances != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NoAccountBalances);
      }
      if (Unsolicited != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Unsolicited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (CashBalance != 0D) {
        size += 1 + 8;
      }
      if (BalanceAvailableForNewPositions != 0D) {
        size += 1 + 8;
      }
      if (AccountCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountCurrency);
      }
      if (TradeAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeAccount);
      }
      if (SecuritiesValue != 0D) {
        size += 1 + 8;
      }
      if (MarginRequirement != 0D) {
        size += 1 + 8;
      }
      if (TotalNumberMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNumberMessages);
      }
      if (MessageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageNumber);
      }
      if (NoAccountBalances != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoAccountBalances);
      }
      if (Unsolicited != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unsolicited);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountBalanceUpdate other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.CashBalance != 0D) {
        CashBalance = other.CashBalance;
      }
      if (other.BalanceAvailableForNewPositions != 0D) {
        BalanceAvailableForNewPositions = other.BalanceAvailableForNewPositions;
      }
      if (other.AccountCurrency.Length != 0) {
        AccountCurrency = other.AccountCurrency;
      }
      if (other.TradeAccount.Length != 0) {
        TradeAccount = other.TradeAccount;
      }
      if (other.SecuritiesValue != 0D) {
        SecuritiesValue = other.SecuritiesValue;
      }
      if (other.MarginRequirement != 0D) {
        MarginRequirement = other.MarginRequirement;
      }
      if (other.TotalNumberMessages != 0) {
        TotalNumberMessages = other.TotalNumberMessages;
      }
      if (other.MessageNumber != 0) {
        MessageNumber = other.MessageNumber;
      }
      if (other.NoAccountBalances != 0) {
        NoAccountBalances = other.NoAccountBalances;
      }
      if (other.Unsolicited != 0) {
        Unsolicited = other.Unsolicited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 17: {
            CashBalance = input.ReadDouble();
            break;
          }
          case 25: {
            BalanceAvailableForNewPositions = input.ReadDouble();
            break;
          }
          case 34: {
            AccountCurrency = input.ReadString();
            break;
          }
          case 42: {
            TradeAccount = input.ReadString();
            break;
          }
          case 49: {
            SecuritiesValue = input.ReadDouble();
            break;
          }
          case 57: {
            MarginRequirement = input.ReadDouble();
            break;
          }
          case 64: {
            TotalNumberMessages = input.ReadInt32();
            break;
          }
          case 72: {
            MessageNumber = input.ReadInt32();
            break;
          }
          case 80: {
            NoAccountBalances = input.ReadUInt32();
            break;
          }
          case 88: {
            Unsolicited = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class UserMessage : pb::IMessage<UserMessage> {
    private static readonly pb::MessageParser<UserMessage> _parser = new pb::MessageParser<UserMessage>(() => new UserMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMessage(UserMessage other) : this() {
      userMessage_ = other.userMessage_;
      isPopupMessage_ = other.isPopupMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMessage Clone() {
      return new UserMessage(this);
    }

    /// <summary>Field number for the "UserMessage" field.</summary>
    public const int UserMessage_FieldNumber = 1;
    private string userMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserMessage_ {
      get { return userMessage_; }
      set {
        userMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsPopupMessage" field.</summary>
    public const int IsPopupMessageFieldNumber = 2;
    private uint isPopupMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsPopupMessage {
      get { return isPopupMessage_; }
      set {
        isPopupMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserMessage_ != other.UserMessage_) return false;
      if (IsPopupMessage != other.IsPopupMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserMessage_.Length != 0) hash ^= UserMessage_.GetHashCode();
      if (IsPopupMessage != 0) hash ^= IsPopupMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserMessage_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserMessage_);
      }
      if (IsPopupMessage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IsPopupMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserMessage_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserMessage_);
      }
      if (IsPopupMessage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsPopupMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserMessage other) {
      if (other == null) {
        return;
      }
      if (other.UserMessage_.Length != 0) {
        UserMessage_ = other.UserMessage_;
      }
      if (other.IsPopupMessage != 0) {
        IsPopupMessage = other.IsPopupMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserMessage_ = input.ReadString();
            break;
          }
          case 16: {
            IsPopupMessage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class GeneralLogMessage : pb::IMessage<GeneralLogMessage> {
    private static readonly pb::MessageParser<GeneralLogMessage> _parser = new pb::MessageParser<GeneralLogMessage>(() => new GeneralLogMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralLogMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralLogMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralLogMessage(GeneralLogMessage other) : this() {
      messageText_ = other.messageText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralLogMessage Clone() {
      return new GeneralLogMessage(this);
    }

    /// <summary>Field number for the "MessageText" field.</summary>
    public const int MessageTextFieldNumber = 3;
    private string messageText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageText {
      get { return messageText_; }
      set {
        messageText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralLogMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralLogMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageText != other.MessageText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageText.Length != 0) hash ^= MessageText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageText.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MessageText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralLogMessage other) {
      if (other == null) {
        return;
      }
      if (other.MessageText.Length != 0) {
        MessageText = other.MessageText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            MessageText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataRequest : pb::IMessage<HistoricalPriceDataRequest> {
    private static readonly pb::MessageParser<HistoricalPriceDataRequest> _parser = new pb::MessageParser<HistoricalPriceDataRequest>(() => new HistoricalPriceDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRequest(HistoricalPriceDataRequest other) : this() {
      requestID_ = other.requestID_;
      symbol_ = other.symbol_;
      exchange_ = other.exchange_;
      recordInterval_ = other.recordInterval_;
      startDateTime_ = other.startDateTime_;
      endDateTime_ = other.endDateTime_;
      maxDaysToReturn_ = other.maxDaysToReturn_;
      useZLibCompression_ = other.useZLibCompression_;
      requestDividendAdjustedStockData_ = other.requestDividendAdjustedStockData_;
      flag1_ = other.flag1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRequest Clone() {
      return new HistoricalPriceDataRequest(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RecordInterval" field.</summary>
    public const int RecordIntervalFieldNumber = 4;
    private global::DTCPB.HistoricalDataIntervalEnum recordInterval_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.HistoricalDataIntervalEnum RecordInterval {
      get { return recordInterval_; }
      set {
        recordInterval_ = value;
      }
    }

    /// <summary>Field number for the "StartDateTime" field.</summary>
    public const int StartDateTimeFieldNumber = 5;
    private long startDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDateTime {
      get { return startDateTime_; }
      set {
        startDateTime_ = value;
      }
    }

    /// <summary>Field number for the "EndDateTime" field.</summary>
    public const int EndDateTimeFieldNumber = 6;
    private long endDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDateTime {
      get { return endDateTime_; }
      set {
        endDateTime_ = value;
      }
    }

    /// <summary>Field number for the "MaxDaysToReturn" field.</summary>
    public const int MaxDaysToReturnFieldNumber = 7;
    private uint maxDaysToReturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxDaysToReturn {
      get { return maxDaysToReturn_; }
      set {
        maxDaysToReturn_ = value;
      }
    }

    /// <summary>Field number for the "UseZLibCompression" field.</summary>
    public const int UseZLibCompressionFieldNumber = 8;
    private uint useZLibCompression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseZLibCompression {
      get { return useZLibCompression_; }
      set {
        useZLibCompression_ = value;
      }
    }

    /// <summary>Field number for the "RequestDividendAdjustedStockData" field.</summary>
    public const int RequestDividendAdjustedStockDataFieldNumber = 9;
    private uint requestDividendAdjustedStockData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestDividendAdjustedStockData {
      get { return requestDividendAdjustedStockData_; }
      set {
        requestDividendAdjustedStockData_ = value;
      }
    }

    /// <summary>Field number for the "Flag_1" field.</summary>
    public const int Flag1FieldNumber = 10;
    private uint flag1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag1 {
      get { return flag1_; }
      set {
        flag1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (Symbol != other.Symbol) return false;
      if (Exchange != other.Exchange) return false;
      if (RecordInterval != other.RecordInterval) return false;
      if (StartDateTime != other.StartDateTime) return false;
      if (EndDateTime != other.EndDateTime) return false;
      if (MaxDaysToReturn != other.MaxDaysToReturn) return false;
      if (UseZLibCompression != other.UseZLibCompression) return false;
      if (RequestDividendAdjustedStockData != other.RequestDividendAdjustedStockData) return false;
      if (Flag1 != other.Flag1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (RecordInterval != 0) hash ^= RecordInterval.GetHashCode();
      if (StartDateTime != 0L) hash ^= StartDateTime.GetHashCode();
      if (EndDateTime != 0L) hash ^= EndDateTime.GetHashCode();
      if (MaxDaysToReturn != 0) hash ^= MaxDaysToReturn.GetHashCode();
      if (UseZLibCompression != 0) hash ^= UseZLibCompression.GetHashCode();
      if (RequestDividendAdjustedStockData != 0) hash ^= RequestDividendAdjustedStockData.GetHashCode();
      if (Flag1 != 0) hash ^= Flag1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Exchange);
      }
      if (RecordInterval != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RecordInterval);
      }
      if (StartDateTime != 0L) {
        output.WriteRawTag(41);
        output.WriteSFixed64(StartDateTime);
      }
      if (EndDateTime != 0L) {
        output.WriteRawTag(49);
        output.WriteSFixed64(EndDateTime);
      }
      if (MaxDaysToReturn != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaxDaysToReturn);
      }
      if (UseZLibCompression != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(UseZLibCompression);
      }
      if (RequestDividendAdjustedStockData != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RequestDividendAdjustedStockData);
      }
      if (Flag1 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Flag1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (RecordInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordInterval);
      }
      if (StartDateTime != 0L) {
        size += 1 + 8;
      }
      if (EndDateTime != 0L) {
        size += 1 + 8;
      }
      if (MaxDaysToReturn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDaysToReturn);
      }
      if (UseZLibCompression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseZLibCompression);
      }
      if (RequestDividendAdjustedStockData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestDividendAdjustedStockData);
      }
      if (Flag1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.RecordInterval != 0) {
        RecordInterval = other.RecordInterval;
      }
      if (other.StartDateTime != 0L) {
        StartDateTime = other.StartDateTime;
      }
      if (other.EndDateTime != 0L) {
        EndDateTime = other.EndDateTime;
      }
      if (other.MaxDaysToReturn != 0) {
        MaxDaysToReturn = other.MaxDaysToReturn;
      }
      if (other.UseZLibCompression != 0) {
        UseZLibCompression = other.UseZLibCompression;
      }
      if (other.RequestDividendAdjustedStockData != 0) {
        RequestDividendAdjustedStockData = other.RequestDividendAdjustedStockData;
      }
      if (other.Flag1 != 0) {
        Flag1 = other.Flag1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            Exchange = input.ReadString();
            break;
          }
          case 32: {
            recordInterval_ = (global::DTCPB.HistoricalDataIntervalEnum) input.ReadEnum();
            break;
          }
          case 41: {
            StartDateTime = input.ReadSFixed64();
            break;
          }
          case 49: {
            EndDateTime = input.ReadSFixed64();
            break;
          }
          case 56: {
            MaxDaysToReturn = input.ReadUInt32();
            break;
          }
          case 64: {
            UseZLibCompression = input.ReadUInt32();
            break;
          }
          case 72: {
            RequestDividendAdjustedStockData = input.ReadUInt32();
            break;
          }
          case 80: {
            Flag1 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataResponseHeader : pb::IMessage<HistoricalPriceDataResponseHeader> {
    private static readonly pb::MessageParser<HistoricalPriceDataResponseHeader> _parser = new pb::MessageParser<HistoricalPriceDataResponseHeader>(() => new HistoricalPriceDataResponseHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataResponseHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataResponseHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataResponseHeader(HistoricalPriceDataResponseHeader other) : this() {
      requestID_ = other.requestID_;
      recordInterval_ = other.recordInterval_;
      useZLibCompression_ = other.useZLibCompression_;
      noRecordsToReturn_ = other.noRecordsToReturn_;
      intToFloatPriceDivisor_ = other.intToFloatPriceDivisor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataResponseHeader Clone() {
      return new HistoricalPriceDataResponseHeader(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RecordInterval" field.</summary>
    public const int RecordIntervalFieldNumber = 2;
    private global::DTCPB.HistoricalDataIntervalEnum recordInterval_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.HistoricalDataIntervalEnum RecordInterval {
      get { return recordInterval_; }
      set {
        recordInterval_ = value;
      }
    }

    /// <summary>Field number for the "UseZLibCompression" field.</summary>
    public const int UseZLibCompressionFieldNumber = 3;
    private uint useZLibCompression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseZLibCompression {
      get { return useZLibCompression_; }
      set {
        useZLibCompression_ = value;
      }
    }

    /// <summary>Field number for the "NoRecordsToReturn" field.</summary>
    public const int NoRecordsToReturnFieldNumber = 4;
    private uint noRecordsToReturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoRecordsToReturn {
      get { return noRecordsToReturn_; }
      set {
        noRecordsToReturn_ = value;
      }
    }

    /// <summary>Field number for the "IntToFloatPriceDivisor" field.</summary>
    public const int IntToFloatPriceDivisorFieldNumber = 5;
    private float intToFloatPriceDivisor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntToFloatPriceDivisor {
      get { return intToFloatPriceDivisor_; }
      set {
        intToFloatPriceDivisor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataResponseHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataResponseHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RecordInterval != other.RecordInterval) return false;
      if (UseZLibCompression != other.UseZLibCompression) return false;
      if (NoRecordsToReturn != other.NoRecordsToReturn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntToFloatPriceDivisor, other.IntToFloatPriceDivisor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RecordInterval != 0) hash ^= RecordInterval.GetHashCode();
      if (UseZLibCompression != 0) hash ^= UseZLibCompression.GetHashCode();
      if (NoRecordsToReturn != 0) hash ^= NoRecordsToReturn.GetHashCode();
      if (IntToFloatPriceDivisor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntToFloatPriceDivisor);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RecordInterval != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RecordInterval);
      }
      if (UseZLibCompression != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UseZLibCompression);
      }
      if (NoRecordsToReturn != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NoRecordsToReturn);
      }
      if (IntToFloatPriceDivisor != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(IntToFloatPriceDivisor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RecordInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecordInterval);
      }
      if (UseZLibCompression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseZLibCompression);
      }
      if (NoRecordsToReturn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoRecordsToReturn);
      }
      if (IntToFloatPriceDivisor != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataResponseHeader other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RecordInterval != 0) {
        RecordInterval = other.RecordInterval;
      }
      if (other.UseZLibCompression != 0) {
        UseZLibCompression = other.UseZLibCompression;
      }
      if (other.NoRecordsToReturn != 0) {
        NoRecordsToReturn = other.NoRecordsToReturn;
      }
      if (other.IntToFloatPriceDivisor != 0F) {
        IntToFloatPriceDivisor = other.IntToFloatPriceDivisor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 16: {
            recordInterval_ = (global::DTCPB.HistoricalDataIntervalEnum) input.ReadEnum();
            break;
          }
          case 24: {
            UseZLibCompression = input.ReadUInt32();
            break;
          }
          case 32: {
            NoRecordsToReturn = input.ReadUInt32();
            break;
          }
          case 45: {
            IntToFloatPriceDivisor = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataReject : pb::IMessage<HistoricalPriceDataReject> {
    private static readonly pb::MessageParser<HistoricalPriceDataReject> _parser = new pb::MessageParser<HistoricalPriceDataReject>(() => new HistoricalPriceDataReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataReject(HistoricalPriceDataReject other) : this() {
      requestID_ = other.requestID_;
      rejectText_ = other.rejectText_;
      rejectReasonCode_ = other.rejectReasonCode_;
      retryTimeInSeconds_ = other.retryTimeInSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataReject Clone() {
      return new HistoricalPriceDataReject(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 2;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RejectReasonCode" field.</summary>
    public const int RejectReasonCodeFieldNumber = 3;
    private global::DTCPB.HistoricalPriceDataRejectReasonCodeEnum rejectReasonCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.HistoricalPriceDataRejectReasonCodeEnum RejectReasonCode {
      get { return rejectReasonCode_; }
      set {
        rejectReasonCode_ = value;
      }
    }

    /// <summary>Field number for the "RetryTimeInSeconds" field.</summary>
    public const int RetryTimeInSecondsFieldNumber = 4;
    private uint retryTimeInSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RetryTimeInSeconds {
      get { return retryTimeInSeconds_; }
      set {
        retryTimeInSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (RejectText != other.RejectText) return false;
      if (RejectReasonCode != other.RejectReasonCode) return false;
      if (RetryTimeInSeconds != other.RetryTimeInSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (RejectReasonCode != 0) hash ^= RejectReasonCode.GetHashCode();
      if (RetryTimeInSeconds != 0) hash ^= RetryTimeInSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RejectText);
      }
      if (RejectReasonCode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RejectReasonCode);
      }
      if (RetryTimeInSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RetryTimeInSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (RejectText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (RejectReasonCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RejectReasonCode);
      }
      if (RetryTimeInSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RetryTimeInSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataReject other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      if (other.RejectReasonCode != 0) {
        RejectReasonCode = other.RejectReasonCode;
      }
      if (other.RetryTimeInSeconds != 0) {
        RetryTimeInSeconds = other.RetryTimeInSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 18: {
            RejectText = input.ReadString();
            break;
          }
          case 24: {
            rejectReasonCode_ = (global::DTCPB.HistoricalPriceDataRejectReasonCodeEnum) input.ReadEnum();
            break;
          }
          case 32: {
            RetryTimeInSeconds = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataRecordResponse : pb::IMessage<HistoricalPriceDataRecordResponse> {
    private static readonly pb::MessageParser<HistoricalPriceDataRecordResponse> _parser = new pb::MessageParser<HistoricalPriceDataRecordResponse>(() => new HistoricalPriceDataRecordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRecordResponse(HistoricalPriceDataRecordResponse other) : this() {
      requestID_ = other.requestID_;
      startDateTime_ = other.startDateTime_;
      openPrice_ = other.openPrice_;
      highPrice_ = other.highPrice_;
      lowPrice_ = other.lowPrice_;
      lastPrice_ = other.lastPrice_;
      volume_ = other.volume_;
      numTrades_ = other.numTrades_;
      bidVolume_ = other.bidVolume_;
      askVolume_ = other.askVolume_;
      isFinalRecord_ = other.isFinalRecord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRecordResponse Clone() {
      return new HistoricalPriceDataRecordResponse(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "StartDateTime" field.</summary>
    public const int StartDateTimeFieldNumber = 2;
    private long startDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDateTime {
      get { return startDateTime_; }
      set {
        startDateTime_ = value;
      }
    }

    /// <summary>Field number for the "OpenPrice" field.</summary>
    public const int OpenPriceFieldNumber = 3;
    private double openPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "HighPrice" field.</summary>
    public const int HighPriceFieldNumber = 4;
    private double highPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "LowPrice" field.</summary>
    public const int LowPriceFieldNumber = 5;
    private double lowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "LastPrice" field.</summary>
    public const int LastPriceFieldNumber = 6;
    private double lastPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LastPrice {
      get { return lastPrice_; }
      set {
        lastPrice_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 7;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "NumTrades" field.</summary>
    public const int NumTradesFieldNumber = 8;
    private uint numTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTrades {
      get { return numTrades_; }
      set {
        numTrades_ = value;
      }
    }

    /// <summary>Field number for the "BidVolume" field.</summary>
    public const int BidVolumeFieldNumber = 9;
    private double bidVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BidVolume {
      get { return bidVolume_; }
      set {
        bidVolume_ = value;
      }
    }

    /// <summary>Field number for the "AskVolume" field.</summary>
    public const int AskVolumeFieldNumber = 10;
    private double askVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AskVolume {
      get { return askVolume_; }
      set {
        askVolume_ = value;
      }
    }

    /// <summary>Field number for the "IsFinalRecord" field.</summary>
    public const int IsFinalRecordFieldNumber = 11;
    private uint isFinalRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFinalRecord {
      get { return isFinalRecord_; }
      set {
        isFinalRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (StartDateTime != other.StartDateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpenPrice, other.OpenPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HighPrice, other.HighPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowPrice, other.LowPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastPrice, other.LastPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (NumTrades != other.NumTrades) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidVolume, other.BidVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskVolume, other.AskVolume)) return false;
      if (IsFinalRecord != other.IsFinalRecord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (StartDateTime != 0L) hash ^= StartDateTime.GetHashCode();
      if (OpenPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpenPrice);
      if (HighPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HighPrice);
      if (LowPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowPrice);
      if (LastPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastPrice);
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (NumTrades != 0) hash ^= NumTrades.GetHashCode();
      if (BidVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidVolume);
      if (AskVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskVolume);
      if (IsFinalRecord != 0) hash ^= IsFinalRecord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (StartDateTime != 0L) {
        output.WriteRawTag(17);
        output.WriteSFixed64(StartDateTime);
      }
      if (OpenPrice != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(OpenPrice);
      }
      if (HighPrice != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(HighPrice);
      }
      if (LowPrice != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LowPrice);
      }
      if (LastPrice != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LastPrice);
      }
      if (Volume != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Volume);
      }
      if (NumTrades != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NumTrades);
      }
      if (BidVolume != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(BidVolume);
      }
      if (AskVolume != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(AskVolume);
      }
      if (IsFinalRecord != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(IsFinalRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (StartDateTime != 0L) {
        size += 1 + 8;
      }
      if (OpenPrice != 0D) {
        size += 1 + 8;
      }
      if (HighPrice != 0D) {
        size += 1 + 8;
      }
      if (LowPrice != 0D) {
        size += 1 + 8;
      }
      if (LastPrice != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (NumTrades != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTrades);
      }
      if (BidVolume != 0D) {
        size += 1 + 8;
      }
      if (AskVolume != 0D) {
        size += 1 + 8;
      }
      if (IsFinalRecord != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFinalRecord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataRecordResponse other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.StartDateTime != 0L) {
        StartDateTime = other.StartDateTime;
      }
      if (other.OpenPrice != 0D) {
        OpenPrice = other.OpenPrice;
      }
      if (other.HighPrice != 0D) {
        HighPrice = other.HighPrice;
      }
      if (other.LowPrice != 0D) {
        LowPrice = other.LowPrice;
      }
      if (other.LastPrice != 0D) {
        LastPrice = other.LastPrice;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      if (other.NumTrades != 0) {
        NumTrades = other.NumTrades;
      }
      if (other.BidVolume != 0D) {
        BidVolume = other.BidVolume;
      }
      if (other.AskVolume != 0D) {
        AskVolume = other.AskVolume;
      }
      if (other.IsFinalRecord != 0) {
        IsFinalRecord = other.IsFinalRecord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 17: {
            StartDateTime = input.ReadSFixed64();
            break;
          }
          case 25: {
            OpenPrice = input.ReadDouble();
            break;
          }
          case 33: {
            HighPrice = input.ReadDouble();
            break;
          }
          case 41: {
            LowPrice = input.ReadDouble();
            break;
          }
          case 49: {
            LastPrice = input.ReadDouble();
            break;
          }
          case 57: {
            Volume = input.ReadDouble();
            break;
          }
          case 64: {
            NumTrades = input.ReadUInt32();
            break;
          }
          case 73: {
            BidVolume = input.ReadDouble();
            break;
          }
          case 81: {
            AskVolume = input.ReadDouble();
            break;
          }
          case 88: {
            IsFinalRecord = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataTickRecordResponse : pb::IMessage<HistoricalPriceDataTickRecordResponse> {
    private static readonly pb::MessageParser<HistoricalPriceDataTickRecordResponse> _parser = new pb::MessageParser<HistoricalPriceDataTickRecordResponse>(() => new HistoricalPriceDataTickRecordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataTickRecordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataTickRecordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataTickRecordResponse(HistoricalPriceDataTickRecordResponse other) : this() {
      requestID_ = other.requestID_;
      dateTime_ = other.dateTime_;
      atBidOrAsk_ = other.atBidOrAsk_;
      price_ = other.price_;
      volume_ = other.volume_;
      isFinalRecord_ = other.isFinalRecord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataTickRecordResponse Clone() {
      return new HistoricalPriceDataTickRecordResponse(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 2;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "AtBidOrAsk" field.</summary>
    public const int AtBidOrAskFieldNumber = 3;
    private global::DTCPB.AtBidOrAskEnum atBidOrAsk_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum AtBidOrAsk {
      get { return atBidOrAsk_; }
      set {
        atBidOrAsk_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 4;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 5;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "IsFinalRecord" field.</summary>
    public const int IsFinalRecordFieldNumber = 6;
    private uint isFinalRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFinalRecord {
      get { return isFinalRecord_; }
      set {
        isFinalRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataTickRecordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataTickRecordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      if (AtBidOrAsk != other.AtBidOrAsk) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (IsFinalRecord != other.IsFinalRecord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (AtBidOrAsk != 0) hash ^= AtBidOrAsk.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (IsFinalRecord != 0) hash ^= IsFinalRecord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DateTime);
      }
      if (AtBidOrAsk != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AtBidOrAsk);
      }
      if (Price != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Price);
      }
      if (Volume != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Volume);
      }
      if (IsFinalRecord != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IsFinalRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (AtBidOrAsk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AtBidOrAsk);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (IsFinalRecord != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFinalRecord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataTickRecordResponse other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      if (other.AtBidOrAsk != 0) {
        AtBidOrAsk = other.AtBidOrAsk;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      if (other.IsFinalRecord != 0) {
        IsFinalRecord = other.IsFinalRecord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 17: {
            DateTime = input.ReadDouble();
            break;
          }
          case 24: {
            atBidOrAsk_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 33: {
            Price = input.ReadDouble();
            break;
          }
          case 41: {
            Volume = input.ReadDouble();
            break;
          }
          case 48: {
            IsFinalRecord = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataRecordResponse_Int : pb::IMessage<HistoricalPriceDataRecordResponse_Int> {
    private static readonly pb::MessageParser<HistoricalPriceDataRecordResponse_Int> _parser = new pb::MessageParser<HistoricalPriceDataRecordResponse_Int>(() => new HistoricalPriceDataRecordResponse_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataRecordResponse_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRecordResponse_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRecordResponse_Int(HistoricalPriceDataRecordResponse_Int other) : this() {
      requestID_ = other.requestID_;
      startDateTime_ = other.startDateTime_;
      openPrice_ = other.openPrice_;
      highPrice_ = other.highPrice_;
      lowPrice_ = other.lowPrice_;
      lastPrice_ = other.lastPrice_;
      volume_ = other.volume_;
      numTrades_ = other.numTrades_;
      bidVolume_ = other.bidVolume_;
      askVolume_ = other.askVolume_;
      isFinalRecord_ = other.isFinalRecord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataRecordResponse_Int Clone() {
      return new HistoricalPriceDataRecordResponse_Int(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "StartDateTime" field.</summary>
    public const int StartDateTimeFieldNumber = 2;
    private long startDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDateTime {
      get { return startDateTime_; }
      set {
        startDateTime_ = value;
      }
    }

    /// <summary>Field number for the "OpenPrice" field.</summary>
    public const int OpenPriceFieldNumber = 3;
    private int openPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "HighPrice" field.</summary>
    public const int HighPriceFieldNumber = 4;
    private int highPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = value;
      }
    }

    /// <summary>Field number for the "LowPrice" field.</summary>
    public const int LowPriceFieldNumber = 5;
    private int lowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "LastPrice" field.</summary>
    public const int LastPriceFieldNumber = 6;
    private int lastPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPrice {
      get { return lastPrice_; }
      set {
        lastPrice_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 7;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "NumTrades" field.</summary>
    public const int NumTradesFieldNumber = 8;
    private uint numTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTrades {
      get { return numTrades_; }
      set {
        numTrades_ = value;
      }
    }

    /// <summary>Field number for the "BidVolume" field.</summary>
    public const int BidVolumeFieldNumber = 9;
    private int bidVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BidVolume {
      get { return bidVolume_; }
      set {
        bidVolume_ = value;
      }
    }

    /// <summary>Field number for the "AskVolume" field.</summary>
    public const int AskVolumeFieldNumber = 10;
    private int askVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AskVolume {
      get { return askVolume_; }
      set {
        askVolume_ = value;
      }
    }

    /// <summary>Field number for the "IsFinalRecord" field.</summary>
    public const int IsFinalRecordFieldNumber = 11;
    private uint isFinalRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFinalRecord {
      get { return isFinalRecord_; }
      set {
        isFinalRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataRecordResponse_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataRecordResponse_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (StartDateTime != other.StartDateTime) return false;
      if (OpenPrice != other.OpenPrice) return false;
      if (HighPrice != other.HighPrice) return false;
      if (LowPrice != other.LowPrice) return false;
      if (LastPrice != other.LastPrice) return false;
      if (Volume != other.Volume) return false;
      if (NumTrades != other.NumTrades) return false;
      if (BidVolume != other.BidVolume) return false;
      if (AskVolume != other.AskVolume) return false;
      if (IsFinalRecord != other.IsFinalRecord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (StartDateTime != 0L) hash ^= StartDateTime.GetHashCode();
      if (OpenPrice != 0) hash ^= OpenPrice.GetHashCode();
      if (HighPrice != 0) hash ^= HighPrice.GetHashCode();
      if (LowPrice != 0) hash ^= LowPrice.GetHashCode();
      if (LastPrice != 0) hash ^= LastPrice.GetHashCode();
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (NumTrades != 0) hash ^= NumTrades.GetHashCode();
      if (BidVolume != 0) hash ^= BidVolume.GetHashCode();
      if (AskVolume != 0) hash ^= AskVolume.GetHashCode();
      if (IsFinalRecord != 0) hash ^= IsFinalRecord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (StartDateTime != 0L) {
        output.WriteRawTag(17);
        output.WriteSFixed64(StartDateTime);
      }
      if (OpenPrice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OpenPrice);
      }
      if (HighPrice != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HighPrice);
      }
      if (LowPrice != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LowPrice);
      }
      if (LastPrice != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LastPrice);
      }
      if (Volume != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Volume);
      }
      if (NumTrades != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NumTrades);
      }
      if (BidVolume != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BidVolume);
      }
      if (AskVolume != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AskVolume);
      }
      if (IsFinalRecord != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(IsFinalRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (StartDateTime != 0L) {
        size += 1 + 8;
      }
      if (OpenPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenPrice);
      }
      if (HighPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighPrice);
      }
      if (LowPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LowPrice);
      }
      if (LastPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastPrice);
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (NumTrades != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTrades);
      }
      if (BidVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BidVolume);
      }
      if (AskVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AskVolume);
      }
      if (IsFinalRecord != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFinalRecord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataRecordResponse_Int other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.StartDateTime != 0L) {
        StartDateTime = other.StartDateTime;
      }
      if (other.OpenPrice != 0) {
        OpenPrice = other.OpenPrice;
      }
      if (other.HighPrice != 0) {
        HighPrice = other.HighPrice;
      }
      if (other.LowPrice != 0) {
        LowPrice = other.LowPrice;
      }
      if (other.LastPrice != 0) {
        LastPrice = other.LastPrice;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.NumTrades != 0) {
        NumTrades = other.NumTrades;
      }
      if (other.BidVolume != 0) {
        BidVolume = other.BidVolume;
      }
      if (other.AskVolume != 0) {
        AskVolume = other.AskVolume;
      }
      if (other.IsFinalRecord != 0) {
        IsFinalRecord = other.IsFinalRecord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 17: {
            StartDateTime = input.ReadSFixed64();
            break;
          }
          case 24: {
            OpenPrice = input.ReadInt32();
            break;
          }
          case 32: {
            HighPrice = input.ReadInt32();
            break;
          }
          case 40: {
            LowPrice = input.ReadInt32();
            break;
          }
          case 48: {
            LastPrice = input.ReadInt32();
            break;
          }
          case 56: {
            Volume = input.ReadInt32();
            break;
          }
          case 64: {
            NumTrades = input.ReadUInt32();
            break;
          }
          case 72: {
            BidVolume = input.ReadInt32();
            break;
          }
          case 80: {
            AskVolume = input.ReadInt32();
            break;
          }
          case 88: {
            IsFinalRecord = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataTickRecordResponse_Int : pb::IMessage<HistoricalPriceDataTickRecordResponse_Int> {
    private static readonly pb::MessageParser<HistoricalPriceDataTickRecordResponse_Int> _parser = new pb::MessageParser<HistoricalPriceDataTickRecordResponse_Int>(() => new HistoricalPriceDataTickRecordResponse_Int());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataTickRecordResponse_Int> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataTickRecordResponse_Int() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataTickRecordResponse_Int(HistoricalPriceDataTickRecordResponse_Int other) : this() {
      requestID_ = other.requestID_;
      dateTime_ = other.dateTime_;
      price_ = other.price_;
      volume_ = other.volume_;
      atBidOrAsk_ = other.atBidOrAsk_;
      isFinalRecord_ = other.isFinalRecord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataTickRecordResponse_Int Clone() {
      return new HistoricalPriceDataTickRecordResponse_Int(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "DateTime" field.</summary>
    public const int DateTimeFieldNumber = 2;
    private double dateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 4;
    private int volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "AtBidOrAsk" field.</summary>
    public const int AtBidOrAskFieldNumber = 5;
    private global::DTCPB.AtBidOrAskEnum atBidOrAsk_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DTCPB.AtBidOrAskEnum AtBidOrAsk {
      get { return atBidOrAsk_; }
      set {
        atBidOrAsk_ = value;
      }
    }

    /// <summary>Field number for the "IsFinalRecord" field.</summary>
    public const int IsFinalRecordFieldNumber = 6;
    private uint isFinalRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsFinalRecord {
      get { return isFinalRecord_; }
      set {
        isFinalRecord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataTickRecordResponse_Int);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataTickRecordResponse_Int other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DateTime, other.DateTime)) return false;
      if (Price != other.Price) return false;
      if (Volume != other.Volume) return false;
      if (AtBidOrAsk != other.AtBidOrAsk) return false;
      if (IsFinalRecord != other.IsFinalRecord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (DateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DateTime);
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (AtBidOrAsk != 0) hash ^= AtBidOrAsk.GetHashCode();
      if (IsFinalRecord != 0) hash ^= IsFinalRecord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (DateTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DateTime);
      }
      if (Price != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Price);
      }
      if (Volume != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Volume);
      }
      if (AtBidOrAsk != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AtBidOrAsk);
      }
      if (IsFinalRecord != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IsFinalRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (DateTime != 0D) {
        size += 1 + 8;
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (AtBidOrAsk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AtBidOrAsk);
      }
      if (IsFinalRecord != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsFinalRecord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataTickRecordResponse_Int other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.DateTime != 0D) {
        DateTime = other.DateTime;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.AtBidOrAsk != 0) {
        AtBidOrAsk = other.AtBidOrAsk;
      }
      if (other.IsFinalRecord != 0) {
        IsFinalRecord = other.IsFinalRecord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 17: {
            DateTime = input.ReadDouble();
            break;
          }
          case 24: {
            Price = input.ReadInt32();
            break;
          }
          case 32: {
            Volume = input.ReadInt32();
            break;
          }
          case 40: {
            atBidOrAsk_ = (global::DTCPB.AtBidOrAskEnum) input.ReadEnum();
            break;
          }
          case 48: {
            IsFinalRecord = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///============================================================================
  /// </summary>
  public sealed partial class HistoricalPriceDataResponseTrailer : pb::IMessage<HistoricalPriceDataResponseTrailer> {
    private static readonly pb::MessageParser<HistoricalPriceDataResponseTrailer> _parser = new pb::MessageParser<HistoricalPriceDataResponseTrailer>(() => new HistoricalPriceDataResponseTrailer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HistoricalPriceDataResponseTrailer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DTCPB.DTCProtocolGPBV3Reflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataResponseTrailer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataResponseTrailer(HistoricalPriceDataResponseTrailer other) : this() {
      requestID_ = other.requestID_;
      finalRecordLastDateTime_ = other.finalRecordLastDateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HistoricalPriceDataResponseTrailer Clone() {
      return new HistoricalPriceDataResponseTrailer(this);
    }

    /// <summary>Field number for the "RequestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private int requestID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequestID {
      get { return requestID_; }
      set {
        requestID_ = value;
      }
    }

    /// <summary>Field number for the "FinalRecordLastDateTime" field.</summary>
    public const int FinalRecordLastDateTimeFieldNumber = 2;
    private double finalRecordLastDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FinalRecordLastDateTime {
      get { return finalRecordLastDateTime_; }
      set {
        finalRecordLastDateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HistoricalPriceDataResponseTrailer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HistoricalPriceDataResponseTrailer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FinalRecordLastDateTime, other.FinalRecordLastDateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID != 0) hash ^= RequestID.GetHashCode();
      if (FinalRecordLastDateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FinalRecordLastDateTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RequestID);
      }
      if (FinalRecordLastDateTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FinalRecordLastDateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestID);
      }
      if (FinalRecordLastDateTime != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HistoricalPriceDataResponseTrailer other) {
      if (other == null) {
        return;
      }
      if (other.RequestID != 0) {
        RequestID = other.RequestID;
      }
      if (other.FinalRecordLastDateTime != 0D) {
        FinalRecordLastDateTime = other.FinalRecordLastDateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestID = input.ReadInt32();
            break;
          }
          case 17: {
            FinalRecordLastDateTime = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
